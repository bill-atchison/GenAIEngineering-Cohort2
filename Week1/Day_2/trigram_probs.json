{
  "clarion language programming": {
    "guide": 1.0
  },
  "language programming guide": {
    "2": 0.02702702702702703,
    "4": 0.02702702702702703,
    "6": 0.02702702702702703,
    "8": 0.02702702702702703,
    "10": 0.02702702702702703,
    "12": 0.02702702702702703,
    "14": 0.02702702702702703,
    "16": 0.02702702702702703,
    "18": 0.02702702702702703,
    "20": 0.02702702702702703,
    "22": 0.02702702702702703,
    "24": 0.02702702702702703,
    "26": 0.02702702702702703,
    "28": 0.02702702702702703,
    "30": 0.02702702702702703,
    "32": 0.02702702702702703,
    "34": 0.02702702702702703,
    "36": 0.02702702702702703,
    "38": 0.02702702702702703,
    "40": 0.02702702702702703,
    "42": 0.02702702702702703,
    "44": 0.02702702702702703,
    "46": 0.02702702702702703,
    "48": 0.02702702702702703,
    "50": 0.02702702702702703,
    "52": 0.02702702702702703,
    "54": 0.02702702702702703,
    "56": 0.02702702702702703,
    "58": 0.02702702702702703,
    "60": 0.02702702702702703,
    "62": 0.02702702702702703,
    "64": 0.02702702702702703,
    "66": 0.02702702702702703,
    "68": 0.02702702702702703,
    "70": 0.02702702702702703,
    "72": 0.02702702702702703,
    "74": 0.02702702702702703
  },
  "programming guide 2": {
    "copyright": 1.0
  },
  "guide 2 copyright": {
    "softvelocity": 1.0
  },
  "2 copyright softvelocity": {
    "inc": 1.0
  },
  "copyright softvelocity inc": {
    "all": 1.0
  },
  "softvelocity inc all": {
    "rights": 1.0
  },
  "inc all rights": {
    "reserved": 1.0
  },
  "all rights reserved": {
    "this": 1.0
  },
  "rights reserved this": {
    "publication": 1.0
  },
  "reserved this publication": {
    "is": 1.0
  },
  "this publication is": {
    "protected": 1.0
  },
  "publication is protected": {
    "by": 1.0
  },
  "is protected by": {
    "copyright": 1.0
  },
  "protected by copyright": {
    "and": 1.0
  },
  "by copyright and": {
    "all": 1.0
  },
  "copyright and all": {
    "rights": 1.0
  },
  "and all rights": {
    "are": 1.0
  },
  "all rights are": {
    "reserved": 1.0
  },
  "rights are reserved": {
    "by": 1.0
  },
  "are reserved by": {
    "softvelocity": 1.0
  },
  "reserved by softvelocity": {
    "incorporated": 1.0
  },
  "by softvelocity incorporated": {
    "it": 1.0
  },
  "softvelocity incorporated it": {
    "may": 1.0
  },
  "incorporated it may": {
    "not": 1.0
  },
  "it may not": {
    "in": 0.5,
    "be": 0.5
  },
  "may not in": {
    "whole": 1.0
  },
  "not in whole": {
    "or": 1.0
  },
  "in whole or": {
    "part": 1.0
  },
  "whole or part": {
    "be": 1.0
  },
  "or part be": {
    "copied": 1.0
  },
  "part be copied": {
    "photocopied": 1.0
  },
  "be copied photocopied": {
    "reproduced": 1.0
  },
  "copied photocopied reproduced": {
    "translated": 1.0
  },
  "photocopied reproduced translated": {
    "or": 1.0
  },
  "reproduced translated or": {
    "reduced": 1.0
  },
  "translated or reduced": {
    "to": 1.0
  },
  "or reduced to": {
    "any": 1.0
  },
  "reduced to any": {
    "electronic": 1.0
  },
  "to any electronic": {
    "medium": 1.0
  },
  "any electronic medium": {
    "or": 1.0
  },
  "electronic medium or": {
    "machine": 1.0
  },
  "medium or machine": {
    "readable": 1.0
  },
  "or machine readable": {
    "form": 1.0
  },
  "machine readable form": {
    "without": 1.0
  },
  "readable form without": {
    "prior": 1.0
  },
  "form without prior": {
    "consent": 1.0
  },
  "without prior consent": {
    "in": 1.0
  },
  "prior consent in": {
    "writing": 1.0
  },
  "consent in writing": {
    "from": 1.0
  },
  "in writing from": {
    "softvelocity": 1.0
  },
  "writing from softvelocity": {
    "incorporated": 1.0
  },
  "from softvelocity incorporated": {
    "this": 1.0
  },
  "softvelocity incorporated this": {
    "publication": 1.0
  },
  "incorporated this publication": {
    "supports": 1.0
  },
  "this publication supports": {
    "clarion": 1.0
  },
  "publication supports clarion": {
    "it": 1.0
  },
  "supports clarion it": {
    "is": 1.0
  },
  "clarion it is": {
    "possible": 1.0
  },
  "it is possible": {
    "that": 0.5,
    "for": 0.5
  },
  "is possible that": {
    "it": 1.0
  },
  "possible that it": {
    "may": 1.0
  },
  "that it may": {
    "contain": 1.0
  },
  "it may contain": {
    "technical": 1.0
  },
  "may contain technical": {
    "or": 1.0
  },
  "contain technical or": {
    "typographical": 1.0
  },
  "technical or typographical": {
    "errors": 1.0
  },
  "or typographical errors": {
    "softvelocity": 1.0
  },
  "typographical errors softvelocity": {
    "incorporated": 1.0
  },
  "errors softvelocity incorporated": {
    "provides": 1.0
  },
  "softvelocity incorporated provides": {
    "thi": 1.0
  },
  "incorporated provides thi": {
    "s": 1.0
  },
  "provides thi s": {
    "publication": 1.0
  },
  "thi s publication": {
    "as": 1.0
  },
  "s publication as": {
    "is": 1.0
  },
  "publication as is": {
    "without": 1.0
  },
  "as is without": {
    "warranty": 1.0
  },
  "is without warranty": {
    "of": 1.0
  },
  "without warranty of": {
    "any": 1.0
  },
  "warranty of any": {
    "kind": 1.0
  },
  "of any kind": {
    "either": 1.0
  },
  "any kind either": {
    "expressed": 1.0
  },
  "kind either expressed": {
    "or": 1.0
  },
  "either expressed or": {
    "implied": 1.0
  },
  "expressed or implied": {
    "www": 1.0
  },
  "or implied www": {
    "softvelocity": 1.0
  },
  "implied www softvelocity": {
    "com": 1.0
  },
  "www softvelocity com": {
    "trademark": 1.0
  },
  "softvelocity com trademark": {
    "acknowledgements": 1.0
  },
  "com trademark acknowledgements": {
    "softvelocity": 1.0
  },
  "trademark acknowledgements softvelocity": {
    "is": 1.0
  },
  "acknowledgements softvelocity is": {
    "a": 1.0
  },
  "softvelocity is a": {
    "trademark": 1.0
  },
  "is a trademark": {
    "of": 1.0
  },
  "a trademark of": {
    "softvelocity": 1.0
  },
  "trademark of softvelocity": {
    "incorporated": 1.0
  },
  "of softvelocity incorporated": {
    "clarion": 0.5,
    "all": 0.5
  },
  "softvelocity incorporated clarion": {
    "is": 1.0
  },
  "incorporated clarion is": {
    "a": 1.0
  },
  "clarion is a": {
    "trademark": 1.0
  },
  "softvelocity incorporated all": {
    "other": 1.0
  },
  "incorporated all other": {
    "products": 1.0
  },
  "all other products": {
    "and": 1.0
  },
  "other products and": {
    "company": 1.0
  },
  "products and company": {
    "names": 1.0
  },
  "and company names": {
    "are": 1.0
  },
  "company names are": {
    "trademarks": 1.0
  },
  "names are trademarks": {
    "of": 1.0
  },
  "are trademarks of": {
    "t": 1.0
  },
  "trademarks of t": {
    "heir": 1.0
  },
  "of t heir": {
    "respective": 1.0
  },
  "t heir respective": {
    "owners": 1.0
  },
  "heir respective owners": {
    "contents": 1.0
  },
  "respective owners contents": {
    "1": 1.0
  },
  "owners contents 1": {
    "program": 1.0
  },
  "contents 1 program": {
    "structure": 1.0
  },
  "1 program structure": {
    "5": 0.5,
    "structured": 0.5
  },
  "program structure 5": {
    "structured": 1.0
  },
  "structure 5 structured": {
    "programming": 1.0
  },
  "5 structured programming": {
    "5": 1.0
  },
  "structured programming 5": {
    "proced": 1.0
  },
  "programming 5 proced": {
    "ures": 1.0
  },
  "5 proced ures": {
    "5": 1.0
  },
  "proced ures 5": {
    "local": 1.0
  },
  "ures 5 local": {
    "stack": 1.0
  },
  "5 local stack": {
    "based": 1.0
  },
  "local stack based": {
    "data": 0.6666666666666666,
    "variables": 0.3333333333333333
  },
  "stack based data": {
    "declarations": 1.0
  },
  "based data declarations": {
    "5": 0.5,
    "every": 0.5
  },
  "data declarations 5": {
    "contents": 1.0
  },
  "declarations 5 contents": {
    "3": 1.0
  },
  "5 contents 3": {
    "program": 1.0
  },
  "contents 3 program": {
    "map": 1.0
  },
  "3 program map": {
    "5": 1.0
  },
  "program map 5": {
    "module": 1.0
  },
  "map 5 module": {
    "6": 1.0
  },
  "5 module 6": {
    "member": 1.0
  },
  "module 6 member": {
    "6": 1.0
  },
  "6 member 6": {
    "member": 1.0
  },
  "member 6 member": {
    "maps": 1.0
  },
  "6 member maps": {
    "7": 1.0
  },
  "member maps 7": {
    "modules": 1.0
  },
  "maps 7 modules": {
    "within": 1.0
  },
  "7 modules within": {
    "member": 1.0
  },
  "modules within member": {
    "maps": 1.0
  },
  "within member maps": {
    "8": 0.5,
    "just": 0.5
  },
  "member maps 8": {
    "procedure": 1.0
  },
  "maps 8 procedure": {
    "maps": 1.0
  },
  "8 procedure maps": {
    "9": 1.0
  },
  "procedure maps 9": {
    "summary": 1.0
  },
  "maps 9 summary": {
    "10": 1.0
  },
  "9 summary 10": {
    "2": 1.0
  },
  "summary 10 2": {
    "clarion": 1.0
  },
  "10 2 clarion": {
    "objects": 1.0
  },
  "2 clarion objects": {
    "overview": 1.0
  },
  "clarion objects overview": {
    "11": 1.0
  },
  "objects overview 11": {
    "opening": 1.0
  },
  "overview 11 opening": {
    "shots": 1.0
  },
  "11 opening shots": {
    "11": 1.0
  },
  "opening shots 11": {
    "procedural": 1.0
  },
  "shots 11 procedural": {
    "code": 1.0
  },
  "11 procedural code": {
    "re": 1.0
  },
  "procedural code re": {
    "visited": 1.0
  },
  "code re visited": {
    "11": 0.5,
    "we": 0.5
  },
  "re visited 11": {
    "class": 1.0
  },
  "visited 11 class": {
    "declaration": 1.0
  },
  "11 class declaration": {
    "12": 1.0
  },
  "class declaration 12": {
    "encapsulat": 1.0
  },
  "declaration 12 encapsulat": {
    "ion": 1.0
  },
  "12 encapsulat ion": {
    "12": 1.0
  },
  "encapsulat ion 12": {
    "instantiation": 1.0
  },
  "ion 12 instantiation": {
    "13": 1.0
  },
  "12 instantiation 13": {
    "field": 1.0
  },
  "instantiation 13 field": {
    "qualification": 1.0
  },
  "13 field qualification": {
    "syntax": 1.0
  },
  "field qualification syntax": {
    "14": 0.5,
    "clarion": 0.25,
    "the": 0.25
  },
  "qualification syntax 14": {
    "constructors": 0.5,
    "file": 0.5
  },
  "syntax 14 constructors": {
    "and": 1.0
  },
  "14 constructors and": {
    "destructors": 1.0
  },
  "constructors and destructors": {
    "14": 0.043478260869565216,
    "19": 0.043478260869565216,
    "29": 0.043478260869565216,
    "there": 0.043478260869565216,
    "when": 0.043478260869565216,
    "in": 0.08695652173913043,
    "an": 0.043478260869565216,
    "and": 0.08695652173913043,
    "the": 0.043478260869565216,
    "well": 0.043478260869565216,
    "what": 0.043478260869565216,
    "work": 0.043478260869565216,
    "are": 0.08695652173913043,
    "have": 0.043478260869565216,
    "is": 0.043478260869565216,
    "but": 0.043478260869565216,
    "virtual": 0.043478260869565216,
    "constructors": 0.043478260869565216,
    "doesn": 0.043478260869565216,
    "anyway": 0.043478260869565216
  },
  "and destructors 14": {
    "more": 1.0
  },
  "destructors 14 more": {
    "about": 1.0
  },
  "14 more about": {
    "encapsulation": 1.0
  },
  "more about encapsulation": {
    "15": 0.3333333333333333,
    "to": 0.3333333333333333,
    "in": 0.3333333333333333
  },
  "about encapsulation 15": {
    "inheritance": 1.0
  },
  "encapsulation 15 inheritance": {
    "16": 1.0
  },
  "15 inheritance 16": {
    "as": 1.0
  },
  "inheritance 16 as": {
    "easy": 1.0
  },
  "16 as easy": {
    "as": 1.0
  },
  "as easy as": {
    "apple": 1.0
  },
  "easy as apple": {
    "pie": 1.0
  },
  "as apple pie": {
    "16": 0.5,
    "one": 0.5
  },
  "apple pie 16": {
    "multiple": 1.0
  },
  "pie 16 multiple": {
    "inheritance": 1.0
  },
  "16 multiple inheritance": {
    "17": 1.0
  },
  "multiple inheritance 17": {
    "composition": 0.5,
    "multi": 0.5
  },
  "inheritance 17 composition": {
    "17": 1.0
  },
  "17 composition 17": {
    "more": 1.0
  },
  "composition 17 more": {
    "ab": 1.0
  },
  "17 more ab": {
    "out": 1.0
  },
  "more ab out": {
    "encapsulation": 1.0
  },
  "ab out encapsulation": {
    "18": 1.0
  },
  "out encapsulation 18": {
    "and": 1.0
  },
  "encapsulation 18 and": {
    "more": 1.0
  },
  "18 and more": {
    "on": 1.0
  },
  "and more on": {
    "constructors": 1.0
  },
  "more on constructors": {
    "and": 1.0
  },
  "on constructors and": {
    "destructors": 1.0
  },
  "and destructors 19": {
    "parent": 1.0
  },
  "destructors 19 parent": {
    "19": 1.0
  },
  "19 parent 19": {
    "polymorphism": 1.0
  },
  "parent 19 polymorphism": {
    "20": 1.0
  },
  "19 polymorphism 20": {
    "virtual": 0.5,
    "26": 0.5
  },
  "polymorphism 20 virtual": {
    "methods": 1.0
  },
  "20 virtual methods": {
    "20": 1.0
  },
  "virtual methods 20": {
    "more": 0.5,
    "36": 0.5
  },
  "methods 20 more": {
    "apple": 1.0
  },
  "20 more apple": {
    "p": 1.0
  },
  "more apple p": {
    "ie": 1.0
  },
  "apple p ie": {
    "21": 1.0
  },
  "p ie 21": {
    "late": 1.0
  },
  "ie 21 late": {
    "binding": 1.0
  },
  "21 late binding": {
    "22": 1.0
  },
  "late binding 22": {
    "local": 1.0
  },
  "binding 22 local": {
    "derived": 1.0
  },
  "22 local derived": {
    "methods": 1.0
  },
  "local derived methods": {
    "23": 0.2727272727272727,
    "37": 0.09090909090909091,
    "local": 0.09090909090909091,
    "are": 0.09090909090909091,
    "inherit": 0.09090909090909091,
    "that": 0.09090909090909091,
    "is": 0.09090909090909091,
    "and": 0.09090909090909091,
    "methods": 0.09090909090909091
  },
  "derived methods 23": {
    "summary": 0.3333333333333333,
    "easing": 0.3333333333333333,
    "37": 0.3333333333333333
  },
  "methods 23 summary": {
    "23": 1.0
  },
  "23 summary 23": {
    "3": 1.0
  },
  "summary 23 3": {
    "object": 1.0
  },
  "23 3 object": {
    "oriented": 1.0
  },
  "3 object oriented": {
    "programming": 1.0
  },
  "object oriented programming": {
    "oop": 0.1875,
    "in": 0.125,
    "so": 0.125,
    "3": 0.0625,
    "is": 0.0625,
    "class": 0.0625,
    "using": 0.0625,
    "derived": 0.0625,
    "this": 0.0625,
    "multiple": 0.0625,
    "local": 0.0625,
    "11": 0.0625
  },
  "oriented programming oop": {
    "25": 0.3333333333333333,
    "object": 0.3333333333333333,
    "techniques": 0.3333333333333333
  },
  "programming oop 25": {
    "object": 1.0
  },
  "oop 25 object": {
    "overview": 1.0
  },
  "25 object overview": {
    "what": 1.0
  },
  "object overview what": {
    "are": 1.0
  },
  "overview what are": {
    "objects": 1.0
  },
  "what are objects": {
    "25": 1.0
  },
  "are objects 25": {
    "why": 1.0
  },
  "objects 25 why": {
    "objects": 1.0
  },
  "25 why objects": {
    "25": 1.0
  },
  "why objects 25": {
    "what": 1.0
  },
  "objects 25 what": {
    "makes": 1.0
  },
  "25 what makes": {
    "an": 1.0
  },
  "what makes an": {
    "object": 1.0
  },
  "makes an object": {
    "25": 0.5,
    "there": 0.5
  },
  "an object 25": {
    "clarion": 1.0
  },
  "object 25 clarion": {
    "s": 1.0
  },
  "25 clarion s": {
    "oop": 1.0
  },
  "clarion s oop": {
    "extensions": 0.6666666666666666,
    "syntax": 0.3333333333333333
  },
  "s oop extensions": {
    "26": 0.5,
    "the": 0.5
  },
  "oop extensions 26": {
    "the": 1.0
  },
  "extensions 26 the": {
    "class": 1.0
  },
  "26 the class": {
    "structure": 1.0
  },
  "the class structure": {
    "encapsulation": 0.14285714285714285,
    "itself": 0.07142857142857142,
    "is": 0.21428571428571427,
    "contains": 0.07142857142857142,
    "encapsulates": 0.07142857142857142,
    "the": 0.07142857142857142,
    "this": 0.21428571428571427,
    "and": 0.07142857142857142,
    "creates": 0.07142857142857142
  },
  "class structure encapsulation": {
    "26": 0.5,
    "the": 0.5
  },
  "structure encapsulation 26": {
    "class": 1.0
  },
  "encapsulation 26 class": {
    "properties": 1.0
  },
  "26 class properties": {
    "27": 1.0
  },
  "class properties 27": {
    "class": 0.5,
    "client": 0.5
  },
  "properties 27 class": {
    "methods": 1.0
  },
  "27 class methods": {
    "27": 1.0
  },
  "class methods 27": {
    "creating": 0.5,
    "class": 0.5
  },
  "methods 27 creating": {
    "objects": 1.0
  },
  "27 creating objects": {
    "27": 1.0
  },
  "creating objects 27": {
    "using": 0.5,
    "data": 0.5
  },
  "objects 27 using": {
    "refere": 1.0
  },
  "27 using refere": {
    "nces": 1.0
  },
  "using refere nces": {
    "as": 1.0
  },
  "refere nces as": {
    "properties": 1.0
  },
  "nces as properties": {
    "28": 1.0
  },
  "as properties 28": {
    "constructors": 1.0
  },
  "properties 28 constructors": {
    "and": 1.0
  },
  "28 constructors and": {
    "destructors": 1.0
  },
  "and destructors 29": {
    "public": 1.0
  },
  "destructors 29 public": {
    "vs": 1.0
  },
  "29 public vs": {
    "private": 1.0
  },
  "public vs private": {
    "vs": 1.0
  },
  "vs private vs": {
    "protected": 1.0
  },
  "private vs protected": {
    "29": 0.5,
    "all": 0.5
  },
  "vs protected 29": {
    "derived": 1.0
  },
  "protected 29 derived": {
    "classes": 1.0
  },
  "29 derived classes": {
    "inheritance": 1.0
  },
  "derived classes inheritance": {
    "31": 0.5,
    "clarion": 0.5
  },
  "classes inheritance 31": {
    "overriding": 1.0
  },
  "inheritance 31 overriding": {
    "inherited": 1.0
  },
  "31 overriding inherited": {
    "methods": 1.0
  },
  "overriding inherited methods": {
    "32": 0.3333333333333333,
    "there": 0.3333333333333333,
    "37": 0.3333333333333333
  },
  "inherited methods 32": {
    "multiple": 1.0
  },
  "methods 32 multiple": {
    "inheritance": 1.0
  },
  "32 multiple inheritance": {
    "vs": 1.0
  },
  "multiple inheritance vs": {
    "composition": 1.0
  },
  "inheritance vs composition": {
    "35": 0.5,
    "single": 0.5
  },
  "vs composition 35": {
    "virtual": 1.0
  },
  "composition 35 virtual": {
    "methods": 1.0
  },
  "35 virtual methods": {
    "polymorphism": 1.0
  },
  "virtual methods polymorphism": {
    "36": 0.5,
    "inheritance": 0.5
  },
  "methods polymorphism 36": {
    "local": 1.0
  },
  "polymorphism 36 local": {
    "derived": 1.0
  },
  "36 local derived": {
    "methods": 1.0
  },
  "derived methods 37": {
    "summary": 1.0
  },
  "methods 37 summary": {
    "38": 1.0
  },
  "37 summary 38": {
    "clarion": 1.0
  },
  "summary 38 clarion": {
    "language": 1.0
  },
  "38 clarion language": {
    "programming": 1.0
  },
  "programming guide 4": {
    "4": 1.0
  },
  "guide 4 4": {
    "database": 1.0
  },
  "4 4 database": {
    "design": 1.0
  },
  "4 database design": {
    "39": 0.5,
    "database": 0.5
  },
  "database design 39": {
    "database": 0.2,
    "relational": 0.2,
    "file": 0.2,
    "deadly": 0.2,
    "release": 0.2
  },
  "design 39 database": {
    "design": 1.0
  },
  "39 database design": {
    "39": 0.5,
    "4": 0.5
  },
  "design 39 relational": {
    "database": 1.0
  },
  "39 relational database": {
    "design": 1.0
  },
  "relational database design": {
    "39": 0.25,
    "as": 0.125,
    "one": 0.25,
    "splits": 0.125,
    "a": 0.125,
    "referential": 0.125
  },
  "design 39 file": {
    "relationships": 1.0
  },
  "39 file relationships": {
    "40": 1.0
  },
  "file relationships 40": {
    "translatin": 0.5,
    "fileerror": 0.5
  },
  "relationships 40 translatin": {
    "g": 1.0
  },
  "40 translatin g": {
    "the": 1.0
  },
  "translatin g the": {
    "theory": 1.0
  },
  "g the theory": {
    "to": 1.0
  },
  "the theory to": {
    "clarion": 1.0
  },
  "theory to clarion": {
    "42": 0.5,
    "in": 0.5
  },
  "to clarion 42": {
    "referential": 1.0
  },
  "clarion 42 referential": {
    "integrity": 1.0
  },
  "42 referential integrity": {
    "43": 1.0
  },
  "referential integrity 43": {
    "nullify": 0.5,
    "66": 0.5
  },
  "integrity 43 nullify": {
    "the": 1.0
  },
  "43 nullify the": {
    "foreign": 1.0
  },
  "nullify the foreign": {
    "key": 0.8333333333333334,
    "keys": 0.16666666666666666
  },
  "the foreign key": {
    "46": 0.11764705882352941,
    "records": 0.11764705882352941,
    "recor": 0.058823529411764705,
    "if": 0.058823529411764705,
    "is": 0.058823529411764705,
    "field": 0.058823529411764705,
    "values": 0.11764705882352941,
    "nullify": 0.058823529411764705,
    "means": 0.058823529411764705,
    "fields": 0.058823529411764705,
    "or": 0.058823529411764705,
    "assign": 0.058823529411764705,
    "clarion": 0.058823529411764705,
    "in": 0.058823529411764705
  },
  "foreign key 46": {
    "summary": 0.5,
    "object": 0.5
  },
  "key 46 summary": {
    "47": 1.0
  },
  "46 summary 47": {
    "5": 1.0
  },
  "summary 47 5": {
    "data": 1.0
  },
  "47 5 data": {
    "file": 1.0
  },
  "5 data file": {
    "processing": 1.0
  },
  "data file processing": {
    "49": 0.2857142857142857,
    "5": 0.14285714285714285,
    "data": 0.14285714285714285,
    "custom": 0.14285714285714285,
    "the": 0.14285714285714285,
    "summary": 0.14285714285714285
  },
  "file processing 49": {
    "data": 0.5,
    "file": 0.5
  },
  "processing 49 data": {
    "file": 1.0
  },
  "49 data file": {
    "processing": 1.0
  },
  "processing 49 file": {
    "access": 1.0
  },
  "49 file access": {
    "methods": 1.0
  },
  "file access methods": {
    "49": 0.6666666666666666,
    "generally": 0.3333333333333333
  },
  "access methods 49": {
    "key": 0.5,
    "file": 0.5
  },
  "methods 49 key": {
    "and": 1.0
  },
  "49 key and": {
    "index": 1.0
  },
  "key and index": {
    "49": 0.16666666666666666,
    "the": 0.16666666666666666,
    "declarations": 0.3333333333333333,
    "lies": 0.16666666666666666,
    "are": 0.16666666666666666
  },
  "and index 49": {
    "sequential": 1.0
  },
  "index 49 sequential": {
    "file": 1.0
  },
  "49 sequential file": {
    "access": 1.0
  },
  "sequential file access": {
    "50": 0.5,
    "there": 0.25,
    "set": 0.25
  },
  "file access 50": {
    "random": 0.5,
    "unlock": 0.5
  },
  "access 50 random": {
    "file": 1.0
  },
  "50 random file": {
    "access": 1.0
  },
  "random file access": {
    "52": 0.6666666666666666,
    "there": 0.3333333333333333
  },
  "file access 52": {
    "summary": 0.5,
    "reference": 0.5
  },
  "access 52 summary": {
    "53": 1.0
  },
  "52 summary 53": {
    "6": 1.0
  },
  "summary 53 6": {
    "multi": 1.0
  },
  "53 6 multi": {
    "user": 1.0
  },
  "6 multi user": {
    "considerations": 1.0
  },
  "multi user considerations": {
    "55": 0.6,
    "multi": 0.2,
    "the": 0.2
  },
  "user considerations 55": {
    "multi": 0.3333333333333333,
    "opening": 0.3333333333333333,
    "network": 0.3333333333333333
  },
  "considerations 55 multi": {
    "user": 1.0
  },
  "55 multi user": {
    "considerations": 1.0
  },
  "considerations 55 opening": {
    "files": 1.0
  },
  "55 opening files": {
    "55": 1.0
  },
  "opening files 55": {
    "concurrency": 0.5,
    "order": 0.5
  },
  "files 55 concurrency": {
    "checking": 1.0
  },
  "55 concurrency checking": {
    "56": 1.0
  },
  "concurrency checking 56": {
    "hold": 0.5,
    "constructors": 0.5
  },
  "checking 56 hold": {
    "and": 1.0
  },
  "56 hold and": {
    "release": 1.0
  },
  "hold and release": {
    "60": 0.5,
    "a": 0.5
  },
  "and release 60": {
    "lock": 1.0
  },
  "release 60 lock": {
    "and": 1.0
  },
  "60 lock and": {
    "unlock": 1.0
  },
  "lock and unlock": {
    "62": 0.5,
    "the": 0.5
  },
  "and unlock 62": {
    "deadly": 1.0
  },
  "unlock 62 deadly": {
    "embrace": 1.0
  },
  "62 deadly embrace": {
    "63": 1.0
  },
  "deadly embrace 63": {
    "summary": 0.5,
    "derived": 0.5
  },
  "embrace 63 summary": {
    "64": 1.0
  },
  "63 summary 64": {
    "7": 1.0
  },
  "summary 64 7": {
    "developing": 1.0
  },
  "64 7 developing": {
    "client": 1.0
  },
  "7 developing client": {
    "server": 1.0
  },
  "developing client server": {
    "applications": 1.0
  },
  "client server applications": {
    "65": 0.05555555555555555,
    "6": 0.05555555555555555,
    "assume": 0.05555555555555555,
    "sav": 0.05555555555555555,
    "this": 0.05555555555555555,
    "deadly": 0.05555555555555555,
    "7": 0.05555555555555555,
    "introduction": 0.05555555555555555,
    "created": 0.05555555555555555,
    "typically": 0.05555555555555555,
    "are": 0.05555555555555555,
    "the": 0.1111111111111111,
    "is": 0.05555555555555555,
    "by": 0.05555555555555555,
    "in": 0.05555555555555555,
    "so": 0.05555555555555555,
    "for": 0.05555555555555555
  },
  "server applications 65": {
    "introduction": 1.0
  },
  "applications 65 introduction": {
    "to": 1.0
  },
  "65 introduction to": {
    "client": 1.0
  },
  "introduction to client": {
    "server": 1.0
  },
  "to client server": {
    "65": 0.5,
    "client": 0.5
  },
  "client server 65": {
    "client": 0.5,
    "composition": 0.5
  },
  "server 65 client": {
    "server": 1.0
  },
  "65 client server": {
    "defined": 1.0
  },
  "client server defined": {
    "65": 0.5,
    "what": 0.5
  },
  "server defined 65": {
    "types": 1.0
  },
  "defined 65 types": {
    "of": 1.0
  },
  "65 types of": {
    "client": 1.0
  },
  "types of client": {
    "server": 1.0
  },
  "of client server": {
    "database": 0.375,
    "computing": 0.5,
    "applications": 0.125
  },
  "client server database": {
    "applications": 0.75,
    "applicati": 0.25
  },
  "server database applications": {
    "65": 0.3333333333333333,
    "on": 0.3333333333333333,
    "fall": 0.3333333333333333
  },
  "database applications 65": {
    "sql": 1.0
  },
  "applications 65 sql": {
    "database": 1.0
  },
  "65 sql database": {
    "engines": 1.0
  },
  "sql database engines": {
    "65": 0.5,
    "most": 0.5
  },
  "database engines 65": {
    "clarion": 1.0
  },
  "engines 65 clarion": {
    "and": 1.0
  },
  "65 clarion and": {
    "sql": 1.0
  },
  "clarion and sql": {
    "66": 0.6666666666666666,
    "clarion": 0.3333333333333333
  },
  "and sql 66": {
    "database": 0.5,
    "class": 0.5
  },
  "sql 66 database": {
    "design": 1.0
  },
  "66 database design": {
    "and": 1.0
  },
  "database design and": {
    "network": 1.0
  },
  "design and network": {
    "traffic": 1.0
  },
  "and network traffic": {
    "66": 0.5,
    "the": 0.5
  },
  "network traffic 66": {
    "referential": 0.5,
    "null": 0.5
  },
  "traffic 66 referential": {
    "integrity": 1.0
  },
  "66 referential integrity": {
    "handling": 1.0
  },
  "referential integrity handling": {
    "66": 0.5,
    "maintaining": 0.5
  },
  "integrity handling 66": {
    "data": 1.0
  },
  "handling 66 data": {
    "validation": 1.0
  },
  "66 data validation": {
    "67": 1.0
  },
  "data validation 67": {
    "clarion": 0.5,
    "database": 0.5
  },
  "validation 67 clarion": {
    "language": 1.0
  },
  "67 clarion language": {
    "client": 1.0
  },
  "clarion language client": {
    "server": 1.0
  },
  "language client server": {
    "support": 1.0
  },
  "client server support": {
    "67": 0.5,
    "the": 0.5
  },
  "server support 67": {
    "the": 1.0
  },
  "support 67 the": {
    "view": 1.0
  },
  "67 the view": {
    "structure": 1.0
  },
  "the view structure": {
    "67": 0.25,
    "the": 0.25,
    "is": 0.25,
    "defaults": 0.25
  },
  "view structure 67": {
    "the": 1.0
  },
  "structure 67 the": {
    "buffer": 1.0
  },
  "67 the buffer": {
    "statement": 1.0
  },
  "the buffer statement": {
    "68": 0.3333333333333333,
    "the": 0.6666666666666666
  },
  "buffer statement 68": {
    "embedded": 1.0
  },
  "statement 68 embedded": {
    "sql": 1.0
  },
  "68 embedded sql": {
    "in": 1.0
  },
  "embedded sql in": {
    "clarion": 1.0
  },
  "sql in clarion": {
    "69": 0.5,
    "clarion": 0.5
  },
  "in clarion 69": {
    "null": 1.0
  },
  "clarion 69 null": {
    "data": 1.0
  },
  "69 null data": {
    "handling": 1.0
  },
  "null data handling": {
    "70": 0.5,
    "one": 0.25,
    "through": 0.25
  },
  "data handling 70": {
    "error": 0.5,
    "nullify": 0.5
  },
  "handling 70 error": {
    "handling": 1.0
  },
  "70 error handling": {
    "71": 1.0
  },
  "error handling 71": {
    "index": 0.5,
    "field": 0.5
  },
  "handling 71 index": {
    "73": 1.0
  },
  "71 index 73": {
    "5": 1.0
  },
  "index 73 5": {
    "program": 1.0
  },
  "73 5 program": {
    "structure": 1.0
  },
  "5 program structure": {
    "1": 1.0
  },
  "program structure 1": {
    "program": 1.0
  },
  "structure 1 program": {
    "structure": 1.0
  },
  "program structure structured": {
    "programming": 1.0
  },
  "structure structured programming": {
    "the": 1.0
  },
  "structured programming the": {
    "proper": 1.0
  },
  "programming the proper": {
    "structure": 1.0
  },
  "the proper structure": {
    "of": 1.0
  },
  "proper structure of": {
    "a": 1.0
  },
  "structure of a": {
    "computer": 0.5,
    "member": 0.5
  },
  "of a computer": {
    "program": 1.0
  },
  "a computer program": {
    "is": 1.0
  },
  "computer program is": {
    "a": 1.0
  },
  "program is a": {
    "topic": 1.0
  },
  "is a topic": {
    "that": 1.0
  },
  "a topic that": {
    "can": 1.0
  },
  "topic that can": {
    "be": 1.0
  },
  "that can be": {
    "the": 0.5,
    "referenced": 0.5
  },
  "can be the": {
    "beginning": 1.0
  },
  "be the beginning": {
    "of": 1.0
  },
  "the beginning of": {
    "a": 0.4444444444444444,
    "the": 0.5555555555555556
  },
  "beginning of a": {
    "highly": 0.25,
    "member": 0.75
  },
  "of a highly": {
    "charged": 1.0
  },
  "a highly charged": {
    "debate": 1.0
  },
  "highly charged debate": {
    "many": 1.0
  },
  "charged debate many": {
    "programmers": 1.0
  },
  "debate many programmers": {
    "have": 1.0
  },
  "many programmers have": {
    "definite": 1.0
  },
  "programmers have definite": {
    "strongly": 1.0
  },
  "have definite strongly": {
    "held": 1.0
  },
  "definite strongly held": {
    "ideas": 1.0
  },
  "strongly held ideas": {
    "about": 1.0
  },
  "held ideas about": {
    "what": 1.0
  },
  "ideas about what": {
    "constitutes": 1.0
  },
  "about what constitutes": {
    "proper": 1.0
  },
  "what constitutes proper": {
    "structure": 1.0
  },
  "constitutes proper structure": {
    "for": 1.0
  },
  "proper structure for": {
    "a": 1.0
  },
  "structure for a": {
    "progra": 1.0
  },
  "for a progra": {
    "m": 1.0
  },
  "a progra m": {
    "and": 1.0
  },
  "progra m and": {
    "those": 1.0
  },
  "m and those": {
    "ideas": 1.0
  },
  "and those ideas": {
    "do": 1.0
  },
  "those ideas do": {
    "not": 1.0
  },
  "ideas do not": {
    "always": 1.0
  },
  "do not always": {
    "conform": 1.0
  },
  "not always conform": {
    "to": 1.0
  },
  "always conform to": {
    "another": 1.0
  },
  "conform to another": {
    "programmer": 1.0
  },
  "to another programmer": {
    "s": 1.0
  },
  "another programmer s": {
    "thoughts": 1.0
  },
  "programmer s thoughts": {
    "concerning": 1.0
  },
  "s thoughts concerning": {
    "proper": 1.0
  },
  "thoughts concerning proper": {
    "structure": 1.0
  },
  "concerning proper structure": {
    "therefore": 1.0
  },
  "proper structure therefore": {
    "this": 1.0
  },
  "structure therefore this": {
    "essay": 1.0
  },
  "therefore this essay": {
    "is": 1.0
  },
  "this essay is": {
    "a": 1.0
  },
  "essay is a": {
    "general": 0.25,
    "very": 0.25,
    "discussion": 0.5
  },
  "is a general": {
    "discussion": 1.0
  },
  "a general discussion": {
    "of": 1.0
  },
  "general discussion of": {
    "the": 1.0
  },
  "discussion of the": {
    "clarion": 1.0
  },
  "of the clarion": {
    "language": 0.5,
    "documentation": 0.16666666666666666,
    "implementation": 0.16666666666666666,
    "syntax": 0.16666666666666666
  },
  "the clarion language": {
    "tools": 0.15,
    "provides": 0.1,
    "you": 0.1,
    "ok": 0.05,
    "fully": 0.05,
    "is": 0.05,
    "has": 0.1,
    "contains": 0.05,
    "automatically": 0.05,
    "supports": 0.1,
    "s": 0.05,
    "statements": 0.05,
    "one": 0.05,
    "create": 0.05
  },
  "clarion language tools": {
    "which": 0.3333333333333333,
    "that": 0.3333333333333333,
    "provided": 0.3333333333333333
  },
  "language tools which": {
    "provide": 1.0
  },
  "tools which provide": {
    "the": 1.0
  },
  "which provide the": {
    "ability": 1.0
  },
  "provide the ability": {
    "to": 1.0
  },
  "the ability to": {
    "construct": 0.2,
    "break": 0.2,
    "treat": 0.2,
    "place": 0.2,
    "contain": 0.2
  },
  "ability to construct": {
    "programs": 1.0
  },
  "to construct programs": {
    "in": 1.0
  },
  "construct programs in": {
    "your": 1.0
  },
  "programs in your": {
    "own": 1.0
  },
  "in your own": {
    "concept": 1.0
  },
  "your own concept": {
    "of": 1.0
  },
  "own concept of": {
    "proper": 1.0
  },
  "concept of proper": {
    "structure": 1.0
  },
  "of proper structure": {
    "procedures": 1.0
  },
  "proper structure procedures": {
    "the": 1.0
  },
  "structure procedures the": {
    "key": 1.0
  },
  "procedures the key": {
    "to": 1.0
  },
  "the key to": {
    "any": 0.5,
    "overriding": 0.5
  },
  "key to any": {
    "structured": 1.0
  },
  "to any structured": {
    "programming": 1.0
  },
  "any structured programming": {
    "is": 1.0
  },
  "structured programming is": {
    "the": 1.0
  },
  "programming is the": {
    "ability": 1.0
  },
  "is the ability": {
    "to": 1.0
  },
  "ability to break": {
    "your": 1.0
  },
  "to break your": {
    "program": 1.0
  },
  "break your program": {
    "code": 1.0
  },
  "your program code": {
    "into": 0.3333333333333333,
    "and": 0.3333333333333333,
    "s": 0.3333333333333333
  },
  "program code into": {
    "separate": 1.0
  },
  "code into separate": {
    "tasks": 1.0
  },
  "into separate tasks": {
    "to": 1.0
  },
  "separate tasks to": {
    "call": 1.0
  },
  "tasks to call": {
    "when": 1.0
  },
  "to call when": {
    "needed": 1.0
  },
  "call when needed": {
    "the": 1.0
  },
  "when needed the": {
    "clarion": 1.0
  },
  "needed the clarion": {
    "language": 1.0
  },
  "clarion language provides": {
    "a": 1.0
  },
  "language provides a": {
    "statement": 0.5,
    "mechanism": 0.5
  },
  "provides a statement": {
    "which": 1.0
  },
  "a statement which": {
    "allows": 1.0
  },
  "statement which allows": {
    "this": 1.0
  },
  "which allows this": {
    "type": 1.0
  },
  "allows this type": {
    "of": 1.0
  },
  "this type of": {
    "task": 0.3333333333333333,
    "d": 0.3333333333333333,
    "polymorphism": 0.3333333333333333
  },
  "type of task": {
    "separation": 1.0
  },
  "of task separation": {
    "procedure": 1.0
  },
  "task separation procedure": {
    "a": 1.0
  },
  "separation procedure a": {
    "procedure": 1.0
  },
  "procedure a procedure": {
    "can": 1.0
  },
  "a procedure can": {
    "be": 1.0
  },
  "procedure can be": {
    "prototyped": 1.0
  },
  "can be prototyped": {
    "to": 1.0
  },
  "be prototyped to": {
    "return": 1.0
  },
  "prototyped to return": {
    "a": 1.0
  },
  "to return a": {
    "value": 0.6666666666666666,
    "set": 0.3333333333333333
  },
  "return a value": {
    "and": 0.4,
    "may": 0.4,
    "15": 0.2
  },
  "a value and": {
    "therefore": 0.5,
    "contain": 0.5
  },
  "value and therefore": {
    "may": 1.0
  },
  "and therefore may": {
    "be": 1.0
  },
  "therefore may be": {
    "called": 1.0
  },
  "may be called": {
    "as": 0.3333333333333333,
    "only": 0.6666666666666666
  },
  "be called as": {
    "part": 1.0
  },
  "called as part": {
    "of": 1.0
  },
  "as part of": {
    "an": 0.6666666666666666,
    "primary": 0.3333333333333333
  },
  "part of an": {
    "expression": 1.0
  },
  "of an expression": {
    "or": 1.0
  },
  "an expression or": {
    "parameter": 1.0
  },
  "expression or parameter": {
    "list": 1.0
  },
  "or parameter list": {
    "a": 1.0
  },
  "parameter list a": {
    "procedure": 1.0
  },
  "list a procedure": {
    "which": 0.5,
    "prototyped": 0.5
  },
  "a procedure which": {
    "does": 0.3333333333333333,
    "resides": 0.3333333333333333,
    "is": 0.3333333333333333
  },
  "procedure which does": {
    "not": 1.0
  },
  "which does not": {
    "return": 1.0
  },
  "does not return": {
    "a": 1.0
  },
  "not return a": {
    "value": 1.0
  },
  "a value may": {
    "only": 0.5,
    "also": 0.5
  },
  "value may only": {
    "be": 1.0
  },
  "may only be": {
    "called": 0.5,
    "used": 0.5
  },
  "only be called": {
    "explicitly": 1.0
  },
  "be called explicitly": {
    "as": 1.0
  },
  "called explicitly as": {
    "a": 1.0
  },
  "explicitly as a": {
    "separate": 1.0
  },
  "as a separate": {
    "program": 1.0
  },
  "a separate program": {
    "statement": 1.0
  },
  "separate program statement": {
    "it": 0.5,
    "when": 0.5
  },
  "program statement it": {
    "may": 1.0
  },
  "statement it may": {
    "not": 1.0
  },
  "may not be": {
    "used": 0.5,
    "left": 0.5
  },
  "not be used": {
    "as": 0.5,
    "unless": 0.5
  },
  "be used as": {
    "part": 1.0
  },
  "used as part": {
    "of": 1.0
  },
  "a procedure prototyped": {
    "to": 1.0
  },
  "procedure prototyped to": {
    "return": 1.0
  },
  "value may also": {
    "be": 1.0
  },
  "may also be": {
    "called": 0.3333333333333333,
    "explicitly": 0.3333333333333333,
    "application": 0.3333333333333333
  },
  "also be called": {
    "explicitly": 1.0
  },
  "program statement when": {
    "the": 1.0
  },
  "statement when the": {
    "returned": 1.0
  },
  "when the returned": {
    "value": 1.0
  },
  "the returned value": {
    "is": 1.0
  },
  "returned value is": {
    "unimportant": 1.0
  },
  "value is unimportant": {
    "to": 1.0
  },
  "is unimportant to": {
    "the": 1.0
  },
  "unimportant to the": {
    "context": 1.0
  },
  "to the context": {
    "in": 1.0
  },
  "the context in": {
    "which": 1.0
  },
  "context in which": {
    "it": 1.0
  },
  "in which it": {
    "is": 0.3333333333333333,
    "resides": 0.3333333333333333,
    "does": 0.16666666666666666,
    "was": 0.16666666666666666
  },
  "which it is": {
    "called": 0.14285714285714285,
    "declared": 0.14285714285714285,
    "attached": 0.14285714285714285,
    "derived": 0.2857142857142857,
    "placed": 0.2857142857142857
  },
  "it is called": {
    "doing": 0.5,
    "for": 0.5
  },
  "is called doing": {
    "this": 1.0
  },
  "called doing this": {
    "will": 1.0
  },
  "doing this will": {
    "generate": 1.0
  },
  "this will generate": {
    "warnings": 0.3333333333333333,
    "a": 0.3333333333333333,
    "an": 0.3333333333333333
  },
  "will generate warnings": {
    "f": 1.0
  },
  "generate warnings f": {
    "rom": 1.0
  },
  "warnings f rom": {
    "the": 1.0
  },
  "f rom the": {
    "compiler": 1.0
  },
  "rom the compiler": {
    "which": 1.0
  },
  "the compiler which": {
    "may": 1.0
  },
  "compiler which may": {
    "be": 1.0
  },
  "which may be": {
    "safely": 1.0
  },
  "may be safely": {
    "ignored": 1.0
  },
  "be safely ignored": {
    "unless": 1.0
  },
  "safely ignored unless": {
    "the": 1.0
  },
  "ignored unless the": {
    "procedure": 1.0
  },
  "unless the procedure": {
    "s": 1.0
  },
  "the procedure s": {
    "prototype": 0.07692307692307693,
    "prototyped": 0.15384615384615385,
    "actually": 0.07692307692307693,
    "are": 0.07692307692307693,
    "that": 0.07692307692307693,
    "executable": 0.15384615384615385,
    "which": 0.07692307692307693,
    "local": 0.23076923076923078,
    "routines": 0.07692307692307693
  },
  "procedure s prototype": {
    "has": 1.0
  },
  "s prototype has": {
    "the": 1.0
  },
  "prototype has the": {
    "proc": 1.0
  },
  "has the proc": {
    "attribute": 1.0
  },
  "the proc attribute": {
    "within": 1.0
  },
  "proc attribute within": {
    "a": 1.0
  },
  "attribute within a": {
    "procedure": 1.0
  },
  "within a procedure": {
    "you": 0.3333333333333333,
    "the": 0.3333333333333333,
    "s": 0.3333333333333333
  },
  "a procedure you": {
    "may": 1.0
  },
  "procedure you may": {
    "put": 1.0
  },
  "you may put": {
    "repetitive": 1.0
  },
  "may put repetitive": {
    "executable": 1.0
  },
  "put repetitive executable": {
    "code": 1.0
  },
  "repetitive executable code": {
    "statements": 1.0
  },
  "executable code statements": {
    "into": 0.5,
    "then": 0.5
  },
  "code statements into": {
    "routines": 1.0
  },
  "statements into routines": {
    "this": 1.0
  },
  "into routines this": {
    "is": 1.0
  },
  "routines this is": {
    "useful": 1.0
  },
  "this is useful": {
    "for": 0.3333333333333333,
    "in": 0.6666666666666666
  },
  "is useful for": {
    "optimizing": 0.5,
    "procedure": 0.5
  },
  "useful for optimizing": {
    "the": 1.0
  },
  "for optimizing the": {
    "size": 1.0
  },
  "optimizing the size": {
    "of": 1.0
  },
  "the size of": {
    "your": 0.5,
    "the": 0.5
  },
  "size of your": {
    "program": 1.0
  },
  "of your program": {
    "code": 0.5,
    "can": 0.5
  },
  "program code and": {
    "movi": 1.0
  },
  "code and movi": {
    "ng": 1.0
  },
  "and movi ng": {
    "explicit": 1.0
  },
  "movi ng explicit": {
    "functionality": 1.0
  },
  "ng explicit functionality": {
    "out": 1.0
  },
  "explicit functionality out": {
    "of": 1.0
  },
  "functionality out of": {
    "the": 1.0
  },
  "out of the": {
    "main": 0.5,
    "procedure": 0.5
  },
  "of the main": {
    "procedure": 1.0
  },
  "the main procedure": {
    "logic": 1.0
  },
  "main procedure logic": {
    "making": 1.0
  },
  "procedure logic making": {
    "the": 1.0
  },
  "logic making the": {
    "overall": 1.0
  },
  "making the overall": {
    "logic": 1.0
  },
  "the overall logic": {
    "flow": 1.0
  },
  "overall logic flow": {
    "easier": 1.0
  },
  "logic flow easier": {
    "to": 1.0
  },
  "flow easier to": {
    "follow": 1.0
  },
  "easier to follow": {
    "however": 0.5,
    "logically": 0.5
  },
  "to follow however": {
    "routines": 1.0
  },
  "follow however routines": {
    "are": 1.0
  },
  "however routines are": {
    "only": 1.0
  },
  "routines are only": {
    "local": 1.0
  },
  "are only local": {
    "to": 1.0
  },
  "only local to": {
    "the": 1.0
  },
  "local to the": {
    "procedure": 0.3333333333333333,
    "myprog2": 0.3333333333333333,
    "member": 0.3333333333333333
  },
  "to the procedure": {
    "and": 0.14285714285714285,
    "s": 0.2857142857142857,
    "within": 0.14285714285714285,
    "which": 0.14285714285714285,
    "it": 0.14285714285714285,
    "that": 0.14285714285714285
  },
  "the procedure and": {
    "may": 0.3333333333333333,
    "how": 0.3333333333333333,
    "exi": 0.3333333333333333
  },
  "procedure and may": {
    "only": 1.0
  },
  "and may only": {
    "be": 1.0
  },
  "only be used": {
    "within": 1.0
  },
  "be used within": {
    "the": 1.0
  },
  "used within the": {
    "procedure": 1.0
  },
  "within the procedure": {
    "in": 0.4,
    "these": 0.2,
    "and": 0.2,
    "itself": 0.2
  },
  "the procedure in": {
    "which": 0.75,
    "the": 0.25
  },
  "procedure in which": {
    "it": 0.3333333333333333,
    "they": 0.6666666666666666
  },
  "which it resides": {
    "therefore": 0.5,
    "this": 0.5
  },
  "it resides therefore": {
    "the": 1.0
  },
  "resides therefore the": {
    "use": 1.0
  },
  "therefore the use": {
    "of": 1.0
  },
  "the use of": {
    "routines": 0.14285714285714285,
    "self": 0.14285714285714285,
    "new": 0.14285714285714285,
    "hold": 0.2857142857142857,
    "a": 0.14285714285714285,
    "groupware": 0.14285714285714285
  },
  "use of routines": {
    "is": 1.0
  },
  "of routines is": {
    "no": 1.0
  },
  "routines is no": {
    "t": 1.0
  },
  "is no t": {
    "part": 1.0
  },
  "no t part": {
    "of": 1.0
  },
  "t part of": {
    "this": 1.0
  },
  "part of this": {
    "discussion": 1.0
  },
  "of this discussion": {
    "local": 0.5,
    "the": 0.5
  },
  "this discussion local": {
    "stack": 1.0
  },
  "discussion local stack": {
    "based": 1.0
  },
  "data declarations every": {
    "procedure": 1.0
  },
  "declarations every procedure": {
    "has": 1.0
  },
  "every procedure has": {
    "a": 1.0
  },
  "procedure has a": {
    "data": 1.0
  },
  "has a data": {
    "declaration": 0.8,
    "section": 0.2
  },
  "a data declaration": {
    "section": 0.75,
    "se": 0.25
  },
  "data declaration section": {
    "and": 0.038461538461538464,
    "follows": 0.038461538461538464,
    "are": 0.07692307692307693,
    "between": 0.038461538461538464,
    "this": 0.038461538461538464,
    "code": 0.23076923076923078,
    "of": 0.038461538461538464,
    "may": 0.11538461538461539,
    "map": 0.23076923076923078,
    "therefore": 0.07692307692307693,
    "following": 0.038461538461538464,
    "declares": 0.038461538461538464
  },
  "declaration section and": {
    "an": 1.0
  },
  "section and an": {
    "executable": 1.0
  },
  "and an executable": {
    "code": 1.0
  },
  "an executable code": {
    "section": 1.0
  },
  "executable code section": {
    "the": 0.3333333333333333,
    "follows": 0.3333333333333333,
    "following": 0.3333333333333333
  },
  "code section the": {
    "data": 1.0
  },
  "section the data": {
    "declaration": 1.0
  },
  "the data declaration": {
    "section": 0.6666666666666666,
    "of": 0.3333333333333333
  },
  "declaration section follows": {
    "the": 1.0
  },
  "section follows the": {
    "keyword": 1.0
  },
  "follows the keyword": {
    "procedure": 0.5,
    "code": 0.5
  },
  "the keyword procedure": {
    "and": 1.0
  },
  "keyword procedure and": {
    "ends": 0.5,
    "ending": 0.5
  },
  "procedure and ends": {
    "with": 1.0
  },
  "and ends with": {
    "the": 1.0
  },
  "ends with the": {
    "keyword": 1.0
  },
  "with the keyword": {
    "cod": 1.0
  },
  "the keyword cod": {
    "e": 1.0
  },
  "keyword cod e": {
    "the": 1.0
  },
  "cod e the": {
    "executable": 1.0
  },
  "e the executable": {
    "code": 1.0
  },
  "the executable code": {
    "section": 0.2,
    "inside": 0.2,
    "might": 0.4,
    "would": 0.2
  },
  "code section follows": {
    "the": 1.0
  },
  "the keyword code": {
    "any": 0.5,
    "all": 0.5
  },
  "keyword code any": {
    "variables": 1.0
  },
  "code any variables": {
    "or": 1.0
  },
  "any variables or": {
    "data": 1.0
  },
  "variables or data": {
    "structures": 1.0
  },
  "or data structures": {
    "declared": 1.0
  },
  "data structures declared": {
    "in": 1.0
  },
  "structures declared in": {
    "a": 0.5,
    "the": 0.5
  },
  "declared in a": {
    "procedure": 0.36363636363636365,
    "module": 0.18181818181818182,
    "data": 0.18181818181818182,
    "derived": 0.09090909090909091,
    "class": 0.09090909090909091,
    "global": 0.09090909090909091
  },
  "in a procedure": {
    "s": 0.375,
    "without": 0.125,
    "are": 0.25,
    "is": 0.125,
    "only": 0.125
  },
  "a procedure s": {
    "data": 0.5,
    "map": 0.16666666666666666,
    "local": 0.3333333333333333
  },
  "procedure s data": {
    "declaration": 0.75,
    "section": 0.25
  },
  "s data declaration": {
    "section": 1.0
  },
  "declaration section are": {
    "local": 0.5,
    "global": 0.5
  },
  "section are local": {
    "to": 1.0
  },
  "are local to": {
    "that": 1.0
  },
  "local to that": {
    "procedure": 0.5,
    "member": 0.5
  },
  "to that procedure": {
    "this": 1.0
  },
  "that procedure this": {
    "means": 1.0
  },
  "procedure this means": {
    "they": 1.0
  },
  "this means they": {
    "are": 1.0
  },
  "means they are": {
    "only": 0.5,
    "visible": 0.5
  },
  "they are only": {
    "visible": 1.0
  },
  "are only visible": {
    "within": 0.6666666666666666,
    "to": 0.3333333333333333
  },
  "only visible within": {
    "that": 0.3333333333333333,
    "the": 0.6666666666666666
  },
  "visible within that": {
    "procedure": 1.0
  },
  "within that procedure": {
    "unless": 1.0
  },
  "that procedure unless": {
    "passed": 1.0
  },
  "procedure unless passed": {
    "as": 1.0
  },
  "unless passed as": {
    "a": 1.0
  },
  "passed as a": {
    "parameter": 1.0
  },
  "as a parameter": {
    "t": 0.3333333333333333,
    "to": 0.3333333333333333,
    "effectively": 0.3333333333333333
  },
  "a parameter t": {
    "o": 1.0
  },
  "parameter t o": {
    "another": 1.0
  },
  "t o another": {
    "procedure": 1.0
  },
  "o another procedure": {
    "variables": 1.0
  },
  "another procedure variables": {
    "declared": 1.0
  },
  "procedure variables declared": {
    "locally": 1.0
  },
  "variables declared locally": {
    "in": 1.0
  },
  "declared locally in": {
    "a": 1.0
  },
  "locally in a": {
    "procedure": 1.0
  },
  "a procedure without": {
    "the": 1.0
  },
  "procedure without the": {
    "static": 1.0
  },
  "without the static": {
    "attribute": 1.0
  },
  "the static attribute": {
    "are": 0.5,
    "it": 0.5
  },
  "static attribute are": {
    "dynamically": 1.0
  },
  "attribute are dynamically": {
    "allocated": 1.0
  },
  "are dynamically allocated": {
    "memory": 1.0
  },
  "dynamically allocated memory": {
    "when": 0.5,
    "on": 0.5
  },
  "allocated memory when": {
    "the": 1.0
  },
  "memory when the": {
    "procedure": 0.5,
    "program": 0.5
  },
  "when the procedure": {
    "executes": 0.2,
    "is": 0.8
  },
  "the procedure executes": {
    "the": 0.5,
    "therefore": 0.5
  },
  "procedure executes the": {
    "memory": 1.0
  },
  "executes the memory": {
    "for": 1.0
  },
  "the memory for": {
    "a": 0.3333333333333333,
    "the": 0.6666666666666666
  },
  "memory for a": {
    "local": 1.0
  },
  "for a local": {
    "viable": 1.0
  },
  "a local viable": {
    "is": 1.0
  },
  "local viable is": {
    "allocated": 1.0
  },
  "viable is allocated": {
    "on": 1.0
  },
  "is allocated on": {
    "the": 1.0
  },
  "allocated on the": {
    "program": 0.3333333333333333,
    "heap": 0.3333333333333333,
    "stack": 0.3333333333333333
  },
  "on the program": {
    "s": 1.0
  },
  "the program s": {
    "stack": 0.3333333333333333,
    "data": 0.3333333333333333,
    "tarts": 0.3333333333333333
  },
  "program s stack": {
    "unless": 1.0
  },
  "s stack unless": {
    "it": 1.0
  },
  "stack unless it": {
    "is": 1.0
  },
  "unless it is": {
    "lar": 1.0
  },
  "it is lar": {
    "ger": 1.0
  },
  "is lar ger": {
    "than": 1.0
  },
  "lar ger than": {
    "the": 1.0
  },
  "ger than the": {
    "stack": 1.0
  },
  "than the stack": {
    "threshold": 1.0
  },
  "the stack threshold": {
    "then": 1.0
  },
  "stack threshold then": {
    "it": 1.0
  },
  "threshold then it": {
    "is": 1.0
  },
  "then it is": {
    "allocated": 1.0
  },
  "it is allocated": {
    "on": 1.0
  },
  "on the heap": {
    "but": 1.0
  },
  "the heap but": {
    "it": 1.0
  },
  "heap but it": {
    "behaves": 1.0
  },
  "but it behaves": {
    "the": 1.0
  },
  "it behaves the": {
    "same": 1.0
  },
  "behaves the same": {
    "as": 1.0
  },
  "the same as": {
    "a": 0.2,
    "the": 0.2,
    "in": 0.2,
    "whe": 0.2,
    "any": 0.2
  },
  "same as a": {
    "variable": 1.0
  },
  "as a variable": {
    "allocated": 1.0
  },
  "a variable allocated": {
    "on": 1.0
  },
  "variable allocated on": {
    "the": 1.0
  },
  "on the stack": {
    "when": 0.4,
    "dynamically": 0.2,
    "this": 0.2,
    "therefore": 0.2
  },
  "the stack when": {
    "the": 1.0
  },
  "stack when the": {
    "procedure": 1.0
  },
  "the procedure is": {
    "complete": 0.25,
    "called": 0.75
  },
  "procedure is complete": {
    "and": 1.0
  },
  "is complete and": {
    "program": 1.0
  },
  "complete and program": {
    "control": 1.0
  },
  "and program control": {
    "returns": 1.0
  },
  "program control returns": {
    "to": 1.0
  },
  "control returns to": {
    "the": 1.0
  },
  "returns to the": {
    "place": 0.3333333333333333,
    "client": 0.6666666666666666
  },
  "to the place": {
    "from": 1.0
  },
  "the place from": {
    "which": 1.0
  },
  "place from which": {
    "it": 1.0
  },
  "from which it": {
    "was": 0.4,
    "is": 0.4,
    "inherits": 0.2
  },
  "which it was": {
    "called": 0.6666666666666666,
    "declared": 0.3333333333333333
  },
  "it was called": {
    "the": 1.0
  },
  "was called the": {
    "local": 0.5,
    "memory": 0.5
  },
  "called the local": {
    "variable": 0.5,
    "variables": 0.5
  },
  "the local variable": {
    "s": 0.3333333333333333,
    "proc2": 0.3333333333333333,
    "end": 0.3333333333333333
  },
  "local variable s": {
    "memory": 1.0
  },
  "variable s memory": {
    "is": 1.0
  },
  "s memory is": {
    "de": 1.0
  },
  "memory is de": {
    "allocated": 1.0
  },
  "is de allocated": {
    "and": 1.0
  },
  "de allocated and": {
    "returned": 1.0
  },
  "allocated and returned": {
    "to": 1.0
  },
  "and returned to": {
    "the": 1.0
  },
  "returned to the": {
    "program": 0.5,
    "procedure": 0.5
  },
  "to the program": {
    "for": 0.3333333333333333,
    "source": 0.6666666666666666
  },
  "the program for": {
    "other": 1.0
  },
  "program for other": {
    "uses": 1.0
  },
  "for other uses": {
    "only": 1.0
  },
  "other uses only": {
    "variables": 1.0
  },
  "uses only variables": {
    "declared": 1.0
  },
  "only variables declared": {
    "local": 1.0
  },
  "variables declared local": {
    "to": 1.0
  },
  "declared local to": {
    "a": 1.0
  },
  "local to a": {
    "procedure": 1.0
  },
  "to a procedure": {
    "are": 0.3333333333333333,
    "to": 0.3333333333333333,
    "share": 0.3333333333333333
  },
  "a procedure are": {
    "dynamically": 0.3333333333333333,
    "only": 0.3333333333333333,
    "assigned": 0.3333333333333333
  },
  "procedure are dynamically": {
    "allocated": 1.0
  },
  "allocated memory on": {
    "the": 1.0
  },
  "memory on the": {
    "stack": 1.0
  },
  "the stack dynamically": {
    "allocated": 1.0
  },
  "stack dynamically allocated": {
    "local": 1.0
  },
  "dynamically allocated local": {
    "variables": 1.0
  },
  "allocated local variables": {
    "makes": 1.0
  },
  "local variables makes": {
    "recursive": 1.0
  },
  "variables makes recursive": {
    "and": 1.0
  },
  "makes recursive and": {
    "reentrant": 1.0
  },
  "recursive and reentrant": {
    "procedure": 1.0
  },
  "and reentrant procedure": {
    "s": 1.0
  },
  "reentrant procedure s": {
    "possible": 1.0
  },
  "procedure s possible": {
    "a": 1.0
  },
  "s possible a": {
    "procedure": 1.0
  },
  "possible a procedure": {
    "is": 1.0
  },
  "a procedure is": {
    "re": 0.3333333333333333,
    "recursively": 0.3333333333333333,
    "limited": 0.3333333333333333
  },
  "procedure is re": {
    "cursive": 1.0
  },
  "is re cursive": {
    "if": 1.0
  },
  "re cursive if": {
    "it": 1.0
  },
  "cursive if it": {
    "calls": 1.0
  },
  "if it calls": {
    "itself": 1.0
  },
  "it calls itself": {
    "within": 1.0
  },
  "calls itself within": {
    "its": 1.0
  },
  "itself within its": {
    "code": 1.0
  },
  "within its code": {
    "each": 1.0
  },
  "its code each": {
    "time": 1.0
  },
  "code each time": {
    "a": 1.0
  },
  "each time a": {
    "procedure": 1.0
  },
  "time a procedure": {
    "is": 1.0
  },
  "procedure is recursively": {
    "called": 1.0
  },
  "is recursively called": {
    "it": 1.0
  },
  "recursively called it": {
    "receives": 1.0
  },
  "called it receives": {
    "a": 1.0
  },
  "it receives a": {
    "new": 1.0
  },
  "receives a new": {
    "copy": 1.0
  },
  "a new copy": {
    "of": 1.0
  },
  "new copy of": {
    "its": 1.0
  },
  "copy of its": {
    "non": 1.0
  },
  "of its non": {
    "static": 1.0
  },
  "its non static": {
    "local": 1.0
  },
  "non static local": {
    "variables": 1.0
  },
  "static local variables": {
    "recursion": 1.0
  },
  "local variables recursion": {
    "is": 1.0
  },
  "variables recursion is": {
    "an": 1.0
  },
  "recursion is an": {
    "advanced": 1.0
  },
  "is an advanced": {
    "programming": 1.0
  },
  "an advanced programming": {
    "technique": 1.0
  },
  "advanced programming technique": {
    "which": 1.0
  },
  "programming technique which": {
    "is": 1.0
  },
  "technique which is": {
    "useful": 1.0
  },
  "which is useful": {
    "for": 1.0
  },
  "useful for procedure": {
    "s": 1.0
  },
  "for procedure s": {
    "which": 1.0
  },
  "procedure s which": {
    "must": 0.16666666666666666,
    "accomplish": 0.16666666666666666,
    "are": 0.3333333333333333,
    "reside": 0.16666666666666666,
    "act": 0.16666666666666666
  },
  "s which must": {
    "be": 1.0
  },
  "which must be": {
    "executed": 0.25,
    "a": 0.25,
    "resolved": 0.5
  },
  "must be executed": {
    "in": 1.0
  },
  "be executed in": {
    "succe": 1.0
  },
  "executed in succe": {
    "ssive": 1.0
  },
  "in succe ssive": {
    "iterations": 1.0
  },
  "succe ssive iterations": {
    "program": 1.0
  },
  "ssive iterations program": {
    "map": 1.0
  },
  "iterations program map": {
    "just": 1.0
  },
  "program map just": {
    "like": 1.0
  },
  "map just like": {
    "a": 1.0
  },
  "just like a": {
    "procedure": 1.0
  },
  "like a procedure": {
    "a": 1.0
  },
  "a procedure a": {
    "program": 1.0
  },
  "procedure a program": {
    "has": 1.0
  },
  "a program has": {
    "a": 1.0
  },
  "program has a": {
    "data": 1.0
  },
  "declaration section between": {
    "the": 1.0
  },
  "section between the": {
    "keywords": 1.0
  },
  "between the keywords": {
    "program": 0.6666666666666666,
    "member": 0.3333333333333333
  },
  "the keywords program": {
    "and": 1.0
  },
  "keywords program and": {
    "code": 1.0
  },
  "program and code": {
    "and": 0.5,
    "or": 0.5
  },
  "and code and": {
    "an": 1.0
  },
  "code and an": {
    "executable": 1.0
  },
  "code section following": {
    "the": 1.0
  },
  "section following the": {
    "keyword": 1.0
  },
  "following the keyword": {
    "code": 0.3333333333333333,
    "member": 0.3333333333333333,
    "procedure": 0.3333333333333333
  },
  "keyword code all": {
    "variables": 1.0
  },
  "code all variables": {
    "and": 1.0
  },
  "all variables and": {
    "data": 1.0
  },
  "variables and data": {
    "structures": 1.0
  },
  "and data structures": {
    "declared": 0.5,
    "which": 0.5
  },
  "declared in the": {
    "program": 0.25,
    "data": 0.08333333333333333,
    "member": 0.08333333333333333,
    "myprog2": 0.08333333333333333,
    "same": 0.08333333333333333,
    "proc1": 0.08333333333333333,
    "base": 0.08333333333333333,
    "class": 0.08333333333333333,
    "file": 0.08333333333333333,
    "global": 0.08333333333333333
  },
  "in the program": {
    "s": 0.14285714285714285,
    "module": 0.14285714285714285,
    "map": 0.5714285714285714,
    "in": 0.14285714285714285
  },
  "program s data": {
    "declaration": 1.0
  },
  "section are global": {
    "available": 1.0
  },
  "are global available": {
    "for": 1.0
  },
  "global available for": {
    "use": 1.0
  },
  "available for use": {
    "anywhere": 0.4,
    "in": 0.2,
    "within": 0.4
  },
  "for use anywhere": {
    "in": 0.5,
    "that": 0.5
  },
  "use anywhere in": {
    "the": 1.0
  },
  "anywhere in the": {
    "application": 1.0
  },
  "in the application": {
    "and": 0.3333333333333333,
    "in": 0.3333333333333333,
    "an": 0.3333333333333333
  },
  "the application and": {
    "are": 1.0
  },
  "application and are": {
    "allocated": 1.0
  },
  "and are allocated": {
    "memory": 1.0
  },
  "are allocated memory": {
    "statically": 0.5,
    "when": 0.5
  },
  "allocated memory statically": {
    "a": 1.0
  },
  "memory statically a": {
    "program": 1.0
  },
  "statically a program": {
    "s": 1.0
  },
  "a program s": {
    "map": 1.0
  },
  "program s map": {
    "structure": 1.0
  },
  "s map structure": {
    "is": 1.0
  },
  "map structure is": {
    "located": 1.0
  },
  "structure is located": {
    "in": 1.0
  },
  "is located in": {
    "the": 1.0
  },
  "located in the": {
    "global": 1.0
  },
  "in the global": {
    "data": 1.0
  },
  "the global data": {
    "declaration": 0.25,
    "variables": 0.5,
    "section": 0.25
  },
  "global data declaration": {
    "section": 1.0
  },
  "declaration section this": {
    "map": 1.0
  },
  "section this map": {
    "tells": 1.0
  },
  "this map tells": {
    "the": 1.0
  },
  "map tells the": {
    "program": 1.0
  },
  "tells the program": {
    "what": 1.0
  },
  "the program what": {
    "procedure": 1.0
  },
  "program what procedure": {
    "s": 1.0
  },
  "what procedure s": {
    "are": 1.0
  },
  "procedure s are": {
    "globally": 0.5,
    "used": 0.5
  },
  "s are globally": {
    "available": 1.0
  },
  "are globally available": {
    "anywhere": 0.5,
    "a": 0.5
  },
  "globally available anywhere": {
    "in": 1.0
  },
  "available anywhere in": {
    "the": 1.0
  },
  "the application in": {
    "a": 1.0
  },
  "application in a": {
    "clarion": 1.0
  },
  "in a clarion": {
    "program": 1.0
  },
  "a clarion program": {
    "all": 0.3333333333333333,
    "would": 0.3333333333333333,
    "if": 0.3333333333333333
  },
  "clarion program all": {
    "procedure": 1.0
  },
  "program all procedure": {
    "s": 1.0
  },
  "all procedure s": {
    "must": 0.25,
    "declared": 0.25,
    "in": 0.25,
    "which": 0.25
  },
  "procedure s must": {
    "be": 1.0
  },
  "s must be": {
    "prototyped": 1.0
  },
  "must be prototyped": {
    "in": 1.0
  },
  "be prototyped in": {
    "a": 0.5,
    "the": 0.5
  },
  "prototyped in a": {
    "map": 0.5,
    "derived": 0.5
  },
  "in a map": {
    "structure": 1.0
  },
  "a map structure": {
    "unless": 1.0
  },
  "map structure unless": {
    "they": 1.0
  },
  "structure unless they": {
    "are": 1.0
  },
  "unless they are": {
    "methods": 1.0
  },
  "they are methods": {
    "of": 1.0
  },
  "are methods of": {
    "a": 1.0
  },
  "methods of a": {
    "class": 1.0
  },
  "of a class": {
    "then": 0.125,
    "of": 0.125,
    "its": 0.125,
    "containing": 0.125,
    "share": 0.25,
    "are": 0.125,
    "with": 0.125
  },
  "a class then": {
    "the": 1.0
  },
  "class then the": {
    "class": 0.5,
    "derived": 0.5
  },
  "then the class": {
    "structure": 1.0
  },
  "class structure itself": {
    "contains": 1.0
  },
  "structure itself contains": {
    "the": 1.0
  },
  "itself contains the": {
    "prototype": 1.0
  },
  "contains the prototype": {
    "a": 1.0
  },
  "the prototype a": {
    "prototype": 1.0
  },
  "prototype a prototype": {
    "of": 1.0
  },
  "a prototype of": {
    "a": 1.0
  },
  "prototype of a": {
    "procedure": 1.0
  },
  "of a procedure": {
    "tells": 1.0
  },
  "a procedure tells": {
    "the": 1.0
  },
  "procedure tells the": {
    "c": 1.0
  },
  "tells the c": {
    "ompiler": 1.0
  },
  "the c ompiler": {
    "the": 1.0
  },
  "c ompiler the": {
    "name": 1.0
  },
  "ompiler the name": {
    "of": 1.0
  },
  "the name of": {
    "the": 1.0
  },
  "name of the": {
    "procedure": 0.25,
    "object": 0.25,
    "class": 0.25,
    "method": 0.25
  },
  "of the procedure": {
    "and": 0.125,
    "again": 0.125,
    "execution": 0.125,
    "s": 0.125,
    "itself": 0.125,
    "in": 0.125,
    "within": 0.125,
    "statement": 0.125
  },
  "procedure and how": {
    "to": 1.0
  },
  "and how to": {
    "deal": 0.5,
    "program": 0.5
  },
  "how to deal": {
    "with": 1.0
  },
  "to deal with": {
    "it": 0.5,
    "the": 0.5
  },
  "deal with it": {
    "for": 1.0
  },
  "with it for": {
    "a": 1.0
  },
  "it for a": {
    "complete": 1.0
  },
  "for a complete": {
    "description": 0.5,
    "discussion": 0.5
  },
  "a complete description": {
    "of": 1.0
  },
  "complete description of": {
    "prototypes": 1.0
  },
  "description of prototypes": {
    "see": 1.0
  },
  "of prototypes see": {
    "procedure": 1.0
  },
  "prototypes see procedure": {
    "prototypes": 1.0
  },
  "see procedure prototypes": {
    "in": 1.0
  },
  "procedure prototypes in": {
    "the": 1.0
  },
  "prototypes in the": {
    "language": 1.0
  },
  "in the language": {
    "reference": 1.0
  },
  "the language reference": {
    "clarion": 0.25,
    "for": 0.5,
    "manual": 0.25
  },
  "language reference clarion": {
    "language": 1.0
  },
  "reference clarion language": {
    "programming": 1.0
  },
  "programming guide 6": {
    "module": 1.0
  },
  "guide 6 module": {
    "within": 1.0
  },
  "6 module within": {
    "a": 1.0
  },
  "module within a": {
    "map": 1.0
  },
  "within a map": {
    "you": 0.5,
    "the": 0.5
  },
  "a map you": {
    "may": 1.0
  },
  "map you may": {
    "have": 1.0
  },
  "you may have": {
    "module": 1.0
  },
  "may have module": {
    "structures": 1.0
  },
  "have module structures": {
    "which": 1.0
  },
  "module structures which": {
    "declare": 0.5,
    "point": 0.5
  },
  "structures which declare": {
    "the": 1.0
  },
  "which declare the": {
    "separate": 1.0
  },
  "declare the separate": {
    "source": 1.0
  },
  "the separate source": {
    "file": 1.0
  },
  "separate source file": {
    "containing": 0.2,
    "myprog2": 0.6,
    "myprog3": 0.2
  },
  "source file containing": {
    "the": 1.0
  },
  "file containing the": {
    "procedure": 0.5,
    "foreign": 0.5
  },
  "containing the procedure": {
    "s": 1.0
  },
  "procedure s prototyped": {
    "in": 0.5,
    "are": 0.5
  },
  "s prototyped in": {
    "that": 1.0
  },
  "prototyped in that": {
    "module": 1.0
  },
  "in that module": {
    "structure": 1.0
  },
  "that module structure": {
    "the": 1.0
  },
  "module structure the": {
    "module": 1.0
  },
  "structure the module": {
    "structure": 1.0
  },
  "the module structure": {
    "is": 0.16666666666666666,
    "defines": 0.16666666666666666,
    "must": 0.16666666666666666,
    "in": 0.16666666666666666,
    "of": 0.3333333333333333
  },
  "module structure is": {
    "the": 1.0
  },
  "structure is the": {
    "mechanism": 1.0
  },
  "is the mechanism": {
    "which": 0.3333333333333333,
    "that": 0.6666666666666666
  },
  "the mechanism which": {
    "allows": 1.0
  },
  "mechanism which allows": {
    "the": 1.0
  },
  "which allows the": {
    "next": 1.0
  },
  "allows the next": {
    "level": 1.0
  },
  "the next level": {
    "of": 1.0
  },
  "next level of": {
    "program": 1.0
  },
  "level of program": {
    "organization": 1.0
  },
  "of program organization": {
    "grouping": 1.0
  },
  "program organization grouping": {
    "procedure": 1.0
  },
  "organization grouping procedure": {
    "s": 1.0
  },
  "grouping procedure s": {
    "into": 0.5,
    "which": 0.5
  },
  "procedure s into": {
    "separate": 1.0
  },
  "s into separate": {
    "source": 1.0
  },
  "into separate source": {
    "files": 1.0
  },
  "separate source files": {
    "there": 0.25,
    "this": 0.25,
    "any": 0.25,
    "the": 0.25
  },
  "source files there": {
    "are": 1.0
  },
  "files there are": {
    "many": 1.0
  },
  "there are many": {
    "reasons": 0.5,
    "books": 0.5
  },
  "are many reasons": {
    "to": 1.0
  },
  "many reasons to": {
    "split": 1.0
  },
  "reasons to split": {
    "off": 1.0
  },
  "to split off": {
    "groups": 1.0
  },
  "split off groups": {
    "of": 1.0
  },
  "off groups of": {
    "pro": 1.0
  },
  "groups of pro": {
    "cedure": 1.0
  },
  "of pro cedure": {
    "s": 1.0
  },
  "pro cedure s": {
    "into": 1.0
  },
  "cedure s into": {
    "separate": 1.0
  },
  "source files this": {
    "is": 1.0
  },
  "files this is": {
    "the": 1.0
  },
  "this is the": {
    "point": 0.2857142857142857,
    "basic": 0.14285714285714285,
    "structure": 0.14285714285714285,
    "part": 0.14285714285714285,
    "key": 0.14285714285714285,
    "purpose": 0.14285714285714285
  },
  "is the point": {
    "at": 0.5,
    "where": 0.5
  },
  "the point at": {
    "which": 1.0
  },
  "point at which": {
    "debate": 1.0
  },
  "at which debate": {
    "amongst": 1.0
  },
  "which debate amongst": {
    "programmers": 1.0
  },
  "debate amongst programmers": {
    "with": 1.0
  },
  "amongst programmers with": {
    "differing": 1.0
  },
  "programmers with differing": {
    "viewpoints": 1.0
  },
  "with differing viewpoints": {
    "becomes": 1.0
  },
  "differing viewpoints becomes": {
    "highly": 1.0
  },
  "viewpoints becomes highly": {
    "charged": 1.0
  },
  "becomes highly charged": {
    "grouping": 1.0
  },
  "highly charged grouping": {
    "procedure": 1.0
  },
  "charged grouping procedure": {
    "s": 1.0
  },
  "s which accomplish": {
    "related": 1.0
  },
  "which accomplish related": {
    "tasks": 1.0
  },
  "accomplish related tasks": {
    "is": 1.0
  },
  "related tasks is": {
    "one": 1.0
  },
  "tasks is one": {
    "approach": 1.0
  },
  "is one approach": {
    "grouping": 1.0
  },
  "one approach grouping": {
    "for": 1.0
  },
  "approach grouping for": {
    "optimization": 1.0
  },
  "grouping for optimization": {
    "of": 1.0
  },
  "for optimization of": {
    "compile": 1.0
  },
  "optimization of compile": {
    "times": 1.0
  },
  "of compile times": {
    "is": 1.0
  },
  "compile times is": {
    "an": 1.0
  },
  "times is an": {
    "other": 1.0
  },
  "is an other": {
    "reason": 1.0
  },
  "an other reason": {
    "for": 1.0
  },
  "other reason for": {
    "grouping": 1.0
  },
  "reason for grouping": {
    "certain": 1.0
  },
  "for grouping certain": {
    "files": 1.0
  },
  "grouping certain files": {
    "together": 1.0
  },
  "certain files together": {
    "another": 1.0
  },
  "files together another": {
    "purpose": 1.0
  },
  "together another purpose": {
    "of": 1.0
  },
  "another purpose of": {
    "procedure": 1.0
  },
  "purpose of procedure": {
    "grouping": 1.0
  },
  "of procedure grouping": {
    "is": 1.0
  },
  "procedure grouping is": {
    "the": 1.0
  },
  "grouping is the": {
    "eventual": 1.0
  },
  "is the eventual": {
    "creation": 1.0
  },
  "the eventual creation": {
    "of": 1.0
  },
  "eventual creation of": {
    "a": 1.0
  },
  "creation of a": {
    "dynamic": 1.0
  },
  "of a dynamic": {
    "link": 0.5,
    "index": 0.5
  },
  "a dynamic link": {
    "library": 1.0
  },
  "dynamic link library": {
    "dll": 1.0
  },
  "link library dll": {
    "no": 1.0
  },
  "library dll no": {
    "matter": 1.0
  },
  "dll no matter": {
    "the": 1.0
  },
  "no matter the": {
    "reason": 1.0
  },
  "matter the reason": {
    "the": 1.0
  },
  "the reason the": {
    "module": 1.0
  },
  "reason the module": {
    "structure": 1.0
  },
  "module structure defines": {
    "the": 1.0
  },
  "structure defines the": {
    "method": 1.0
  },
  "defines the method": {
    "by": 1.0
  },
  "the method by": {
    "which": 1.0
  },
  "method by which": {
    "your": 1.0
  },
  "by which your": {
    "program": 1.0
  },
  "which your program": {
    "may": 1.0
  },
  "your program may": {
    "reflect": 1.0
  },
  "program may reflect": {
    "your": 1.0
  },
  "may reflect your": {
    "structura": 1.0
  },
  "reflect your structura": {
    "l": 1.0
  },
  "your structura l": {
    "ideas": 1.0
  },
  "structura l ideas": {
    "member": 1.0
  },
  "l ideas member": {
    "the": 1.0
  },
  "ideas member the": {
    "prototypes": 1.0
  },
  "member the prototypes": {
    "for": 1.0
  },
  "the prototypes for": {
    "procedure": 0.3333333333333333,
    "all": 0.3333333333333333,
    "createcrust": 0.3333333333333333
  },
  "prototypes for procedure": {
    "s": 1.0
  },
  "s which are": {
    "defined": 0.5,
    "globally": 0.5
  },
  "which are defined": {
    "in": 1.0
  },
  "are defined in": {
    "a": 0.5,
    "the": 0.5
  },
  "defined in a": {
    "source": 1.0
  },
  "in a source": {
    "file": 1.0
  },
  "a source file": {
    "other": 1.0
  },
  "source file other": {
    "than": 1.0
  },
  "file other than": {
    "the": 0.5,
    "their": 0.5
  },
  "other than the": {
    "program": 0.3333333333333333,
    "address": 0.3333333333333333,
    "physical": 0.3333333333333333
  },
  "than the program": {
    "file": 1.0
  },
  "the program file": {
    "must": 0.5,
    "to": 0.5
  },
  "program file must": {
    "be": 1.0
  },
  "file must be": {
    "declared": 0.5,
    "opened": 0.5
  },
  "must be declared": {
    "in": 1.0
  },
  "be declared in": {
    "a": 1.0
  },
  "in a module": {
    "structure": 1.0
  },
  "a module structure": {
    "within": 0.3333333333333333,
    "of": 0.3333333333333333,
    "which": 0.3333333333333333
  },
  "module structure within": {
    "a": 1.0
  },
  "structure within a": {
    "map": 0.5,
    "procedure": 0.5
  },
  "a map the": {
    "source": 1.0
  },
  "map the source": {
    "code": 1.0
  },
  "the source code": {
    "file": 0.3333333333333333,
    "for": 0.5,
    "definition": 0.16666666666666666
  },
  "source code file": {
    "specified": 0.1111111111111111,
    "beginning": 0.1111111111111111,
    "named": 0.1111111111111111,
    "myprog2": 0.3333333333333333,
    "which": 0.1111111111111111,
    "myprog3": 0.1111111111111111,
    "contains": 0.1111111111111111
  },
  "code file specified": {
    "by": 1.0
  },
  "file specified by": {
    "the": 1.0
  },
  "specified by the": {
    "module": 1.0
  },
  "by the module": {
    "structure": 1.0
  },
  "module structure must": {
    "begin": 1.0
  },
  "structure must begin": {
    "with": 1.0
  },
  "must begin with": {
    "a": 1.0
  },
  "begin with a": {
    "member": 1.0
  },
  "with a member": {
    "statement": 1.0
  },
  "a member statement": {
    "an": 0.3333333333333333,
    "is": 0.3333333333333333,
    "which": 0.3333333333333333
  },
  "member statement an": {
    "y": 1.0
  },
  "statement an y": {
    "source": 1.0
  },
  "an y source": {
    "code": 1.0
  },
  "y source code": {
    "file": 1.0
  },
  "code file beginning": {
    "with": 1.0
  },
  "file beginning with": {
    "a": 1.0
  },
  "beginning with a": {
    "member": 1.0
  },
  "member statement is": {
    "commonly": 1.0
  },
  "statement is commonly": {
    "referred": 1.0
  },
  "is commonly referred": {
    "to": 1.0
  },
  "commonly referred to": {
    "as": 1.0
  },
  "referred to as": {
    "a": 0.5,
    "its": 0.25,
    "parent": 0.25
  },
  "to as a": {
    "member": 0.5,
    "join": 0.5
  },
  "as a member": {
    "module": 1.0
  },
  "a member module": {
    "the": 0.08333333333333333,
    "also": 0.08333333333333333,
    "is": 0.08333333333333333,
    "s": 0.6666666666666666,
    "may": 0.08333333333333333
  },
  "member module the": {
    "member": 1.0
  },
  "module the member": {
    "statement": 1.0
  },
  "the member statement": {
    "specifies": 0.3333333333333333,
    "within": 0.3333333333333333,
    "poi": 0.3333333333333333
  },
  "member statement specifies": {
    "the": 1.0
  },
  "statement specifies the": {
    "filename": 1.0
  },
  "specifies the filename": {
    "of": 1.0
  },
  "the filename of": {
    "the": 1.0
  },
  "filename of the": {
    "program": 1.0
  },
  "of the program": {
    "source": 0.25,
    "map": 0.25,
    "in": 0.25,
    "not": 0.25
  },
  "the program source": {
    "file": 1.0
  },
  "program source file": {
    "to": 0.3333333333333333,
    "for": 0.3333333333333333,
    "the": 0.3333333333333333
  },
  "source file to": {
    "which": 1.0
  },
  "file to which": {
    "the": 0.5,
    "this": 0.5
  },
  "to which the": {
    "member": 0.5,
    "method": 0.5
  },
  "which the member": {
    "file": 1.0
  },
  "the member file": {
    "belongs": 1.0
  },
  "member file belongs": {
    "the": 1.0
  },
  "file belongs the": {
    "module": 1.0
  },
  "belongs the module": {
    "structure": 1.0
  },
  "module structure in": {
    "the": 1.0
  },
  "structure in the": {
    "map": 1.0
  },
  "in the map": {
    "poi": 0.3333333333333333,
    "structure": 0.3333333333333333,
    "in": 0.3333333333333333
  },
  "the map poi": {
    "nts": 1.0
  },
  "map poi nts": {
    "to": 1.0
  },
  "poi nts to": {
    "the": 1.0
  },
  "nts to the": {
    "member": 1.0
  },
  "to the member": {
    "source": 0.5,
    "proc1": 0.5
  },
  "the member source": {
    "file": 1.0
  },
  "member source file": {
    "and": 1.0
  },
  "source file and": {
    "the": 1.0
  },
  "file and the": {
    "member": 0.2,
    "order": 0.2,
    "item": 0.2,
    "product": 0.2,
    "report": 0.2
  },
  "and the member": {
    "statement": 1.0
  },
  "member statement within": {
    "that": 1.0
  },
  "statement within that": {
    "source": 1.0
  },
  "within that source": {
    "file": 0.5,
    "that": 0.5
  },
  "that source file": {
    "points": 1.0
  },
  "source file points": {
    "back": 1.0
  },
  "file points back": {
    "to": 1.0
  },
  "points back to": {
    "the": 1.0
  },
  "back to the": {
    "program": 0.25,
    "origin": 0.125,
    "primary": 0.125,
    "file": 0.125,
    "fir": 0.125,
    "client": 0.125,
    "database": 0.125
  },
  "source file for": {
    "example": 1.0
  },
  "file for example": {
    "a": 1.0
  },
  "for example a": {
    "source": 1.0
  },
  "example a source": {
    "code": 1.0
  },
  "a source code": {
    "file": 1.0
  },
  "code file named": {
    "myprog": 1.0
  },
  "file named myprog": {
    "clw": 1.0
  },
  "named myprog clw": {
    "contains": 1.0
  },
  "myprog clw contains": {
    "the": 1.0
  },
  "clw contains the": {
    "following": 1.0
  },
  "contains the following": {
    "code": 1.0
  },
  "the following code": {
    "program": 0.2727272727272727,
    "member": 0.36363636363636365,
    "proc1": 0.09090909090909091,
    "creates": 0.09090909090909091,
    "uses": 0.09090909090909091,
    "replaces": 0.09090909090909091
  },
  "following code program": {
    "begin": 1.0
  },
  "code program begin": {
    "global": 1.0
  },
  "program begin global": {
    "data": 1.0
  },
  "begin global data": {
    "declar": 0.3333333333333333,
    "declaration": 0.6666666666666666
  },
  "global data declar": {
    "ation": 1.0
  },
  "data declar ation": {
    "section": 1.0
  },
  "declar ation section": {
    "map": 1.0
  },
  "ation section map": {
    "the": 1.0
  },
  "section map the": {
    "global": 0.42857142857142855,
    "member": 0.42857142857142855,
    "local": 0.14285714285714285
  },
  "map the global": {
    "map": 1.0
  },
  "the global map": {
    "structure": 1.0
  },
  "global map structure": {
    "proc1": 0.3333333333333333,
    "module": 0.6666666666666666
  },
  "map structure proc1": {
    "procedure": 1.0
  },
  "structure proc1 procedure": {
    "a": 1.0
  },
  "proc1 procedure a": {
    "prototype": 1.0
  },
  "procedure a prototype": {
    "for": 1.0
  },
  "a prototype for": {
    "a": 1.0
  },
  "prototype for a": {
    "procedure": 1.0
  },
  "for a procedure": {
    "whose": 0.5,
    "which": 0.5
  },
  "a procedure whose": {
    "source": 1.0
  },
  "procedure whose source": {
    "code": 1.0
  },
  "whose source code": {
    "is": 1.0
  },
  "source code is": {
    "in": 1.0
  },
  "code is in": {
    "myprog": 0.5,
    "a": 0.5
  },
  "is in myprog": {
    "clw": 1.0
  },
  "in myprog clw": {
    "module": 0.5,
    "proc2": 0.5
  },
  "myprog clw module": {
    "myprog2": 1.0
  },
  "clw module myprog2": {
    "a": 1.0
  },
  "module myprog2 a": {
    "separate": 1.0
  },
  "myprog2 a separate": {
    "source": 1.0
  },
  "a separate source": {
    "file": 1.0
  },
  "source file myprog2": {
    "clw": 1.0
  },
  "file myprog2 clw": {
    "proc2": 0.125,
    "declared": 0.125,
    "therefore": 0.125,
    "and": 0.125,
    "proc1": 0.25,
    "now": 0.25
  },
  "myprog2 clw proc2": {
    "procedure": 1.0
  },
  "clw proc2 procedure": {
    "contains": 0.6666666666666666,
    "begin": 0.3333333333333333
  },
  "proc2 procedure contains": {
    "another": 0.6666666666666666,
    "a": 0.3333333333333333
  },
  "procedure contains another": {
    "procedure": 1.0
  },
  "contains another procedure": {
    "end": 1.0
  },
  "another procedure end": {
    "end": 1.0
  },
  "procedure end end": {
    "module": 1.0
  },
  "end end module": {
    "end": 1.0
  },
  "end module end": {
    "end": 1.0
  },
  "module end end": {
    "map": 1.0
  },
  "end end map": {
    "code": 0.42857142857142855,
    "var1": 0.14285714285714285,
    "proc1": 0.14285714285714285,
    "proc2": 0.14285714285714285,
    "proclocalvariable": 0.14285714285714285
  },
  "end map code": {
    "begin": 1.0
  },
  "map code begin": {
    "program": 1.0
  },
  "code begin program": {
    "executable": 1.0
  },
  "begin program executable": {
    "code": 1.0
  },
  "program executable code": {
    "some": 1.0
  },
  "executable code some": {
    "executable": 1.0
  },
  "code some executable": {
    "source": 1.0
  },
  "some executable source": {
    "code": 1.0
  },
  "executable source code": {
    "proc1": 0.1,
    "a": 0.2,
    "in": 0.1,
    "the": 0.4,
    "proc2": 0.1,
    "for": 0.1
  },
  "source code proc1": {
    "procedure": 1.0
  },
  "code proc1 procedure": {
    "begin": 1.0
  },
  "proc1 procedure begin": {
    "local": 1.0
  },
  "procedure begin local": {
    "data": 1.0
  },
  "begin local data": {
    "declaration": 1.0
  },
  "local data declaration": {
    "section": 1.0
  },
  "declaration section code": {
    "begin": 1.0
  },
  "section code begin": {
    "procedure": 1.0
  },
  "code begin procedure": {
    "executable": 1.0
  },
  "begin procedure executable": {
    "code": 1.0
  },
  "procedure executable code": {
    "some": 0.7142857142857143,
    "proc2": 0.14285714285714285,
    "do": 0.14285714285714285
  },
  "source code a": {
    "second": 0.3333333333333333,
    "third": 0.3333333333333333,
    "procedure": 0.3333333333333333
  },
  "code a second": {
    "source": 1.0
  },
  "a second source": {
    "code": 1.0
  },
  "second source code": {
    "file": 1.0
  },
  "code file myprog2": {
    "clw": 1.0
  },
  "myprog2 clw declared": {
    "in": 1.0
  },
  "clw declared in": {
    "t": 1.0
  },
  "declared in t": {
    "he": 1.0
  },
  "in t he": {
    "module": 1.0
  },
  "t he module": {
    "structure": 1.0
  },
  "he module structure": {
    "of": 1.0
  },
  "module structure of": {
    "the": 0.75,
    "a": 0.25
  },
  "structure of the": {
    "program": 0.25,
    "member": 0.25,
    "second": 0.25,
    "map": 0.25
  },
  "the program map": {
    "in": 0.14285714285714285,
    "contains": 0.14285714285714285,
    "but": 0.14285714285714285,
    "a": 0.14285714285714285,
    "must": 0.14285714285714285,
    "or": 0.14285714285714285,
    "declares": 0.14285714285714285
  },
  "program map in": {
    "the": 1.0
  },
  "map in the": {
    "example": 0.3333333333333333,
    "program": 0.3333333333333333,
    "source": 0.3333333333333333
  },
  "in the example": {
    "code": 1.0
  },
  "the example code": {
    "above": 1.0
  },
  "example code above": {
    "contains": 1.0
  },
  "code above contains": {
    "the": 1.0
  },
  "above contains the": {
    "following": 1.0
  },
  "following code member": {
    "myprog": 1.0
  },
  "code member myprog": {
    "member": 0.25,
    "the": 0.75
  },
  "member myprog member": {
    "module": 1.0
  },
  "myprog member module": {
    "of": 1.0
  },
  "member module of": {
    "the": 1.0
  },
  "module of the": {
    "program": 1.0
  },
  "the program in": {
    "myprog": 0.5,
    "local": 0.5
  },
  "program in myprog": {
    "clw": 1.0
  },
  "myprog clw proc2": {
    "procedure": 1.0
  },
  "proc2 procedure begin": {
    "local": 1.0
  },
  "source code in": {
    "this": 1.0
  },
  "code in this": {
    "example": 1.0
  },
  "in this example": {
    "the": 0.2727272727272727,
    "anotherclass": 0.09090909090909091,
    "were": 0.09090909090909091,
    "a": 0.09090909090909091,
    "parts": 0.09090909090909091,
    "code": 0.09090909090909091,
    "sample": 0.09090909090909091,
    "update": 0.09090909090909091,
    "is": 0.09090909090909091
  },
  "this example the": {
    "program": 0.3333333333333333,
    "manipulateaandb": 0.3333333333333333,
    "key": 0.3333333333333333
  },
  "example the program": {
    "has": 1.0
  },
  "the program has": {
    "two": 1.0
  },
  "program has two": {
    "procedure": 1.0
  },
  "has two procedure": {
    "s": 1.0
  },
  "two procedure s": {
    "proc1": 1.0
  },
  "procedure s proc1": {
    "and": 1.0
  },
  "s proc1 and": {
    "proc2": 1.0
  },
  "proc1 and proc2": {
    "the": 0.25,
    "clarion": 0.5,
    "myroutine": 0.25
  },
  "and proc2 the": {
    "source": 1.0
  },
  "proc2 the source": {
    "code": 1.0
  },
  "source code for": {
    "proc2": 0.25,
    "procedure": 0.25,
    "all": 0.25,
    "an": 0.25
  },
  "code for proc2": {
    "is": 1.0
  },
  "for proc2 is": {
    "in": 1.0
  },
  "proc2 is in": {
    "a": 0.5,
    "source": 0.5
  },
  "is in a": {
    "separate": 0.5,
    "class": 0.5
  },
  "in a separate": {
    "file": 1.0
  },
  "a separate file": {
    "myprog2": 1.0
  },
  "separate file myprog2": {
    "clw": 1.0
  },
  "myprog2 clw therefore": {
    "the": 1.0
  },
  "clw therefore the": {
    "program": 1.0
  },
  "therefore the program": {
    "map": 1.0
  },
  "program map contains": {
    "a": 1.0
  },
  "map contains a": {
    "module": 1.0
  },
  "contains a module": {
    "stru": 1.0
  },
  "a module stru": {
    "cture": 1.0
  },
  "module stru cture": {
    "which": 1.0
  },
  "stru cture which": {
    "declares": 1.0
  },
  "cture which declares": {
    "that": 1.0
  },
  "which declares that": {
    "proc2": 1.0
  },
  "declares that proc2": {
    "is": 1.0
  },
  "that proc2 is": {
    "in": 1.0
  },
  "is in source": {
    "file": 1.0
  },
  "in source file": {
    "myprog2": 1.0
  },
  "myprog2 clw and": {
    "the": 1.0
  },
  "clw and the": {
    "first": 1.0
  },
  "and the first": {
    "statement": 1.0
  },
  "the first statement": {
    "in": 0.3333333333333333,
    "that": 0.3333333333333333,
    "within": 0.3333333333333333
  },
  "first statement in": {
    "myprog2": 1.0
  },
  "statement in myprog2": {
    "clw": 1.0
  },
  "in myprog2 clw": {
    "is": 1.0
  },
  "myprog2 clw is": {
    "a": 0.5,
    "duplicated": 0.5
  },
  "clw is a": {
    "member": 1.0
  },
  "is a member": {
    "statement": 1.0
  },
  "member statement which": {
    "tells": 1.0
  },
  "statement which tells": {
    "the": 1.0
  },
  "which tells the": {
    "compiler": 1.0
  },
  "tells the compiler": {
    "the": 1.0
  },
  "the compiler the": {
    "program": 1.0
  },
  "compiler the program": {
    "file": 1.0
  },
  "program file to": {
    "which": 1.0
  },
  "to which this": {
    "member": 1.0
  },
  "which this member": {
    "belongs": 1.0
  },
  "this member belongs": {
    "7": 1.0
  },
  "member belongs 7": {
    "program": 1.0
  },
  "belongs 7 program": {
    "structure": 1.0
  },
  "7 program structure": {
    "member": 1.0
  },
  "program structure member": {
    "maps": 1.0
  },
  "structure member maps": {
    "a": 1.0
  },
  "member maps a": {
    "member": 1.0
  },
  "maps a member": {
    "module": 1.0
  },
  "member module also": {
    "has": 1.0
  },
  "module also has": {
    "a": 1.0
  },
  "also has a": {
    "data": 1.0
  },
  "data declaration se": {
    "ction": 1.0
  },
  "declaration se ction": {
    "it": 1.0
  },
  "se ction it": {
    "begins": 1.0
  },
  "ction it begins": {
    "following": 1.0
  },
  "it begins following": {
    "the": 1.0
  },
  "begins following the": {
    "keyword": 1.0
  },
  "the keyword member": {
    "and": 1.0
  },
  "keyword member and": {
    "ends": 1.0
  },
  "member and ends": {
    "at": 1.0
  },
  "and ends at": {
    "the": 1.0
  },
  "ends at the": {
    "first": 1.0
  },
  "at the first": {
    "procedure": 1.0
  },
  "the first procedure": {
    "statement": 1.0
  },
  "first procedure statement": {
    "in": 1.0
  },
  "procedure statement in": {
    "the": 1.0
  },
  "statement in the": {
    "module": 1.0
  },
  "in the module": {
    "any": 0.2,
    "structure": 0.4,
    "objects": 0.2,
    "attribute": 0.2
  },
  "the module any": {
    "variable": 1.0
  },
  "module any variable": {
    "or": 1.0
  },
  "any variable or": {
    "data": 1.0
  },
  "variable or data": {
    "structure": 1.0
  },
  "or data structure": {
    "declared": 1.0
  },
  "data structure declared": {
    "in": 1.0
  },
  "structure declared in": {
    "the": 1.0
  },
  "in the data": {
    "declaration": 0.5,
    "file": 0.5
  },
  "declaration section of": {
    "a": 1.0
  },
  "section of a": {
    "member": 1.0
  },
  "of a member": {
    "module": 1.0
  },
  "member module is": {
    "local": 1.0
  },
  "module is local": {
    "to": 1.0
  },
  "is local to": {
    "that": 0.5,
    "the": 0.5
  },
  "to that member": {
    "module": 1.0
  },
  "that member module": {
    "and": 0.5,
    "unless": 0.5
  },
  "member module and": {
    "is": 1.0
  },
  "module and is": {
    "allocated": 1.0
  },
  "and is allocated": {
    "static": 1.0
  },
  "is allocated static": {
    "memory": 1.0
  },
  "allocated static memory": {
    "this": 1.0
  },
  "static memory this": {
    "means": 1.0
  },
  "memory this means": {
    "it": 0.5,
    "the": 0.5
  },
  "this means it": {
    "may": 1.0
  },
  "means it may": {
    "be": 1.0
  },
  "it may be": {
    "accessed": 0.2,
    "called": 0.4,
    "used": 0.4
  },
  "may be accessed": {
    "only": 0.5,
    "the": 0.5
  },
  "be accessed only": {
    "by": 1.0
  },
  "accessed only by": {
    "a": 1.0
  },
  "only by a": {
    "procedure": 1.0
  },
  "by a procedure": {
    "which": 1.0
  },
  "procedure which resides": {
    "in": 1.0
  },
  "which resides in": {
    "that": 0.5,
    "another": 0.5
  },
  "resides in that": {
    "member": 1.0
  },
  "in that member": {
    "module": 1.0
  },
  "member module unless": {
    "passed": 1.0
  },
  "module unless passed": {
    "as": 1.0
  },
  "a parameter to": {
    "another": 1.0
  },
  "parameter to another": {
    "procedure": 1.0
  },
  "to another procedure": {
    "which": 1.0
  },
  "another procedure which": {
    "resides": 1.0
  },
  "resides in another": {
    "source": 1.0
  },
  "in another source": {
    "module": 1.0
  },
  "another source module": {
    "essentially": 1.0
  },
  "source module essentially": {
    "making": 1.0
  },
  "module essentially making": {
    "them": 1.0
  },
  "essentially making them": {
    "private": 1.0
  },
  "making them private": {
    "variables": 1.0
  },
  "them private variables": {
    "in": 1.0
  },
  "private variables in": {
    "addition": 1.0
  },
  "variables in addition": {
    "to": 1.0
  },
  "in addition to": {
    "data": 0.5,
    "public": 0.25,
    "its": 0.25
  },
  "addition to data": {
    "declaration": 0.5,
    "declarations": 0.5
  },
  "to data declaration": {
    "s": 1.0
  },
  "data declaration s": {
    "a": 1.0
  },
  "declaration s a": {
    "member": 1.0
  },
  "s a member": {
    "module": 1.0
  },
  "member module s": {
    "data": 0.5555555555555556,
    "map": 0.4444444444444444
  },
  "module s data": {
    "declaration": 0.5714285714285714,
    "section": 0.42857142857142855
  },
  "declaration section may": {
    "also": 0.6666666666666666,
    "declare": 0.3333333333333333
  },
  "section may also": {
    "contain": 1.0
  },
  "may also contain": {
    "its": 0.6666666666666666,
    "module": 0.3333333333333333
  },
  "also contain its": {
    "own": 1.0
  },
  "contain its own": {
    "map": 0.6666666666666666,
    "data": 0.3333333333333333
  },
  "its own map": {
    "structure": 1.0
  },
  "own map structure": {
    "this": 0.3333333333333333,
    "a": 0.3333333333333333,
    "declaring": 0.3333333333333333
  },
  "map structure this": {
    "map": 0.5,
    "is": 0.5
  },
  "structure this map": {
    "is": 1.0
  },
  "this map is": {
    "structurally": 1.0
  },
  "map is structurally": {
    "the": 1.0
  },
  "is structurally the": {
    "same": 1.0
  },
  "structurally the same": {
    "as": 1.0
  },
  "same as the": {
    "map": 1.0
  },
  "as the map": {
    "in": 1.0
  },
  "the map in": {
    "the": 0.3333333333333333,
    "myprog2": 0.3333333333333333,
    "myprog3": 0.3333333333333333
  },
  "the program module": {
    "and": 1.0
  },
  "program module and": {
    "declares": 1.0
  },
  "module and declares": {
    "procedure": 1.0
  },
  "and declares procedure": {
    "prototypes": 1.0
  },
  "declares procedure prototypes": {
    "which": 1.0
  },
  "procedure prototypes which": {
    "are": 1.0
  },
  "prototypes which are": {
    "available": 1.0
  },
  "which are available": {
    "locally": 1.0
  },
  "are available locally": {
    "within": 1.0
  },
  "available locally within": {
    "the": 1.0
  },
  "locally within the": {
    "member": 0.5,
    "procedure": 0.5
  },
  "within the member": {
    "module": 1.0
  },
  "the member module": {
    "using": 0.125,
    "s": 0.125,
    "proc1": 0.125,
    "m": 0.125,
    "map": 0.125,
    "data": 0.125,
    "a": 0.25
  },
  "member module using": {
    "the": 1.0
  },
  "module using the": {
    "prev": 1.0
  },
  "using the prev": {
    "ious": 1.0
  },
  "the prev ious": {
    "example": 1.0
  },
  "prev ious example": {
    "a": 1.0
  },
  "ious example a": {
    "file": 1.0
  },
  "example a file": {
    "named": 1.0
  },
  "a file named": {
    "myprog": 1.0
  },
  "declaration section map": {
    "the": 1.0
  },
  "map structure module": {
    "myprog2": 0.6666666666666666,
    "myprog3": 0.3333333333333333
  },
  "structure module myprog2": {
    "a": 1.0
  },
  "myprog2 clw proc1": {
    "procedure": 1.0
  },
  "clw proc1 procedure": {
    "contains": 1.0
  },
  "proc1 procedure contains": {
    "a": 1.0
  },
  "procedure contains a": {
    "procedure": 0.6666666666666666,
    "local": 0.3333333333333333
  },
  "contains a procedure": {
    "end": 1.0
  },
  "a procedure end": {
    "end": 1.0
  },
  "source code the": {
    "second": 0.5,
    "proc2": 0.25,
    "procedure": 0.25
  },
  "code the second": {
    "source": 1.0
  },
  "the second source": {
    "code": 1.0
  },
  "myprog2 clw now": {
    "contains": 1.0
  },
  "clw now contains": {
    "the": 1.0
  },
  "now contains the": {
    "following": 0.6666666666666666,
    "order": 0.3333333333333333
  },
  "member myprog the": {
    "beginning": 1.0
  },
  "myprog the beginning": {
    "of": 1.0
  },
  "map the member": {
    "map": 1.0
  },
  "the member map": {
    "structure": 1.0
  },
  "member map structure": {
    "proc2": 0.6666666666666666,
    "module": 0.3333333333333333
  },
  "map structure proc2": {
    "procedure": 1.0
  },
  "structure proc2 procedure": {
    "a": 0.3333333333333333,
    "an": 0.3333333333333333,
    "contains": 0.3333333333333333
  },
  "proc2 procedure a": {
    "prototype": 1.0
  },
  "procedure which is": {
    "local": 0.3333333333333333,
    "not": 0.3333333333333333,
    "very": 0.3333333333333333
  },
  "which is local": {
    "to": 1.0
  },
  "to the myprog2": {
    "clw": 1.0
  },
  "the myprog2 clw": {
    "member": 1.0
  },
  "myprog2 clw member": {
    "module": 1.0
  },
  "clw member module": {
    "end": 0.3333333333333333,
    "proc1": 0.3333333333333333,
    "map": 0.3333333333333333
  },
  "member module end": {
    "end": 1.0
  },
  "end map var1": {
    "byte": 1.0
  },
  "map var1 byte": {
    "a": 1.0
  },
  "var1 byte a": {
    "static": 1.0
  },
  "byte a static": {
    "variable": 1.0
  },
  "a static variable": {
    "local": 1.0
  },
  "static variable local": {
    "to": 1.0
  },
  "variable local to": {
    "the": 1.0
  },
  "the member proc1": {
    "procedure": 1.0
  },
  "member proc1 procedure": {
    "begin": 1.0
  },
  "source code proc2": {
    "procedure": 1.0
  },
  "code proc2 procedure": {
    "begin": 1.0
  },
  "code the proc2": {
    "procedure": 1.0
  },
  "the proc2 procedure": {
    "was": 1.0
  },
  "proc2 procedure was": {
    "not": 1.0
  },
  "procedure was not": {
    "declared": 1.0
  },
  "was not declared": {
    "in": 1.0
  },
  "not declared in": {
    "the": 1.0
  },
  "program map but": {
    "only": 1.0
  },
  "map but only": {
    "in": 1.0
  },
  "but only in": {
    "the": 1.0
  },
  "only in the": {
    "member": 0.25,
    "modules": 0.5,
    "proc1": 0.25
  },
  "in the member": {
    "module": 0.8333333333333334,
    "data": 0.16666666666666666
  },
  "module s map": {
    "therefore": 0.25,
    "may": 0.5,
    "the": 0.25
  },
  "s map therefore": {
    "it": 1.0
  },
  "map therefore it": {
    "may": 1.0
  },
  "therefore it may": {
    "be": 1.0
  },
  "be called only": {
    "by": 1.0
  },
  "called only by": {
    "other": 0.5,
    "the": 0.5
  },
  "only by other": {
    "procedure": 1.0
  },
  "by other procedure": {
    "s": 1.0
  },
  "other procedure s": {
    "within": 0.5,
    "only": 0.5
  },
  "procedure s within": {
    "the": 1.0
  },
  "s within the": {
    "myprog2": 1.0
  },
  "within the myprog2": {
    "clw": 1.0
  },
  "member module proc1": {
    "var1": 0.5,
    "and": 0.5
  },
  "module proc1 var1": {
    "was": 1.0
  },
  "proc1 var1 was": {
    "declared": 1.0
  },
  "var1 was declared": {
    "in": 1.0
  },
  "was declared in": {
    "the": 1.0
  },
  "the member data": {
    "declaration": 1.0
  },
  "member data declaration": {
    "section": 1.0
  },
  "declaration section therefore": {
    "it": 1.0
  },
  "section therefore it": {
    "may": 1.0
  },
  "may be used": {
    "only": 0.4,
    "they": 0.2,
    "in": 0.2,
    "interchangeably": 0.2
  },
  "be used only": {
    "by": 1.0
  },
  "used only by": {
    "the": 0.5,
    "th": 0.5
  },
  "only by the": {
    "procedure": 0.5,
    "proc1": 0.5
  },
  "by the procedure": {
    "s": 1.0
  },
  "procedure s actually": {
    "residing": 1.0
  },
  "s actually residing": {
    "in": 1.0
  },
  "actually residing in": {
    "the": 1.0
  },
  "residing in the": {
    "member": 1.0
  },
  "module proc1 and": {
    "proc2": 1.0
  },
  "and proc2 clarion": {
    "language": 1.0
  },
  "proc2 clarion language": {
    "programming": 1.0
  },
  "programming guide 8": {
    "modules": 1.0
  },
  "guide 8 modules": {
    "within": 1.0
  },
  "8 modules within": {
    "member": 1.0
  },
  "member maps just": {
    "as": 1.0
  },
  "maps just as": {
    "in": 1.0
  },
  "just as in": {
    "the": 1.0
  },
  "as in the": {
    "program": 0.5,
    "base": 0.5
  },
  "program map a": {
    "member": 1.0
  },
  "map a member": {
    "module": 1.0
  },
  "s map may": {
    "also": 0.3333333333333333,
    "not": 0.3333333333333333,
    "contain": 0.3333333333333333
  },
  "map may also": {
    "contain": 1.0
  },
  "also contain module": {
    "structures": 1.0
  },
  "contain module structures": {
    "if": 0.5,
    "which": 0.5
  },
  "module structures if": {
    "the": 1.0
  },
  "structures if the": {
    "procedure": 1.0
  },
  "if the procedure": {
    "s": 1.0
  },
  "s prototyped are": {
    "in": 1.0
  },
  "prototyped are in": {
    "separate": 1.0
  },
  "are in separate": {
    "source": 1.0
  },
  "in separate source": {
    "files": 1.0
  },
  "source files any": {
    "procedure": 1.0
  },
  "files any procedure": {
    "which": 1.0
  },
  "any procedure which": {
    "is": 1.0
  },
  "which is not": {
    "prototyped": 1.0
  },
  "is not prototyped": {
    "in": 1.0
  },
  "not prototyped in": {
    "the": 1.0
  },
  "prototyped in the": {
    "program": 0.3333333333333333,
    "member": 0.3333333333333333,
    "class": 0.3333333333333333
  },
  "program map must": {
    "be": 1.0
  },
  "map must be": {
    "prototyped": 1.0
  },
  "member module m": {
    "ap": 1.0
  },
  "module m ap": {
    "in": 1.0
  },
  "m ap in": {
    "which": 1.0
  },
  "ap in which": {
    "it": 1.0
  },
  "it resides this": {
    "means": 1.0
  },
  "resides this means": {
    "that": 1.0
  },
  "this means that": {
    "identical": 0.125,
    "you": 0.125,
    "virtual": 0.125,
    "all": 0.125,
    "despite": 0.125,
    "a": 0.25,
    "the": 0.125
  },
  "means that identical": {
    "procedure": 1.0
  },
  "that identical procedure": {
    "prototypes": 1.0
  },
  "identical procedure prototypes": {
    "are": 1.0
  },
  "procedure prototypes are": {
    "required": 1.0
  },
  "prototypes are required": {
    "in": 1.0
  },
  "are required in": {
    "the": 1.0
  },
  "required in the": {
    "module": 0.5,
    "filter": 0.5
  },
  "of the member": {
    "module": 1.0
  },
  "member module map": {
    "in": 0.25,
    "end": 0.25,
    "structures": 0.5
  },
  "module map in": {
    "the": 1.0
  },
  "in the source": {
    "code": 0.5,
    "file": 0.5
  },
  "code file which": {
    "calls": 1.0
  },
  "file which calls": {
    "the": 1.0
  },
  "which calls the": {
    "procedure": 0.25,
    "steer": 0.25,
    "derived": 0.25,
    "base": 0.25
  },
  "calls the procedure": {
    "in": 1.0
  },
  "procedure in the": {
    "map": 0.3333333333333333,
    "same": 0.3333333333333333,
    "module": 0.3333333333333333
  },
  "the map structure": {
    "of": 0.5,
    "this": 0.5
  },
  "map structure of": {
    "the": 1.0
  },
  "of the second": {
    "member": 0.5,
    "access": 0.5
  },
  "the second member": {
    "module": 1.0
  },
  "second member module": {
    "which": 1.0
  },
  "member module which": {
    "actually": 1.0
  },
  "module which actually": {
    "cont": 1.0
  },
  "which actually cont": {
    "ains": 1.0
  },
  "actually cont ains": {
    "the": 1.0
  },
  "cont ains the": {
    "source": 1.0
  },
  "ains the source": {
    "code": 1.0
  },
  "source code definition": {
    "of": 1.0
  },
  "code definition of": {
    "the": 1.0
  },
  "definition of the": {
    "procedure": 0.3333333333333333,
    "virtual": 0.6666666666666666
  },
  "the procedure again": {
    "using": 1.0
  },
  "procedure again using": {
    "the": 1.0
  },
  "again using the": {
    "previous": 0.3333333333333333,
    "files": 0.6666666666666666
  },
  "using the previous": {
    "examples": 0.3333333333333333,
    "example": 0.6666666666666666
  },
  "the previous examples": {
    "a": 1.0
  },
  "previous examples a": {
    "file": 1.0
  },
  "examples a file": {
    "named": 1.0
  },
  "structure module myprog3": {
    "a": 1.0
  },
  "module myprog3 a": {
    "separate": 1.0
  },
  "myprog3 a separate": {
    "source": 1.0
  },
  "source file myprog3": {
    "clw": 1.0
  },
  "file myprog3 clw": {
    "proc2": 0.5,
    "contains": 0.5
  },
  "myprog3 clw proc2": {
    "procedure": 1.0
  },
  "end map proc1": {
    "procedure": 1.0
  },
  "map proc1 procedure": {
    "begin": 1.0
  },
  "executable code proc2": {
    "a": 1.0
  },
  "code proc2 a": {
    "call": 1.0
  },
  "proc2 a call": {
    "to": 1.0
  },
  "a call to": {
    "proc2": 1.0
  },
  "call to proc2": {
    "some": 1.0
  },
  "to proc2 some": {
    "executable": 1.0
  },
  "proc2 some executable": {
    "source": 1.0
  },
  "code a third": {
    "source": 1.0
  },
  "a third source": {
    "code": 1.0
  },
  "third source code": {
    "file": 1.0
  },
  "code file myprog3": {
    "clw": 1.0
  },
  "myprog3 clw contains": {
    "the": 1.0
  },
  "proc2 procedure an": {
    "identical": 1.0
  },
  "procedure an identical": {
    "procedure": 1.0
  },
  "an identical procedure": {
    "prototype": 1.0
  },
  "identical procedure prototype": {
    "to": 1.0
  },
  "procedure prototype to": {
    "the": 1.0
  },
  "prototype to the": {
    "prototype": 1.0
  },
  "to the prototype": {
    "declared": 0.5,
    "of": 0.5
  },
  "the prototype declared": {
    "in": 1.0
  },
  "prototype declared in": {
    "the": 1.0
  },
  "in the myprog2": {
    "clw": 1.0
  },
  "module map end": {
    "end": 1.0
  },
  "map end end": {
    "map": 1.0
  },
  "end map proc2": {
    "procedure": 1.0
  },
  "map proc2 procedure": {
    "begin": 1.0
  },
  "code the procedure": {
    "prototype": 1.0
  },
  "the procedure prototype": {
    "for": 1.0
  },
  "procedure prototype for": {
    "proc2": 0.6666666666666666,
    "the": 0.3333333333333333
  },
  "prototype for proc2": {
    "in": 0.5,
    "may": 0.5
  },
  "for proc2 in": {
    "the": 1.0
  },
  "proc2 in the": {
    "module": 1.0
  },
  "of the map": {
    "in": 1.0
  },
  "map in myprog2": {
    "clw": 1.0
  },
  "clw is duplicated": {
    "in": 1.0
  },
  "is duplicated in": {
    "the": 1.0
  },
  "duplicated in the": {
    "map": 1.0
  },
  "map in myprog3": {
    "clw": 1.0
  },
  "in myprog3 clw": {
    "this": 1.0
  },
  "myprog3 clw this": {
    "duplication": 1.0
  },
  "clw this duplication": {
    "is": 1.0
  },
  "this duplication is": {
    "required": 1.0
  },
  "duplication is required": {
    "for": 1.0
  },
  "is required for": {
    "all": 0.3333333333333333,
    "every": 0.3333333333333333,
    "the": 0.3333333333333333
  },
  "required for all": {
    "procedure": 1.0
  },
  "for all procedure": {
    "s": 1.0
  },
  "procedure s declared": {
    "in": 1.0
  },
  "s declared in": {
    "a": 1.0
  },
  "s map the": {
    "procedure": 1.0
  },
  "map the procedure": {
    "prototype": 1.0
  },
  "for proc2 may": {
    "be": 1.0
  },
  "proc2 may be": {
    "placed": 1.0
  },
  "may be placed": {
    "in": 1.0
  },
  "be placed in": {
    "as": 1.0
  },
  "placed in as": {
    "many": 1.0
  },
  "in as many": {
    "member": 0.3333333333333333,
    "modules": 0.3333333333333333,
    "files": 0.3333333333333333
  },
  "as many member": {
    "module": 1.0
  },
  "many member module": {
    "map": 1.0
  },
  "module map structures": {
    "within": 0.5,
    "only": 0.5
  },
  "map structures within": {
    "its": 1.0
  },
  "structures within its": {
    "module": 1.0
  },
  "within its module": {
    "structure": 1.0
  },
  "its module structure": {
    "as": 1.0
  },
  "module structure as": {
    "are": 1.0
  },
  "structure as are": {
    "needed": 1.0
  },
  "as are needed": {
    "to": 1.0
  },
  "are needed to": {
    "allow": 1.0
  },
  "needed to allow": {
    "as": 1.0
  },
  "to allow as": {
    "many": 1.0
  },
  "allow as many": {
    "procedure": 1.0
  },
  "as many procedure": {
    "s": 1.0
  },
  "many procedure s": {
    "to": 1.0
  },
  "procedure s to": {
    "call": 1.0
  },
  "s to call": {
    "it": 1.0
  },
  "to call it": {
    "as": 1.0
  },
  "call it as": {
    "need": 1.0
  },
  "it as need": {
    "to": 1.0
  },
  "as need to": {
    "this": 1.0
  },
  "need to this": {
    "allows": 1.0
  },
  "to this allows": {
    "you": 1.0
  },
  "this allows you": {
    "to": 1.0
  },
  "allows you to": {
    "explicitly": 0.05263157894736842,
    "declare": 0.10526315789473684,
    "provide": 0.05263157894736842,
    "derive": 0.05263157894736842,
    "call": 0.05263157894736842,
    "re": 0.05263157894736842,
    "incrementally": 0.10526315789473684,
    "set": 0.05263157894736842,
    "write": 0.10526315789473684,
    "send": 0.05263157894736842,
    "append": 0.05263157894736842,
    "specify": 0.21052631578947367,
    "detect": 0.05263157894736842
  },
  "you to explicitly": {
    "declare": 1.0
  },
  "to explicitly declare": {
    "and": 1.0
  },
  "explicitly declare and": {
    "use": 1.0
  },
  "declare and use": {
    "proc2": 1.0
  },
  "and use proc2": {
    "only": 1.0
  },
  "use proc2 only": {
    "in": 1.0
  },
  "proc2 only in": {
    "the": 1.0
  },
  "in the modules": {
    "that": 0.5,
    "in": 0.5
  },
  "the modules that": {
    "need": 1.0
  },
  "modules that need": {
    "it": 1.0
  },
  "that need it": {
    "and": 1.0
  },
  "need it and": {
    "in": 1.0
  },
  "it and in": {
    "as": 1.0
  },
  "and in as": {
    "many": 1.0
  },
  "as many modules": {
    "as": 1.0
  },
  "many modules as": {
    "actually": 1.0
  },
  "modules as actually": {
    "do": 1.0
  },
  "as actually do": {
    "need": 1.0
  },
  "actually do need": {
    "it": 1.0
  },
  "do need it": {
    "there": 1.0
  },
  "need it there": {
    "is": 1.0
  },
  "it there is": {
    "an": 1.0
  },
  "there is an": {
    "a": 0.5,
    "oop": 0.5
  },
  "is an a": {
    "dvantage": 1.0
  },
  "an a dvantage": {
    "to": 1.0
  },
  "a dvantage to": {
    "explicitly": 1.0
  },
  "dvantage to explicitly": {
    "declaring": 1.0
  },
  "to explicitly declaring": {
    "all": 1.0
  },
  "explicitly declaring all": {
    "procedure": 1.0
  },
  "declaring all procedure": {
    "s": 1.0
  },
  "procedure s in": {
    "the": 0.3333333333333333,
    "member": 0.6666666666666666
  },
  "s in the": {
    "program": 1.0
  },
  "program in local": {
    "member": 1.0
  },
  "in local member": {
    "maps": 1.0
  },
  "local member maps": {
    "instead": 1.0
  },
  "member maps instead": {
    "of": 1.0
  },
  "maps instead of": {
    "a": 1.0
  },
  "instead of a": {
    "single": 0.6666666666666666,
    "primary": 0.3333333333333333
  },
  "of a single": {
    "global": 0.5,
    "record": 0.5
  },
  "a single global": {
    "map": 1.0
  },
  "single global map": {
    "that": 1.0
  },
  "global map that": {
    "advantage": 1.0
  },
  "map that advantage": {
    "is": 1.0
  },
  "that advantage is": {
    "compile": 1.0
  },
  "advantage is compile": {
    "time": 1.0
  },
  "is compile time": {
    "whenever": 1.0
  },
  "compile time whenever": {
    "you": 1.0
  },
  "time whenever you": {
    "add": 1.0
  },
  "whenever you add": {
    "a": 1.0
  },
  "you add a": {
    "procedure": 1.0
  },
  "add a procedure": {
    "to": 1.0
  },
  "a procedure to": {
    "a": 0.5,
    "serve": 0.5
  },
  "procedure to a": {
    "global": 1.0
  },
  "to a global": {
    "map": 1.0
  },
  "a global map": {
    "you": 1.0
  },
  "global map you": {
    "change": 1.0
  },
  "map you change": {
    "the": 1.0
  },
  "you change the": {
    "9": 1.0
  },
  "change the 9": {
    "program": 1.0
  },
  "the 9 program": {
    "structure": 1.0
  },
  "9 program structure": {
    "program": 1.0
  },
  "program structure program": {
    "module": 1.0
  },
  "structure program module": {
    "which": 1.0
  },
  "program module which": {
    "forces": 1.0
  },
  "module which forces": {
    "a": 1.0
  },
  "which forces a": {
    "re": 1.0
  },
  "forces a re": {
    "compilation": 1.0
  },
  "a re compilation": {
    "of": 1.0
  },
  "re compilation of": {
    "the": 1.0
  },
  "compilation of the": {
    "entire": 1.0
  },
  "of the entire": {
    "application": 0.5,
    "expression": 0.5
  },
  "the entire application": {
    "by": 1.0
  },
  "entire application by": {
    "explicitly": 1.0
  },
  "application by explicitly": {
    "prototyping": 1.0
  },
  "by explicitly prototyping": {
    "all": 1.0
  },
  "explicitly prototyping all": {
    "the": 0.5,
    "of": 0.5
  },
  "prototyping all the": {
    "application": 1.0
  },
  "all the application": {
    "s": 1.0
  },
  "the application s": {
    "procedure": 1.0
  },
  "application s procedure": {
    "s": 1.0
  },
  "s procedure s": {
    "in": 1.0
  },
  "s in member": {
    "maps": 0.5,
    "module": 0.5
  },
  "in member maps": {
    "only": 1.0
  },
  "member maps only": {
    "in": 1.0
  },
  "maps only in": {
    "the": 1.0
  },
  "the modules in": {
    "which": 1.0
  },
  "modules in which": {
    "the": 1.0
  },
  "in which the": {
    "procedure": 0.25,
    "private": 0.25,
    "records": 0.5
  },
  "which the procedure": {
    "s": 1.0
  },
  "s are used": {
    "you": 1.0
  },
  "are used you": {
    "can": 1.0
  },
  "used you can": {
    "eliminate": 1.0
  },
  "you can eliminate": {
    "many": 0.5,
    "the": 0.5
  },
  "can eliminate many": {
    "global": 1.0
  },
  "eliminate many global": {
    "re": 1.0
  },
  "many global re": {
    "compilations": 1.0
  },
  "global re compilations": {
    "saving": 0.5,
    "of": 0.5
  },
  "re compilations saving": {
    "you": 1.0
  },
  "compilations saving you": {
    "time": 1.0
  },
  "saving you time": {
    "as": 1.0
  },
  "you time as": {
    "you": 1.0
  },
  "time as you": {
    "build": 1.0
  },
  "as you build": {
    "the": 1.0
  },
  "you build the": {
    "application": 1.0
  },
  "build the application": {
    "procedure": 1.0
  },
  "the application procedure": {
    "maps": 1.0
  },
  "application procedure maps": {
    "you": 1.0
  },
  "procedure maps you": {
    "recall": 1.0
  },
  "maps you recall": {
    "that": 1.0
  },
  "you recall that": {
    "a": 0.5,
    "the": 0.5
  },
  "recall that a": {
    "procedure": 0.5,
    "derived": 0.5
  },
  "that a procedure": {
    "has": 1.0
  },
  "a procedure has": {
    "a": 1.0
  },
  "declaration section following": {
    "the": 1.0
  },
  "procedure and ending": {
    "at": 1.0
  },
  "and ending at": {
    "the": 1.0
  },
  "ending at the": {
    "code": 1.0
  },
  "at the code": {
    "statement": 0.8,
    "generated": 0.2
  },
  "the code statement": {
    "in": 0.25,
    "which": 0.75
  },
  "code statement in": {
    "addition": 1.0
  },
  "statement in addition": {
    "to": 1.0
  },
  "to data declarations": {
    "a": 1.0
  },
  "data declarations a": {
    "procedure": 1.0
  },
  "declarations a procedure": {
    "s": 1.0
  },
  "map structure a": {
    "procedure": 1.0
  },
  "structure a procedure": {
    "s": 1.0
  },
  "procedure s map": {
    "may": 1.0
  },
  "map may not": {
    "contain": 1.0
  },
  "may not contain": {
    "any": 1.0
  },
  "not contain any": {
    "module": 1.0
  },
  "contain any module": {
    "structures": 1.0
  },
  "any module structures": {
    "and": 1.0
  },
  "module structures and": {
    "declares": 1.0
  },
  "structures and declares": {
    "procedure": 1.0
  },
  "the procedure these": {
    "are": 1.0
  },
  "procedure these are": {
    "called": 1.0
  },
  "these are called": {
    "local": 1.0
  },
  "are called local": {
    "procedures": 1.0
  },
  "called local procedures": {
    "the": 1.0
  },
  "local procedures the": {
    "definitions": 1.0
  },
  "procedures the definitions": {
    "of": 1.0
  },
  "the definitions of": {
    "any": 1.0
  },
  "definitions of any": {
    "local": 1.0
  },
  "of any local": {
    "procedures": 1.0
  },
  "any local procedures": {
    "must": 0.3333333333333333,
    "proc1": 0.6666666666666666
  },
  "local procedures must": {
    "immediately": 1.0
  },
  "procedures must immediately": {
    "follow": 1.0
  },
  "must immediately follow": {
    "the": 1.0
  },
  "immediately follow the": {
    "procedure": 0.6666666666666666,
    "end": 0.3333333333333333
  },
  "follow the procedure": {
    "within": 1.0
  },
  "the procedure within": {
    "which": 0.75,
    "that": 0.25
  },
  "procedure within which": {
    "they": 1.0
  },
  "within which they": {
    "are": 1.0
  },
  "which they are": {
    "declared": 0.7777777777777778,
    "defined": 0.1111111111111111,
    "added": 0.1111111111111111
  },
  "they are declared": {
    "in": 0.14285714285714285,
    "when": 0.14285714285714285,
    "someproc": 0.14285714285714285,
    "or": 0.14285714285714285,
    "so": 0.14285714285714285,
    "that": 0.14285714285714285,
    "a": 0.14285714285714285
  },
  "are declared in": {
    "the": 0.5,
    "a": 0.5
  },
  "in the same": {
    "source": 0.8,
    "order": 0.2
  },
  "the same source": {
    "code": 0.4,
    "module": 0.6
  },
  "same source code": {
    "module": 1.0
  },
  "source code module": {
    "the": 0.5,
    "as": 0.5
  },
  "code module the": {
    "advantage": 1.0
  },
  "module the advantage": {
    "of": 1.0
  },
  "the advantage of": {
    "local": 0.16666666666666666,
    "sharing": 0.16666666666666666,
    "easily": 0.16666666666666666,
    "this": 0.16666666666666666,
    "client": 0.16666666666666666,
    "using": 0.16666666666666666
  },
  "advantage of local": {
    "procedures": 1.0
  },
  "of local procedures": {
    "is": 1.0
  },
  "local procedures is": {
    "that": 1.0
  },
  "procedures is that": {
    "they": 1.0
  },
  "is that they": {
    "share": 1.0
  },
  "that they share": {
    "the": 1.0
  },
  "they share the": {
    "local": 0.5,
    "same": 0.5
  },
  "share the local": {
    "data": 1.0
  },
  "the local data": {
    "and": 1.0
  },
  "local data and": {
    "routines": 0.75,
    "c": 0.25
  },
  "data and routines": {
    "of": 0.3333333333333333,
    "conceptually": 0.3333333333333333,
    "code": 0.3333333333333333
  },
  "and routines of": {
    "their": 1.0
  },
  "routines of their": {
    "declaring": 1.0
  },
  "of their declaring": {
    "procedure": 1.0
  },
  "their declaring procedure": {
    "conceptually": 0.5,
    "s": 0.5
  },
  "declaring procedure conceptually": {
    "a": 1.0
  },
  "procedure conceptually a": {
    "local": 1.0
  },
  "conceptually a local": {
    "procedure": 1.0
  },
  "a local procedure": {
    "could": 0.5,
    "declaration": 0.5
  },
  "local procedure could": {
    "be": 1.0
  },
  "procedure could be": {
    "thought": 1.0
  },
  "could be thought": {
    "of": 1.0
  },
  "be thought of": {
    "as": 1.0
  },
  "thought of as": {
    "a": 1.0
  },
  "of as a": {
    "routine": 1.0
  },
  "as a routine": {
    "which": 1.0
  },
  "a routine which": {
    "can": 1.0
  },
  "routine which can": {
    "receive": 1.0
  },
  "which can receive": {
    "parameters": 1.0
  },
  "can receive parameters": {
    "return": 1.0
  },
  "receive parameters return": {
    "a": 1.0
  },
  "parameters return a": {
    "value": 1.0
  },
  "value and contain": {
    "its": 1.0
  },
  "and contain its": {
    "own": 1.0
  },
  "its own data": {
    "declarations": 1.0
  },
  "own data declarations": {
    "using": 1.0
  },
  "data declarations using": {
    "the": 1.0
  },
  "declarations using the": {
    "previous": 1.0
  },
  "the previous example": {
    "a": 0.16666666666666666,
    "the": 0.16666666666666666,
    "an": 0.16666666666666666,
    "to": 0.16666666666666666,
    "file": 0.16666666666666666,
    "code": 0.16666666666666666
  },
  "previous example a": {
    "file": 1.0
  },
  "following code proc1": {
    "procedure": 1.0
  },
  "map the local": {
    "map": 1.0
  },
  "the local map": {
    "structure": 1.0
  },
  "local map structure": {
    "proc2": 1.0
  },
  "contains a local": {
    "procedure": 1.0
  },
  "local procedure declaration": {
    "end": 1.0
  },
  "procedure declaration end": {
    "end": 1.0
  },
  "declaration end end": {
    "map": 1.0
  },
  "end map proclocalvariable": {
    "long": 1.0
  },
  "map proclocalvariable long": {
    "a": 1.0
  },
  "proclocalvariable long a": {
    "local": 1.0
  },
  "long a local": {
    "variable": 1.0
  },
  "a local variable": {
    "declaration": 1.0
  },
  "local variable declaration": {
    "code": 1.0
  },
  "variable declaration code": {
    "begin": 0.5,
    "localvariable": 0.5
  },
  "declaration code begin": {
    "procedure": 1.0
  },
  "executable code do": {
    "myroutine": 1.0
  },
  "code do myroutine": {
    "call": 0.5,
    "anotherclass": 0.5
  },
  "do myroutine call": {
    "a": 1.0
  },
  "myroutine call a": {
    "routine": 1.0
  },
  "call a routine": {
    "myroutine": 0.5,
    "from": 0.5
  },
  "a routine myroutine": {
    "routine": 1.0
  },
  "routine myroutine routine": {
    "proclocalvariable": 1.0
  },
  "myroutine routine proclocalvariable": {
    "1": 1.0
  },
  "routine proclocalvariable 1": {
    "increment": 1.0
  },
  "proclocalvariable 1 increment": {
    "the": 1.0
  },
  "1 increment the": {
    "local": 1.0
  },
  "increment the local": {
    "variable": 1.0
  },
  "local variable proc2": {
    "procedure": 1.0
  },
  "variable proc2 procedure": {
    "local": 1.0
  },
  "proc2 procedure local": {
    "procedure": 1.0
  },
  "procedure local procedure": {
    "definition": 1.0
  },
  "local procedure definition": {
    "must": 1.0
  },
  "procedure definition must": {
    "follow": 1.0
  },
  "definition must follow": {
    "the": 1.0
  },
  "must follow the": {
    "declaring": 1.0
  },
  "follow the declaring": {
    "procedure": 1.0
  },
  "the declaring procedure": {
    "in": 0.125,
    "do": 0.125,
    "the": 0.125,
    "and": 0.125,
    "s": 0.125,
    "an": 0.125,
    "typically": 0.125,
    "39": 0.125
  },
  "declaring procedure in": {
    "the": 1.0
  },
  "same source module": {
    "localvariab": 0.3333333333333333,
    "as": 0.3333333333333333,
    "this": 0.3333333333333333
  },
  "source module localvariab": {
    "le": 1.0
  },
  "module localvariab le": {
    "long": 1.0
  },
  "localvariab le long": {
    "a": 1.0
  },
  "le long a": {
    "local": 1.0
  },
  "declaration code localvariable": {
    "proclocalvariable": 1.0
  },
  "code localvariable proclocalvariable": {
    "use": 1.0
  },
  "localvariable proclocalvariable use": {
    "a": 1.0
  },
  "proclocalvariable use a": {
    "variable": 1.0
  },
  "use a variable": {
    "from": 1.0
  },
  "a variable from": {
    "the": 1.0
  },
  "variable from the": {
    "declaring": 1.0
  },
  "from the declaring": {
    "procedure": 1.0
  },
  "declaring procedure do": {
    "myroutine": 1.0
  },
  "procedure do myroutine": {
    "call": 1.0
  },
  "a routine from": {
    "the": 1.0
  },
  "routine from the": {
    "declaring": 1.0
  },
  "declaring procedure the": {
    "proc2": 1.0
  },
  "procedure the proc2": {
    "procedure": 1.0
  },
  "program map or": {
    "a": 1.0
  },
  "map or a": {
    "member": 1.0
  },
  "or a member": {
    "map": 0.5,
    "module": 0.5
  },
  "a member map": {
    "but": 1.0
  },
  "member map but": {
    "only": 1.0
  },
  "in the proc1": {
    "procedure": 1.0
  },
  "the proc1 procedure": {
    "map": 0.3333333333333333,
    "proclocalvariable": 0.3333333333333333,
    "s": 0.3333333333333333
  },
  "proc1 procedure map": {
    "therefore": 1.0
  },
  "procedure map therefore": {
    "it": 1.0
  },
  "by the proc1": {
    "procedure": 1.0
  },
  "proc1 procedure proclocalvariable": {
    "was": 1.0
  },
  "procedure proclocalvariable was": {
    "declared": 1.0
  },
  "proclocalvariable was declared": {
    "in": 1.0
  },
  "proc1 procedure s": {
    "data": 1.0
  },
  "only by th": {
    "e": 1.0
  },
  "by th e": {
    "declaring": 1.0
  },
  "th e declaring": {
    "procedure": 1.0
  },
  "e declaring procedure": {
    "and": 1.0
  },
  "declaring procedure and": {
    "any": 1.0
  },
  "procedure and any": {
    "local": 1.0
  },
  "and any local": {
    "procedures": 1.0
  },
  "local procedures proc1": {
    "and": 1.0
  },
  "procedures proc1 and": {
    "proc2": 1.0
  },
  "and proc2 myroutine": {
    "routine": 1.0
  },
  "proc2 myroutine routine": {
    "is": 1.0
  },
  "myroutine routine is": {
    "also": 1.0
  },
  "routine is also": {
    "available": 1.0
  },
  "is also available": {
    "only": 1.0
  },
  "also available only": {
    "to": 1.0
  },
  "available only to": {
    "the": 1.0
  },
  "only to the": {
    "declaring": 0.25,
    "other": 0.25,
    "procedures": 0.5
  },
  "to the declaring": {
    "procedure": 1.0
  },
  "programming guide 10": {
    "summary": 1.0
  },
  "guide 10 summary": {
    "with": 1.0
  },
  "10 summary with": {
    "the": 1.0
  },
  "summary with the": {
    "clarion": 1.0
  },
  "with the clarion": {
    "language": 1.0
  },
  "clarion language you": {
    "may": 0.5,
    "ve": 0.5
  },
  "language you may": {
    "separate": 1.0
  },
  "you may separate": {
    "tasks": 1.0
  },
  "may separate tasks": {
    "into": 1.0
  },
  "separate tasks into": {
    "procedure": 1.0
  },
  "tasks into procedure": {
    "s": 1.0
  },
  "into procedure s": {
    "a": 1.0
  },
  "procedure s a": {
    "procedure": 1.0
  },
  "s a procedure": {
    "may": 1.0
  },
  "a procedure may": {
    "contain": 0.5,
    "have": 0.5
  },
  "procedure may contain": {
    "routines": 1.0
  },
  "may contain routines": {
    "which": 1.0
  },
  "contain routines which": {
    "optimize": 1.0
  },
  "routines which optimize": {
    "repetitive": 1.0
  },
  "which optimize repetitive": {
    "source": 1.0
  },
  "optimize repetitive source": {
    "code": 1.0
  },
  "repetitive source code": {
    "a": 1.0
  },
  "code a procedure": {
    "may": 1.0
  },
  "procedure may have": {
    "local": 1.0
  },
  "may have local": {
    "stack": 1.0
  },
  "have local stack": {
    "based": 1.0
  },
  "stack based variables": {
    "which": 1.0
  },
  "based variables which": {
    "optimize": 1.0
  },
  "variables which optimize": {
    "run": 1.0
  },
  "which optimize run": {
    "time": 1.0
  },
  "optimize run time": {
    "memory": 1.0
  },
  "run time memory": {
    "requirements": 1.0
  },
  "time memory requirements": {
    "and": 1.0
  },
  "memory requirements and": {
    "make": 1.0
  },
  "requirements and make": {
    "recursion": 1.0
  },
  "and make recursion": {
    "possible": 1.0
  },
  "make recursion possible": {
    "the": 1.0
  },
  "recursion possible the": {
    "program": 1.0
  },
  "possible the program": {
    "data": 1.0
  },
  "the program data": {
    "declaration": 1.0
  },
  "program data declaration": {
    "section": 1.0
  },
  "declaration section declares": {
    "all": 1.0
  },
  "section declares all": {
    "data": 1.0
  },
  "declares all data": {
    "which": 1.0
  },
  "all data which": {
    "is": 1.0
  },
  "data which is": {
    "globally": 1.0
  },
  "which is globally": {
    "available": 1.0
  },
  "is globally available": {
    "the": 1.0
  },
  "globally available the": {
    "program": 1.0
  },
  "available the program": {
    "map": 1.0
  },
  "program map declares": {
    "the": 1.0
  },
  "map declares the": {
    "prototypes": 1.0
  },
  "declares the prototypes": {
    "for": 1.0
  },
  "prototypes for all": {
    "procedure": 1.0
  },
  "which are globally": {
    "available": 1.0
  },
  "globally available a": {
    "map": 1.0
  },
  "available a map": {
    "may": 1.0
  },
  "a map may": {
    "contain": 1.0
  },
  "map may contain": {
    "a": 0.5,
    "module": 0.5
  },
  "may contain a": {
    "module": 1.0
  },
  "contain a module": {
    "structure": 1.0
  },
  "module structure which": {
    "points": 1.0
  },
  "structure which points": {
    "to": 1.0
  },
  "which points to": {
    "the": 1.0
  },
  "points to the": {
    "source": 0.3333333333333333,
    "foreign": 0.3333333333333333,
    "physical": 0.3333333333333333
  },
  "to the source": {
    "code": 1.0
  },
  "code for procedure": {
    "s": 1.0
  },
  "s which reside": {
    "in": 1.0
  },
  "which reside in": {
    "separate": 1.0
  },
  "reside in separate": {
    "source": 1.0
  },
  "source files the": {
    "member": 1.0
  },
  "files the member": {
    "statement": 1.0
  },
  "member statement poi": {
    "nts": 1.0
  },
  "statement poi nts": {
    "back": 1.0
  },
  "poi nts back": {
    "to": 1.0
  },
  "nts back to": {
    "the": 1.0
  },
  "source file the": {
    "member": 1.0
  },
  "file the member": {
    "module": 1.0
  },
  "member module data": {
    "declaration": 1.0
  },
  "module data declaration": {
    "section": 1.0
  },
  "section may declare": {
    "variables": 1.0
  },
  "may declare variables": {
    "and": 1.0
  },
  "declare variables and": {
    "data": 1.0
  },
  "data structures which": {
    "are": 1.0
  },
  "structures which are": {
    "only": 1.0
  },
  "which are only": {
    "available": 1.0
  },
  "are only available": {
    "to": 1.0
  },
  "only available to": {
    "the": 1.0
  },
  "available to the": {
    "procedure": 1.0
  },
  "procedure s that": {
    "reside": 1.0
  },
  "s that reside": {
    "in": 1.0
  },
  "that reside in": {
    "the": 0.5,
    "other": 0.5
  },
  "reside in the": {
    "member": 1.0
  },
  "member module a": {
    "member": 1.0
  },
  "module a member": {
    "module": 1.0
  },
  "member module may": {
    "have": 1.0
  },
  "module may have": {
    "its": 1.0
  },
  "may have its": {
    "own": 1.0
  },
  "have its own": {
    "map": 1.0
  },
  "map structure declaring": {
    "other": 1.0
  },
  "structure declaring other": {
    "procedure": 1.0
  },
  "declaring other procedure": {
    "s": 1.0
  },
  "procedure s only": {
    "known": 1.0
  },
  "s only known": {
    "locally": 1.0
  },
  "only known locally": {
    "in": 1.0
  },
  "known locally in": {
    "the": 1.0
  },
  "locally in the": {
    "member": 1.0
  },
  "may contain module": {
    "structures": 1.0
  },
  "structures which point": {
    "to": 1.0
  },
  "which point to": {
    "procedure": 1.0
  },
  "point to procedure": {
    "s": 1.0
  },
  "to procedure s": {
    "that": 1.0
  },
  "reside in other": {
    "member": 1.0
  },
  "in other member": {
    "modules": 1.0
  },
  "other member modules": {
    "the": 1.0
  },
  "member modules the": {
    "member": 1.0
  },
  "modules the member": {
    "which": 1.0
  },
  "the member which": {
    "the": 1.0
  },
  "member which the": {
    "module": 1.0
  },
  "which the module": {
    "points": 1.0
  },
  "the module points": {
    "to": 1.0
  },
  "module points to": {
    "must": 1.0
  },
  "points to must": {
    "also": 1.0
  },
  "to must also": {
    "contain": 1.0
  },
  "must also contain": {
    "a": 1.0
  },
  "also contain a": {
    "map": 1.0
  },
  "contain a map": {
    "with": 1.0
  },
  "a map with": {
    "identical": 1.0
  },
  "map with identical": {
    "proto": 1.0
  },
  "with identical proto": {
    "types": 1.0
  },
  "identical proto types": {
    "for": 1.0
  },
  "proto types for": {
    "those": 1.0
  },
  "types for those": {
    "procedure": 1.0
  },
  "for those procedure": {
    "s": 1.0
  },
  "those procedure s": {
    "explicitly": 1.0
  },
  "procedure s explicitly": {
    "prototyping": 1.0
  },
  "s explicitly prototyping": {
    "all": 1.0
  },
  "prototyping all of": {
    "an": 1.0
  },
  "all of an": {
    "application": 1.0
  },
  "of an application": {
    "s": 1.0
  },
  "an application s": {
    "procedure": 1.0
  },
  "in member module": {
    "map": 1.0
  },
  "map structures only": {
    "where": 1.0
  },
  "structures only where": {
    "actually": 1.0
  },
  "only where actually": {
    "needed": 1.0
  },
  "where actually needed": {
    "can": 1.0
  },
  "actually needed can": {
    "significantly": 1.0
  },
  "needed can significantly": {
    "reduce": 1.0
  },
  "can significantly reduce": {
    "the": 1.0
  },
  "significantly reduce the": {
    "number": 1.0
  },
  "reduce the number": {
    "of": 1.0
  },
  "the number of": {
    "global": 0.5,
    "records": 0.5
  },
  "number of global": {
    "re": 1.0
  },
  "of global re": {
    "compilations": 1.0
  },
  "re compilations of": {
    "the": 1.0
  },
  "compilations of the": {
    "application": 1.0
  },
  "of the application": {
    "required": 1.0
  },
  "the application required": {
    "during": 1.0
  },
  "application required during": {
    "development": 1.0
  },
  "required during development": {
    "local": 1.0
  },
  "during development local": {
    "procedures": 1.0
  },
  "development local procedures": {
    "have": 1.0
  },
  "local procedures have": {
    "the": 1.0
  },
  "procedures have the": {
    "advantage": 1.0
  },
  "have the advantage": {
    "of": 1.0
  },
  "advantage of sharing": {
    "their": 1.0
  },
  "of sharing their": {
    "declaring": 1.0
  },
  "sharing their declaring": {
    "procedure": 1.0
  },
  "declaring procedure s": {
    "local": 0.5,
    "scope": 0.5
  },
  "procedure s local": {
    "data": 1.0
  },
  "s local data": {
    "and": 0.16666666666666666,
    "variables": 0.16666666666666666,
    "section": 0.3333333333333333,
    "declarations": 0.16666666666666666,
    "to": 0.16666666666666666
  },
  "and routines conceptually": {
    "this": 1.0
  },
  "routines conceptually this": {
    "makes": 1.0
  },
  "conceptually this makes": {
    "them": 1.0
  },
  "this makes them": {
    "function": 0.3333333333333333,
    "available": 0.3333333333333333,
    "private": 0.3333333333333333
  },
  "makes them function": {
    "like": 1.0
  },
  "them function like": {
    "routines": 1.0
  },
  "function like routines": {
    "which": 1.0
  },
  "like routines which": {
    "can": 1.0
  },
  "routines which can": {
    "declare": 1.0
  },
  "which can declare": {
    "data": 1.0
  },
  "can declare data": {
    "receive": 1.0
  },
  "declare data receive": {
    "parameters": 1.0
  },
  "data receive parameters": {
    "and": 1.0
  },
  "receive parameters and": {
    "return": 1.0
  },
  "parameters and return": {
    "values": 1.0
  },
  "and return values": {
    "11": 1.0
  },
  "return values 11": {
    "easing": 1.0
  },
  "values 11 easing": {
    "into": 1.0
  },
  "11 easing into": {
    "oop": 1.0
  },
  "easing into oop": {
    "2": 0.125,
    "this": 0.125,
    "instantiation": 0.125,
    "the": 0.125,
    "bake": 0.125,
    "and": 0.125,
    "more": 0.125,
    "local": 0.125
  },
  "into oop 2": {
    "easing": 1.0
  },
  "oop 2 easing": {
    "into": 1.0
  },
  "2 easing into": {
    "oop": 1.0
  },
  "into oop this": {
    "chapter": 1.0
  },
  "oop this chapter": {
    "was": 1.0
  },
  "this chapter was": {
    "derived": 1.0
  },
  "chapter was derived": {
    "from": 1.0
  },
  "was derived from": {
    "a": 1.0
  },
  "derived from a": {
    "speech": 0.5,
    "nother": 0.5
  },
  "from a speech": {
    "delivered": 1.0
  },
  "a speech delivered": {
    "by": 1.0
  },
  "speech delivered by": {
    "richard": 1.0
  },
  "delivered by richard": {
    "taylor": 1.0
  },
  "by richard taylor": {
    "at": 1.0
  },
  "richard taylor at": {
    "the": 1.0
  },
  "taylor at the": {
    "1997": 1.0
  },
  "at the 1997": {
    "developer": 1.0
  },
  "the 1997 developer": {
    "s": 1.0
  },
  "1997 developer s": {
    "conference": 1.0
  },
  "developer s conference": {
    "devcon": 1.0
  },
  "s conference devcon": {
    "97": 1.0
  },
  "conference devcon 97": {
    "prior": 1.0
  },
  "devcon 97 prior": {
    "to": 1.0
  },
  "97 prior to": {
    "the": 1.0
  },
  "prior to the": {
    "release": 1.0
  },
  "to the release": {
    "of": 1.0
  },
  "the release of": {
    "clarion": 1.0
  },
  "release of clarion": {
    "version": 1.0
  },
  "of clarion version": {
    "4": 1.0
  },
  "clarion version 4": {
    "several": 1.0
  },
  "version 4 several": {
    "attendees": 1.0
  },
  "4 several attendees": {
    "suggested": 1.0
  },
  "several attendees suggested": {
    "that": 1.0
  },
  "attendees suggested that": {
    "it": 1.0
  },
  "suggested that it": {
    "become": 1.0
  },
  "that it become": {
    "part": 1.0
  },
  "it become part": {
    "of": 1.0
  },
  "become part of": {
    "the": 1.0
  },
  "part of the": {
    "clarion": 0.5,
    "database": 0.5
  },
  "the clarion documentation": {
    "set": 1.0
  },
  "clarion documentation set": {
    "opening": 1.0
  },
  "documentation set opening": {
    "shots": 1.0
  },
  "set opening shots": {
    "i": 1.0
  },
  "opening shots i": {
    "know": 1.0
  },
  "shots i know": {
    "that": 1.0
  },
  "i know that": {
    "some": 1.0
  },
  "know that some": {
    "of": 1.0
  },
  "that some of": {
    "you": 0.5,
    "the": 0.5
  },
  "some of you": {
    "have": 1.0
  },
  "of you have": {
    "had": 1.0
  },
  "you have had": {
    "a": 1.0
  },
  "have had a": {
    "lot": 1.0
  },
  "had a lot": {
    "of": 1.0
  },
  "a lot of": {
    "experience": 0.2,
    "oop": 0.2,
    "potential": 0.2,
    "disk": 0.2,
    "work": 0.2
  },
  "lot of experience": {
    "with": 1.0
  },
  "of experience with": {
    "object": 1.0
  },
  "experience with object": {
    "oriented": 1.0
  },
  "with object oriented": {
    "programming": 1.0
  },
  "oriented programming in": {
    "other": 0.5,
    "clarion": 0.5
  },
  "programming in other": {
    "languages": 1.0
  },
  "in other languages": {
    "while": 0.3333333333333333,
    "is": 0.6666666666666666
  },
  "other languages while": {
    "others": 1.0
  },
  "languages while others": {
    "here": 1.0
  },
  "while others here": {
    "have": 1.0
  },
  "others here have": {
    "never": 1.0
  },
  "here have never": {
    "even": 1.0
  },
  "have never even": {
    "said": 1.0
  },
  "never even said": {
    "oops": 1.0
  },
  "even said oops": {
    "in": 1.0
  },
  "said oops in": {
    "their": 1.0
  },
  "oops in their": {
    "lives": 1.0
  },
  "in their lives": {
    "for": 1.0
  },
  "their lives for": {
    "those": 1.0
  },
  "lives for those": {
    "o": 1.0
  },
  "for those o": {
    "f": 1.0
  },
  "those o f": {
    "you": 1.0
  },
  "o f you": {
    "who": 1.0
  },
  "f you who": {
    "do": 1.0
  },
  "you who do": {
    "have": 1.0
  },
  "who do have": {
    "a": 1.0
  },
  "do have a": {
    "lot": 1.0
  },
  "have a lot": {
    "of": 1.0
  },
  "lot of oop": {
    "background": 1.0
  },
  "of oop background": {
    "please": 1.0
  },
  "oop background please": {
    "bear": 1.0
  },
  "background please bear": {
    "with": 1.0
  },
  "please bear with": {
    "me": 1.0
  },
  "bear with me": {
    "because": 1.0
  },
  "with me because": {
    "i": 1.0
  },
  "me because i": {
    "m": 1.0
  },
  "because i m": {
    "going": 1.0
  },
  "i m going": {
    "to": 1.0
  },
  "m going to": {
    "be": 1.0
  },
  "going to be": {
    "explaining": 0.5,
    "called": 0.5
  },
  "to be explaining": {
    "some": 1.0
  },
  "be explaining some": {
    "things": 1.0
  },
  "explaining some things": {
    "that": 1.0
  },
  "some things that": {
    "may": 1.0
  },
  "things that may": {
    "seem": 1.0
  },
  "that may seem": {
    "pretty": 1.0
  },
  "may seem pretty": {
    "obvious": 1.0
  },
  "seem pretty obvious": {
    "to": 1.0
  },
  "pretty obvious to": {
    "you": 1.0
  },
  "obvious to you": {
    "i": 1.0
  },
  "to you i": {
    "apologize": 1.0
  },
  "you i apologize": {
    "in": 1.0
  },
  "i apologize in": {
    "advance": 1.0
  },
  "apologize in advance": {
    "if": 1.0
  },
  "in advance if": {
    "things": 1.0
  },
  "advance if things": {
    "seem": 1.0
  },
  "if things seem": {
    "a": 1.0
  },
  "things seem a": {
    "little": 1.0
  },
  "seem a little": {
    "simplistic": 1.0
  },
  "a little simplistic": {
    "to": 1.0
  },
  "little simplistic to": {
    "the": 1.0
  },
  "simplistic to the": {
    "rest": 1.0
  },
  "to the rest": {
    "of": 1.0
  },
  "the rest of": {
    "you": 0.3333333333333333,
    "the": 0.3333333333333333,
    "your": 0.3333333333333333
  },
  "rest of you": {
    "this": 1.0
  },
  "of you this": {
    "will": 1.0
  },
  "you this will": {
    "be": 1.0
  },
  "this will be": {
    "a": 1.0
  },
  "will be a": {
    "fai": 1.0
  },
  "be a fai": {
    "rly": 1.0
  },
  "a fai rly": {
    "quick": 1.0
  },
  "fai rly quick": {
    "overview": 1.0
  },
  "rly quick overview": {
    "there": 1.0
  },
  "quick overview there": {
    "are": 1.0
  },
  "overview there are": {
    "many": 1.0
  },
  "are many books": {
    "that": 1.0
  },
  "many books that": {
    "have": 1.0
  },
  "books that have": {
    "been": 1.0
  },
  "that have been": {
    "written": 0.5,
    "widely": 0.5
  },
  "have been written": {
    "on": 1.0
  },
  "been written on": {
    "object": 1.0
  },
  "written on object": {
    "oriented": 1.0
  },
  "on object oriented": {
    "programming": 1.0
  },
  "oriented programming so": {
    "i": 0.5,
    "powerful": 0.5
  },
  "programming so i": {
    "only": 1.0
  },
  "so i only": {
    "intend": 1.0
  },
  "i only intend": {
    "to": 1.0
  },
  "only intend to": {
    "hit": 1.0
  },
  "intend to hit": {
    "these": 1.0
  },
  "to hit these": {
    "concepts": 1.0
  },
  "hit these concepts": {
    "once": 1.0
  },
  "these concepts once": {
    "over": 1.0
  },
  "concepts once over": {
    "lightly": 1.0
  },
  "once over lightly": {
    "in": 1.0
  },
  "over lightly in": {
    "relation": 1.0
  },
  "lightly in relation": {
    "to": 1.0
  },
  "in relation to": {
    "how": 1.0
  },
  "relation to how": {
    "we": 1.0
  },
  "to how we": {
    "ve": 1.0
  },
  "how we ve": {
    "implemented": 1.0
  },
  "we ve implemented": {
    "them": 1.0
  },
  "ve implemented them": {
    "in": 1.0
  },
  "implemented them in": {
    "the": 1.0
  },
  "them in the": {
    "clarion": 0.6666666666666666,
    "derived": 0.3333333333333333
  },
  "in the clarion": {
    "language": 0.6666666666666666,
    "dictionary": 0.16666666666666666,
    "data": 0.16666666666666666
  },
  "clarion language ok": {
    "let": 1.0
  },
  "language ok let": {
    "s": 1.0
  },
  "ok let s": {
    "start": 1.0
  },
  "let s start": {
    "from": 0.5,
    "with": 0.5
  },
  "s start from": {
    "a": 1.0
  },
  "start from a": {
    "point": 1.0
  },
  "from a point": {
    "that": 1.0
  },
  "a point that": {
    "we": 1.0
  },
  "point that we": {
    "all": 1.0
  },
  "that we all": {
    "should": 1.0
  },
  "we all should": {
    "be": 1.0
  },
  "all should be": {
    "familiar": 1.0
  },
  "should be familiar": {
    "with": 1.0
  },
  "be familiar with": {
    "procedural": 1.0
  },
  "familiar with procedural": {
    "code": 1.0
  },
  "with procedural code": {
    "procedural": 1.0
  },
  "procedural code procedural": {
    "code": 1.0
  },
  "code procedural code": {
    "re": 1.0
  },
  "re visited we": {
    "all": 1.0
  },
  "visited we all": {
    "know": 1.0
  },
  "we all know": {
    "that": 1.0
  },
  "all know that": {
    "a": 0.5,
    "local": 0.5
  },
  "know that a": {
    "procedure": 1.0
  },
  "a data section": {
    "and": 0.25,
    "or": 0.5,
    "is": 0.25
  },
  "data section and": {
    "a": 1.0
  },
  "section and a": {
    "code": 1.0
  },
  "and a code": {
    "section": 1.0
  },
  "a code section": {
    "and": 1.0
  },
  "code section and": {
    "we": 1.0
  },
  "section and we": {
    "all": 1.0
  },
  "and we all": {
    "know": 1.0
  },
  "know that local": {
    "data": 1.0
  },
  "that local data": {
    "variables": 1.0
  },
  "local data variables": {
    "declared": 0.3333333333333333,
    "are": 0.3333333333333333,
    "and": 0.3333333333333333
  },
  "data variables declared": {
    "in": 1.0
  },
  "variables declared in": {
    "a": 1.0
  },
  "procedure are only": {
    "visible": 1.0
  },
  "visible within the": {
    "procedure": 0.5,
    "methods": 0.5
  },
  "procedure and exi": {
    "st": 1.0
  },
  "and exi st": {
    "only": 1.0
  },
  "exi st only": {
    "while": 1.0
  },
  "st only while": {
    "the": 1.0
  },
  "only while the": {
    "procedure": 1.0
  },
  "while the procedure": {
    "executes": 1.0
  },
  "procedure executes therefore": {
    "local": 1.0
  },
  "executes therefore local": {
    "data": 1.0
  },
  "therefore local data": {
    "variables": 1.0
  },
  "data variables are": {
    "in": 0.5,
    "not": 0.5
  },
  "variables are in": {
    "scope": 1.0
  },
  "are in scope": {
    "only": 1.0
  },
  "in scope only": {
    "within": 1.0
  },
  "scope only within": {
    "the": 1.0
  },
  "only within the": {
    "procedure": 1.0
  },
  "in which they": {
    "are": 0.8333333333333334,
    "were": 0.16666666666666666
  },
  "are declared when": {
    "the": 1.0
  },
  "declared when the": {
    "procedure": 1.0
  },
  "procedure is called": {
    "the": 0.6666666666666666,
    "since": 0.3333333333333333
  },
  "is called the": {
    "local": 0.5,
    "sa": 0.5
  },
  "the local variables": {
    "are": 0.5,
    "is": 0.5
  },
  "local variables are": {
    "automatically": 1.0
  },
  "variables are automatically": {
    "allocated": 1.0
  },
  "are automatically allocated": {
    "memory": 1.0
  },
  "automatically allocated memory": {
    "on": 0.5,
    "is": 0.5
  },
  "the stack this": {
    "makes": 1.0
  },
  "stack this makes": {
    "them": 1.0
  },
  "makes them available": {
    "for": 1.0
  },
  "them available for": {
    "use": 1.0
  },
  "for use in": {
    "the": 0.5,
    "multi": 0.5
  },
  "use in the": {
    "procedure": 1.0
  },
  "in the procedure": {
    "s": 0.3333333333333333,
    "to": 0.3333333333333333,
    "which": 0.3333333333333333
  },
  "procedure s executable": {
    "code": 1.0
  },
  "s executable code": {
    "statements": 0.5,
    "and": 0.5
  },
  "code statements then": {
    "when": 1.0
  },
  "statements then when": {
    "a": 1.0
  },
  "then when a": {
    "return": 1.0
  },
  "when a return": {
    "statement": 1.0
  },
  "a return statement": {
    "executes": 1.0
  },
  "return statement executes": {
    "in": 1.0
  },
  "statement executes in": {
    "the": 1.0
  },
  "executes in the": {
    "procedure": 0.5,
    "preparepie": 0.5
  },
  "the procedure to": {
    "return": 1.0
  },
  "procedure to return": {
    "to": 1.0
  },
  "to return to": {
    "the": 1.0
  },
  "return to the": {
    "place": 0.5,
    "client": 0.5
  },
  "called the memory": {
    "used": 1.0
  },
  "the memory used": {
    "by": 0.5,
    "for": 0.5
  },
  "memory used by": {
    "the": 0.5,
    "queue": 0.5
  },
  "used by the": {
    "local": 1.0
  },
  "by the local": {
    "variables": 1.0
  },
  "local variables is": {
    "automatically": 1.0
  },
  "variables is automatically": {
    "de": 1.0
  },
  "is automatically de": {
    "allocated": 1.0
  },
  "automatically de allocated": {
    "from": 0.5,
    "the": 0.5
  },
  "de allocated from": {
    "the": 1.0
  },
  "allocated from the": {
    "stack": 1.0
  },
  "from the stack": {
    "and": 1.0
  },
  "the stack and": {
    "r": 1.0
  },
  "stack and r": {
    "eturned": 1.0
  },
  "and r eturned": {
    "to": 1.0
  },
  "r eturned to": {
    "the": 1.0
  },
  "eturned to the": {
    "operating": 1.0
  },
  "to the operating": {
    "system": 1.0
  },
  "the operating system": {
    "so": 0.3333333333333333,
    "therefore": 0.3333333333333333,
    "this": 0.3333333333333333
  },
  "operating system so": {
    "we": 1.0
  },
  "system so we": {
    "can": 1.0
  },
  "so we can": {
    "say": 0.5,
    "write": 0.5
  },
  "we can say": {
    "that": 1.0
  },
  "can say that": {
    "the": 1.0
  },
  "say that the": {
    "lifetime": 0.5,
    "parameter": 0.5
  },
  "that the lifetime": {
    "and": 1.0
  },
  "the lifetime and": {
    "visibility": 1.0
  },
  "lifetime and visibility": {
    "of": 0.6666666666666666,
    "to": 0.3333333333333333
  },
  "and visibility of": {
    "local": 0.5,
    "a": 0.5
  },
  "visibility of local": {
    "data": 1.0
  },
  "of local data": {
    "in": 1.0
  },
  "local data in": {
    "a": 0.5,
    "those": 0.5
  },
  "data in a": {
    "procedure": 1.0
  },
  "procedure is limited": {
    "to": 1.0
  },
  "is limited to": {
    "the": 1.0
  },
  "limited to the": {
    "duration": 0.3333333333333333,
    "data": 0.3333333333333333,
    "information": 0.3333333333333333
  },
  "to the duration": {
    "of": 1.0
  },
  "the duration of": {
    "the": 1.0
  },
  "duration of the": {
    "procedure": 1.0
  },
  "the procedure execution": {
    "ok": 1.0
  },
  "procedure execution ok": {
    "so": 1.0
  },
  "execution ok so": {
    "what": 1.0
  },
  "ok so what": {
    "if": 1.0
  },
  "so what if": {
    "you": 1.0
  },
  "what if you": {
    "wanted": 1.0
  },
  "if you wanted": {
    "to": 1.0
  },
  "you wanted to": {
    "have": 0.4,
    "re": 0.2,
    "reference": 0.4
  },
  "wanted to have": {
    "multiple": 1.0
  },
  "to have multiple": {
    "code": 0.5,
    "sets": 0.5
  },
  "have multiple code": {
    "sections": 1.0
  },
  "multiple code sections": {
    "able": 1.0
  },
  "code sections able": {
    "to": 1.0
  },
  "sections able to": {
    "operate": 1.0
  },
  "able to operate": {
    "on": 1.0
  },
  "to operate on": {
    "the": 1.0
  },
  "operate on the": {
    "same": 0.3333333333333333,
    "properties": 0.3333333333333333,
    "data": 0.3333333333333333
  },
  "on the same": {
    "set": 0.5,
    "file": 0.5
  },
  "the same set": {
    "of": 1.0
  },
  "same set of": {
    "data": 0.2,
    "multiple": 0.2,
    "methods": 0.4,
    "files": 0.2
  },
  "set of data": {
    "variables": 0.75,
    "members": 0.25
  },
  "of data variables": {
    "in": 0.25,
    "and": 0.5,
    "each": 0.25
  },
  "data variables in": {
    "clarion": 1.0
  },
  "variables in clarion": {
    "s": 1.0
  },
  "in clarion s": {
    "procedural": 0.3333333333333333,
    "field": 0.3333333333333333,
    "oop": 0.3333333333333333
  },
  "clarion s procedural": {
    "code": 1.0
  },
  "s procedural code": {
    "you": 1.0
  },
  "procedural code you": {
    "could": 1.0
  },
  "code you could": {
    "do": 1.0
  },
  "you could do": {
    "it": 1.0
  },
  "could do it": {
    "two": 1.0
  },
  "do it two": {
    "ways": 1.0
  },
  "it two ways": {
    "make": 1.0
  },
  "two ways make": {
    "the": 1.0
  },
  "ways make the": {
    "variables": 1.0
  },
  "make the variables": {
    "global": 1.0
  },
  "the variables global": {
    "or": 1.0
  },
  "variables global or": {
    "move": 1.0
  },
  "global or move": {
    "them": 1.0
  },
  "or move them": {
    "into": 1.0
  },
  "move them into": {
    "a": 1.0
  },
  "them into a": {
    "module": 1.0
  },
  "into a module": {
    "s": 1.0
  },
  "a module s": {
    "data": 1.0
  },
  "s data section": {
    "since": 0.25,
    "are": 0.5,
    "between": 0.25
  },
  "data section since": {
    "module": 1.0
  },
  "section since module": {
    "data": 1.0
  },
  "since module data": {
    "is": 1.0
  },
  "module data is": {
    "a": 1.0
  },
  "data is a": {
    "concept": 1.0
  },
  "is a concept": {
    "that": 1.0
  },
  "a concept that": {
    "s": 1.0
  },
  "concept that s": {
    "fairly": 1.0
  },
  "that s fairly": {
    "unique": 1.0
  },
  "s fairly unique": {
    "to": 1.0
  },
  "fairly unique to": {
    "clarion": 1.0
  },
  "unique to clarion": {
    "we": 1.0
  },
  "to clarion we": {
    "ll": 1.0
  },
  "clarion we ll": {
    "only": 1.0
  },
  "we ll only": {
    "discuss": 1.0
  },
  "ll only discuss": {
    "the": 1.0
  },
  "only discuss the": {
    "global": 1.0
  },
  "discuss the global": {
    "approach": 1.0
  },
  "the global approach": {
    "this": 1.0
  },
  "global approach this": {
    "morning": 1.0
  },
  "approach this morning": {
    "by": 1.0
  },
  "this morning by": {
    "declaring": 1.0
  },
  "morning by declaring": {
    "your": 1.0
  },
  "by declaring your": {
    "variables": 1.0
  },
  "declaring your variables": {
    "globally": 1.0
  },
  "your variables globally": {
    "you": 1.0
  },
  "variables globally you": {
    "end": 1.0
  },
  "globally you end": {
    "up": 1.0
  },
  "you end up": {
    "with": 1.0
  },
  "end up with": {
    "effectively": 0.3333333333333333,
    "a": 0.3333333333333333,
    "une": 0.3333333333333333
  },
  "up with effectively": {
    "what": 1.0
  },
  "with effectively what": {
    "you": 1.0
  },
  "effectively what you": {
    "want": 1.0
  },
  "what you want": {
    "a": 1.0
  },
  "you want a": {
    "single": 1.0
  },
  "want a single": {
    "set": 1.0
  },
  "a single set": {
    "of": 1.0
  },
  "single set of": {
    "data": 0.3333333333333333,
    "variables": 0.3333333333333333,
    "methods": 0.3333333333333333
  },
  "data variables and": {
    "multiple": 0.3333333333333333,
    "the": 0.3333333333333333,
    "routines": 0.3333333333333333
  },
  "variables and multiple": {
    "executable": 1.0
  },
  "and multiple executable": {
    "code": 1.0
  },
  "multiple executable code": {
    "sections": 1.0
  },
  "executable code sections": {
    "that": 0.3333333333333333,
    "by": 0.3333333333333333,
    "in": 0.3333333333333333
  },
  "code sections that": {
    "can": 1.0
  },
  "sections that can": {
    "operate": 1.0
  },
  "that can operate": {
    "on": 1.0
  },
  "can operate on": {
    "that": 1.0
  },
  "operate on that": {
    "data": 1.0
  },
  "on that data": {
    "one": 1.0
  },
  "that data one": {
    "drawback": 1.0
  },
  "data one drawback": {
    "though": 1.0
  },
  "one drawback though": {
    "is": 1.0
  },
  "drawback though is": {
    "that": 1.0
  },
  "though is that": {
    "the": 1.0
  },
  "is that the": {
    "global": 0.5,
    "methods": 0.5
  },
  "that the global": {
    "data": 1.0
  },
  "global data variables": {
    "are": 0.5,
    "inside": 0.5
  },
  "variables are not": {
    "limited": 1.0
  },
  "are not limited": {
    "in": 1.0
  },
  "not limited in": {
    "lifetime": 1.0
  },
  "limited in lifetime": {
    "and": 1.0
  },
  "in lifetime and": {
    "there": 1.0
  },
  "lifetime and there": {
    "are": 1.0
  },
  "and there are": {
    "various": 1.0
  },
  "there are various": {
    "schools": 1.0
  },
  "are various schools": {
    "of": 1.0
  },
  "various schools of": {
    "programming": 1.0
  },
  "schools of programming": {
    "thought": 1.0
  },
  "of programming thought": {
    "that": 1.0
  },
  "programming thought that": {
    "hold": 1.0
  },
  "thought that hold": {
    "that": 1.0
  },
  "that hold that": {
    "the": 1.0
  },
  "hold that the": {
    "proliferation": 1.0
  },
  "that the proliferation": {
    "of": 1.0
  },
  "the proliferation of": {
    "global": 1.0
  },
  "proliferation of global": {
    "data": 1.0
  },
  "of global data": {
    "in": 1.0
  },
  "global data in": {
    "your": 1.0
  },
  "data in your": {
    "programs": 1.0
  },
  "in your programs": {
    "is": 1.0
  },
  "your programs is": {
    "a": 1.0
  },
  "programs is a": {
    "bad": 1.0
  },
  "is a bad": {
    "thing": 1.0
  },
  "a bad thing": {
    "global": 1.0
  },
  "bad thing global": {
    "data": 1.0
  },
  "thing global data": {
    "is": 1.0
  },
  "global data is": {
    "allocated": 1.0
  },
  "data is allocated": {
    "static": 1.0
  },
  "this means the": {
    "variables": 0.16666666666666666,
    "biggest": 0.16666666666666666,
    "inherited": 0.16666666666666666,
    "procedure": 0.16666666666666666,
    "product": 0.16666666666666666,
    "most": 0.16666666666666666
  },
  "means the variables": {
    "are": 1.0
  },
  "the variables are": {
    "allocated": 1.0
  },
  "variables are allocated": {
    "memory": 1.0
  },
  "when the program": {
    "s": 0.3333333333333333,
    "terminates": 0.6666666666666666
  },
  "program s tarts": {
    "execution": 1.0
  },
  "s tarts execution": {
    "and": 1.0
  },
  "tarts execution and": {
    "only": 1.0
  },
  "execution and only": {
    "de": 1.0
  },
  "and only de": {
    "allocated": 1.0
  },
  "only de allocated": {
    "when": 1.0
  },
  "de allocated when": {
    "the": 1.0
  },
  "allocated when the": {
    "program": 1.0
  },
  "the program terminates": {
    "by": 0.5,
    "to": 0.5
  },
  "program terminates by": {
    "the": 1.0
  },
  "terminates by the": {
    "way": 1.0
  },
  "by the way": {
    "the": 0.5,
    "for": 0.5
  },
  "the way the": {
    "same": 1.0
  },
  "way the same": {
    "thing": 1.0
  },
  "the same thing": {
    "is": 1.0
  },
  "same thing is": {
    "true": 1.0
  },
  "thing is true": {
    "of": 0.6666666666666666,
    "howev": 0.3333333333333333
  },
  "is true of": {
    "module": 0.5,
    "al": 0.5
  },
  "true of module": {
    "data": 1.0
  },
  "of module data": {
    "so": 1.0
  },
  "module data so": {
    "you": 1.0
  },
  "data so you": {
    "wouldn": 1.0
  },
  "so you wouldn": {
    "t": 1.0
  },
  "you wouldn t": {
    "buy": 1.0
  },
  "wouldn t buy": {
    "anything": 1.0
  },
  "t buy anything": {
    "by": 1.0
  },
  "buy anything by": {
    "going": 1.0
  },
  "anything by going": {
    "that": 1.0
  },
  "by going that": {
    "route": 1.0
  },
  "going that route": {
    "except": 1.0
  },
  "that route except": {
    "limiting": 1.0
  },
  "route except limiting": {
    "the": 1.0
  },
  "except limiting the": {
    "visibility": 1.0
  },
  "limiting the visibility": {
    "to": 1.0
  },
  "the visibility to": {
    "the": 1.0
  },
  "visibility to the": {
    "procedures": 0.5,
    "procedure": 0.5
  },
  "to the procedures": {
    "within": 0.3333333333333333,
    "defined": 0.6666666666666666
  },
  "the procedures within": {
    "the": 1.0
  },
  "procedures within the": {
    "same": 1.0
  },
  "within the same": {
    "module": 0.6666666666666666,
    "source": 0.3333333333333333
  },
  "the same module": {
    "ok": 0.5,
    "member": 0.5
  },
  "same module ok": {
    "so": 1.0
  },
  "module ok so": {
    "you": 1.0
  },
  "ok so you": {
    "can": 1.0
  },
  "so you can": {
    "h": 0.5,
    "re": 0.5
  },
  "you can h": {
    "ave": 1.0
  },
  "can h ave": {
    "a": 1.0
  },
  "h ave a": {
    "single": 1.0
  },
  "ave a single": {
    "set": 1.0
  },
  "set of variables": {
    "that": 1.0
  },
  "of variables that": {
    "can": 1.0
  },
  "variables that can": {
    "be": 1.0
  },
  "can be referenced": {
    "by": 0.5,
    "within": 0.5
  },
  "be referenced by": {
    "multiple": 0.5,
    "the": 0.5
  },
  "referenced by multiple": {
    "executable": 1.0
  },
  "by multiple executable": {
    "code": 1.0
  },
  "code sections by": {
    "declaring": 1.0
  },
  "sections by declaring": {
    "the": 1.0
  },
  "by declaring the": {
    "variables": 1.0
  },
  "declaring the variables": {
    "as": 1.0
  },
  "the variables as": {
    "global": 1.0
  },
  "variables as global": {
    "data": 1.0
  },
  "as global data": {
    "what": 1.0
  },
  "global data what": {
    "if": 1.0
  },
  "data what if": {
    "you": 1.0
  },
  "have multiple sets": {
    "of": 1.0
  },
  "multiple sets of": {
    "this": 1.0
  },
  "sets of this": {
    "data": 1.0
  },
  "of this data": {
    "that": 1.0
  },
  "this data that": {
    "could": 1.0
  },
  "data that could": {
    "all": 1.0
  },
  "that could all": {
    "be": 1.0
  },
  "could all be": {
    "referenced": 0.5,
    "stored": 0.5
  },
  "all be referenced": {
    "by": 1.0
  },
  "referenced by the": {
    "same": 1.0
  },
  "by the same": {
    "set": 1.0
  },
  "set of multiple": {
    "executable": 1.0
  },
  "of multiple executable": {
    "code": 1.0
  },
  "code sections in": {
    "other": 1.0
  },
  "sections in other": {
    "words": 1.0
  },
  "in other words": {
    "what": 0.5,
    "lifo": 0.5
  },
  "other words what": {
    "if": 1.0
  },
  "words what if": {
    "you": 1.0
  },
  "wanted to re": {
    "use": 1.0
  },
  "to re use": {
    "the": 1.0
  },
  "re use the": {
    "same": 0.5,
    "code": 0.5
  },
  "use the same": {
    "executable": 1.0
  },
  "the same executable": {
    "code": 1.0
  },
  "same executable code": {
    "over": 1.0
  },
  "executable code over": {
    "and": 1.0
  },
  "code over and": {
    "over": 1.0
  },
  "over and over": {
    "again": 1.0
  },
  "and over again": {
    "but": 0.5,
    "for": 0.5
  },
  "over again but": {
    "using": 1.0
  },
  "again but using": {
    "different": 1.0
  },
  "but using different": {
    "sets": 1.0
  },
  "using different sets": {
    "of": 1.0
  },
  "different sets of": {
    "data": 1.0
  },
  "sets of data": {
    "variables": 0.5,
    "myclass": 0.5
  },
  "data variables each": {
    "time": 1.0
  },
  "variables each time": {
    "well": 1.0
  },
  "each time well": {
    "you": 1.0
  },
  "time well you": {
    "could": 1.0
  },
  "well you could": {
    "place": 1.0
  },
  "you could place": {
    "all": 1.0
  },
  "could place all": {
    "the": 1.0
  },
  "place all the": {
    "global": 1.0
  },
  "all the global": {
    "data": 1.0
  },
  "data variables inside": {
    "a": 1.0
  },
  "variables inside a": {
    "queue": 1.0
  },
  "inside a queue": {
    "structure": 1.0
  },
  "a queue structure": {
    "then": 1.0
  },
  "queue structure then": {
    "somehow": 1.0
  },
  "structure then somehow": {
    "manip": 1.0
  },
  "then somehow manip": {
    "ulate": 1.0
  },
  "somehow manip ulate": {
    "the": 1.0
  },
  "manip ulate the": {
    "queue": 1.0
  },
  "ulate the queue": {
    "entries": 1.0
  },
  "the queue entries": {
    "so": 1.0
  },
  "queue entries so": {
    "that": 1.0
  },
  "entries so that": {
    "you": 1.0
  },
  "so that you": {
    "could": 1.0
  },
  "that you could": {
    "in": 1.0
  },
  "you could in": {
    "some": 1.0
  },
  "could in some": {
    "way": 1.0
  },
  "in some way": {
    "sensibly": 1.0
  },
  "some way sensibly": {
    "maintain": 1.0
  },
  "way sensibly maintain": {
    "which": 1.0
  },
  "sensibly maintain which": {
    "queue": 1.0
  },
  "maintain which queue": {
    "entry": 1.0
  },
  "which queue entry": {
    "it": 1.0
  },
  "queue entry it": {
    "is": 1.0
  },
  "entry it is": {
    "that": 1.0
  },
  "it is that": {
    "you": 1.0
  },
  "is that you": {
    "re": 0.5,
    "can": 0.5
  },
  "that you re": {
    "currently": 1.0
  },
  "you re currently": {
    "working": 1.0
  },
  "re currently working": {
    "on": 1.0
  },
  "currently working on": {
    "however": 1.0
  },
  "working on however": {
    "this": 1.0
  },
  "on however this": {
    "would": 1.0
  },
  "however this would": {
    "get": 1.0
  },
  "this would get": {
    "pretty": 1.0
  },
  "would get pretty": {
    "complex": 1.0
  },
  "get pretty complex": {
    "pretty": 1.0
  },
  "pretty complex pretty": {
    "quickly": 1.0
  },
  "complex pretty quickly": {
    "there": 1.0
  },
  "pretty quickly there": {
    "is": 1.0
  },
  "quickly there is": {
    "a": 1.0
  },
  "there is a": {
    "better": 0.2,
    "method": 0.2,
    "mechanism": 0.2,
    "distinct": 0.2,
    "conflict": 0.2
  },
  "is a better": {
    "way": 1.0
  },
  "a better way": {
    "and": 1.0
  },
  "better way and": {
    "that": 1.0
  },
  "way and that": {
    "way": 1.0
  },
  "and that way": {
    "is": 1.0
  },
  "that way is": {
    "the": 1.0
  },
  "way is the": {
    "class": 1.0
  },
  "is the class": {
    "declaration": 1.0
  },
  "the class declaration": {
    "clarion": 0.3333333333333333,
    "above": 0.3333333333333333,
    "like": 0.3333333333333333
  },
  "class declaration clarion": {
    "language": 1.0
  },
  "declaration clarion language": {
    "programming": 1.0
  },
  "programming guide 12": {
    "class": 1.0
  },
  "guide 12 class": {
    "dec": 1.0
  },
  "12 class dec": {
    "laration": 1.0
  },
  "class dec laration": {
    "the": 1.0
  },
  "dec laration the": {
    "clarion": 1.0
  },
  "laration the clarion": {
    "class": 1.0
  },
  "the clarion class": {
    "structure": 1.0
  },
  "clarion class structure": {
    "allows": 0.5,
    "declares": 0.5
  },
  "class structure allows": {
    "you": 1.0
  },
  "structure allows you": {
    "to": 1.0
  },
  "you to declare": {
    "data": 0.5,
    "c": 0.5
  },
  "to declare data": {
    "variables": 1.0
  },
  "declare data variables": {
    "both": 1.0
  },
  "data variables both": {
    "simple": 1.0
  },
  "variables both simple": {
    "data": 1.0
  },
  "both simple data": {
    "types": 1.0
  },
  "simple data types": {
    "and": 0.25,
    "are": 0.25,
    "in": 0.25,
    "or": 0.25
  },
  "data types and": {
    "reference": 1.0
  },
  "types and reference": {
    "variables": 1.0
  },
  "and reference variables": {
    "and": 1.0
  },
  "reference variables and": {
    "the": 1.0
  },
  "variables and the": {
    "procedures": 1.0
  },
  "and the procedures": {
    "which": 1.0
  },
  "the procedures which": {
    "operate": 1.0
  },
  "procedures which operate": {
    "on": 1.0
  },
  "which operate on": {
    "them": 1.0
  },
  "operate on them": {
    "this": 0.5,
    "to": 0.5
  },
  "on them this": {
    "is": 1.0
  },
  "them this is": {
    "the": 1.0
  },
  "is the basic": {
    "declaration": 1.0
  },
  "the basic declaration": {
    "structure": 1.0
  },
  "basic declaration structure": {
    "of": 1.0
  },
  "declaration structure of": {
    "object": 1.0
  },
  "structure of object": {
    "oriented": 1.0
  },
  "of object oriented": {
    "programming": 1.0
  },
  "programming in clarion": {
    "this": 1.0
  },
  "in clarion this": {
    "is": 1.0
  },
  "clarion this is": {
    "the": 1.0
  },
  "is the structure": {
    "that": 1.0
  },
  "the structure that": {
    "lets": 1.0
  },
  "structure that lets": {
    "you": 1.0
  },
  "that lets you": {
    "re": 1.0
  },
  "lets you re": {
    "use": 1.0
  },
  "you re use": {
    "code": 1.0
  },
  "re use code": {
    "over": 1.0
  },
  "use code over": {
    "and": 1.0
  },
  "over again for": {
    "different": 1.0
  },
  "again for different": {
    "sets": 1.0
  },
  "for different sets": {
    "of": 1.0
  },
  "of data myclass": {
    "class": 1.0
  },
  "data myclass class": {
    "property": 0.5,
    "declare": 0.5
  },
  "myclass class property": {
    "long": 1.0
  },
  "class property long": {
    "queproperty": 0.2,
    "method": 0.4,
    "myproperty": 0.4
  },
  "property long queproperty": {
    "somequeue": 1.0
  },
  "long queproperty somequeue": {
    "method1": 1.0
  },
  "queproperty somequeue method1": {
    "procedure": 1.0
  },
  "somequeue method1 procedure": {
    "method2": 1.0
  },
  "method1 procedure method2": {
    "procedure": 1.0
  },
  "procedure method2 procedure": {
    "long": 1.0
  },
  "method2 procedure long": {
    "long": 1.0
  },
  "procedure long long": {
    "end": 1.0
  },
  "long long end": {
    "the": 1.0
  },
  "long end the": {
    "class": 1.0
  },
  "end the class": {
    "structure": 1.0
  },
  "class structure is": {
    "a": 0.6666666666666666,
    "that": 0.3333333333333333
  },
  "structure is a": {
    "container": 0.6666666666666666,
    "data": 0.3333333333333333
  },
  "is a container": {
    "which": 0.5,
    "for": 0.5
  },
  "a container which": {
    "holds": 1.0
  },
  "container which holds": {
    "a": 1.0
  },
  "which holds a": {
    "set": 1.0
  },
  "holds a set": {
    "of": 1.0
  },
  "a set of": {
    "data": 0.3333333333333333,
    "classes": 0.3333333333333333,
    "re": 0.3333333333333333
  },
  "on them to": {
    "use": 1.0
  },
  "them to use": {
    "the": 1.0
  },
  "to use the": {
    "industry": 0.5,
    "database": 0.5
  },
  "use the industry": {
    "standard": 1.0
  },
  "the industry standard": {
    "terms": 1.0
  },
  "industry standard terms": {
    "for": 1.0
  },
  "standard terms for": {
    "these": 1.0
  },
  "terms for these": {
    "the": 1.0
  },
  "for these the": {
    "class": 1.0
  },
  "these the class": {
    "structure": 1.0
  },
  "class structure contains": {
    "properties": 1.0
  },
  "structure contains properties": {
    "and": 1.0
  },
  "contains properties and": {
    "methods": 1.0
  },
  "properties and methods": {
    "properties": 0.029411764705882353,
    "form": 0.029411764705882353,
    "according": 0.029411764705882353,
    "declared": 0.029411764705882353,
    "and": 0.058823529411764705,
    "what": 0.029411764705882353,
    "of": 0.20588235294117646,
    "are": 0.14705882352941177,
    "but": 0.029411764705882353,
    "for": 0.029411764705882353,
    "which": 0.029411764705882353,
    "from": 0.058823529411764705,
    "instead": 0.029411764705882353,
    "there": 0.029411764705882353,
    "you": 0.029411764705882353,
    "cannot": 0.029411764705882353,
    "can": 0.029411764705882353,
    "sort": 0.029411764705882353,
    "that": 0.058823529411764705,
    "the": 0.029411764705882353,
    "clarion": 0.029411764705882353
  },
  "and methods properties": {
    "are": 1.0
  },
  "methods properties are": {
    "the": 1.0
  },
  "properties are the": {
    "data": 1.0
  },
  "are the data": {
    "and": 0.5,
    "members": 0.5
  },
  "the data and": {
    "methods": 1.0
  },
  "data and methods": {
    "are": 0.5,
    "from": 0.5
  },
  "and methods are": {
    "the": 0.25,
    "public": 0.25,
    "not": 0.125,
    "friends": 0.125,
    "visible": 0.125,
    "pub": 0.125
  },
  "methods are the": {
    "procedure": 0.3333333333333333,
    "opposite": 0.3333333333333333,
    "procedures": 0.3333333333333333
  },
  "are the procedure": {
    "s": 1.0
  },
  "s which act": {
    "on": 1.0
  },
  "which act on": {
    "those": 1.0
  },
  "act on those": {
    "properties": 1.0
  },
  "on those properties": {
    "taken": 0.3333333333333333,
    "that": 0.3333333333333333,
    "in": 0.3333333333333333
  },
  "those properties taken": {
    "together": 1.0
  },
  "properties taken together": {
    "these": 1.0
  },
  "taken together these": {
    "properties": 1.0
  },
  "together these properties": {
    "and": 1.0
  },
  "these properties and": {
    "methods": 1.0
  },
  "and methods form": {
    "a": 1.0
  },
  "methods form a": {
    "single": 1.0
  },
  "form a single": {
    "object": 1.0
  },
  "a single object": {
    "ok": 1.0
  },
  "single object ok": {
    "so": 1.0
  },
  "object ok so": {
    "now": 1.0
  },
  "ok so now": {
    "we": 0.5,
    "you": 0.5
  },
  "so now we": {
    "ve": 1.0
  },
  "now we ve": {
    "introduced": 1.0
  },
  "we ve introduced": {
    "and": 1.0
  },
  "ve introduced and": {
    "defined": 1.0
  },
  "introduced and defined": {
    "in": 1.0
  },
  "and defined in": {
    "clarion": 1.0
  },
  "defined in clarion": {
    "terms": 1.0
  },
  "in clarion terms": {
    "three": 1.0
  },
  "clarion terms three": {
    "standard": 1.0
  },
  "terms three standard": {
    "oop": 1.0
  },
  "three standard oop": {
    "buzzwords": 1.0
  },
  "standard oop buzzwords": {
    "properties": 1.0
  },
  "oop buzzwords properties": {
    "methods": 1.0
  },
  "buzzwords properties methods": {
    "and": 0.5,
    "objects": 0.5
  },
  "properties methods and": {
    "object": 1.0
  },
  "methods and object": {
    "let": 1.0
  },
  "and object let": {
    "me": 1.0
  },
  "object let me": {
    "introduce": 1.0
  },
  "let me introduce": {
    "the": 1.0
  },
  "me introduce the": {
    "first": 1.0
  },
  "introduce the first": {
    "of": 1.0
  },
  "the first of": {
    "the": 1.0
  },
  "first of the": {
    "th": 1.0
  },
  "of the th": {
    "ree": 1.0
  },
  "the th ree": {
    "major": 1.0
  },
  "th ree major": {
    "oop": 1.0
  },
  "ree major oop": {
    "buzzwords": 1.0
  },
  "major oop buzzwords": {
    "encapsulation": 0.5,
    "properties": 0.5
  },
  "oop buzzwords encapsulation": {
    "encapsulation": 0.5,
    "inheritance": 0.5
  },
  "buzzwords encapsulation encapsulation": {
    "the": 1.0
  },
  "encapsulation encapsulation the": {
    "class": 1.0
  },
  "encapsulation the class": {
    "structure": 1.0
  },
  "a container for": {
    "the": 0.5,
    "properties": 0.5
  },
  "container for the": {
    "properties": 1.0
  },
  "for the properties": {
    "and": 0.3333333333333333,
    "of": 0.3333333333333333,
    "that": 0.3333333333333333
  },
  "the properties and": {
    "methods": 0.8235294117647058,
    "behaviors": 0.11764705882352941,
    "metho": 0.058823529411764705
  },
  "and methods according": {
    "to": 1.0
  },
  "methods according to": {
    "the": 1.0
  },
  "according to the": {
    "oxford": 0.5,
    "properties": 0.5
  },
  "to the oxford": {
    "english": 1.0
  },
  "the oxford english": {
    "dictionary": 1.0
  },
  "oxford english dictionary": {
    "the": 0.25,
    "defines": 0.5,
    "definitio": 0.25
  },
  "english dictionary the": {
    "word": 1.0
  },
  "dictionary the word": {
    "encapsulate": 1.0
  },
  "the word encapsulate": {
    "means": 1.0
  },
  "word encapsulate means": {
    "to": 1.0
  },
  "encapsulate means to": {
    "enclose": 1.0
  },
  "means to enclose": {
    "as": 1.0
  },
  "to enclose as": {
    "in": 1.0
  },
  "enclose as in": {
    "a": 1.0
  },
  "as in a": {
    "capsule": 1.0
  },
  "in a capsule": {
    "therefore": 1.0
  },
  "a capsule therefore": {
    "the": 1.0
  },
  "capsule therefore the": {
    "class": 1.0
  },
  "therefore the class": {
    "structure": 1.0
  },
  "class structure encapsulates": {
    "the": 1.0
  },
  "structure encapsulates the": {
    "properties": 1.0
  },
  "encapsulates the properties": {
    "and": 1.0
  },
  "and methods declared": {
    "within": 1.0
  },
  "methods declared within": {
    "it": 0.5,
    "the": 0.5
  },
  "declared within it": {
    "now": 1.0
  },
  "within it now": {
    "you": 1.0
  },
  "it now you": {
    "oop": 1.0
  },
  "now you oop": {
    "purists": 1.0
  },
  "you oop purists": {
    "out": 1.0
  },
  "oop purists out": {
    "there": 1.0
  },
  "purists out there": {
    "are": 1.0
  },
  "out there are": {
    "about": 1.0
  },
  "there are about": {
    "to": 1.0
  },
  "are about to": {
    "say": 1.0
  },
  "about to say": {
    "wait": 1.0
  },
  "to say wait": {
    "a": 1.0
  },
  "say wait a": {
    "minute": 1.0
  },
  "wait a minute": {
    "it": 1.0
  },
  "a minute it": {
    "means": 1.0
  },
  "minute it means": {
    "a": 1.0
  },
  "it means a": {
    "lot": 1.0
  },
  "means a lot": {
    "more": 1.0
  },
  "a lot more": {
    "than": 0.5,
    "work": 0.5
  },
  "lot more than": {
    "that": 1.0
  },
  "more than that": {
    "in": 1.0
  },
  "than that in": {
    "oop": 1.0
  },
  "that in oop": {
    "and": 0.5,
    "no": 0.5
  },
  "in oop and": {
    "you": 0.5,
    "they": 0.5
  },
  "oop and you": {
    "re": 1.0
  },
  "and you re": {
    "right": 1.0
  },
  "you re right": {
    "in": 1.0
  },
  "re right in": {
    "common": 1.0
  },
  "right in common": {
    "usage": 1.0
  },
  "in common usage": {
    "for": 1.0
  },
  "common usage for": {
    "oop": 1.0
  },
  "usage for oop": {
    "encapsulation": 1.0
  },
  "for oop encapsulation": {
    "means": 1.0
  },
  "oop encapsulation means": {
    "much": 1.0
  },
  "encapsulation means much": {
    "mor": 1.0
  },
  "means much mor": {
    "e": 1.0
  },
  "much mor e": {
    "than": 1.0
  },
  "mor e than": {
    "just": 1.0
  },
  "e than just": {
    "containerizing": 1.0
  },
  "than just containerizing": {
    "the": 1.0
  },
  "just containerizing the": {
    "properties": 1.0
  },
  "containerizing the properties": {
    "and": 1.0
  },
  "and methods and": {
    "i": 0.5,
    "all": 0.5
  },
  "methods and i": {
    "ll": 1.0
  },
  "and i ll": {
    "get": 1.0
  },
  "i ll get": {
    "around": 1.0
  },
  "ll get around": {
    "to": 1.0
  },
  "get around to": {
    "all": 1.0
  },
  "around to all": {
    "that": 1.0
  },
  "to all that": {
    "shortly": 1.0
  },
  "all that shortly": {
    "just": 1.0
  },
  "that shortly just": {
    "be": 1.0
  },
  "shortly just be": {
    "patient": 1.0
  },
  "just be patient": {
    "ok": 1.0
  },
  "be patient ok": {
    "so": 1.0
  },
  "patient ok so": {
    "we": 1.0
  },
  "ok so we": {
    "ve": 1.0
  },
  "so we ve": {
    "now": 1.0
  },
  "we ve now": {
    "got": 1.0
  },
  "ve now got": {
    "a": 1.0
  },
  "now got a": {
    "container": 1.0
  },
  "got a container": {
    "for": 1.0
  },
  "container for properties": {
    "and": 1.0
  },
  "for properties and": {
    "methods": 0.5,
    "initialize": 0.5
  },
  "and methods what": {
    "good": 1.0
  },
  "methods what good": {
    "does": 1.0
  },
  "what good does": {
    "that": 1.0
  },
  "good does that": {
    "do": 1.0
  },
  "does that do": {
    "us": 1.0
  },
  "that do us": {
    "well": 1.0
  },
  "do us well": {
    "you": 1.0
  },
  "us well you": {
    "ll": 1.0
  },
  "well you ll": {
    "notice": 1.0
  },
  "you ll notice": {
    "that": 1.0
  },
  "ll notice that": {
    "the": 1.0
  },
  "notice that the": {
    "clarion": 0.3333333333333333,
    "prototypes": 0.3333333333333333,
    "parameter": 0.3333333333333333
  },
  "that the clarion": {
    "keyword": 1.0
  },
  "the clarion keyword": {
    "we": 1.0
  },
  "clarion keyword we": {
    "re": 1.0
  },
  "keyword we re": {
    "usin": 1.0
  },
  "we re usin": {
    "g": 1.0
  },
  "re usin g": {
    "here": 1.0
  },
  "usin g here": {
    "is": 1.0
  },
  "g here is": {
    "class": 1.0
  },
  "here is class": {
    "and": 1.0
  },
  "is class and": {
    "not": 1.0
  },
  "class and not": {
    "object": 1.0
  },
  "and not object": {
    "the": 1.0
  },
  "not object the": {
    "reason": 1.0
  },
  "object the reason": {
    "for": 1.0
  },
  "the reason for": {
    "that": 1.0
  },
  "reason for that": {
    "is": 1.0
  },
  "for that is": {
    "because": 1.0
  },
  "that is because": {
    "a": 1.0
  },
  "is because a": {
    "class": 1.0
  },
  "because a class": {
    "declaration": 1.0
  },
  "a class declaration": {
    "declares": 0.3333333333333333,
    "with": 0.3333333333333333,
    "w": 0.3333333333333333
  },
  "class declaration declares": {
    "a": 1.0
  },
  "declaration declares a": {
    "specific": 1.0
  },
  "declares a specific": {
    "type": 1.0
  },
  "a specific type": {
    "of": 1.0
  },
  "specific type of": {
    "object": 0.3333333333333333,
    "queue": 0.6666666666666666
  },
  "type of object": {
    "and": 0.2857142857142857,
    "the": 0.14285714285714285,
    "method": 0.42857142857142855,
    "which": 0.14285714285714285
  },
  "of object and": {
    "it": 0.5,
    "an": 0.5
  },
  "object and it": {
    "can": 1.0
  },
  "and it can": {
    "also": 1.0
  },
  "it can also": {
    "declare": 1.0
  },
  "can also declare": {
    "an": 0.5,
    "a": 0.5
  },
  "also declare an": {
    "instance": 1.0
  },
  "declare an instance": {
    "of": 1.0
  },
  "an instance of": {
    "that": 0.2857142857142857,
    "the": 0.14285714285714285,
    "someclass": 0.14285714285714285,
    "myclass": 0.14285714285714285,
    "another": 0.14285714285714285,
    "a": 0.14285714285714285
  },
  "instance of that": {
    "object": 1.0
  },
  "of that object": {
    "type": 1.0
  },
  "that object type": {
    "but": 0.5,
    "2": 0.5
  },
  "object type but": {
    "it": 1.0
  },
  "type but it": {
    "doesn": 1.0
  },
  "but it doesn": {
    "t": 1.0
  },
  "it doesn t": {
    "have": 0.3333333333333333,
    "know": 0.16666666666666666,
    "inherit": 0.16666666666666666,
    "the": 0.16666666666666666,
    "care": 0.16666666666666666
  },
  "doesn t have": {
    "to": 0.5,
    "any": 0.5
  },
  "t have to": {
    "so": 0.5,
    "know": 0.5
  },
  "have to so": {
    "here": 1.0
  },
  "to so here": {
    "s": 1.0
  },
  "so here s": {
    "the": 1.0
  },
  "here s the": {
    "next": 0.5,
    "th": 0.5
  },
  "s the next": {
    "ten": 1.0
  },
  "the next ten": {
    "dollar": 1.0
  },
  "next ten dollar": {
    "oop": 1.0
  },
  "ten dollar oop": {
    "buzzword": 1.0
  },
  "dollar oop buzzword": {
    "we": 1.0
  },
  "oop buzzword we": {
    "need": 1.0
  },
  "buzzword we need": {
    "to": 1.0
  },
  "we need to": {
    "l": 0.5,
    "introduce": 0.5
  },
  "need to l": {
    "earn": 1.0
  },
  "to l earn": {
    "instantiation": 1.0
  },
  "l earn instantiation": {
    "my": 1.0
  },
  "earn instantiation my": {
    "oxford": 1.0
  },
  "instantiation my oxford": {
    "english": 1.0
  },
  "my oxford english": {
    "dictionary": 1.0
  },
  "english dictionary defines": {
    "instantiate": 0.5,
    "derive": 0.5
  },
  "dictionary defines instantiate": {
    "as": 1.0
  },
  "defines instantiate as": {
    "to": 1.0
  },
  "instantiate as to": {
    "represent": 1.0
  },
  "as to represent": {
    "by": 1.0
  },
  "to represent by": {
    "an": 1.0
  },
  "represent by an": {
    "instance": 1.0
  },
  "by an instance": {
    "it": 0.5,
    "the": 0.5
  },
  "an instance it": {
    "also": 1.0
  },
  "instance it also": {
    "defines": 1.0
  },
  "it also defines": {
    "instantiation": 1.0
  },
  "also defines instantiation": {
    "as": 1.0
  },
  "defines instantiation as": {
    "the": 1.0
  },
  "instantiation as the": {
    "action": 1.0
  },
  "as the action": {
    "or": 1.0
  },
  "the action or": {
    "fact": 0.5,
    "less": 0.5
  },
  "action or fact": {
    "of": 1.0
  },
  "or fact of": {
    "instantiating": 1.0
  },
  "fact of instantiating": {
    "representation": 1.0
  },
  "of instantiating representation": {
    "by": 1.0
  },
  "instantiating representation by": {
    "an": 1.0
  },
  "representation by an": {
    "instance": 1.0
  },
  "an instance the": {
    "real": 1.0
  },
  "instance the real": {
    "power": 1.0
  },
  "the real power": {
    "of": 1.0
  },
  "real power of": {
    "the": 1.0
  },
  "power of the": {
    "class": 1.0
  },
  "of the class": {
    "structure": 0.15789473684210525,
    "from": 0.15789473684210525,
    "which": 0.05263157894736842,
    "in": 0.10526315789473684,
    "above": 0.05263157894736842,
    "then": 0.05263157894736842,
    "are": 0.05263157894736842,
    "to": 0.05263157894736842,
    "the": 0.05263157894736842,
    "so": 0.05263157894736842,
    "also": 0.05263157894736842,
    "reference": 0.05263157894736842,
    "protected": 0.05263157894736842,
    "and": 0.05263157894736842
  },
  "structure is that": {
    "you": 1.0
  },
  "that you can": {
    "have": 0.3333333333333333,
    "end": 0.16666666666666666,
    "do": 0.16666666666666666,
    "study": 0.16666666666666666,
    "include": 0.16666666666666666
  },
  "you can have": {
    "multiple": 0.6666666666666666,
    "many": 0.3333333333333333
  },
  "can have multiple": {
    "instances": 0.5,
    "generations": 0.5
  },
  "have multiple instances": {
    "of": 1.0
  },
  "multiple instances of": {
    "the": 1.0
  },
  "instances of the": {
    "type": 0.3333333333333333,
    "same": 0.3333333333333333,
    "class": 0.3333333333333333
  },
  "of the type": {
    "of": 1.0
  },
  "the type of": {
    "object": 0.14285714285714285,
    "thing": 0.14285714285714285,
    "access": 0.42857142857142855,
    "concurrency": 0.14285714285714285,
    "batch": 0.14285714285714285
  },
  "of object the": {
    "class": 1.0
  },
  "object the class": {
    "declares": 1.0
  },
  "the class declares": {
    "each": 1.0
  },
  "class declares each": {
    "of": 1.0
  },
  "declares each of": {
    "these": 1.0
  },
  "each of these": {
    "instances": 0.3333333333333333,
    "tasks": 0.3333333333333333,
    "questions": 0.3333333333333333
  },
  "of these instances": {
    "is": 1.0
  },
  "these instances is": {
    "allocated": 1.0
  },
  "instances is allocated": {
    "its": 1.0
  },
  "is allocated its": {
    "own": 1.0
  },
  "allocated its own": {
    "set": 1.0
  },
  "its own set": {
    "of": 1.0
  },
  "own set of": {
    "properties": 0.8,
    "data": 0.2
  },
  "set of properties": {
    "but": 0.3333333333333333,
    "when": 0.16666666666666666,
    "like": 0.16666666666666666,
    "specific": 0.16666666666666666,
    "data": 0.16666666666666666
  },
  "of properties but": {
    "they": 0.5,
    "shares": 0.5
  },
  "properties but they": {
    "all": 1.0
  },
  "but they all": {
    "share": 1.0
  },
  "they all share": {
    "the": 1.0
  },
  "all share the": {
    "same": 1.0
  },
  "share the same": {
    "set": 0.25,
    "se": 0.25,
    "basic": 0.25,
    "type": 0.25
  },
  "set of methods": {
    "that": 0.3333333333333333,
    "to": 0.3333333333333333,
    "how": 0.3333333333333333
  },
  "of methods that": {
    "operate": 1.0
  },
  "methods that operate": {
    "on": 1.0
  },
  "that operate on": {
    "those": 0.6666666666666666,
    "the": 0.3333333333333333
  },
  "operate on those": {
    "properties": 1.0
  },
  "those properties that": {
    "s": 1.0
  },
  "properties that s": {
    "where": 1.0
  },
  "that s where": {
    "the": 1.0
  },
  "s where the": {
    "real": 1.0
  },
  "where the real": {
    "p": 1.0
  },
  "the real p": {
    "romise": 1.0
  },
  "real p romise": {
    "of": 1.0
  },
  "p romise of": {
    "oop": 1.0
  },
  "romise of oop": {
    "lies": 1.0
  },
  "of oop lies": {
    "in": 1.0
  },
  "oop lies in": {
    "the": 1.0
  },
  "lies in the": {
    "fact": 1.0
  },
  "in the fact": {
    "that": 1.0
  },
  "the fact that": {
    "you": 0.14285714285714285,
    "they": 0.14285714285714285,
    "many": 0.14285714285714285,
    "these": 0.14285714285714285,
    "a": 0.2857142857142857,
    "exclusive": 0.14285714285714285
  },
  "fact that you": {
    "only": 1.0
  },
  "that you only": {
    "need": 1.0
  },
  "you only need": {
    "a": 0.5,
    "to": 0.5
  },
  "only need a": {
    "single": 1.0
  },
  "need a single": {
    "set": 1.0
  },
  "of methods to": {
    "operate": 1.0
  },
  "methods to operate": {
    "on": 1.0
  },
  "on the properties": {
    "of": 1.0
  },
  "the properties of": {
    "any": 0.16666666666666666,
    "a": 0.3333333333333333,
    "the": 0.3333333333333333,
    "an": 0.16666666666666666
  },
  "properties of any": {
    "object": 1.0
  },
  "of any object": {
    "instance": 1.0
  },
  "any object instance": {
    "of": 1.0
  },
  "object instance of": {
    "a": 1.0
  },
  "instance of a": {
    "particular": 0.25,
    "class": 0.75
  },
  "of a particular": {
    "class": 1.0
  },
  "a particular class": {
    "the": 1.0
  },
  "particular class the": {
    "memory": 1.0
  },
  "class the memory": {
    "for": 1.0
  },
  "memory for the": {
    "properties": 0.3333333333333333,
    "object": 0.6666666666666666
  },
  "properties of a": {
    "specific": 0.5,
    "class": 0.5
  },
  "of a specific": {
    "object": 0.5,
    "type": 0.5
  },
  "a specific object": {
    "instance": 1.0
  },
  "specific object instance": {
    "is": 1.0
  },
  "object instance is": {
    "allocated": 1.0
  },
  "instance is allocated": {
    "when": 1.0
  },
  "is allocated when": {
    "that": 1.0
  },
  "allocated when that": {
    "object": 1.0
  },
  "when that object": {
    "is": 1.0
  },
  "that object is": {
    "instantiated": 0.6666666666666666,
    "destroyed": 0.3333333333333333
  },
  "object is instantiated": {
    "a": 0.16666666666666666,
    "so": 0.16666666666666666,
    "no": 0.16666666666666666,
    "either": 0.16666666666666666,
    "first": 0.16666666666666666,
    "if": 0.16666666666666666
  },
  "is instantiated a": {
    "ten": 1.0
  },
  "instantiated a ten": {
    "dollar": 1.0
  },
  "a ten dollar": {
    "word": 1.0
  },
  "ten dollar word": {
    "for": 1.0
  },
  "dollar word for": {
    "created": 1.0
  },
  "word for created": {
    "ok": 1.0
  },
  "for created ok": {
    "so": 1.0
  },
  "created ok so": {
    "how": 1.0
  },
  "ok so how": {
    "do": 1.0
  },
  "so how do": {
    "we": 1.0
  },
  "how do we": {
    "instantiate": 1.0
  },
  "do we instantiate": {
    "an": 1.0
  },
  "we instantiate an": {
    "object": 1.0
  },
  "instantiate an object": {
    "there": 1.0
  },
  "an object there": {
    "are": 0.6666666666666666,
    "is": 0.3333333333333333
  },
  "object there are": {
    "three": 0.6666666666666666,
    "two": 0.3333333333333333
  },
  "there are three": {
    "ways": 0.2,
    "major": 0.2,
    "types": 0.2,
    "clarion": 0.2,
    "forms": 0.2
  },
  "are three ways": {
    "to": 1.0
  },
  "three ways to": {
    "do": 1.0
  },
  "ways to do": {
    "it": 1.0
  },
  "to do it": {
    "1": 1.0
  },
  "do it 1": {
    "a": 1.0
  },
  "it 1 a": {
    "class": 1.0
  },
  "1 a class": {
    "declared": 1.0
  },
  "a class declared": {
    "without": 1.0
  },
  "class declared without": {
    "the": 1.0
  },
  "declared without the": {
    "type": 1.0
  },
  "without the type": {
    "attribute": 1.0
  },
  "the type attribute": {
    "declares": 0.3333333333333333,
    "only": 0.3333333333333333,
    "both": 0.3333333333333333
  },
  "type attribute declares": {
    "both": 1.0
  },
  "attribute declares both": {
    "a": 1.0
  },
  "declares both a": {
    "type": 1.0
  },
  "both a type": {
    "of": 1.0
  },
  "a type of": {
    "object": 0.6666666666666666,
    "queue": 0.16666666666666666,
    "fuzzy": 0.16666666666666666
  },
  "object and an": {
    "instance": 1.0
  },
  "and an instance": {
    "of": 0.5,
    "propertya": 0.5
  },
  "object type 2": {
    "a": 1.0
  },
  "type 2 a": {
    "simple": 1.0
  },
  "2 a simple": {
    "declaration": 1.0
  },
  "a simple declaration": {
    "statement": 1.0
  },
  "simple declaration statement": {
    "wi": 1.0
  },
  "declaration statement wi": {
    "th": 1.0
  },
  "statement wi th": {
    "the": 1.0
  },
  "wi th the": {
    "data": 1.0
  },
  "th the data": {
    "type": 1.0
  },
  "the data type": {
    "being": 0.3333333333333333,
    "program": 0.3333333333333333,
    "they": 0.3333333333333333
  },
  "data type being": {
    "the": 1.0
  },
  "type being the": {
    "label": 1.0
  },
  "being the label": {
    "of": 1.0
  },
  "the label of": {
    "a": 0.6666666666666666,
    "the": 0.3333333333333333
  },
  "label of a": {
    "previously": 0.4,
    "file": 0.4,
    "ny": 0.2
  },
  "of a previously": {
    "declared": 1.0
  },
  "a previously declared": {
    "class": 1.0
  },
  "previously declared class": {
    "structure": 1.0
  },
  "declared class structure": {
    "declares": 0.5,
    "then": 0.5
  },
  "class structure declares": {
    "an": 1.0
  },
  "structure declares an": {
    "object": 1.0
  },
  "declares an object": {
    "of": 0.5,
    "class": 0.5
  },
  "an object of": {
    "the": 0.6,
    "another": 0.2,
    "one": 0.2
  },
  "object of the": {
    "same": 0.6666666666666666,
    "other": 0.3333333333333333
  },
  "of the same": {
    "type": 0.3333333333333333,
    "or": 0.16666666666666666,
    "class": 0.3333333333333333,
    "name": 0.16666666666666666
  },
  "the same type": {
    "as": 0.3333333333333333,
    "other": 0.3333333333333333,
    "of": 0.3333333333333333
  },
  "same type as": {
    "the": 1.0
  },
  "type as the": {
    "class": 1.0
  },
  "as the class": {
    "3": 0.5,
    "normal": 0.5
  },
  "the class 3": {
    "declare": 1.0
  },
  "class 3 declare": {
    "a": 1.0
  },
  "3 declare a": {
    "reference": 1.0
  },
  "declare a reference": {
    "to": 0.75,
    "variable": 0.25
  },
  "a reference to": {
    "the": 0.4166666666666667,
    "another": 0.08333333333333333,
    "serve": 0.08333333333333333,
    "a": 0.3333333333333333,
    "an": 0.08333333333333333
  },
  "reference to the": {
    "label": 0.2,
    "second": 0.2,
    "object": 0.2,
    "primary": 0.2,
    "pr": 0.2
  },
  "to the label": {
    "of": 1.0
  },
  "class structure then": {
    "use": 1.0
  },
  "structure then use": {
    "the": 1.0
  },
  "then use the": {
    "new": 1.0
  },
  "use the new": {
    "and": 1.0
  },
  "the new and": {
    "dispose": 1.0
  },
  "new and dispose": {
    "procedures": 0.5,
    "to": 0.5
  },
  "and dispose procedures": {
    "to": 1.0
  },
  "dispose procedures to": {
    "instantiate": 1.0
  },
  "procedures to instantiate": {
    "and": 1.0
  },
  "to instantiate and": {
    "destroy": 1.0
  },
  "instantiate and destroy": {
    "the": 1.0
  },
  "and destroy the": {
    "object": 1.0
  },
  "destroy the object": {
    "that": 0.5,
    "which": 0.5
  },
  "the object that": {
    "s": 1.0
  },
  "object that s": {
    "how": 1.0
  },
  "that s how": {
    "you": 1.0
  },
  "s how you": {
    "instantiate": 1.0
  },
  "how you instantiate": {
    "objects": 1.0
  },
  "you instantiate objects": {
    "now": 1.0
  },
  "instantiate objects now": {
    "you": 1.0
  },
  "objects now you": {
    "might": 1.0
  },
  "now you might": {
    "ask": 1.0
  },
  "you might ask": {
    "why": 1.0
  },
  "might ask why": {
    "is": 1.0
  },
  "ask why is": {
    "he": 1.0
  },
  "why is he": {
    "making": 1.0
  },
  "is he making": {
    "such": 1.0
  },
  "he making such": {
    "a": 1.0
  },
  "making such a": {
    "big": 1.0
  },
  "such a big": {
    "deal": 1.0
  },
  "a big deal": {
    "about": 1.0
  },
  "big deal about": {
    "instantiation": 1.0
  },
  "deal about instantiation": {
    "good": 1.0
  },
  "about instantiation good": {
    "question": 1.0
  },
  "instantiation good question": {
    "the": 1.0
  },
  "good question the": {
    "answer": 0.5,
    "beginning": 0.5
  },
  "question the answer": {
    "has": 1.0
  },
  "the answer has": {
    "to": 1.0
  },
  "answer has to": {
    "do": 1.0
  },
  "has to do": {
    "with": 1.0
  },
  "to do with": {
    "memory": 0.3333333333333333,
    "polymorphism": 0.3333333333333333,
    "what": 0.3333333333333333
  },
  "do with memory": {
    "allocation": 1.0
  },
  "with memory allocation": {
    "for": 1.0
  },
  "memory allocation for": {
    "the": 1.0
  },
  "allocation for the": {
    "properties": 1.0
  },
  "the properties that": {
    "each": 1.0
  },
  "properties that each": {
    "object": 1.0
  },
  "that each object": {
    "contains": 0.5,
    "gets": 0.5
  },
  "each object contains": {
    "remember": 1.0
  },
  "object contains remember": {
    "that": 1.0
  },
  "contains remember that": {
    "each": 1.0
  },
  "remember that each": {
    "object": 1.0
  },
  "each object gets": {
    "its": 1.0
  },
  "object gets its": {
    "own": 1.0
  },
  "gets its own": {
    "discrete": 0.5,
    "set": 0.5
  },
  "its own discrete": {
    "set": 1.0
  },
  "own discrete set": {
    "of": 1.0
  },
  "discrete set of": {
    "properties": 1.0
  },
  "of properties when": {
    "the": 1.0
  },
  "properties when the": {
    "object": 1.0
  },
  "when the object": {
    "is": 1.0
  },
  "the object is": {
    "instantiated": 0.2727272727272727,
    "automatically": 0.09090909090909091,
    "that": 0.09090909090909091,
    "destroyed": 0.18181818181818182,
    "not": 0.09090909090909091,
    "created": 0.09090909090909091,
    "destroye": 0.09090909090909091,
    "in": 0.09090909090909091
  },
  "is instantiated so": {
    "it": 1.0
  },
  "instantiated so it": {
    "s": 1.0
  },
  "so it s": {
    "important": 1.0
  },
  "it s important": {
    "to": 1.0
  },
  "s important to": {
    "know": 1.0
  },
  "important to know": {
    "when": 1.0
  },
  "to know when": {
    "these": 1.0
  },
  "know when these": {
    "things": 1.0
  },
  "when these things": {
    "are": 1.0
  },
  "these things are": {
    "instantiated": 1.0
  },
  "things are instantiated": {
    "13": 1.0
  },
  "are instantiated 13": {
    "easing": 1.0
  },
  "instantiated 13 easing": {
    "into": 1.0
  },
  "13 easing into": {
    "oop": 1.0
  },
  "into oop instantiation": {
    "an": 1.0
  },
  "oop instantiation an": {
    "object": 1.0
  },
  "instantiation an object": {
    "declared": 1.0
  },
  "an object declared": {
    "in": 1.0
  },
  "object declared in": {
    "your": 0.3333333333333333,
    "a": 0.6666666666666666
  },
  "declared in your": {
    "program": 1.0
  },
  "in your program": {
    "s": 0.5,
    "so": 0.5
  },
  "your program s": {
    "global": 1.0
  },
  "program s global": {
    "data": 1.0
  },
  "s global data": {
    "section": 1.0
  },
  "global data section": {
    "is": 0.5,
    "between": 0.5
  },
  "data section is": {
    "instantiated": 0.5,
    "automatically": 0.5
  },
  "section is instantiated": {
    "for": 1.0
  },
  "is instantiated for": {
    "you": 1.0
  },
  "instantiated for you": {
    "automatically": 1.0
  },
  "for you automatically": {
    "at": 1.0
  },
  "you automatically at": {
    "the": 1.0
  },
  "automatically at the": {
    "code": 1.0
  },
  "code statement which": {
    "marks": 1.0
  },
  "statement which marks": {
    "the": 1.0
  },
  "which marks the": {
    "beginning": 1.0
  },
  "marks the beginning": {
    "of": 1.0
  },
  "beginning of the": {
    "global": 0.4,
    "procedure": 0.2,
    "answer": 0.2,
    "file": 0.2
  },
  "of the global": {
    "executable": 1.0
  },
  "the global executable": {
    "code": 1.0
  },
  "global executable code": {
    "the": 0.5,
    "and": 0.5
  },
  "executable code the": {
    "object": 1.0
  },
  "code the object": {
    "is": 1.0
  },
  "object is automatically": {
    "destroyed": 1.0
  },
  "is automatically destroyed": {
    "for": 1.0
  },
  "automatically destroyed for": {
    "you": 1.0
  },
  "destroyed for you": {
    "when": 0.6,
    "you": 0.2,
    "the": 0.2
  },
  "for you when": {
    "you": 0.5,
    "an": 0.3333333333333333,
    "it": 0.16666666666666666
  },
  "you when you": {
    "return": 1.0
  },
  "when you return": {
    "from": 1.0
  },
  "you return from": {
    "your": 0.6666666666666666,
    "the": 0.3333333333333333
  },
  "return from your": {
    "program": 1.0
  },
  "from your program": {
    "to": 1.0
  },
  "your program to": {
    "the": 1.0
  },
  "program to the": {
    "operating": 1.0
  },
  "operating system therefore": {
    "the": 1.0
  },
  "system therefore the": {
    "lifetime": 1.0
  },
  "therefore the lifetime": {
    "and": 1.0
  },
  "visibility of a": {
    "global": 1.0
  },
  "of a global": {
    "object": 1.0
  },
  "a global object": {
    "is": 1.0
  },
  "global object is": {
    "global": 1.0
  },
  "object is global": {
    "program": 1.0
  },
  "is global program": {
    "global": 1.0
  },
  "global program global": {
    "data": 1.0
  },
  "program global data": {
    "and": 1.0
  },
  "global data and": {
    "code": 1.0
  },
  "data and code": {
    "myclass": 1.0
  },
  "and code myclass": {
    "class": 1.0
  },
  "code myclass class": {
    "declare": 1.0
  },
  "myclass class declare": {
    "an": 0.6,
    "base": 0.4
  },
  "class declare an": {
    "object": 0.6666666666666666,
    "o": 0.3333333333333333
  },
  "declare an object": {
    "and": 0.25,
    "in": 0.25,
    "code": 0.125,
    "mclassref": 0.125,
    "reference": 0.125,
    "object2": 0.125
  },
  "an object and": {
    "property": 1.0
  },
  "object and property": {
    "long": 1.0
  },
  "and property long": {
    "a": 1.0
  },
  "property long a": {
    "type": 1.0
  },
  "long a type": {
    "of": 1.0
  },
  "of object method": {
    "procedure": 1.0
  },
  "object method procedure": {
    "end": 1.0
  },
  "method procedure end": {
    "classa": 1.0
  },
  "procedure end classa": {
    "myclass": 0.5,
    "class": 0.5
  },
  "end classa myclass": {
    "declare": 1.0
  },
  "classa myclass declare": {
    "myclass": 1.0
  },
  "myclass declare myclass": {
    "object": 0.5,
    "reference": 0.5
  },
  "declare myclass object": {
    "classb": 1.0
  },
  "myclass object classb": {
    "myclass": 1.0
  },
  "object classb myclass": {
    "declare": 1.0
  },
  "classb myclass declare": {
    "myclass": 1.0
  },
  "declare myclass reference": {
    "code": 0.6666666666666666,
    "someproc": 0.3333333333333333
  },
  "myclass reference code": {
    "myclass": 1.0
  },
  "reference code myclass": {
    "and": 1.0
  },
  "code myclass and": {
    "classa": 1.0
  },
  "myclass and classa": {
    "automagically": 0.8,
    "are": 0.2
  },
  "and classa automagically": {
    "instantiated": 0.5,
    "destroyed": 0.5
  },
  "classa automagically instantiated": {
    "classb": 1.0
  },
  "automagically instantiated classb": {
    "new": 1.0
  },
  "instantiated classb new": {
    "myclass": 1.0
  },
  "classb new myclass": {
    "explicitly": 0.5,
    "instantiate": 0.5
  },
  "new myclass explicitly": {
    "instantiate": 1.0
  },
  "myclass explicitly instantiate": {
    "object": 1.0
  },
  "explicitly instantiate object": {
    "execute": 1.0
  },
  "instantiate object execute": {
    "some": 1.0
  },
  "object execute some": {
    "code": 1.0
  },
  "execute some code": {
    "dispose": 1.0
  },
  "some code dispose": {
    "classb": 1.0
  },
  "code dispose classb": {
    "destroy": 1.0
  },
  "dispose classb destroy": {
    "object": 1.0
  },
  "classb destroy object": {
    "required": 1.0
  },
  "destroy object required": {
    "return": 1.0
  },
  "object required return": {
    "myclass": 1.0
  },
  "required return myclass": {
    "and": 1.0
  },
  "return myclass and": {
    "classa": 1.0
  },
  "classa automagically destroyed": {
    "objects": 0.5,
    "ok": 0.5
  },
  "automagically destroyed objects": {
    "declared": 1.0
  },
  "destroyed objects declared": {
    "in": 1.0
  },
  "objects declared in": {
    "any": 0.3333333333333333,
    "a": 0.6666666666666666
  },
  "declared in any": {
    "module": 1.0
  },
  "in any module": {
    "s": 1.0
  },
  "any module s": {
    "data": 1.0
  },
  "data section are": {
    "also": 0.5,
    "instantiated": 0.5
  },
  "section are also": {
    "instantiated": 1.0
  },
  "are also instantiated": {
    "for": 1.0
  },
  "also instantiated for": {
    "you": 1.0
  },
  "executable code and": {
    "automatically": 1.0
  },
  "code and automatically": {
    "destro": 0.5,
    "destroyed": 0.5
  },
  "and automatically destro": {
    "yed": 1.0
  },
  "automatically destro yed": {
    "for": 1.0
  },
  "destro yed for": {
    "you": 1.0
  },
  "yed for you": {
    "when": 1.0
  },
  "operating system this": {
    "makes": 1.0
  },
  "system this makes": {
    "their": 1.0
  },
  "this makes their": {
    "lifetime": 1.0
  },
  "makes their lifetime": {
    "global": 1.0
  },
  "their lifetime global": {
    "despite": 1.0
  },
  "lifetime global despite": {
    "the": 1.0
  },
  "global despite the": {
    "fact": 1.0
  },
  "despite the fact": {
    "that": 1.0
  },
  "fact that they": {
    "are": 1.0
  },
  "that they are": {
    "only": 1.0
  },
  "only visible to": {
    "procedures": 1.0
  },
  "visible to procedures": {
    "within": 1.0
  },
  "to procedures within": {
    "the": 1.0
  },
  "same module member": {
    "myapp": 1.0
  },
  "module member myapp": {
    "module": 1.0
  },
  "member myapp module": {
    "data": 1.0
  },
  "myapp module data": {
    "myclass": 1.0
  },
  "module data myclass": {
    "class": 1.0
  },
  "declare an o": {
    "bject": 1.0
  },
  "an o bject": {
    "and": 1.0
  },
  "o bject and": {
    "property": 1.0
  },
  "bject and property": {
    "long": 1.0
  },
  "myclass reference someproc": {
    "procedure": 1.0
  },
  "reference someproc procedure": {
    "myclass": 1.0
  },
  "someproc procedure myclass": {
    "and": 1.0
  },
  "procedure myclass and": {
    "classa": 1.0
  },
  "and classa are": {
    "instantiated": 1.0
  },
  "classa are instantiated": {
    "and": 1.0
  },
  "are instantiated and": {
    "destroyed": 1.0
  },
  "instantiated and destroyed": {
    "at": 0.5,
    "in": 0.5
  },
  "and destroyed at": {
    "the": 1.0
  },
  "destroyed at the": {
    "same": 1.0
  },
  "at the same": {
    "time": 1.0
  },
  "the same time": {
    "as": 0.25,
    "a": 0.25,
    "user": 0.25,
    "concurrency": 0.25
  },
  "same time as": {
    "the": 1.0
  },
  "time as the": {
    "global": 1.0
  },
  "as the global": {
    "objects": 1.0
  },
  "the global objects": {
    "classb": 1.0
  },
  "global objects classb": {
    "must": 1.0
  },
  "objects classb must": {
    "be": 1.0
  },
  "classb must be": {
    "explicitly": 1.0
  },
  "must be explicitly": {
    "instantiated": 1.0
  },
  "be explicitly instantiated": {
    "and": 1.0
  },
  "explicitly instantiated and": {
    "destroyed": 1.0
  },
  "and destroyed in": {
    "some": 1.0
  },
  "destroyed in some": {
    "procedure": 1.0
  },
  "in some procedure": {
    "in": 1.0
  },
  "some procedure in": {
    "the": 1.0
  },
  "the module objects": {
    "declared": 1.0
  },
  "module objects declared": {
    "in": 1.0
  },
  "section are instantiated": {
    "for": 1.0
  },
  "are instantiated for": {
    "you": 1.0
  },
  "and automatically destroyed": {
    "for": 1.0
  },
  "return from the": {
    "procedure": 1.0
  },
  "from the procedure": {
    "this": 0.5,
    "objects": 0.5
  },
  "the procedure this": {
    "limits": 1.0
  },
  "procedure this limits": {
    "their": 1.0
  },
  "this limits their": {
    "lifetime": 1.0
  },
  "limits their lifetime": {
    "and": 1.0
  },
  "their lifetime and": {
    "visibility": 1.0
  },
  "and visibility to": {
    "the": 1.0
  },
  "are declared someproc": {
    "procedure": 1.0
  },
  "declared someproc procedure": {
    "local": 1.0
  },
  "someproc procedure local": {
    "data": 1.0
  },
  "procedure local data": {
    "and": 0.5,
    "that": 0.5
  },
  "data and c": {
    "ode": 1.0
  },
  "and c ode": {
    "myclass": 1.0
  },
  "c ode myclass": {
    "class": 1.0
  },
  "ode myclass class": {
    "declare": 1.0
  },
  "new myclass instantiate": {
    "object": 1.0
  },
  "myclass instantiate object": {
    "execute": 1.0
  },
  "automagically destroyed ok": {
    "a": 1.0
  },
  "destroyed ok a": {
    "ll": 1.0
  },
  "ok a ll": {
    "that": 1.0
  },
  "a ll that": {
    "s": 1.0
  },
  "ll that s": {
    "pretty": 1.0
  },
  "that s pretty": {
    "straight": 1.0
  },
  "s pretty straight": {
    "forward": 1.0
  },
  "pretty straight forward": {
    "about": 1.0
  },
  "straight forward about": {
    "what": 1.0
  },
  "forward about what": {
    "you": 1.0
  },
  "about what you": {
    "expected": 1.0
  },
  "what you expected": {
    "right": 1.0
  },
  "you expected right": {
    "the": 1.0
  },
  "expected right the": {
    "ones": 1.0
  },
  "right the ones": {
    "you": 1.0
  },
  "the ones you": {
    "have": 1.0
  },
  "ones you have": {
    "to": 1.0
  },
  "you have to": {
    "keep": 0.5,
    "learn": 0.5
  },
  "have to keep": {
    "your": 1.0
  },
  "to keep your": {
    "eye": 1.0
  },
  "keep your eye": {
    "on": 1.0
  },
  "your eye on": {
    "are": 1.0
  },
  "eye on are": {
    "the": 1.0
  },
  "on are the": {
    "objects": 1.0
  },
  "are the objects": {
    "that": 1.0
  },
  "the objects that": {
    "you": 1.0
  },
  "objects that you": {
    "declare": 1.0
  },
  "that you declare": {
    "as": 1.0
  },
  "you declare as": {
    "reference": 1.0
  },
  "declare as reference": {
    "variables": 1.0
  },
  "as reference variables": {
    "these": 0.5,
    "to": 0.5
  },
  "reference variables these": {
    "objects": 1.0
  },
  "variables these objects": {
    "are": 1.0
  },
  "these objects are": {
    "only": 1.0
  },
  "objects are only": {
    "instantiated": 1.0
  },
  "are only instantiated": {
    "when": 1.0
  },
  "only instantiated when": {
    "you": 1.0
  },
  "instantiated when you": {
    "execute": 1.0
  },
  "when you execute": {
    "a": 1.0
  },
  "you execute a": {
    "new": 1.0
  },
  "execute a new": {
    "statement": 1.0
  },
  "a new statement": {
    "and": 1.0
  },
  "new statement and": {
    "now": 1.0
  },
  "statement and now": {
    "here": 1.0
  },
  "and now here": {
    "s": 1.0
  },
  "now here s": {
    "the": 1.0
  },
  "s the th": {
    "ing": 1.0
  },
  "the th ing": {
    "to": 1.0
  },
  "th ing to": {
    "watch": 1.0
  },
  "ing to watch": {
    "out": 1.0
  },
  "to watch out": {
    "for": 1.0
  },
  "watch out for": {
    "they": 1.0
  },
  "out for they": {
    "are": 1.0
  },
  "for they are": {
    "never": 1.0
  },
  "they are never": {
    "automatically": 1.0
  },
  "are never automatically": {
    "destroyed": 1.0
  },
  "never automatically destroyed": {
    "for": 1.0
  },
  "for you you": {
    "must": 1.0
  },
  "you you must": {
    "use": 1.0
  },
  "you must use": {
    "dispose": 0.5,
    "the": 0.5
  },
  "must use dispose": {
    "to": 1.0
  },
  "use dispose to": {
    "get": 0.5,
    "destroy": 0.5
  },
  "dispose to get": {
    "rid": 1.0
  },
  "to get rid": {
    "of": 1.0
  },
  "get rid of": {
    "them": 1.0
  },
  "rid of them": {
    "yourself": 1.0
  },
  "of them yourself": {
    "if": 1.0
  },
  "them yourself if": {
    "you": 1.0
  },
  "yourself if you": {
    "forget": 1.0
  },
  "if you forget": {
    "to": 1.0
  },
  "you forget to": {
    "do": 1.0
  },
  "forget to do": {
    "that": 1.0
  },
  "to do that": {
    "you": 0.3333333333333333,
    "is": 0.3333333333333333,
    "could": 0.3333333333333333
  },
  "do that you": {
    "can": 1.0
  },
  "you can end": {
    "up": 1.0
  },
  "can end up": {
    "with": 1.0
  },
  "up with a": {
    "memory": 1.0
  },
  "with a memory": {
    "leak": 1.0
  },
  "a memory leak": {
    "in": 1.0
  },
  "memory leak in": {
    "your": 1.0
  },
  "leak in your": {
    "program": 1.0
  },
  "your program so": {
    "the": 1.0
  },
  "program so the": {
    "question": 1.0
  },
  "so the question": {
    "now": 0.5,
    "is": 0.5
  },
  "the question now": {
    "comes": 1.0
  },
  "question now comes": {
    "up": 1.0
  },
  "now comes up": {
    "if": 1.0
  },
  "comes up if": {
    "each": 1.0
  },
  "up if each": {
    "object": 1.0
  },
  "if each object": {
    "gets": 1.0
  },
  "properties but shares": {
    "the": 1.0
  },
  "but shares the": {
    "same": 1.0
  },
  "shares the same": {
    "set": 0.5,
    "methods": 0.5
  },
  "of methods how": {
    "does": 1.0
  },
  "methods how does": {
    "the": 1.0
  },
  "how does the": {
    "executable": 0.5,
    "code": 0.5
  },
  "does the executable": {
    "code": 1.0
  },
  "executable code inside": {
    "the": 1.0
  },
  "code inside the": {
    "method": 0.6666666666666666,
    "applepie": 0.3333333333333333
  },
  "inside the method": {
    "know": 1.0
  },
  "the method know": {
    "exactly": 1.0
  },
  "method know exactly": {
    "which": 1.0
  },
  "know exactly which": {
    "object": 0.6666666666666666,
    "position": 0.3333333333333333
  },
  "exactly which object": {
    "s": 1.0
  },
  "which object s": {
    "properties": 1.0
  },
  "object s properties": {
    "to": 1.0
  },
  "s properties to": {
    "affect": 1.0
  },
  "properties to affect": {
    "another": 0.5,
    "is": 0.5
  },
  "to affect another": {
    "good": 1.0
  },
  "affect another good": {
    "question": 1.0
  },
  "another good question": {
    "the": 1.0
  },
  "question the beginning": {
    "of": 1.0
  },
  "of the answer": {
    "lies": 1.0
  },
  "the answer lies": {
    "in": 1.0
  },
  "answer lies in": {
    "clarion": 1.0
  },
  "lies in clarion": {
    "s": 1.0
  },
  "clarion s field": {
    "qualification": 1.0
  },
  "s field qualification": {
    "syntax": 1.0
  },
  "qualification syntax clarion": {
    "language": 1.0
  },
  "syntax clarion language": {
    "programming": 1.0
  },
  "programming guide 14": {
    "field": 1.0
  },
  "guide 14 field": {
    "qualification": 1.0
  },
  "14 field qualification": {
    "syntax": 1.0
  },
  "qualification syntax the": {
    "properties": 1.0
  },
  "syntax the properties": {
    "and": 1.0
  },
  "and methods of": {
    "an": 0.125,
    "the": 0.625,
    "its": 0.125,
    "a": 0.125
  },
  "methods of an": {
    "object": 1.0
  },
  "of an object": {
    "are": 0.3333333333333333,
    "there": 0.16666666666666666,
    "instead": 0.16666666666666666,
    "to": 0.16666666666666666,
    "s": 0.16666666666666666
  },
  "an object are": {
    "referenced": 0.5,
    "the": 0.5
  },
  "object are referenced": {
    "in": 1.0
  },
  "are referenced in": {
    "code": 1.0
  },
  "referenced in code": {
    "by": 1.0
  },
  "in code by": {
    "prepending": 1.0
  },
  "code by prepending": {
    "the": 1.0
  },
  "by prepending the": {
    "name": 1.0
  },
  "prepending the name": {
    "of": 1.0
  },
  "of the object": {
    "to": 1.0
  },
  "the object to": {
    "the": 1.0
  },
  "object to the": {
    "property": 1.0
  },
  "to the property": {
    "or": 1.0
  },
  "the property or": {
    "method": 1.0
  },
  "property or method": {
    "using": 0.125,
    "is": 0.375,
    "to": 0.125,
    "of": 0.125,
    "on": 0.25
  },
  "or method using": {
    "what": 1.0
  },
  "method using what": {
    "s": 1.0
  },
  "using what s": {
    "come": 1.0
  },
  "what s come": {
    "to": 1.0
  },
  "s come to": {
    "be": 1.0
  },
  "come to be": {
    "known": 1.0
  },
  "to be known": {
    "as": 1.0
  },
  "be known as": {
    "dot": 1.0
  },
  "known as dot": {
    "syntax": 1.0
  },
  "as dot syntax": {
    "this": 1.0
  },
  "dot syntax this": {
    "is": 1.0
  },
  "syntax this is": {
    "pretty": 1.0
  },
  "this is pretty": {
    "standard": 1.0
  },
  "is pretty standard": {
    "syntax": 1.0
  },
  "pretty standard syntax": {
    "in": 1.0
  },
  "standard syntax in": {
    "all": 1.0
  },
  "syntax in all": {
    "the": 1.0
  },
  "in all the": {
    "various": 1.0
  },
  "all the various": {
    "languages": 1.0
  },
  "the various languages": {
    "that": 1.0
  },
  "various languages that": {
    "support": 1.0
  },
  "languages that support": {
    "oop": 1.0
  },
  "that support oop": {
    "for": 1.0
  },
  "support oop for": {
    "example": 1.0
  },
  "oop for example": {
    "assume": 1.0
  },
  "for example assume": {
    "you": 0.5,
    "a": 0.5
  },
  "example assume you": {
    "have": 1.0
  },
  "assume you have": {
    "an": 1.0
  },
  "you have an": {
    "object": 1.0
  },
  "have an object": {
    "named": 1.0
  },
  "an object named": {
    "fred": 1.0
  },
  "object named fred": {
    "and": 1.0
  },
  "named fred and": {
    "it": 1.0
  },
  "fred and it": {
    "has": 1.0
  },
  "and it has": {
    "a": 1.0
  },
  "it has a": {
    "method": 1.0
  },
  "has a method": {
    "named": 1.0
  },
  "a method named": {
    "work": 0.2,
    "construct": 0.4,
    "destruct": 0.4
  },
  "method named work": {
    "and": 1.0
  },
  "named work and": {
    "two": 1.0
  },
  "work and two": {
    "properties": 1.0
  },
  "and two properties": {
    "named": 1.0
  },
  "two properties named": {
    "pay": 1.0
  },
  "properties named pay": {
    "and": 1.0
  },
  "named pay and": {
    "hours": 1.0
  },
  "pay and hours": {
    "outside": 1.0
  },
  "and hours outside": {
    "the": 1.0
  },
  "hours outside the": {
    "object": 1.0
  },
  "outside the object": {
    "itself": 1.0
  },
  "the object itself": {
    "you": 1.0
  },
  "object itself you": {
    "might": 1.0
  },
  "itself you might": {
    "call": 1.0
  },
  "you might call": {
    "that": 1.0
  },
  "might call that": {
    "method": 1.0
  },
  "call that method": {
    "in": 1.0
  },
  "that method in": {
    "an": 1.0
  },
  "method in an": {
    "assignment": 1.0
  },
  "in an assignment": {
    "as": 1.0
  },
  "an assignment as": {
    "fred": 1.0
  },
  "assignment as fred": {
    "pay": 1.0
  },
  "as fred pay": {
    "fred": 1.0
  },
  "fred pay fred": {
    "work": 1.0
  },
  "pay fred work": {
    "fred": 1.0
  },
  "fred work fred": {
    "hours": 1.0
  },
  "work fred hours": {
    "now": 0.5,
    "code": 0.5
  },
  "fred hours now": {
    "within": 1.0
  },
  "hours now within": {
    "the": 1.0
  },
  "now within the": {
    "methods": 1.0
  },
  "within the methods": {
    "of": 0.75,
    "declared": 0.25
  },
  "the methods of": {
    "an": 0.25,
    "the": 0.5,
    "its": 0.125,
    "any": 0.125
  },
  "object there is": {
    "no": 1.0
  },
  "there is no": {
    "way": 0.08333333333333333,
    "need": 0.16666666666666666,
    "database": 0.08333333333333333,
    "guarantee": 0.08333333333333333,
    "other": 0.08333333333333333,
    "exact": 0.16666666666666666,
    "fuzzy": 0.08333333333333333,
    "generic": 0.08333333333333333,
    "direct": 0.16666666666666666
  },
  "is no way": {
    "to": 1.0
  },
  "no way to": {
    "know": 1.0
  },
  "way to know": {
    "exactly": 1.0
  },
  "to know exactly": {
    "what": 1.0
  },
  "know exactly what": {
    "the": 1.0
  },
  "exactly what the": {
    "object": 1.0
  },
  "what the object": {
    "is": 1.0
  },
  "object is that": {
    "is": 1.0
  },
  "is that is": {
    "currently": 1.0
  },
  "that is currently": {
    "executing": 1.0
  },
  "is currently executing": {
    "remember": 1.0
  },
  "currently executing remember": {
    "you": 1.0
  },
  "executing remember you": {
    "can": 1.0
  },
  "remember you can": {
    "have": 1.0
  },
  "can have many": {
    "separate": 1.0
  },
  "have many separate": {
    "instances": 1.0
  },
  "many separate instances": {
    "of": 1.0
  },
  "separate instances of": {
    "a": 1.0
  },
  "instances of a": {
    "specific": 0.5,
    "class": 0.5
  },
  "of object which": {
    "all": 1.0
  },
  "object which all": {
    "share": 1.0
  },
  "which all share": {
    "the": 1.0
  },
  "the same se": {
    "t": 1.0
  },
  "same se t": {
    "of": 1.0
  },
  "se t of": {
    "methods": 1.0
  },
  "t of methods": {
    "therefore": 1.0
  },
  "of methods therefore": {
    "within": 1.0
  },
  "methods therefore within": {
    "the": 1.0
  },
  "therefore within the": {
    "methods": 1.0
  },
  "an object instead": {
    "of": 1.0
  },
  "object instead of": {
    "using": 1.0
  },
  "instead of using": {
    "the": 1.0
  },
  "of using the": {
    "object": 1.0
  },
  "using the object": {
    "s": 1.0
  },
  "the object s": {
    "name": 0.3333333333333333,
    "method": 0.3333333333333333,
    "methods": 0.3333333333333333
  },
  "object s name": {
    "you": 1.0
  },
  "s name you": {
    "use": 1.0
  },
  "name you use": {
    "the": 1.0
  },
  "you use the": {
    "word": 0.25,
    "self": 0.25,
    "clarion": 0.5
  },
  "use the word": {
    "self": 1.0
  },
  "the word self": {
    "that": 1.0
  },
  "word self that": {
    "changes": 1.0
  },
  "self that changes": {
    "the": 1.0
  },
  "that changes the": {
    "previous": 1.0
  },
  "changes the previous": {
    "assignment": 1.0
  },
  "the previous assignment": {
    "when": 1.0
  },
  "previous assignment when": {
    "made": 1.0
  },
  "assignment when made": {
    "within": 1.0
  },
  "when made within": {
    "a": 1.0
  },
  "made within a": {
    "method": 1.0
  },
  "within a method": {
    "of": 0.3333333333333333,
    "s": 0.3333333333333333,
    "you": 0.3333333333333333
  },
  "a method of": {
    "an": 0.3333333333333333,
    "that": 0.3333333333333333,
    "a": 0.3333333333333333
  },
  "method of an": {
    "object": 1.0
  },
  "an object to": {
    "self": 1.0
  },
  "object to self": {
    "pay": 1.0
  },
  "to self pay": {
    "self": 1.0
  },
  "self pay self": {
    "work": 1.0
  },
  "pay self work": {
    "self": 1.0
  },
  "self work self": {
    "hours": 1.0
  },
  "work self hours": {
    "because": 0.5,
    "code": 0.5
  },
  "self hours because": {
    "t": 1.0
  },
  "hours because t": {
    "he": 1.0
  },
  "because t he": {
    "code": 1.0
  },
  "t he code": {
    "at": 1.0
  },
  "he code at": {
    "that": 1.0
  },
  "code at that": {
    "point": 1.0
  },
  "at that point": {
    "doesn": 1.0
  },
  "that point doesn": {
    "t": 1.0
  },
  "point doesn t": {
    "know": 1.0
  },
  "doesn t know": {
    "whether": 0.3333333333333333,
    "and": 0.3333333333333333,
    "exactly": 0.3333333333333333
  },
  "t know whether": {
    "it": 1.0
  },
  "know whether it": {
    "is": 1.0
  },
  "whether it is": {
    "referring": 0.5,
    "given": 0.5
  },
  "it is referring": {
    "to": 1.0
  },
  "is referring to": {
    "the": 1.0
  },
  "referring to the": {
    "properties": 1.0
  },
  "to the properties": {
    "of": 0.25,
    "and": 0.25,
    "someclass": 0.25,
    "anotherclass": 0.25
  },
  "properties of the": {
    "fred": 0.2,
    "class": 0.6,
    "current": 0.2
  },
  "of the fred": {
    "object": 1.0
  },
  "the fred object": {
    "or": 0.5,
    "employee": 0.5
  },
  "fred object or": {
    "the": 1.0
  },
  "object or the": {
    "barney": 0.5,
    "bruce": 0.5
  },
  "or the barney": {
    "object": 1.0
  },
  "the barney object": {
    "or": 1.0
  },
  "barney object or": {
    "the": 1.0
  },
  "or the bruce": {
    "or": 1.0
  },
  "the bruce or": {
    "richard": 1.0
  },
  "bruce or richard": {
    "objects": 1.0
  },
  "or richard objects": {
    "it": 1.0
  },
  "richard objects it": {
    "doesn": 1.0
  },
  "objects it doesn": {
    "t": 1.0
  },
  "t know and": {
    "doesn": 1.0
  },
  "know and doesn": {
    "t": 1.0
  },
  "and doesn t": {
    "care": 1.0
  },
  "doesn t care": {
    "because": 0.5,
    "the": 0.5
  },
  "t care because": {
    "self": 1.0
  },
  "care because self": {
    "always": 1.0
  },
  "because self always": {
    "means": 1.0
  },
  "self always means": {
    "whatever": 1.0
  },
  "always means whatever": {
    "the": 1.0
  },
  "means whatever the": {
    "current": 1.0
  },
  "whatever the current": {
    "object": 1.0
  },
  "the current object": {
    "is": 0.1,
    "within": 0.1,
    "to": 0.1,
    "on": 0.1,
    "self": 0.1,
    "instance": 0.2,
    "the": 0.1,
    "someclass": 0.2
  },
  "current object is": {
    "program": 1.0
  },
  "object is program": {
    "employee": 1.0
  },
  "is program employee": {
    "class": 1.0
  },
  "program employee class": {
    "type": 1.0
  },
  "employee class type": {
    "declare": 1.0
  },
  "class type declare": {
    "object": 0.25,
    "base": 0.75
  },
  "type declare object": {
    "type": 1.0
  },
  "declare object type": {
    "pay": 1.0
  },
  "object type pay": {
    "decimal": 1.0
  },
  "type pay decimal": {
    "7": 1.0
  },
  "pay decimal 7": {
    "2": 1.0
  },
  "decimal 7 2": {
    "hours": 0.25,
    "unit": 0.25,
    "code": 0.5
  },
  "7 2 hours": {
    "decimal": 1.0
  },
  "2 hours decimal": {
    "3": 1.0
  },
  "hours decimal 3": {
    "1": 1.0
  },
  "decimal 3 1": {
    "calcpay": 1.0
  },
  "3 1 calcpay": {
    "procedure": 1.0
  },
  "1 calcpay procedure": {
    "work": 1.0
  },
  "calcpay procedure work": {
    "procedure": 1.0
  },
  "procedure work procedure": {
    "decimal": 1.0
  },
  "work procedure decimal": {
    "decimal": 1.0
  },
  "procedure decimal decimal": {
    "end": 1.0
  },
  "decimal decimal end": {
    "fred": 1.0
  },
  "decimal end fred": {
    "employee": 1.0
  },
  "end fred employee": {
    "declare": 1.0
  },
  "fred employee declare": {
    "object": 1.0
  },
  "employee declare object": {
    "instances": 1.0
  },
  "declare object instances": {
    "barney": 1.0
  },
  "object instances barney": {
    "employee": 1.0
  },
  "instances barney employee": {
    "code": 1.0
  },
  "barney employee code": {
    "fred": 1.0
  },
  "employee code fred": {
    "pay": 1.0
  },
  "code fred pay": {
    "fred": 1.0
  },
  "fred hours code": {
    "outside": 1.0
  },
  "hours code outside": {
    "the": 1.0
  },
  "code outside the": {
    "fred": 1.0
  },
  "outside the fred": {
    "object": 1.0
  },
  "fred object employee": {
    "calcpay": 1.0
  },
  "object employee calcpay": {
    "procedure": 1.0
  },
  "employee calcpay procedure": {
    "method": 1.0
  },
  "calcpay procedure method": {
    "definition": 1.0
  },
  "procedure method definition": {
    "code": 1.0
  },
  "method definition code": {
    "self": 1.0
  },
  "definition code self": {
    "pay": 1.0
  },
  "code self pay": {
    "self": 1.0
  },
  "self hours code": {
    "inside": 1.0
  },
  "hours code inside": {
    "object": 1.0
  },
  "code inside object": {
    "method": 1.0
  },
  "inside object method": {
    "so": 1.0
  },
  "object method so": {
    "the": 1.0
  },
  "method so the": {
    "answer": 0.5,
    "derived": 0.5
  },
  "so the answer": {
    "to": 1.0
  },
  "the answer to": {
    "the": 1.0
  },
  "answer to the": {
    "question": 1.0
  },
  "to the question": {
    "how": 1.0
  },
  "the question how": {
    "does": 1.0
  },
  "question how does": {
    "the": 1.0
  },
  "does the code": {
    "inside": 1.0
  },
  "the code inside": {
    "the": 1.0
  },
  "to affect is": {
    "the": 1.0
  },
  "affect is the": {
    "use": 1.0
  },
  "is the use": {
    "of": 1.0
  },
  "use of self": {
    "as": 1.0
  },
  "of self as": {
    "the": 1.0
  },
  "self as the": {
    "object": 1.0
  },
  "as the object": {
    "name": 1.0
  },
  "the object name": {
    "within": 0.5,
    "self": 0.5
  },
  "object name within": {
    "the": 1.0
  },
  "name within the": {
    "method": 1.0
  },
  "within the method": {
    "s": 1.0
  },
  "the method s": {
    "code": 0.5,
    "proto": 0.5
  },
  "method s code": {
    "constructors": 0.3333333333333333,
    "is": 0.3333333333333333,
    "by": 0.3333333333333333
  },
  "s code constructors": {
    "and": 1.0
  },
  "code constructors and": {
    "destructors": 1.0
  },
  "and destructors there": {
    "are": 1.0
  },
  "destructors there are": {
    "two": 1.0
  },
  "there are two": {
    "more": 0.14285714285714285,
    "ways": 0.2857142857142857,
    "benefits": 0.14285714285714285,
    "new": 0.14285714285714285,
    "forms": 0.14285714285714285,
    "major": 0.14285714285714285
  },
  "are two more": {
    "things": 1.0
  },
  "two more things": {
    "to": 1.0
  },
  "more things to": {
    "know": 1.0
  },
  "things to know": {
    "about": 1.0
  },
  "to know about": {
    "what": 1.0
  },
  "know about what": {
    "happens": 1.0
  },
  "about what happens": {
    "at": 1.0
  },
  "what happens at": {
    "an": 1.0
  },
  "happens at an": {
    "object": 1.0
  },
  "at an object": {
    "s": 1.0
  },
  "an object s": {
    "instantiation": 0.3333333333333333,
    "one": 0.3333333333333333,
    "reference": 0.3333333333333333
  },
  "object s instantiation": {
    "and": 1.0
  },
  "s instantiation and": {
    "destruction": 1.0
  },
  "instantiation and destruction": {
    "those": 1.0
  },
  "and destruction those": {
    "two": 1.0
  },
  "destruction those two": {
    "thi": 1.0
  },
  "those two thi": {
    "ngs": 1.0
  },
  "two thi ngs": {
    "add": 1.0
  },
  "thi ngs add": {
    "two": 1.0
  },
  "ngs add two": {
    "more": 1.0
  },
  "add two more": {
    "oop": 1.0
  },
  "two more oop": {
    "buzzwords": 1.0
  },
  "more oop buzzwords": {
    "to": 1.0
  },
  "oop buzzwords to": {
    "our": 1.0
  },
  "buzzwords to our": {
    "collection": 1.0
  },
  "to our collection": {
    "constructors": 1.0
  },
  "our collection constructors": {
    "and": 1.0
  },
  "collection constructors and": {
    "destructors": 1.0
  },
  "and destructors when": {
    "you": 1.0
  },
  "destructors when you": {
    "talk": 1.0
  },
  "when you talk": {
    "about": 1.0
  },
  "you talk about": {
    "constructors": 1.0
  },
  "talk about constructors": {
    "and": 1.0
  },
  "about constructors and": {
    "destructors": 1.0
  },
  "and destructors in": {
    "other": 0.5,
    "a": 0.5
  },
  "destructors in other": {
    "oop": 0.5,
    "languages": 0.5
  },
  "in other oop": {
    "languages": 1.0
  },
  "other oop languages": {
    "what": 0.16666666666666666,
    "however": 0.16666666666666666,
    "do": 0.16666666666666666,
    "if": 0.16666666666666666,
    "this": 0.16666666666666666,
    "you": 0.16666666666666666
  },
  "oop languages what": {
    "you": 1.0
  },
  "languages what you": {
    "re": 1.0
  },
  "what you re": {
    "actually": 1.0
  },
  "you re actually": {
    "talking": 1.0
  },
  "re actually talking": {
    "about": 1.0
  },
  "actually talking about": {
    "are": 1.0
  },
  "talking about are": {
    "automatic": 1.0
  },
  "about are automatic": {
    "constructors": 1.0
  },
  "are automatic constructors": {
    "a": 1.0
  },
  "automatic constructors a": {
    "nd": 1.0
  },
  "constructors a nd": {
    "destructors": 1.0
  },
  "a nd destructors": {
    "clarion": 1.0
  },
  "nd destructors clarion": {
    "fully": 1.0
  },
  "destructors clarion fully": {
    "supports": 1.0
  },
  "clarion fully supports": {
    "automatic": 1.0
  },
  "fully supports automatic": {
    "constructors": 1.0
  },
  "supports automatic constructors": {
    "and": 1.0
  },
  "automatic constructors and": {
    "destructors": 1.0
  },
  "and destructors an": {
    "automatic": 1.0
  },
  "destructors an automatic": {
    "constructor": 1.0
  },
  "an automatic constructor": {
    "is": 0.5,
    "in": 0.5
  },
  "automatic constructor is": {
    "a": 1.0
  },
  "constructor is a": {
    "specific": 1.0
  },
  "is a specific": {
    "method": 1.0
  },
  "a specific method": {
    "that": 1.0
  },
  "specific method that": {
    "is": 1.0
  },
  "method that is": {
    "automatically": 1.0
  },
  "that is automatically": {
    "called": 1.0
  },
  "is automatically called": {
    "for": 0.5,
    "when": 0.5
  },
  "automatically called for": {
    "you": 1.0
  },
  "called for you": {
    "when": 1.0
  },
  "you when an": {
    "object": 1.0
  },
  "when an object": {
    "is": 1.0
  },
  "an object is": {
    "instantiated": 0.14285714285714285,
    "destroyed": 0.14285714285714285,
    "a": 0.14285714285714285,
    "one": 0.2857142857142857,
    "an": 0.14285714285714285,
    "created": 0.14285714285714285
  },
  "is instantiated no": {
    "matter": 1.0
  },
  "instantiated no matter": {
    "how": 1.0
  },
  "no matter how": {
    "that": 1.0
  },
  "matter how that": {
    "object": 1.0
  },
  "how that object": {
    "is": 1.0
  },
  "is instantiated either": {
    "declared": 1.0
  },
  "instantiated either declared": {
    "in": 1.0
  },
  "either declared in": {
    "a": 1.0
  },
  "in a data": {
    "section": 1.0
  },
  "data section or": {
    "explicitly": 0.5,
    "create": 0.5
  },
  "section or explicitly": {
    "instantiated": 1.0
  },
  "or explicitly instantiated": {
    "with": 1.0
  },
  "explicitly instantiated with": {
    "the": 1.0
  },
  "instantiated with the": {
    "new": 1.0
  },
  "with the new": {
    "procedure": 1.0
  },
  "the new procedure": {
    "to": 1.0
  },
  "new procedure to": {
    "declare": 1.0
  },
  "procedure to declare": {
    "an": 1.0
  },
  "to declare an": {
    "automatic": 0.5,
    "object": 0.5
  },
  "declare an automatic": {
    "constructor": 0.5,
    "destructor": 0.5
  },
  "automatic constructor in": {
    "clarion": 1.0
  },
  "constructor in clarion": {
    "all": 1.0
  },
  "in clarion all": {
    "you": 1.0
  },
  "clarion all you": {
    "need": 1.0
  },
  "all you need": {
    "to": 1.0
  },
  "you need to": {
    "do": 0.21428571428571427,
    "multiple": 0.07142857142857142,
    "initialize": 0.07142857142857142,
    "explicitly": 0.07142857142857142,
    "take": 0.07142857142857142,
    "access": 0.07142857142857142,
    "be": 0.14285714285714285,
    "randomly": 0.07142857142857142,
    "process": 0.07142857142857142,
    "begin": 0.07142857142857142,
    "update": 0.07142857142857142
  },
  "need to do": {
    "is": 0.6666666666666666,
    "that": 0.3333333333333333
  },
  "to do is": {
    "create": 0.5,
    "run": 0.5
  },
  "do is create": {
    "a": 1.0
  },
  "is create a": {
    "method": 1.0
  },
  "create a method": {
    "named": 1.0
  },
  "method named construct": {
    "in": 0.5,
    "which": 0.5
  },
  "named construct in": {
    "your": 1.0
  },
  "construct in your": {
    "class": 1.0
  },
  "in your class": {
    "the": 1.0
  },
  "your class the": {
    "construct": 0.5,
    "destruct": 0.5
  },
  "class the construct": {
    "method": 1.0
  },
  "the construct method": {
    "cannot": 1.0
  },
  "construct method cannot": {
    "receive": 1.0
  },
  "method cannot receive": {
    "any": 1.0
  },
  "cannot receive any": {
    "parameters": 0.5,
    "param": 0.5
  },
  "receive any parameters": {
    "and": 1.0
  },
  "any parameters and": {
    "cannot": 1.0
  },
  "parameters and cannot": {
    "return": 1.0
  },
  "and cannot return": {
    "a": 1.0
  },
  "cannot return a": {
    "v": 0.5,
    "value": 0.5
  },
  "return a v": {
    "alue": 1.0
  },
  "a v alue": {
    "the": 1.0
  },
  "v alue the": {
    "most": 1.0
  },
  "alue the most": {
    "typical": 1.0
  },
  "the most typical": {
    "usage": 1.0
  },
  "most typical usage": {
    "of": 1.0
  },
  "typical usage of": {
    "automatic": 1.0
  },
  "usage of automatic": {
    "constructors": 0.5,
    "destructors": 0.5
  },
  "of automatic constructors": {
    "in": 1.0
  },
  "automatic constructors in": {
    "other": 1.0
  },
  "constructors in other": {
    "languages": 1.0
  },
  "other languages is": {
    "to": 1.0
  },
  "languages is to": {
    "allocate": 0.6666666666666666,
    "de": 0.3333333333333333
  },
  "is to allocate": {
    "memory": 1.0
  },
  "to allocate memory": {
    "for": 1.0
  },
  "allocate memory for": {
    "properties": 0.5,
    "the": 0.5
  },
  "memory for properties": {
    "and": 1.0
  },
  "properties and initialize": {
    "them": 1.0
  },
  "and initialize them": {
    "in": 1.0
  },
  "initialize them in": {
    "clarion": 1.0
  },
  "them in clarion": {
    "since": 0.5,
    "if": 0.5
  },
  "in clarion since": {
    "memory": 0.3333333333333333,
    "automatically": 0.3333333333333333,
    "the": 0.3333333333333333
  },
  "clarion since memory": {
    "is": 1.0
  },
  "since memory is": {
    "automatically": 1.0
  },
  "memory is automatically": {
    "allocated": 1.0
  },
  "is automatically allocated": {
    "for": 1.0
  },
  "automatically allocated for": {
    "variables": 1.0
  },
  "allocated for variables": {
    "the": 1.0
  },
  "for variables the": {
    "most": 1.0
  },
  "variables the most": {
    "common": 1.0
  },
  "the most common": {
    "usage": 0.0625,
    "usa": 0.0625,
    "properties": 0.0625,
    "purpose": 0.0625,
    "use": 0.1875,
    "need": 0.0625,
    "method": 0.0625,
    "relationship": 0.0625,
    "they": 0.0625,
    "access": 0.0625,
    "type": 0.0625,
    "ri": 0.0625,
    "rules": 0.0625,
    "errors": 0.0625
  },
  "most common usage": {
    "would": 1.0
  },
  "common usage would": {
    "probably": 1.0
  },
  "usage would probably": {
    "be": 1.0
  },
  "would probably be": {
    "to": 0.6666666666666666,
    "in": 0.3333333333333333
  },
  "probably be to": {
    "initialize": 0.5,
    "dispose": 0.5
  },
  "be to initialize": {
    "pr": 0.5,
    "and": 0.5
  },
  "to initialize pr": {
    "operties": 1.0
  },
  "initialize pr operties": {
    "to": 1.0
  },
  "pr operties to": {
    "specific": 1.0
  },
  "operties to specific": {
    "starting": 1.0
  },
  "to specific starting": {
    "values": 1.0
  },
  "specific starting values": {
    "and": 1.0
  },
  "starting values and": {
    "to": 1.0
  },
  "values and to": {
    "initialize": 1.0
  },
  "and to initialize": {
    "reference": 1.0
  },
  "to initialize reference": {
    "variable": 1.0
  },
  "initialize reference variable": {
    "properties": 1.0
  },
  "reference variable properties": {
    "an": 0.5,
    "that": 0.5
  },
  "variable properties an": {
    "automatic": 1.0
  },
  "properties an automatic": {
    "destructor": 1.0
  },
  "an automatic destructor": {
    "is": 0.5,
    "as": 0.5
  },
  "automatic destructor is": {
    "a": 1.0
  },
  "destructor is a": {
    "specific": 1.0
  },
  "object is destroyed": {
    "no": 0.25,
    "either": 0.25,
    "and": 0.25,
    "since": 0.25
  },
  "is destroyed no": {
    "matter": 1.0
  },
  "destroyed no matter": {
    "how": 1.0
  },
  "is destroyed either": {
    "by": 1.0
  },
  "destroyed either by": {
    "return": 1.0
  },
  "either by return": {
    "fr": 1.0
  },
  "by return fr": {
    "om": 1.0
  },
  "return fr om": {
    "the": 1.0
  },
  "fr om the": {
    "limit": 1.0
  },
  "om the limit": {
    "of": 1.0
  },
  "the limit of": {
    "its": 1.0
  },
  "limit of its": {
    "local": 1.0
  },
  "of its local": {
    "scope": 1.0
  },
  "its local scope": {
    "or": 1.0
  },
  "local scope or": {
    "explicitly": 1.0
  },
  "scope or explicitly": {
    "destroyed": 1.0
  },
  "or explicitly destroyed": {
    "with": 1.0
  },
  "explicitly destroyed with": {
    "the": 1.0
  },
  "destroyed with the": {
    "dispose": 1.0
  },
  "with the dispose": {
    "procedure": 1.0
  },
  "the dispose procedure": {
    "similar": 1.0
  },
  "dispose procedure similar": {
    "to": 1.0
  },
  "procedure similar to": {
    "the": 1.0
  },
  "similar to the": {
    "constructor": 0.3333333333333333,
    "following": 0.3333333333333333,
    "crc": 0.3333333333333333
  },
  "to the constructor": {
    "you": 1.0
  },
  "the constructor you": {
    "declare": 0.5,
    "simply": 0.5
  },
  "constructor you declare": {
    "an": 1.0
  },
  "you declare an": {
    "automatic": 1.0
  },
  "automatic destructor as": {
    "a": 1.0
  },
  "destructor as a": {
    "method": 1.0
  },
  "as a method": {
    "named": 1.0
  },
  "method named destruct": {
    "in": 0.5,
    "also": 0.5
  },
  "named destruct in": {
    "your": 1.0
  },
  "destruct in your": {
    "class": 1.0
  },
  "class the destruct": {
    "method": 1.0
  },
  "the destruct method": {
    "also": 1.0
  },
  "destruct method also": {
    "cannot": 1.0
  },
  "method also cannot": {
    "receive": 1.0
  },
  "also cannot receive": {
    "any": 1.0
  },
  "receive any param": {
    "eters": 1.0
  },
  "any param eters": {
    "and": 1.0
  },
  "param eters and": {
    "cannot": 1.0
  },
  "eters and cannot": {
    "return": 1.0
  },
  "a value 15": {
    "easing": 1.0
  },
  "value 15 easing": {
    "into": 1.0
  },
  "15 easing into": {
    "oop": 1.0
  },
  "into oop the": {
    "most": 1.0
  },
  "oop the most": {
    "typical": 1.0
  },
  "of automatic destructors": {
    "in": 1.0
  },
  "automatic destructors in": {
    "other": 1.0
  },
  "is to de": {
    "allocate": 1.0
  },
  "to de allocate": {
    "the": 1.0
  },
  "de allocate the": {
    "memory": 1.0
  },
  "allocate the memory": {
    "used": 0.5,
    "for": 0.5
  },
  "memory used for": {
    "properties": 1.0
  },
  "used for properties": {
    "in": 1.0
  },
  "for properties in": {
    "clarion": 1.0
  },
  "properties in clarion": {
    "since": 0.5,
    "the": 0.5
  },
  "clarion since automatically": {
    "allocated": 1.0
  },
  "since automatically allocated": {
    "memory": 1.0
  },
  "allocated memory is": {
    "also": 1.0
  },
  "memory is also": {
    "automatically": 1.0
  },
  "is also automatically": {
    "de": 1.0
  },
  "also automatically de": {
    "allocated": 1.0
  },
  "de allocated the": {
    "most": 1.0
  },
  "allocated the most": {
    "common": 1.0
  },
  "most common usa": {
    "ge": 1.0
  },
  "common usa ge": {
    "would": 1.0
  },
  "usa ge would": {
    "probably": 1.0
  },
  "ge would probably": {
    "be": 1.0
  },
  "be to dispose": {
    "of": 1.0
  },
  "to dispose of": {
    "any": 1.0
  },
  "dispose of any": {
    "reference": 1.0
  },
  "of any reference": {
    "variable": 1.0
  },
  "any reference variable": {
    "properties": 1.0
  },
  "variable properties that": {
    "need": 1.0
  },
  "properties that need": {
    "destruction": 1.0
  },
  "that need destruction": {
    "myclass": 1.0
  },
  "need destruction myclass": {
    "class": 1.0
  },
  "destruction myclass class": {
    "property": 1.0
  },
  "property long method": {
    "procedure": 1.0
  },
  "long method procedure": {
    "construct": 1.0
  },
  "method procedure construct": {
    "procedure": 1.0
  },
  "procedure construct procedure": {
    "automatic": 0.3333333333333333,
    "end": 0.6666666666666666
  },
  "construct procedure automatic": {
    "constructor": 1.0
  },
  "procedure automatic constructor": {
    "destruct": 1.0
  },
  "automatic constructor destruct": {
    "procedure": 1.0
  },
  "constructor destruct procedure": {
    "automatic": 1.0
  },
  "destruct procedure automatic": {
    "destructor": 1.0
  },
  "procedure automatic destructor": {
    "end": 1.0
  },
  "automatic destructor end": {
    "there": 1.0
  },
  "destructor end there": {
    "is": 1.0
  },
  "end there is": {
    "more": 1.0
  },
  "there is more": {
    "about": 1.0
  },
  "is more about": {
    "automatic": 1.0
  },
  "more about automatic": {
    "constructors": 1.0
  },
  "about automatic constructors": {
    "and": 1.0
  },
  "and destructors and": {
    "is": 0.5,
    "while": 0.5
  },
  "destructors and is": {
    "discussed": 1.0
  },
  "and is discussed": {
    "a": 1.0
  },
  "is discussed a": {
    "little": 1.0
  },
  "discussed a little": {
    "later": 1.0
  },
  "a little later": {
    "more": 1.0
  },
  "little later more": {
    "about": 1.0
  },
  "later more about": {
    "encapsulation": 1.0
  },
  "about encapsulation to": {
    "many": 1.0
  },
  "encapsulation to many": {
    "oop": 1.0
  },
  "to many oop": {
    "purists": 1.0
  },
  "many oop purists": {
    "encapsulation": 1.0
  },
  "oop purists encapsulation": {
    "is": 1.0
  },
  "purists encapsulation is": {
    "all": 1.0
  },
  "encapsulation is all": {
    "about": 1.0
  },
  "is all about": {
    "hiding": 1.0
  },
  "all about hiding": {
    "the": 1.0
  },
  "about hiding the": {
    "properties": 1.0
  },
  "hiding the properties": {
    "and": 1.0
  },
  "methods of the": {
    "class": 0.6666666666666666,
    "referenced": 0.1111111111111111,
    "more": 0.1111111111111111,
    "base": 0.1111111111111111
  },
  "the class from": {
    "the": 0.25,
    "which": 0.75
  },
  "class from the": {
    "rest": 0.3333333333333333,
    "vehicle": 0.6666666666666666
  },
  "from the rest": {
    "of": 1.0
  },
  "rest of the": {
    "program": 1.0
  },
  "the program not": {
    "just": 1.0
  },
  "program not just": {
    "cont": 1.0
  },
  "not just cont": {
    "ainerizing": 1.0
  },
  "just cont ainerizing": {
    "them": 1.0
  },
  "cont ainerizing them": {
    "this": 1.0
  },
  "ainerizing them this": {
    "makes": 1.0
  },
  "them this makes": {
    "them": 1.0
  },
  "makes them private": {
    "property": 1.0
  },
  "them private property": {
    "and": 1.0
  },
  "private property and": {
    "the": 1.0
  },
  "property and the": {
    "clarion": 0.5,
    "grandmas": 0.5
  },
  "and the clarion": {
    "language": 1.0
  },
  "clarion language fully": {
    "supports": 1.0
  },
  "language fully supports": {
    "this": 1.0
  },
  "fully supports this": {
    "with": 1.0
  },
  "supports this with": {
    "the": 1.0
  },
  "this with the": {
    "private": 1.0
  },
  "with the private": {
    "attribute": 0.3333333333333333,
    "or": 0.6666666666666666
  },
  "the private attribute": {
    "the": 0.5,
    "on": 0.16666666666666666,
    "means": 0.16666666666666666,
    "specifies": 0.16666666666666666
  },
  "private attribute the": {
    "private": 0.3333333333333333,
    "properties": 0.6666666666666666
  },
  "attribute the private": {
    "attribute": 1.0
  },
  "private attribute on": {
    "a": 1.0
  },
  "attribute on a": {
    "property": 0.25,
    "method": 0.25,
    "view": 0.5
  },
  "on a property": {
    "declaration": 1.0
  },
  "a property declaration": {
    "or": 1.0
  },
  "property declaration or": {
    "a": 1.0
  },
  "declaration or a": {
    "method": 1.0
  },
  "or a method": {
    "prototype": 1.0
  },
  "a method prototype": {
    "means": 1.0
  },
  "method prototype means": {
    "that": 1.0
  },
  "prototype means that": {
    "the": 1.0
  },
  "means that the": {
    "property": 0.5,
    "actual": 0.25,
    "code": 0.25
  },
  "that the property": {
    "or": 1.0
  },
  "or method is": {
    "visible": 0.3333333333333333,
    "only": 0.3333333333333333,
    "declared": 0.3333333333333333
  },
  "method is visible": {
    "only": 1.0
  },
  "is visible only": {
    "to": 1.0
  },
  "visible only to": {
    "the": 1.0
  },
  "to the other": {
    "methods": 1.0
  },
  "the other methods": {
    "within": 1.0
  },
  "other methods within": {
    "that": 1.0
  },
  "methods within that": {
    "class": 1.0
  },
  "within that class": {
    "this": 1.0
  },
  "that class this": {
    "hides": 0.5,
    "only": 0.5
  },
  "class this hides": {
    "them": 1.0
  },
  "this hides them": {
    "from": 1.0
  },
  "hides them from": {
    "everything": 1.0
  },
  "them from everything": {
    "outside": 1.0
  },
  "from everything outside": {
    "the": 1.0
  },
  "everything outside the": {
    "class": 1.0
  },
  "outside the class": {
    "without": 0.5,
    "within": 0.5
  },
  "the class without": {
    "the": 1.0
  },
  "class without the": {
    "private": 1.0
  },
  "without the private": {
    "attribute": 1.0
  },
  "attribute the properties": {
    "and": 1.0
  },
  "methods are public": {
    "and": 1.0
  },
  "are public and": {
    "the": 0.5,
    "visible": 0.5
  },
  "public and the": {
    "rest": 1.0
  },
  "and the rest": {
    "of": 1.0
  },
  "rest of your": {
    "program": 1.0
  },
  "your program can": {
    "access": 1.0
  },
  "program can access": {
    "them": 1.0
  },
  "can access them": {
    "whenever": 1.0
  },
  "access them whenever": {
    "the": 1.0
  },
  "them whenever the": {
    "object": 1.0
  },
  "whenever the object": {
    "has": 1.0
  },
  "the object has": {
    "been": 1.0
  },
  "object has been": {
    "instantiated": 1.0
  },
  "has been instantiated": {
    "and": 1.0
  },
  "been instantiated and": {
    "is": 1.0
  },
  "instantiated and is": {
    "in": 1.0
  },
  "and is in": {
    "scope": 1.0
  },
  "is in scope": {
    "program": 0.5,
    "clarion": 0.5
  },
  "in scope program": {
    "myclass": 1.0
  },
  "scope program myclass": {
    "class": 1.0
  },
  "program myclass class": {
    "myproperty": 0.25,
    "declare": 0.5,
    "type": 0.25
  },
  "myclass class myproperty": {
    "long": 1.0
  },
  "class myproperty long": {
    "private": 1.0
  },
  "myproperty long private": {
    "private": 1.0
  },
  "long private private": {
    "property": 0.5,
    "no": 0.5
  },
  "private private property": {
    "method": 1.0
  },
  "private property method": {
    "procedure": 1.0
  },
  "property method procedure": {
    "mymethod": 1.0
  },
  "method procedure mymethod": {
    "procedure": 1.0
  },
  "procedure mymethod procedure": {
    "private": 1.0
  },
  "mymethod procedure private": {
    "private": 1.0
  },
  "procedure private private": {
    "method": 1.0
  },
  "private private method": {
    "end": 1.0
  },
  "private method end": {
    "code": 0.5,
    "twoclass": 0.5
  },
  "method end code": {
    "myclass": 1.0
  },
  "end code myclass": {
    "mymethod": 1.0
  },
  "code myclass mymethod": {
    "invalid": 1.0
  },
  "myclass mymethod invalid": {
    "here": 1.0
  },
  "mymethod invalid here": {
    "myclass": 1.0
  },
  "invalid here myclass": {
    "method": 1.0
  },
  "here myclass method": {
    "valid": 0.5,
    "procedure": 0.5
  },
  "myclass method valid": {
    "here": 1.0
  },
  "method valid here": {
    "myclass": 1.0
  },
  "valid here myclass": {
    "myproperty": 1.0
  },
  "here myclass myproperty": {
    "10": 1.0
  },
  "myclass myproperty 10": {
    "invalid": 1.0
  },
  "myproperty 10 invalid": {
    "here": 0.3333333333333333,
    "not": 0.3333333333333333,
    "out": 0.3333333333333333
  },
  "10 invalid here": {
    "myclass": 1.0
  },
  "myclass method procedure": {
    "code": 1.0
  },
  "method procedure code": {
    "self": 1.0
  },
  "procedure code self": {
    "mymethod": 0.14285714285714285,
    "myproperty": 0.14285714285714285,
    "aproperty": 0.14285714285714285,
    "createcrust": 0.14285714285714285,
    "queref": 0.14285714285714285,
    "objectq": 0.14285714285714285,
    "anotherclassref": 0.14285714285714285
  },
  "code self mymethod": {
    "valid": 1.0
  },
  "self mymethod valid": {
    "here": 1.0
  },
  "mymethod valid here": {
    "self": 1.0
  },
  "valid here self": {
    "myproperty": 1.0
  },
  "here self myproperty": {
    "10": 1.0
  },
  "self myproperty 10": {
    "valid": 1.0
  },
  "myproperty 10 valid": {
    "here": 1.0
  },
  "10 valid here": {
    "there": 1.0
  },
  "valid here there": {
    "s": 1.0
  },
  "here there s": {
    "even": 1.0
  },
  "there s even": {
    "more": 1.0
  },
  "s even more": {
    "to": 1.0
  },
  "even more to": {
    "say": 1.0
  },
  "more to say": {
    "about": 1.0
  },
  "to say about": {
    "encapsulation": 1.0
  },
  "say about encapsulation": {
    "and": 1.0
  },
  "about encapsulation and": {
    "public": 1.0
  },
  "encapsulation and public": {
    "versus": 1.0
  },
  "and public versus": {
    "private": 1.0
  },
  "public versus private": {
    "stuff": 1.0
  },
  "versus private stuff": {
    "in": 1.0
  },
  "private stuff in": {
    "clarion": 1.0
  },
  "stuff in clarion": {
    "but": 1.0
  },
  "in clarion but": {
    "first": 1.0
  },
  "clarion but first": {
    "we": 1.0
  },
  "but first we": {
    "need": 1.0
  },
  "first we need": {
    "to": 1.0
  },
  "need to introduce": {
    "another": 1.0
  },
  "to introduce another": {
    "oop": 1.0
  },
  "introduce another oop": {
    "concept": 1.0
  },
  "another oop concept": {
    "clarion": 1.0
  },
  "oop concept clarion": {
    "language": 1.0
  },
  "concept clarion language": {
    "programming": 1.0
  },
  "programming guide 16": {
    "inheritance": 1.0
  },
  "guide 16 inheritance": {
    "ok": 1.0
  },
  "16 inheritance ok": {
    "so": 1.0
  },
  "inheritance ok so": {
    "far": 1.0
  },
  "ok so far": {
    "we": 1.0
  },
  "so far we": {
    "ve": 1.0
  },
  "far we ve": {
    "learned": 1.0
  },
  "we ve learned": {
    "some": 1.0
  },
  "ve learned some": {
    "major": 1.0
  },
  "learned some major": {
    "oop": 1.0
  },
  "some major oop": {
    "buzzwords": 1.0
  },
  "properties methods objects": {
    "encapsulation": 0.5,
    "instantiation": 0.5
  },
  "methods objects encapsulation": {
    "instantiation": 1.0
  },
  "objects encapsulation instantiation": {
    "constructors": 1.0
  },
  "encapsulation instantiation constructors": {
    "and": 1.0
  },
  "instantiation constructors and": {
    "destructors": 1.0
  },
  "and destructors the": {
    "next": 1.0
  },
  "destructors the next": {
    "one": 1.0
  },
  "the next one": {
    "is": 1.0
  },
  "next one is": {
    "inheritance": 1.0
  },
  "one is inheritance": {
    "you": 1.0
  },
  "is inheritance you": {
    "all": 1.0
  },
  "inheritance you all": {
    "know": 1.0
  },
  "you all know": {
    "what": 1.0
  },
  "all know what": {
    "inheritance": 1.0
  },
  "know what inheritance": {
    "is": 1.0
  },
  "what inheritance is": {
    "don": 1.0
  },
  "inheritance is don": {
    "t": 1.0
  },
  "is don t": {
    "you": 1.0
  },
  "don t you": {
    "inheritance": 1.0
  },
  "t you inheritance": {
    "is": 1.0
  },
  "you inheritance is": {
    "where": 1.0
  },
  "inheritance is where": {
    "someone": 1.0
  },
  "is where someone": {
    "dies": 1.0
  },
  "where someone dies": {
    "and": 1.0
  },
  "someone dies and": {
    "leaves": 1.0
  },
  "dies and leaves": {
    "you": 1.0
  },
  "and leaves you": {
    "a": 1.0
  },
  "leaves you a": {
    "million": 1.0
  },
  "you a million": {
    "dollars": 1.0
  },
  "a million dollars": {
    "right": 1.0
  },
  "million dollars right": {
    "well": 1.0
  },
  "dollars right well": {
    "almost": 1.0
  },
  "right well almost": {
    "inheritance": 1.0
  },
  "well almost inheritance": {
    "is": 1.0
  },
  "almost inheritance is": {
    "closely": 1.0
  },
  "inheritance is closely": {
    "coupled": 1.0
  },
  "is closely coupled": {
    "to": 1.0
  },
  "closely coupled to": {
    "another": 1.0
  },
  "coupled to another": {
    "common": 1.0
  },
  "to another common": {
    "oop": 1.0
  },
  "another common oop": {
    "term": 0.5,
    "technique": 0.5
  },
  "common oop term": {
    "to": 0.5,
    "that": 0.5
  },
  "oop term to": {
    "derive": 1.0
  },
  "term to derive": {
    "my": 1.0
  },
  "to derive my": {
    "tr": 1.0
  },
  "derive my tr": {
    "usty": 1.0
  },
  "my tr usty": {
    "oxford": 1.0
  },
  "tr usty oxford": {
    "english": 1.0
  },
  "usty oxford english": {
    "dictionary": 1.0
  },
  "dictionary defines derive": {
    "as": 1.0
  },
  "defines derive as": {
    "to": 1.0
  },
  "derive as to": {
    "convey": 1.0
  },
  "as to convey": {
    "from": 1.0
  },
  "to convey from": {
    "one": 1.0
  },
  "convey from one": {
    "treated": 1.0
  },
  "from one treated": {
    "as": 1.0
  },
  "one treated as": {
    "a": 1.0
  },
  "treated as a": {
    "source": 1.0
  },
  "as a source": {
    "to": 1.0
  },
  "a source to": {
    "another": 1.0
  },
  "source to another": {
    "as": 1.0
  },
  "to another as": {
    "by": 1.0
  },
  "another as by": {
    "transmission": 1.0
  },
  "as by transmission": {
    "descent": 1.0
  },
  "by transmission descent": {
    "etc": 1.0
  },
  "transmission descent etc": {
    "to": 1.0
  },
  "descent etc to": {
    "transmit": 1.0
  },
  "etc to transmit": {
    "impart": 1.0
  },
  "to transmit impart": {
    "communicate": 1.0
  },
  "transmit impart communicate": {
    "pass": 1.0
  },
  "impart communicate pass": {
    "on": 1.0
  },
  "communicate pass on": {
    "hand": 1.0
  },
  "pass on hand": {
    "on": 1.0
  },
  "on hand on": {
    "to": 1.0
  },
  "hand on to": {
    "derive": 1.0
  },
  "on to derive": {
    "a": 1.0
  },
  "to derive a": {
    "new": 1.0
  },
  "derive a new": {
    "class": 1.0
  },
  "a new class": {
    "you": 1.0
  },
  "new class you": {
    "simply": 1.0
  },
  "class you simply": {
    "name": 1.0
  },
  "you simply name": {
    "the": 1.0
  },
  "simply name the": {
    "parent": 0.5,
    "class": 0.5
  },
  "name the parent": {
    "class": 1.0
  },
  "the parent class": {
    "as": 0.14285714285714285,
    "had": 0.14285714285714285,
    "method": 0.14285714285714285,
    "constructor": 0.42857142857142855,
    "s": 0.14285714285714285
  },
  "parent class as": {
    "the": 1.0
  },
  "class as the": {
    "par": 0.3333333333333333,
    "data": 0.3333333333333333,
    "parameter": 0.3333333333333333
  },
  "as the par": {
    "ameter": 1.0
  },
  "the par ameter": {
    "to": 1.0
  },
  "par ameter to": {
    "the": 1.0
  },
  "ameter to the": {
    "new": 1.0
  },
  "to the new": {
    "class": 1.0
  },
  "the new class": {
    "statement": 0.25,
    "declaration": 0.25,
    "is": 0.25,
    "the": 0.25
  },
  "new class statement": {
    "and": 1.0
  },
  "class statement and": {
    "the": 1.0
  },
  "statement and the": {
    "new": 1.0
  },
  "and the new": {
    "class": 1.0
  },
  "new class declaration": {
    "starts": 1.0
  },
  "class declaration starts": {
    "out": 1.0
  },
  "declaration starts out": {
    "with": 1.0
  },
  "starts out with": {
    "everything": 1.0
  },
  "out with everything": {
    "the": 1.0
  },
  "with everything the": {
    "parent": 1.0
  },
  "everything the parent": {
    "class": 1.0
  },
  "parent class had": {
    "the": 1.0
  },
  "class had the": {
    "difference": 1.0
  },
  "had the difference": {
    "here": 1.0
  },
  "the difference here": {
    "is": 1.0
  },
  "difference here is": {
    "that": 1.0
  },
  "here is that": {
    "in": 1.0
  },
  "is that in": {
    "oop": 1.0
  },
  "in oop no": {
    "one": 1.0
  },
  "oop no one": {
    "has": 1.0
  },
  "no one has": {
    "to": 1.0
  },
  "one has to": {
    "die": 1.0
  },
  "has to die": {
    "for": 1.0
  },
  "to die for": {
    "the": 1.0
  },
  "die for the": {
    "child": 1.0
  },
  "for the child": {
    "to": 1.0
  },
  "the child to": {
    "inherit": 1.0
  },
  "child to inherit": {
    "this": 1.0
  },
  "to inherit this": {
    "brings": 1.0
  },
  "inherit this brings": {
    "up": 1.0
  },
  "this brings up": {
    "a": 1.0
  },
  "brings up a": {
    "couple": 1.0
  },
  "up a couple": {
    "more": 1.0
  },
  "a couple more": {
    "common": 1.0
  },
  "couple more common": {
    "oop": 1.0
  },
  "more common oop": {
    "terms": 0.5,
    "term": 0.5
  },
  "common oop terms": {
    "base": 1.0
  },
  "oop terms base": {
    "class": 1.0
  },
  "terms base class": {
    "and": 1.0
  },
  "base class and": {
    "derived": 0.25,
    "the": 0.75
  },
  "class and derived": {
    "classes": 1.0
  },
  "and derived classes": {
    "a": 0.3333333333333333,
    "but": 0.3333333333333333,
    "objects": 0.3333333333333333
  },
  "derived classes a": {
    "base": 0.5,
    "class": 0.5
  },
  "classes a base": {
    "class": 1.0
  },
  "a base class": {
    "is": 0.16666666666666666,
    "it": 0.16666666666666666,
    "method": 0.16666666666666666,
    "call": 0.16666666666666666,
    "propertya": 0.16666666666666666,
    "to": 0.16666666666666666
  },
  "base class is": {
    "a": 1.0
  },
  "class is a": {
    "class": 1.0
  },
  "is a class": {
    "which": 1.0
  },
  "a class which": {
    "has": 1.0
  },
  "class which has": {
    "no": 1.0
  },
  "which has no": {
    "parameter": 1.0
  },
  "has no parameter": {
    "to": 1.0
  },
  "no parameter to": {
    "its": 1.0
  },
  "parameter to its": {
    "class": 1.0
  },
  "to its class": {
    "statement": 1.0
  },
  "its class statement": {
    "meaning": 1.0
  },
  "class statement meaning": {
    "it": 1.0
  },
  "statement meaning it": {
    "doesn": 1.0
  },
  "meaning it doesn": {
    "t": 1.0
  },
  "doesn t inherit": {
    "anything": 1.0
  },
  "t inherit anything": {
    "while": 1.0
  },
  "inherit anything while": {
    "a": 1.0
  },
  "anything while a": {
    "derived": 1.0
  },
  "while a derived": {
    "class": 1.0
  },
  "a derived class": {
    "always": 0.05263157894736842,
    "statement": 0.05263157894736842,
    "inherits": 0.15789473684210525,
    "exactly": 0.05263157894736842,
    "if": 0.05263157894736842,
    "object": 0.05263157894736842,
    "can": 0.05263157894736842,
    "method": 0.05263157894736842,
    "structure": 0.05263157894736842,
    "may": 0.05263157894736842,
    "does": 0.05263157894736842,
    "to": 0.10526315789473684,
    "constructor": 0.05263157894736842,
    "destructor": 0.05263157894736842,
    "has": 0.05263157894736842,
    "declaration": 0.05263157894736842
  },
  "derived class always": {
    "has": 0.5,
    "exec": 0.5
  },
  "class always has": {
    "a": 1.0
  },
  "always has a": {
    "parameter": 1.0
  },
  "has a parameter": {
    "naming": 1.0
  },
  "a parameter naming": {
    "its": 1.0
  },
  "parameter naming its": {
    "parent": 1.0
  },
  "naming its parent": {
    "class": 1.0
  },
  "its parent class": {
    "notice": 0.2,
    "which": 0.2,
    "it": 0.2,
    "and": 0.2,
    "method": 0.2
  },
  "parent class notice": {
    "that": 1.0
  },
  "class notice that": {
    "i": 0.5,
    "the": 0.5
  },
  "notice that i": {
    "did": 1.0
  },
  "that i did": {
    "n": 1.0
  },
  "i did n": {
    "ot": 1.0
  },
  "did n ot": {
    "say": 1.0
  },
  "n ot say": {
    "that": 1.0
  },
  "ot say that": {
    "the": 1.0
  },
  "that the parameter": {
    "to": 0.5,
    "lists": 0.5
  },
  "the parameter to": {
    "the": 0.3333333333333333,
    "a": 0.3333333333333333,
    "new": 0.3333333333333333
  },
  "parameter to the": {
    "derived": 1.0
  },
  "to the derived": {
    "class": 1.0
  },
  "the derived class": {
    "statement": 0.03225806451612903,
    "inherits": 0.03225806451612903,
    "woul": 0.03225806451612903,
    "this": 0.03225806451612903,
    "full": 0.03225806451612903,
    "also": 0.03225806451612903,
    "construct": 0.06451612903225806,
    "is": 0.03225806451612903,
    "s": 0.03225806451612903,
    "with": 0.06451612903225806,
    "can": 0.03225806451612903,
    "exists": 0.03225806451612903,
    "being": 0.03225806451612903,
    "contains": 0.03225806451612903,
    "structure": 0.06451612903225806,
    "for": 0.03225806451612903,
    "method": 0.0967741935483871,
    "someclass": 0.03225806451612903,
    "does": 0.03225806451612903,
    "constructor": 0.06451612903225806,
    "destructor": 0.03225806451612903,
    "the": 0.03225806451612903,
    "usually": 0.03225806451612903,
    "may": 0.03225806451612903,
    "using": 0.03225806451612903
  },
  "derived class statement": {
    "names": 1.0
  },
  "class statement names": {
    "a": 0.5,
    "its": 0.5
  },
  "statement names a": {
    "base": 1.0
  },
  "names a base": {
    "class": 1.0
  },
  "base class it": {
    "doesn": 0.5,
    "kno": 0.5
  },
  "class it doesn": {
    "t": 1.0
  },
  "doesn t the": {
    "parameter": 1.0
  },
  "t the parameter": {
    "to": 1.0
  },
  "parameter to a": {
    "derived": 1.0
  },
  "to a derived": {
    "class": 1.0
  },
  "statement names its": {
    "parent": 1.0
  },
  "names its parent": {
    "class": 1.0
  },
  "parent class which": {
    "could": 1.0
  },
  "class which could": {
    "be": 1.0
  },
  "which could be": {
    "a": 1.0
  },
  "could be a": {
    "either": 1.0
  },
  "be a either": {
    "base": 1.0
  },
  "a either base": {
    "class": 1.0
  },
  "either base class": {
    "or": 1.0
  },
  "base class or": {
    "another": 1.0
  },
  "class or another": {
    "derived": 1.0
  },
  "or another derived": {
    "class": 1.0
  },
  "another derived class": {
    "this": 1.0
  },
  "derived class this": {
    "means": 0.5,
    "allows": 0.5
  },
  "class this means": {
    "that": 1.0
  },
  "means that you": {
    "can": 1.0
  },
  "have multiple generations": {
    "of": 1.0
  },
  "multiple generations of": {
    "inheritance": 1.0
  },
  "generations of inheritance": {
    "program": 1.0
  },
  "of inheritance program": {
    "myclass": 1.0
  },
  "inheritance program myclass": {
    "class": 1.0
  },
  "class declare base": {
    "class": 1.0
  },
  "declare base class": {
    "property": 0.5,
    "apple": 0.16666666666666666,
    "apples": 0.16666666666666666,
    "flavor": 0.16666666666666666
  },
  "base class property": {
    "long": 1.0
  },
  "property long myproperty": {
    "long": 1.0
  },
  "long myproperty long": {
    "private": 0.5,
    "protect": 0.5
  },
  "private private no": {
    "access": 1.0
  },
  "private no access": {
    "in": 1.0
  },
  "no access in": {
    "derived": 1.0
  },
  "access in derived": {
    "class": 1.0
  },
  "in derived class": {
    "method": 1.0
  },
  "derived class method": {
    "procedure": 0.2,
    "to": 0.2,
    "that": 0.2,
    "does": 0.2,
    "s": 0.2
  },
  "class method procedure": {
    "end": 1.0
  },
  "end classa class": {
    "myclass": 1.0
  },
  "classa class myclass": {
    "declare": 1.0
  },
  "class myclass declare": {
    "derived": 1.0
  },
  "myclass declare derived": {
    "class": 1.0
  },
  "declare derived class": {
    "aproperty": 0.5,
    "crumbletop": 0.16666666666666666,
    "topcrust": 0.16666666666666666,
    "carameltop": 0.16666666666666666
  },
  "derived class aproperty": {
    "long": 1.0
  },
  "class aproperty long": {
    "which": 0.3333333333333333,
    "amethod": 0.3333333333333333,
    "construct": 0.3333333333333333
  },
  "aproperty long which": {
    "inherits": 1.0
  },
  "long which inherits": {
    "amethod": 1.0
  },
  "which inherits amethod": {
    "procedure": 1.0
  },
  "inherits amethod procedure": {
    "myclass": 1.0
  },
  "amethod procedure myclass": {
    "property": 1.0
  },
  "procedure myclass property": {
    "and": 1.0
  },
  "myclass property and": {
    "end": 1.0
  },
  "property and end": {
    "myclass": 1.0
  },
  "and end myclass": {
    "method": 1.0
  },
  "end myclass method": {
    "code": 1.0
  },
  "myclass method code": {
    "classa": 1.0
  },
  "method code classa": {
    "method": 1.0
  },
  "code classa method": {
    "valid": 1.0
  },
  "classa method valid": {
    "method": 1.0
  },
  "method valid method": {
    "call": 1.0
  },
  "valid method call": {
    "classa": 1.0
  },
  "method call classa": {
    "myproperty": 1.0
  },
  "call classa myproperty": {
    "10": 1.0
  },
  "classa myproperty 10": {
    "invalid": 1.0
  },
  "10 invalid not": {
    "accessible": 1.0
  },
  "invalid not accessible": {
    "outside": 1.0
  },
  "not accessible outside": {
    "myclass": 1.0
  },
  "accessible outside myclass": {
    "myclass": 1.0
  },
  "outside myclass myclass": {
    "amethod": 1.0
  },
  "myclass myclass amethod": {
    "invalid": 1.0
  },
  "myclass amethod invalid": {
    "inheritance": 1.0
  },
  "amethod invalid inheritance": {
    "only": 1.0
  },
  "invalid inheritance only": {
    "is": 1.0
  },
  "inheritance only is": {
    "one": 1.0
  },
  "only is one": {
    "way": 1.0
  },
  "is one way": {
    "so": 0.5,
    "there": 0.5
  },
  "one way so": {
    "back": 1.0
  },
  "way so back": {
    "to": 1.0
  },
  "so back to": {
    "inheritance": 1.0
  },
  "back to inheritance": {
    "a": 1.0
  },
  "to inheritance a": {
    "derived": 1.0
  },
  "inheritance a derived": {
    "class": 1.0
  },
  "derived class inherits": {
    "all": 0.4,
    "it": 0.2,
    "the": 0.2,
    "properties": 0.2
  },
  "class inherits all": {
    "the": 1.0
  },
  "inherits all the": {
    "public": 0.6666666666666666,
    "properties": 0.3333333333333333
  },
  "all the public": {
    "properties": 0.5,
    "and": 0.5
  },
  "the public properties": {
    "and": 1.0
  },
  "public properties and": {
    "methods": 1.0
  },
  "methods of its": {
    "parent": 1.0
  },
  "of its parent": {
    "class": 0.5,
    "clas": 0.5
  },
  "parent class it": {
    "also": 1.0
  },
  "class it also": {
    "inherits": 0.5,
    "contains": 0.5
  },
  "it also inherits": {
    "private": 1.0
  },
  "also inherits private": {
    "properties": 1.0
  },
  "inherits private properties": {
    "and": 1.0
  },
  "private properties and": {
    "methods": 1.0
  },
  "and methods but": {
    "cannot": 1.0
  },
  "methods but cannot": {
    "access": 1.0
  },
  "but cannot access": {
    "them": 1.0
  },
  "cannot access them": {
    "in": 1.0
  },
  "access them in": {
    "any": 1.0
  },
  "them in any": {
    "of": 1.0
  },
  "in any of": {
    "th": 0.5,
    "the": 0.5
  },
  "any of th": {
    "e": 1.0
  },
  "of th e": {
    "derived": 1.0
  },
  "th e derived": {
    "class": 1.0
  },
  "e derived class": {
    "methods": 1.0
  },
  "derived class methods": {
    "because": 0.2,
    "21": 0.2,
    "this": 0.2,
    "virtual": 0.2,
    "prepending": 0.2
  },
  "class methods because": {
    "they": 1.0
  },
  "methods because they": {
    "are": 1.0
  },
  "because they are": {
    "truly": 1.0
  },
  "they are truly": {
    "the": 1.0
  },
  "are truly the": {
    "private": 1.0
  },
  "truly the private": {
    "property": 1.0
  },
  "the private property": {
    "of": 0.5,
    "or": 0.5
  },
  "private property of": {
    "the": 1.0
  },
  "property of the": {
    "class": 1.0
  },
  "the class which": {
    "declares": 1.0
  },
  "class which declares": {
    "them": 1.0
  },
  "which declares them": {
    "what": 1.0
  },
  "declares them what": {
    "this": 1.0
  },
  "them what this": {
    "all": 1.0
  },
  "what this all": {
    "means": 1.0
  },
  "this all means": {
    "is": 1.0
  },
  "all means is": {
    "that": 1.0
  },
  "means is that": {
    "when": 1.0
  },
  "is that when": {
    "you": 1.0
  },
  "that when you": {
    "derive": 0.3333333333333333,
    "look": 0.3333333333333333,
    "use": 0.3333333333333333
  },
  "when you derive": {
    "a": 1.0
  },
  "you derive a": {
    "class": 0.3333333333333333,
    "bicycle": 0.3333333333333333,
    "car": 0.3333333333333333
  },
  "derive a class": {
    "from": 1.0
  },
  "a class from": {
    "a": 1.0
  },
  "class from a": {
    "parent": 1.0
  },
  "from a parent": {
    "class": 1.0
  },
  "a parent class": {
    "there": 0.2,
    "method": 0.4,
    "has": 0.2,
    "even": 0.2
  },
  "parent class there": {
    "is": 1.0
  },
  "class there is": {
    "no": 1.0
  },
  "is no need": {
    "to": 0.5,
    "for": 0.5
  },
  "no need to": {
    "duplicate": 1.0
  },
  "need to duplicate": {
    "all": 1.0
  },
  "to duplicate all": {
    "the": 1.0
  },
  "duplicate all the": {
    "functionality": 1.0
  },
  "all the functionality": {
    "already": 1.0
  },
  "the functionality already": {
    "in": 1.0
  },
  "functionality already in": {
    "the": 1.0
  },
  "already in the": {
    "parent": 1.0
  },
  "in the parent": {
    "clas": 0.3333333333333333,
    "re": 0.3333333333333333,
    "record": 0.3333333333333333
  },
  "the parent clas": {
    "s": 1.0
  },
  "parent clas s": {
    "because": 0.5,
    "that": 0.5
  },
  "clas s because": {
    "the": 1.0
  },
  "s because the": {
    "derived": 1.0
  },
  "because the derived": {
    "class": 1.0
  },
  "class inherits it": {
    "all": 1.0
  },
  "inherits it all": {
    "so": 1.0
  },
  "it all so": {
    "why": 1.0
  },
  "all so why": {
    "derive": 1.0
  },
  "so why derive": {
    "at": 1.0
  },
  "why derive at": {
    "all": 1.0
  },
  "derive at all": {
    "so": 1.0
  },
  "at all so": {
    "you": 1.0
  },
  "all so you": {
    "can": 1.0
  },
  "you can re": {
    "use": 1.0
  },
  "can re use": {
    "your": 1.0
  },
  "re use your": {
    "code": 1.0
  },
  "use your code": {
    "and": 1.0
  },
  "your code and": {
    "maintain": 0.5,
    "now": 0.5
  },
  "code and maintain": {
    "it": 1.0
  },
  "and maintain it": {
    "in": 1.0
  },
  "maintain it in": {
    "only": 1.0
  },
  "it in only": {
    "one": 1.0
  },
  "in only one": {
    "place": 1.0
  },
  "only one place": {
    "because": 1.0
  },
  "one place because": {
    "when": 1.0
  },
  "place because when": {
    "properly": 1.0
  },
  "because when properly": {
    "designed": 1.0
  },
  "when properly designed": {
    "a": 0.5,
    "the": 0.5
  },
  "properly designed a": {
    "set": 1.0
  },
  "designed a set": {
    "of": 1.0
  },
  "set of classes": {
    "has": 1.0
  },
  "of classes has": {
    "all": 1.0
  },
  "classes has all": {
    "the": 1.0
  },
  "has all the": {
    "most": 1.0
  },
  "all the most": {
    "common": 1.0
  },
  "most common properties": {
    "and": 1.0
  },
  "common properties and": {
    "methods": 1.0
  },
  "and methods for": {
    "objects": 1.0
  },
  "methods for objects": {
    "of": 1.0
  },
  "for objects of": {
    "the": 1.0
  },
  "objects of the": {
    "same": 1.0
  },
  "the same or": {
    "v": 1.0
  },
  "same or v": {
    "ery": 1.0
  },
  "or v ery": {
    "similar": 1.0
  },
  "v ery similar": {
    "type": 1.0
  },
  "ery similar type": {
    "declared": 1.0
  },
  "similar type declared": {
    "in": 1.0
  },
  "type declared in": {
    "the": 1.0
  },
  "in the base": {
    "class": 1.0
  },
  "the base class": {
    "derived": 0.03571428571428571,
    "would": 0.03571428571428571,
    "destructor": 0.10714285714285714,
    "because": 0.03571428571428571,
    "preparepie": 0.03571428571428571,
    "including": 0.03571428571428571,
    "code": 0.10714285714285714,
    "it": 0.03571428571428571,
    "without": 0.03571428571428571,
    "being": 0.03571428571428571,
    "can": 0.03571428571428571,
    "to": 0.03571428571428571,
    "as": 0.03571428571428571,
    "method": 0.17857142857142858,
    "constructor": 0.03571428571428571,
    "construct": 0.03571428571428571,
    "and": 0.07142857142857142,
    "definition": 0.03571428571428571,
    "by": 0.03571428571428571
  },
  "base class derived": {
    "classes": 1.0
  },
  "class derived classes": {
    "then": 1.0
  },
  "derived classes then": {
    "only": 1.0
  },
  "classes then only": {
    "need": 1.0
  },
  "then only need": {
    "to": 1.0
  },
  "only need to": {
    "declare": 0.5,
    "access": 0.5
  },
  "need to declare": {
    "the": 0.5,
    "them": 0.5
  },
  "to declare the": {
    "properties": 1.0
  },
  "declare the properties": {
    "and": 1.0
  },
  "and methods which": {
    "differentiate": 1.0
  },
  "methods which differentiate": {
    "them": 1.0
  },
  "which differentiate them": {
    "from": 1.0
  },
  "differentiate them from": {
    "any": 1.0
  },
  "them from any": {
    "other": 1.0
  },
  "from any other": {
    "classes": 1.0
  },
  "any other classes": {
    "that": 1.0
  },
  "other classes that": {
    "might": 1.0
  },
  "classes that might": {
    "be": 1.0
  },
  "that might be": {
    "derived": 1.0
  },
  "might be derived": {
    "from": 1.0
  },
  "be derived from": {
    "the": 1.0
  },
  "derived from the": {
    "same": 0.5,
    "parent": 0.16666666666666666,
    "base": 0.16666666666666666,
    "class": 0.16666666666666666
  },
  "from the same": {
    "parent": 0.4,
    "perspective": 0.2,
    "base": 0.2,
    "file": 0.2
  },
  "the same parent": {
    "as": 0.5,
    "an": 0.5
  },
  "same parent as": {
    "easy": 1.0
  },
  "parent as easy": {
    "as": 1.0
  },
  "apple pie one": {
    "example": 1.0
  },
  "pie one example": {
    "of": 1.0
  },
  "one example of": {
    "this": 1.0
  },
  "example of this": {
    "type": 0.5,
    "is": 0.5
  },
  "of this type": {
    "of": 1.0
  },
  "type of d": {
    "esign": 1.0
  },
  "of d esign": {
    "would": 1.0
  },
  "d esign would": {
    "be": 1.0
  },
  "esign would be": {
    "designing": 1.0
  },
  "would be designing": {
    "classes": 1.0
  },
  "be designing classes": {
    "for": 1.0
  },
  "designing classes for": {
    "apple": 1.0
  },
  "classes for apple": {
    "pies": 1.0
  },
  "for apple pies": {
    "the": 1.0
  },
  "apple pies the": {
    "base": 0.5,
    "derived": 0.5
  },
  "pies the base": {
    "class": 1.0
  },
  "base class would": {
    "contain": 1.0
  },
  "class would contain": {
    "all": 1.0
  },
  "would contain all": {
    "the": 1.0
  },
  "contain all the": {
    "standard": 1.0
  },
  "all the standard": {
    "properties": 1.0
  },
  "the standard properties": {
    "common": 1.0
  },
  "standard properties common": {
    "to": 1.0
  },
  "properties common to": {
    "all": 1.0
  },
  "common to all": {
    "apple": 0.5,
    "members": 0.5
  },
  "to all apple": {
    "pies": 1.0
  },
  "all apple pies": {
    "such": 1.0
  },
  "apple pies such": {
    "as": 1.0
  },
  "pies such as": {
    "apple": 1.0
  },
  "such as apple": {
    "and": 1.0
  },
  "as apple and": {
    "crust": 1.0
  },
  "apple and crust": {
    "properties": 1.0
  },
  "and crust properties": {
    "and": 1.0
  },
  "crust properties and": {
    "a": 1.0
  },
  "properties and a": {
    "bake": 1.0
  },
  "and a bake": {
    "method": 1.0
  },
  "a bake method": {
    "however": 1.0
  },
  "bake method however": {
    "for": 1.0
  },
  "method however for": {
    "the": 1.0
  },
  "however for the": {
    "individual": 1.0
  },
  "for the individual": {
    "types": 1.0
  },
  "the individual types": {
    "of": 1.0
  },
  "individual types of": {
    "apple": 1.0
  },
  "types of apple": {
    "pies": 1.0
  },
  "of apple pies": {
    "the": 0.5,
    "for": 0.5
  },
  "pies the derived": {
    "class": 1.0
  },
  "derived class woul": {
    "d": 1.0
  },
  "class woul d": {
    "contain": 1.0
  },
  "woul d contain": {
    "the": 1.0
  },
  "d contain the": {
    "differences": 1.0
  },
  "contain the differences": {
    "between": 1.0
  },
  "the differences between": {
    "the": 1.0
  },
  "differences between the": {
    "various": 1.0
  },
  "between the various": {
    "varieties": 1.0
  },
  "the various varieties": {
    "of": 1.0
  },
  "various varieties of": {
    "apple": 1.0
  },
  "varieties of apple": {
    "pies": 1.0
  },
  "apple pies for": {
    "example": 1.0
  },
  "pies for example": {
    "the": 1.0
  },
  "for example the": {
    "dutch": 0.08333333333333333,
    "and": 0.08333333333333333,
    "clarion": 0.08333333333333333,
    "following": 0.6666666666666666,
    "conditional": 0.08333333333333333
  },
  "example the dutch": {
    "applepie": 1.0
  },
  "the dutch applepie": {
    "derived": 0.5,
    "class": 0.5
  },
  "dutch applepie derived": {
    "class": 1.0
  },
  "applepie derived class": {
    "might": 1.0
  },
  "derived class might": {
    "contain": 1.0
  },
  "class might contain": {
    "a": 1.0
  },
  "might contain a": {
    "crumbletop": 0.3333333333333333,
    "topcrust": 0.3333333333333333,
    "carameltop": 0.3333333333333333
  },
  "contain a crumbletop": {
    "property": 1.0
  },
  "a crumbletop property": {
    "the": 1.0
  },
  "crumbletop property the": {
    "traditional": 1.0
  },
  "property the traditional": {
    "american": 1.0
  },
  "the traditional american": {
    "applepie": 1.0
  },
  "traditional american applepie": {
    "derived": 1.0
  },
  "american applepie derived": {
    "class": 1.0
  },
  "contain a topcrust": {
    "property": 1.0
  },
  "a topcrust property": {
    "and": 1.0
  },
  "topcrust property and": {
    "the": 1.0
  },
  "and the grandmas": {
    "a": 1.0
  },
  "the grandmas a": {
    "pplepie": 1.0
  },
  "grandmas a pplepie": {
    "derived": 1.0
  },
  "a pplepie derived": {
    "class": 1.0
  },
  "pplepie derived class": {
    "might": 1.0
  },
  "contain a carameltop": {
    "property": 1.0
  },
  "a carameltop property": {
    "program": 1.0
  },
  "carameltop property program": {
    "applepie": 1.0
  },
  "property program applepie": {
    "class": 1.0
  },
  "program applepie class": {
    "type": 0.5,
    "ty": 0.5
  },
  "applepie class type": {
    "declare": 0.5,
    "preparepie": 0.5
  },
  "type declare base": {
    "class": 1.0
  },
  "base class apple": {
    "string": 1.0
  },
  "class apple string": {
    "20": 1.0
  },
  "apple string 20": {
    "crust": 1.0
  },
  "string 20 crust": {
    "string": 1.0
  },
  "20 crust string": {
    "20": 1.0
  },
  "crust string 20": {
    "17": 0.5,
    "bake": 0.5
  },
  "string 20 17": {
    "easing": 1.0
  },
  "20 17 easing": {
    "into": 1.0
  },
  "17 easing into": {
    "oop": 1.0
  },
  "into oop bake": {
    "procedure": 1.0
  },
  "oop bake procedure": {
    "end": 1.0
  },
  "bake procedure end": {
    "dutch": 0.5,
    "icecream": 0.5
  },
  "procedure end dutch": {
    "class": 1.0
  },
  "end dutch class": {
    "applepie": 1.0
  },
  "dutch class applepie": {
    "declare": 0.5,
    "createcrust": 0.5
  },
  "class applepie declare": {
    "derived": 1.0
  },
  "applepie declare derived": {
    "class": 1.0
  },
  "derived class crumbletop": {
    "string": 1.0
  },
  "class crumbletop string": {
    "20": 1.0
  },
  "crumbletop string 20": {
    "end": 1.0
  },
  "string 20 end": {
    "american": 0.3333333333333333,
    "grandmas": 0.3333333333333333,
    "someclass": 0.3333333333333333
  },
  "20 end american": {
    "class": 1.0
  },
  "end american class": {
    "applepie": 1.0
  },
  "american class applepie": {
    "declare": 1.0
  },
  "derived class topcrust": {
    "string": 1.0
  },
  "class topcrust string": {
    "20": 1.0
  },
  "topcrust string 20": {
    "end": 1.0
  },
  "20 end grandmas": {
    "class": 1.0
  },
  "end grandmas class": {
    "applepie": 1.0
  },
  "grandmas class applepie": {
    "declare": 1.0
  },
  "derived class carameltop": {
    "string": 1.0
  },
  "class carameltop string": {
    "20": 1.0
  },
  "carameltop string 20": {
    "bake": 1.0
  },
  "string 20 bake": {
    "procedure": 1.0
  },
  "20 bake procedure": {
    "overridden": 0.5,
    "end": 0.5
  },
  "bake procedure overridden": {
    "method": 1.0
  },
  "procedure overridden method": {
    "end": 1.0
  },
  "overridden method end": {
    "one": 1.0
  },
  "method end one": {
    "other": 1.0
  },
  "end one other": {
    "thing": 1.0
  },
  "one other thing": {
    "that": 1.0
  },
  "other thing that": {
    "you": 1.0
  },
  "thing that you": {
    "can": 1.0
  },
  "you can do": {
    "using": 0.5,
    "without": 0.5
  },
  "can do using": {
    "inheritance": 1.0
  },
  "do using inheritance": {
    "is": 1.0
  },
  "using inheritance is": {
    "to": 1.0
  },
  "inheritance is to": {
    "override": 1.0
  },
  "is to override": {
    "the": 1.0
  },
  "to override the": {
    "methods": 0.3333333333333333,
    "method": 0.3333333333333333,
    "constructor": 0.3333333333333333
  },
  "override the methods": {
    "by": 1.0
  },
  "the methods by": {
    "giving": 1.0
  },
  "methods by giving": {
    "a": 1.0
  },
  "by giving a": {
    "method": 1.0
  },
  "giving a method": {
    "in": 1.0
  },
  "a method in": {
    "a": 1.0
  },
  "method in a": {
    "derived": 1.0
  },
  "in a derived": {
    "class": 1.0
  },
  "derived class exactly": {
    "the": 1.0
  },
  "class exactly the": {
    "same": 1.0
  },
  "exactly the same": {
    "prototype": 0.25,
    "as": 0.25,
    "parameter": 0.25,
    "paramet": 0.25
  },
  "the same prototype": {
    "name": 1.0
  },
  "same prototype name": {
    "parameter": 1.0
  },
  "prototype name parameter": {
    "list": 1.0
  },
  "name parameter list": {
    "and": 1.0
  },
  "parameter list and": {
    "any": 1.0
  },
  "list and any": {
    "return": 1.0
  },
  "and any return": {
    "data": 1.0
  },
  "any return data": {
    "type": 1.0
  },
  "return data type": {
    "as": 1.0
  },
  "data type as": {
    "a": 1.0
  },
  "type as a": {
    "parent": 1.0
  },
  "as a parent": {
    "class": 1.0
  },
  "parent class method": {
    "you": 0.25,
    "that": 0.25,
    "well": 0.25,
    "applepie": 0.25
  },
  "class method you": {
    "override": 1.0
  },
  "method you override": {
    "the": 1.0
  },
  "you override the": {
    "method": 1.0
  },
  "override the method": {
    "in": 0.5,
    "so": 0.5
  },
  "the method in": {
    "the": 1.0
  },
  "method in the": {
    "derived": 0.8333333333333334,
    "vmt": 0.16666666666666666
  },
  "in the derived": {
    "class": 1.0
  },
  "class this allows": {
    "you": 1.0
  },
  "you to provide": {
    "slightly": 1.0
  },
  "to provide slightly": {
    "different": 1.0
  },
  "provide slightly different": {
    "functionality": 1.0
  },
  "slightly different functionality": {
    "in": 1.0
  },
  "different functionality in": {
    "a": 1.0
  },
  "functionality in a": {
    "derived": 1.0
  },
  "derived class if": {
    "you": 1.0
  },
  "class if you": {
    "need": 1.0
  },
  "if you need": {
    "to": 1.0
  },
  "need to multiple": {
    "inheritance": 1.0
  },
  "to multiple inheritance": {
    "you": 0.3333333333333333,
    "which": 0.3333333333333333,
    "virtual": 0.3333333333333333
  },
  "multiple inheritance you": {
    "will": 1.0
  },
  "inheritance you will": {
    "notice": 1.0
  },
  "you will notice": {
    "that": 1.0
  },
  "will notice that": {
    "clarion": 1.0
  },
  "notice that clarion": {
    "s": 1.0
  },
  "that clarion s": {
    "inheritance": 1.0
  },
  "clarion s inheritance": {
    "syntax": 1.0
  },
  "s inheritance syntax": {
    "only": 1.0
  },
  "inheritance syntax only": {
    "allows": 1.0
  },
  "syntax only allows": {
    "you": 1.0
  },
  "only allows you": {
    "to": 1.0
  },
  "you to derive": {
    "from": 1.0
  },
  "to derive from": {
    "a": 0.5,
    "and": 0.5
  },
  "derive from a": {
    "singl": 1.0
  },
  "from a singl": {
    "e": 1.0
  },
  "a singl e": {
    "parent": 1.0
  },
  "singl e parent": {
    "this": 1.0
  },
  "e parent this": {
    "is": 1.0
  },
  "parent this is": {
    "called": 1.0
  },
  "this is called": {
    "single": 0.5,
    "using": 0.5
  },
  "is called single": {
    "inheritance": 1.0
  },
  "called single inheritance": {
    "there": 1.0
  },
  "single inheritance there": {
    "is": 1.0
  },
  "inheritance there is": {
    "such": 1.0
  },
  "there is such": {
    "a": 1.0
  },
  "is such a": {
    "thing": 1.0
  },
  "such a thing": {
    "as": 1.0
  },
  "a thing as": {
    "multiple": 1.0
  },
  "thing as multiple": {
    "inheritance": 1.0
  },
  "as multiple inheritance": {
    "in": 1.0
  },
  "multiple inheritance in": {
    "oop": 1.0
  },
  "inheritance in oop": {
    "theory": 1.0
  },
  "in oop theory": {
    "but": 1.0
  },
  "oop theory but": {
    "you": 1.0
  },
  "theory but you": {
    "can": 1.0
  },
  "but you can": {
    "thank": 1.0
  },
  "you can thank": {
    "us": 1.0
  },
  "can thank us": {
    "for": 1.0
  },
  "thank us for": {
    "not": 1.0
  },
  "us for not": {
    "giving": 1.0
  },
  "for not giving": {
    "it": 1.0
  },
  "not giving it": {
    "to": 1.0
  },
  "giving it to": {
    "you": 1.0
  },
  "it to you": {
    "by": 1.0
  },
  "to you by": {
    "not": 1.0
  },
  "you by not": {
    "giving": 1.0
  },
  "by not giving": {
    "you": 1.0
  },
  "not giving you": {
    "multiple": 1.0
  },
  "giving you multiple": {
    "inheritance": 1.0
  },
  "you multiple inheritance": {
    "there": 1.0
  },
  "multiple inheritance there": {
    "s": 1.0
  },
  "inheritance there s": {
    "another": 1.0
  },
  "there s another": {
    "ten": 1.0
  },
  "s another ten": {
    "dollar": 1.0
  },
  "another ten dollar": {
    "buzzword": 1.0
  },
  "ten dollar buzzword": {
    "that": 1.0
  },
  "dollar buzzword that": {
    "you": 1.0
  },
  "buzzword that you": {
    "do": 1.0
  },
  "that you do": {
    "not": 0.5,
    "want": 0.5
  },
  "you do not": {
    "have": 1.0
  },
  "do not have": {
    "to": 1.0
  },
  "not have to": {
    "le": 0.5,
    "learn": 0.5
  },
  "have to le": {
    "arn": 1.0
  },
  "to le arn": {
    "anything": 1.0
  },
  "le arn anything": {
    "about": 1.0
  },
  "arn anything about": {
    "disambiguate": 1.0
  },
  "anything about disambiguate": {
    "since": 1.0
  },
  "about disambiguate since": {
    "you": 1.0
  },
  "disambiguate since you": {
    "don": 1.0
  },
  "since you don": {
    "t": 1.0
  },
  "you don t": {
    "have": 0.3333333333333333,
    "want": 0.3333333333333333,
    "get": 0.3333333333333333
  },
  "don t have": {
    "to": 1.0
  },
  "have to know": {
    "anything": 1.0
  },
  "to know anything": {
    "about": 1.0
  },
  "know anything about": {
    "it": 1.0
  },
  "anything about it": {
    "i": 1.0
  },
  "about it i": {
    "m": 1.0
  },
  "it i m": {
    "not": 1.0
  },
  "i m not": {
    "going": 1.0
  },
  "m not going": {
    "to": 1.0
  },
  "not going to": {
    "define": 1.0
  },
  "going to define": {
    "it": 1.0
  },
  "to define it": {
    "for": 1.0
  },
  "define it for": {
    "those": 1.0
  },
  "it for those": {
    "cases": 1.0
  },
  "for those cases": {
    "where": 1.0
  },
  "those cases where": {
    "multiple": 1.0
  },
  "cases where multiple": {
    "inheritance": 1.0
  },
  "where multiple inheritance": {
    "would": 1.0
  },
  "multiple inheritance would": {
    "be": 1.0
  },
  "inheritance would be": {
    "useful": 1.0
  },
  "would be useful": {
    "there": 1.0
  },
  "be useful there": {
    "is": 1.0
  },
  "useful there is": {
    "an": 1.0
  },
  "is an oop": {
    "technique": 1.0
  },
  "an oop technique": {
    "called": 0.5,
    "known": 0.5
  },
  "oop technique called": {
    "composition": 0.5,
    "composit": 0.5
  },
  "technique called composition": {
    "which": 1.0
  },
  "called composition which": {
    "gives": 1.0
  },
  "composition which gives": {
    "you": 1.0
  },
  "which gives you": {
    "the": 1.0
  },
  "gives you the": {
    "benefits": 0.5,
    "clarion": 0.5
  },
  "you the benefits": {
    "of": 1.0
  },
  "the benefits of": {
    "multiple": 1.0
  },
  "benefits of multiple": {
    "inheritance": 1.0
  },
  "of multiple inheritance": {
    "without": 1.0
  },
  "multiple inheritance without": {
    "requiring": 0.5,
    "the": 0.5
  },
  "inheritance without requiring": {
    "you": 1.0
  },
  "without requiring you": {
    "to": 1.0
  },
  "requiring you to": {
    "disambiguate": 1.0
  },
  "you to disambiguate": {
    "anything": 1.0
  },
  "to disambiguate anything": {
    "composition": 1.0
  },
  "disambiguate anything composition": {
    "the": 1.0
  },
  "anything composition the": {
    "composition": 1.0
  },
  "composition the composition": {
    "technique": 1.0
  },
  "the composition technique": {
    "simply": 1.0
  },
  "composition technique simply": {
    "means": 1.0
  },
  "technique simply means": {
    "inheriting": 1.0
  },
  "simply means inheriting": {
    "from": 1.0
  },
  "means inheriting from": {
    "one": 1.0
  },
  "inheriting from one": {
    "class": 1.0
  },
  "from one class": {
    "and": 0.5,
    "ontheside": 0.5
  },
  "one class and": {
    "also": 1.0
  },
  "class and also": {
    "declaring": 0.3333333333333333,
    "contains": 0.3333333333333333,
    "any": 0.3333333333333333
  },
  "and also declaring": {
    "a": 1.0
  },
  "also declaring a": {
    "reference": 1.0
  },
  "declaring a reference": {
    "to": 0.5,
    "variable": 0.5
  },
  "reference to another": {
    "object": 1.0
  },
  "to another object": {
    "as": 1.0
  },
  "another object as": {
    "a": 1.0
  },
  "object as a": {
    "property": 0.6666666666666666,
    "single": 0.3333333333333333
  },
  "as a property": {
    "of": 0.5,
    "using": 0.5
  },
  "a property of": {
    "your": 0.3333333333333333,
    "a": 0.6666666666666666
  },
  "property of your": {
    "derived": 1.0
  },
  "of your derived": {
    "class": 1.0
  },
  "your derived class": {
    "therefore": 0.4,
    "inherits": 0.2,
    "before": 0.2,
    "s": 0.2
  },
  "derived class therefore": {
    "your": 0.5,
    "automatic": 0.5
  },
  "class therefore your": {
    "derived": 1.0
  },
  "therefore your derived": {
    "class": 1.0
  },
  "class inherits the": {
    "properties": 1.0
  },
  "inherits the properties": {
    "and": 1.0
  },
  "and methods from": {
    "its": 0.3333333333333333,
    "other": 0.3333333333333333,
    "several": 0.3333333333333333
  },
  "methods from its": {
    "parent": 1.0
  },
  "from its parent": {
    "class": 0.5,
    "inheritance": 0.5
  },
  "parent class and": {
    "also": 1.0
  },
  "and also contains": {
    "a": 1.0
  },
  "also contains a": {
    "reference": 1.0
  },
  "contains a reference": {
    "to": 1.0
  },
  "to the second": {
    "object": 1.0
  },
  "the second object": {
    "and": 1.0
  },
  "second object and": {
    "implicitly": 1.0
  },
  "object and implicitly": {
    "all": 1.0
  },
  "and implicitly all": {
    "its": 1.0
  },
  "implicitly all its": {
    "properties": 1.0
  },
  "all its properties": {
    "and": 1.0
  },
  "its properties and": {
    "methods": 1.0
  },
  "and methods instead": {
    "of": 1.0
  },
  "methods instead of": {
    "inheriting": 1.0
  },
  "instead of inheriting": {
    "them": 1.0
  },
  "of inheriting them": {
    "this": 1.0
  },
  "inheriting them this": {
    "gives": 1.0
  },
  "them this gives": {
    "the": 1.0
  },
  "this gives the": {
    "derived": 1.0
  },
  "gives the derived": {
    "class": 1.0
  },
  "derived class full": {
    "and": 1.0
  },
  "class full and": {
    "complete": 1.0
  },
  "full and complete": {
    "ac": 1.0
  },
  "and complete ac": {
    "cess": 1.0
  },
  "complete ac cess": {
    "to": 1.0
  },
  "ac cess to": {
    "all": 0.5,
    "databases": 0.5
  },
  "cess to all": {
    "the": 1.0
  },
  "to all the": {
    "inherited": 1.0
  },
  "all the inherited": {
    "properties": 1.0
  },
  "the inherited properties": {
    "and": 1.0
  },
  "inherited properties and": {
    "methods": 1.0
  },
  "methods and all": {
    "the": 1.0
  },
  "and all the": {
    "properties": 1.0
  },
  "all the properties": {
    "and": 1.0
  },
  "of the referenced": {
    "object": 1.0
  },
  "the referenced object": {
    "it": 1.0
  },
  "referenced object it": {
    "contains": 1.0
  },
  "object it contains": {
    "the": 1.0
  },
  "it contains the": {
    "abc": 1.0
  },
  "contains the abc": {
    "library": 1.0
  },
  "the abc library": {
    "classes": 0.5,
    "is": 0.5
  },
  "abc library classes": {
    "use": 1.0
  },
  "library classes use": {
    "composition": 1.0
  },
  "classes use composition": {
    "in": 1.0
  },
  "use composition in": {
    "several": 1.0
  },
  "composition in several": {
    "places": 1.0
  },
  "in several places": {
    "where": 1.0
  },
  "several places where": {
    "it": 1.0
  },
  "places where it": {
    "s": 1.0
  },
  "where it s": {
    "appropriate": 1.0
  },
  "it s appropriate": {
    "to": 1.0
  },
  "s appropriate to": {
    "them": 1.0
  },
  "appropriate to them": {
    "program": 1.0
  },
  "to them program": {
    "applepie": 1.0
  },
  "them program applepie": {
    "class": 1.0
  },
  "applepie class ty": {
    "pe": 1.0
  },
  "class ty pe": {
    "declare": 1.0
  },
  "ty pe declare": {
    "base": 1.0
  },
  "pe declare base": {
    "class": 1.0
  },
  "base class apples": {
    "string": 1.0
  },
  "class apples string": {
    "20": 1.0
  },
  "apples string 20": {
    "crust": 1.0
  },
  "procedure end icecream": {
    "class": 1.0
  },
  "end icecream class": {
    "type": 1.0
  },
  "icecream class type": {
    "declare": 1.0
  },
  "base class flavor": {
    "string": 1.0
  },
  "class flavor string": {
    "20": 1.0
  },
  "flavor string 20": {
    "scoop": 1.0
  },
  "string 20 scoop": {
    "procedure": 1.0
  },
  "20 scoop procedure": {
    "end": 1.0
  },
  "scoop procedure end": {
    "alamode": 1.0
  },
  "procedure end alamode": {
    "class": 1.0
  },
  "end alamode class": {
    "applepie": 1.0
  },
  "alamode class applepie": {
    "composition": 1.0
  },
  "class applepie composition": {
    "der": 1.0
  },
  "applepie composition der": {
    "ive": 1.0
  },
  "composition der ive": {
    "from": 1.0
  },
  "der ive from": {
    "one": 1.0
  },
  "ive from one": {
    "class": 1.0
  },
  "one class ontheside": {
    "icecream": 1.0
  },
  "class ontheside icecream": {
    "and": 1.0
  },
  "ontheside icecream and": {
    "contain": 1.0
  },
  "icecream and contain": {
    "a": 1.0
  },
  "and contain a": {
    "reference": 1.0
  },
  "contain a reference": {
    "to": 1.0
  },
  "reference to serve": {
    "procedure": 1.0
  },
  "to serve procedure": {
    "an": 1.0
  },
  "serve procedure an": {
    "object": 1.0
  },
  "procedure an object": {
    "of": 1.0
  },
  "object of another": {
    "class": 1.0
  },
  "of another class": {
    "end": 0.5,
    "s": 0.5
  },
  "another class end": {
    "clarion": 1.0
  },
  "class end clarion": {
    "language": 1.0
  },
  "end clarion language": {
    "programming": 1.0
  },
  "programming guide 18": {
    "and": 1.0
  },
  "guide 18 and": {
    "even": 1.0
  },
  "18 and even": {
    "more": 1.0
  },
  "and even more": {
    "about": 1.0
  },
  "even more about": {
    "encapsulation": 1.0
  },
  "about encapsulation in": {
    "addition": 1.0
  },
  "encapsulation in addition": {
    "to": 1.0
  },
  "addition to public": {
    "and": 1.0
  },
  "to public and": {
    "private": 1.0
  },
  "public and private": {
    "properties": 0.5,
    "protected": 0.5
  },
  "and private properties": {
    "and": 1.0
  },
  "and methods there": {
    "are": 1.0
  },
  "methods there are": {
    "also": 0.5,
    "circumstances": 0.5
  },
  "there are also": {
    "protected": 0.3333333333333333,
    "many": 0.3333333333333333,
    "several": 0.3333333333333333
  },
  "are also protected": {
    "properties": 1.0
  },
  "also protected properties": {
    "and": 1.0
  },
  "protected properties and": {
    "methods": 1.0
  },
  "and methods you": {
    "recall": 1.0
  },
  "methods you recall": {
    "that": 1.0
  },
  "recall that the": {
    "private": 0.5,
    "way": 0.5
  },
  "that the private": {
    "attribute": 1.0
  },
  "private attribute means": {
    "that": 1.0
  },
  "attribute means that": {
    "the": 1.0
  },
  "method is only": {
    "visible": 1.0
  },
  "is only visible": {
    "within": 1.0
  },
  "the class in": {
    "which": 0.8,
    "the": 0.2
  },
  "class in which": {
    "the": 0.25,
    "it": 0.5,
    "they": 0.25
  },
  "which the private": {
    "property": 1.0
  },
  "private property or": {
    "method": 1.0
  },
  "method is declared": {
    "and": 1.0
  },
  "is declared and": {
    "is": 1.0
  },
  "declared and is": {
    "not": 1.0
  },
  "and is not": {
    "accessible": 1.0
  },
  "is not accessible": {
    "by": 1.0
  },
  "not accessible by": {
    "any": 1.0
  },
  "accessible by any": {
    "de": 1.0
  },
  "by any de": {
    "rived": 1.0
  },
  "any de rived": {
    "class": 1.0
  },
  "de rived class": {
    "and": 1.0
  },
  "rived class and": {
    "without": 1.0
  },
  "class and without": {
    "the": 1.0
  },
  "and without the": {
    "private": 1.0
  },
  "public and visible": {
    "and": 1.0
  },
  "and visible and": {
    "available": 1.0
  },
  "visible and available": {
    "to": 0.25,
    "inside": 0.25,
    "for": 0.5
  },
  "and available to": {
    "any": 1.0
  },
  "available to any": {
    "code": 1.0
  },
  "to any code": {
    "whether": 0.5,
    "outside": 0.5
  },
  "any code whether": {
    "that": 1.0
  },
  "code whether that": {
    "code": 1.0
  },
  "whether that code": {
    "is": 1.0
  },
  "that code is": {
    "in": 1.0
  },
  "in a class": {
    "method": 0.3333333333333333,
    "may": 0.3333333333333333,
    "are": 0.3333333333333333
  },
  "a class method": {
    "or": 0.5,
    "can": 0.5
  },
  "class method or": {
    "not": 1.0
  },
  "method or not": {
    "well": 1.0
  },
  "or not well": {
    "sometimes": 1.0
  },
  "not well sometimes": {
    "you": 1.0
  },
  "well sometimes you": {
    "don": 1.0
  },
  "sometimes you don": {
    "t": 1.0
  },
  "don t want": {
    "either": 1.0
  },
  "t want either": {
    "private": 1.0
  },
  "want either private": {
    "or": 1.0
  },
  "either private or": {
    "public": 1.0
  },
  "private or public": {
    "sometimes": 1.0
  },
  "or public sometimes": {
    "you": 1.0
  },
  "public sometimes you": {
    "only": 1.0
  },
  "sometimes you only": {
    "want": 1.0
  },
  "you only want": {
    "a": 1.0
  },
  "only want a": {
    "property": 1.0
  },
  "want a property": {
    "or": 1.0
  },
  "a property or": {
    "method": 1.0
  },
  "or method to": {
    "be": 1.0
  },
  "method to be": {
    "available": 1.0
  },
  "to be available": {
    "within": 1.0
  },
  "be available within": {
    "the": 1.0
  },
  "available within the": {
    "class": 1.0
  },
  "within the class": {
    "in": 0.25,
    "then": 0.25,
    "structure": 0.25,
    "methods": 0.25
  },
  "it is declared": {
    "or": 1.0
  },
  "is declared or": {
    "any": 1.0
  },
  "declared or any": {
    "class": 0.6666666666666666,
    "other": 0.3333333333333333
  },
  "or any class": {
    "derived": 1.0
  },
  "any class derived": {
    "from": 1.0
  },
  "class derived from": {
    "it": 0.3333333333333333,
    "that": 0.6666666666666666
  },
  "derived from it": {
    "that": 0.5,
    "to": 0.5
  },
  "from it that": {
    "s": 1.0
  },
  "it that s": {
    "what": 1.0
  },
  "that s what": {
    "the": 1.0
  },
  "s what the": {
    "protected": 1.0
  },
  "what the protected": {
    "attribute": 1.0
  },
  "the protected attribute": {
    "is": 0.6666666666666666,
    "specifies": 0.3333333333333333
  },
  "protected attribute is": {
    "for": 0.5,
    "to": 0.5
  },
  "attribute is for": {
    "program": 1.0
  },
  "is for program": {
    "myclass": 1.0
  },
  "for program myclass": {
    "class": 1.0
  },
  "myproperty long protect": {
    "ed": 1.0
  },
  "long protect ed": {
    "semi": 1.0
  },
  "protect ed semi": {
    "private": 1.0
  },
  "ed semi private": {
    "method": 1.0
  },
  "semi private method": {
    "procedure": 1.0
  },
  "private method procedure": {
    "end": 1.0
  },
  "aproperty long amethod": {
    "procedure": 1.0
  },
  "long amethod procedure": {
    "end": 1.0
  },
  "amethod procedure end": {
    "code": 1.0
  },
  "procedure end code": {
    "classa": 0.5,
    "to": 0.5
  },
  "end code classa": {
    "myproperty": 0.5,
    "instantiation": 0.5
  },
  "code classa myproperty": {
    "10": 1.0
  },
  "10 invalid out": {
    "of": 1.0
  },
  "invalid out of": {
    "method": 1.0
  },
  "out of method": {
    "classa": 1.0
  },
  "of method classa": {
    "amethod": 1.0
  },
  "method classa amethod": {
    "procedure": 1.0
  },
  "classa amethod procedure": {
    "code": 1.0
  },
  "amethod procedure code": {
    "self": 1.0
  },
  "code self myproperty": {
    "1": 1.0
  },
  "self myproperty 1": {
    "valid": 1.0
  },
  "myproperty 1 valid": {
    "within": 1.0
  },
  "1 valid within": {
    "method": 1.0
  },
  "valid within method": {
    "private": 1.0
  },
  "within method private": {
    "properties": 1.0
  },
  "method private properties": {
    "and": 1.0
  },
  "and methods cannot": {
    "be": 1.0
  },
  "methods cannot be": {
    "accessed": 1.0
  },
  "cannot be accessed": {
    "by": 1.0
  },
  "be accessed by": {
    "derived": 1.0
  },
  "accessed by derived": {
    "classes": 1.0
  },
  "by derived classes": {
    "but": 1.0
  },
  "derived classes but": {
    "protected": 0.5,
    "not": 0.5
  },
  "classes but protected": {
    "properties": 1.0
  },
  "but protected properties": {
    "and": 1.0
  },
  "and methods can": {
    "be": 1.0
  },
  "methods can be": {
    "protected": 1.0
  },
  "can be protected": {
    "properties": 1.0
  },
  "be protected properties": {
    "and": 1.0
  },
  "methods are not": {
    "visible": 1.0
  },
  "are not visible": {
    "outside": 1.0
  },
  "not visible outside": {
    "the": 1.0
  },
  "visible outside the": {
    "class": 1.0
  },
  "the class within": {
    "which": 1.0
  },
  "class within which": {
    "they": 1.0
  },
  "are declared or": {
    "any": 1.0
  },
  "derived from that": {
    "class": 1.0
  },
  "from that class": {
    "i": 0.3333333333333333,
    "what": 0.3333333333333333,
    "this": 0.3333333333333333
  },
  "that class i": {
    "d": 1.0
  },
  "class i d": {
    "guess": 1.0
  },
  "i d guess": {
    "this": 1.0
  },
  "d guess this": {
    "makes": 1.0
  },
  "guess this makes": {
    "the": 1.0
  },
  "this makes the": {
    "protected": 0.5,
    "join": 0.5
  },
  "makes the protected": {
    "properties": 1.0
  },
  "the protected properties": {
    "and": 1.0
  },
  "and methods sort": {
    "of": 1.0
  },
  "methods sort of": {
    "semi": 1.0
  },
  "sort of semi": {
    "private": 1.0
  },
  "of semi private": {
    "19": 1.0
  },
  "semi private 19": {
    "easing": 1.0
  },
  "private 19 easing": {
    "into": 1.0
  },
  "19 easing into": {
    "oop": 1.0
  },
  "into oop and": {
    "more": 1.0
  },
  "oop and more": {
    "on": 1.0
  },
  "destructors and while": {
    "we": 1.0
  },
  "and while we": {
    "re": 1.0
  },
  "while we re": {
    "going": 1.0
  },
  "we re going": {
    "backwards": 1.0
  },
  "re going backwards": {
    "remember": 1.0
  },
  "going backwards remember": {
    "a": 1.0
  },
  "backwards remember a": {
    "while": 1.0
  },
  "remember a while": {
    "back": 1.0
  },
  "a while back": {
    "i": 1.0
  },
  "while back i": {
    "said": 1.0
  },
  "back i said": {
    "there": 1.0
  },
  "i said there": {
    "was": 1.0
  },
  "said there was": {
    "more": 1.0
  },
  "there was more": {
    "to": 1.0
  },
  "was more to": {
    "tell": 1.0
  },
  "more to tell": {
    "you": 1.0
  },
  "to tell you": {
    "about": 1.0
  },
  "tell you about": {
    "automatic": 0.3333333333333333,
    "inheritance": 0.3333333333333333,
    "this": 0.3333333333333333
  },
  "you about automatic": {
    "constructors": 1.0
  },
  "and destructors well": {
    "now": 1.0
  },
  "destructors well now": {
    "s": 1.0
  },
  "well now s": {
    "a": 1.0
  },
  "now s a": {
    "good": 1.0
  },
  "s a good": {
    "time": 1.0
  },
  "a good time": {
    "to": 1.0
  },
  "good time to": {
    "tell": 1.0
  },
  "time to tell": {
    "you": 1.0
  },
  "you about inheritance": {
    "and": 1.0
  },
  "about inheritance and": {
    "how": 1.0
  },
  "inheritance and how": {
    "it": 1.0
  },
  "and how it": {
    "affects": 1.0
  },
  "how it affects": {
    "automatic": 1.0
  },
  "it affects automatic": {
    "constructors": 1.0
  },
  "affects automatic constructors": {
    "and": 1.0
  },
  "and destructors what": {
    "happens": 1.0
  },
  "destructors what happens": {
    "when": 1.0
  },
  "what happens when": {
    "a": 1.0
  },
  "happens when a": {
    "parent": 1.0
  },
  "when a parent": {
    "class": 1.0
  },
  "parent class has": {
    "a": 1.0
  },
  "class has a": {
    "construct": 1.0
  },
  "has a construct": {
    "method": 1.0
  },
  "a construct method": {
    "and": 1.0
  },
  "construct method and": {
    "the": 1.0
  },
  "method and the": {
    "derived": 1.0
  },
  "and the derived": {
    "class": 1.0
  },
  "derived class also": {
    "needs": 1.0
  },
  "class also needs": {
    "one": 1.0
  },
  "also needs one": {
    "we": 1.0
  },
  "needs one we": {
    "already": 1.0
  },
  "one we already": {
    "talked": 1.0
  },
  "we already talked": {
    "about": 1.0
  },
  "already talked about": {
    "overriding": 1.0
  },
  "talked about overriding": {
    "methods": 1.0
  },
  "about overriding methods": {
    "in": 1.0
  },
  "overriding methods in": {
    "derived": 1.0
  },
  "methods in derived": {
    "classes": 1.0
  },
  "in derived classes": {
    "so": 0.3333333333333333,
    "the": 0.3333333333333333,
    "despite": 0.3333333333333333
  },
  "derived classes so": {
    "you": 1.0
  },
  "classes so you": {
    "might": 1.0
  },
  "so you might": {
    "guess": 1.0
  },
  "you might guess": {
    "that": 1.0
  },
  "might guess that": {
    "the": 1.0
  },
  "guess that the": {
    "derived": 1.0
  },
  "that the derived": {
    "class": 1.0
  },
  "derived class construct": {
    "method": 0.6666666666666666,
    "procedure": 0.3333333333333333
  },
  "class construct method": {
    "would": 0.5,
    "s": 0.5
  },
  "construct method would": {
    "simply": 1.0
  },
  "method would simply": {
    "override": 1.0
  },
  "would simply override": {
    "the": 1.0
  },
  "simply override the": {
    "parent": 1.0
  },
  "override the parent": {
    "class": 1.0
  },
  "class method that": {
    "guess": 0.5,
    "overrides": 0.5
  },
  "method that guess": {
    "would": 1.0
  },
  "that guess would": {
    "be": 1.0
  },
  "guess would be": {
    "wrong": 1.0
  },
  "would be wrong": {
    "of": 1.0
  },
  "be wrong of": {
    "course": 1.0
  },
  "wrong of course": {
    "so": 1.0
  },
  "of course so": {
    "why": 1.0
  },
  "course so why": {
    "is": 1.0
  },
  "so why is": {
    "it": 1.0
  },
  "why is it": {
    "wrong": 1.0
  },
  "is it wrong": {
    "because": 1.0
  },
  "it wrong because": {
    "overriding": 1.0
  },
  "wrong because overriding": {
    "the": 1.0
  },
  "because overriding the": {
    "parent": 1.0
  },
  "overriding the parent": {
    "class": 1.0
  },
  "parent class constructor": {
    "might": 0.3333333333333333,
    "executes": 0.6666666666666666
  },
  "class constructor might": {
    "mean": 1.0
  },
  "constructor might mean": {
    "that": 1.0
  },
  "might mean that": {
    "code": 1.0
  },
  "mean that code": {
    "that": 1.0
  },
  "that code that": {
    "s": 1.0
  },
  "code that s": {
    "required": 1.0
  },
  "that s required": {
    "to": 1.0
  },
  "s required to": {
    "initialize": 1.0
  },
  "required to initialize": {
    "inherited": 1.0
  },
  "to initialize inherited": {
    "properties": 1.0
  },
  "initialize inherited properties": {
    "would": 1.0
  },
  "inherited properties would": {
    "not": 1.0
  },
  "properties would not": {
    "execute": 1.0
  },
  "would not execute": {
    "if": 1.0
  },
  "not execute if": {
    "the": 1.0
  },
  "execute if the": {
    "inherited": 1.0
  },
  "if the inherited": {
    "parent": 1.0
  },
  "the inherited parent": {
    "class": 1.0
  },
  "inherited parent class": {
    "properties": 1.0
  },
  "parent class properties": {
    "were": 1.0
  },
  "class properties were": {
    "not": 1.0
  },
  "properties were not": {
    "properly": 1.0
  },
  "were not properly": {
    "initialized": 1.0
  },
  "not properly initialized": {
    "you": 1.0
  },
  "properly initialized you": {
    "might": 1.0
  },
  "initialized you might": {
    "end": 1.0
  },
  "you might end": {
    "up": 1.0
  },
  "might end up": {
    "with": 1.0
  },
  "up with une": {
    "xpected": 1.0
  },
  "with une xpected": {
    "behavior": 1.0
  },
  "une xpected behavior": {
    "in": 1.0
  },
  "xpected behavior in": {
    "your": 1.0
  },
  "behavior in your": {
    "derived": 1.0
  },
  "in your derived": {
    "class": 1.0
  },
  "class therefore automatic": {
    "constructors": 1.0
  },
  "therefore automatic constructors": {
    "are": 1.0
  },
  "automatic constructors are": {
    "not": 1.0
  },
  "constructors are not": {
    "automatically": 1.0
  },
  "are not automatically": {
    "overridden": 1.0
  },
  "not automatically overridden": {
    "instead": 0.5,
    "in": 0.5
  },
  "automatically overridden instead": {
    "by": 1.0
  },
  "overridden instead by": {
    "default": 1.0
  },
  "instead by default": {
    "they": 1.0
  },
  "by default they": {
    "all": 1.0
  },
  "default they all": {
    "execute": 1.0
  },
  "they all execute": {
    "in": 1.0
  },
  "all execute in": {
    "order": 1.0
  },
  "execute in order": {
    "when": 1.0
  },
  "in order when": {
    "the": 1.0
  },
  "order when the": {
    "object": 1.0
  },
  "is instantiated first": {
    "the": 1.0
  },
  "instantiated first the": {
    "parent": 1.0
  },
  "first the parent": {
    "class": 1.0
  },
  "class constructor executes": {
    "then": 0.3333333333333333,
    "the": 0.3333333333333333,
    "and": 0.3333333333333333
  },
  "constructor executes then": {
    "the": 1.0
  },
  "executes then the": {
    "derived": 1.0
  },
  "then the derived": {
    "clas": 0.3333333333333333,
    "class": 0.6666666666666666
  },
  "the derived clas": {
    "s": 1.0
  },
  "derived clas s": {
    "constructor": 1.0
  },
  "clas s constructor": {
    "executes": 1.0
  },
  "s constructor executes": {
    "they": 1.0
  },
  "constructor executes they": {
    "execute": 1.0
  },
  "executes they execute": {
    "in": 1.0
  },
  "they execute in": {
    "the": 1.0
  },
  "execute in the": {
    "order": 1.0
  },
  "in the order": {
    "of": 0.25,
    "in": 0.25,
    "this": 0.25,
    "file": 0.25
  },
  "the order of": {
    "their": 1.0
  },
  "order of their": {
    "derivation": 0.5,
    "execution": 0.5
  },
  "of their derivation": {
    "base": 1.0
  },
  "their derivation base": {
    "class": 1.0
  },
  "derivation base class": {
    "constructors": 1.0
  },
  "base class constructors": {
    "always": 1.0
  },
  "class constructors always": {
    "execute": 1.0
  },
  "constructors always execute": {
    "first": 1.0
  },
  "always execute first": {
    "followed": 1.0
  },
  "execute first followed": {
    "by": 1.0
  },
  "first followed by": {
    "any": 1.0
  },
  "followed by any": {
    "derived": 1.0
  },
  "by any derived": {
    "class": 1.0
  },
  "any derived class": {
    "constructors": 1.0
  },
  "derived class constructors": {
    "in": 0.5,
    "or": 0.5
  },
  "class constructors in": {
    "the": 1.0
  },
  "constructors in the": {
    "order": 1.0
  },
  "the order in": {
    "which": 1.0
  },
  "order in which": {
    "they": 0.5,
    "the": 0.5
  },
  "which they were": {
    "derived": 1.0
  },
  "they were derived": {
    "the": 1.0
  },
  "were derived the": {
    "constructor": 1.0
  },
  "derived the constructor": {
    "for": 1.0
  },
  "the constructor for": {
    "the": 1.0
  },
  "constructor for the": {
    "most": 1.0
  },
  "for the most": {
    "derived": 1.0
  },
  "the most derived": {
    "class": 1.0
  },
  "most derived class": {
    "always": 0.5,
    "destructor": 0.5
  },
  "class always exec": {
    "utes": 1.0
  },
  "always exec utes": {
    "last": 1.0
  },
  "exec utes last": {
    "the": 1.0
  },
  "utes last the": {
    "same": 1.0
  },
  "last the same": {
    "reasoning": 1.0
  },
  "the same reasoning": {
    "is": 1.0
  },
  "same reasoning is": {
    "true": 1.0
  },
  "reasoning is true": {
    "for": 1.0
  },
  "is true for": {
    "automatic": 1.0
  },
  "true for automatic": {
    "destructors": 1.0
  },
  "for automatic destructors": {
    "except": 1.0
  },
  "automatic destructors except": {
    "the": 1.0
  },
  "destructors except the": {
    "order": 1.0
  },
  "except the order": {
    "of": 1.0
  },
  "of their execution": {
    "is": 1.0
  },
  "their execution is": {
    "reversed": 1.0
  },
  "execution is reversed": {
    "the": 1.0
  },
  "is reversed the": {
    "most": 1.0
  },
  "reversed the most": {
    "derived": 1.0
  },
  "derived class destructor": {
    "automatically": 0.6666666666666666,
    "executes": 0.3333333333333333
  },
  "class destructor automatically": {
    "executes": 0.5,
    "calls": 0.5
  },
  "destructor automatically executes": {
    "first": 1.0
  },
  "automatically executes first": {
    "when": 1.0
  },
  "executes first when": {
    "the": 1.0
  },
  "first when the": {
    "object": 1.0
  },
  "is destroyed and": {
    "on": 1.0
  },
  "destroyed and on": {
    "down": 1.0
  },
  "and on down": {
    "the": 1.0
  },
  "on down the": {
    "chain": 1.0
  },
  "down the chain": {
    "of": 1.0
  },
  "the chain of": {
    "derivation": 1.0
  },
  "chain of derivation": {
    "until": 0.5,
    "to": 0.5
  },
  "of derivation until": {
    "the": 1.0
  },
  "derivation until the": {
    "base": 1.0
  },
  "until the base": {
    "class": 1.0
  },
  "base class destructor": {
    "executes": 0.25,
    "last": 0.25,
    "someclass": 0.25,
    "code": 0.25
  },
  "class destructor executes": {
    "last": 0.5,
    "if": 0.5
  },
  "destructor executes last": {
    "in": 1.0
  },
  "executes last in": {
    "other": 1.0
  },
  "last in other": {
    "words": 1.0
  },
  "other words lifo": {
    "last": 1.0
  },
  "words lifo last": {
    "in": 1.0
  },
  "lifo last in": {
    "first": 1.0
  },
  "last in first": {
    "out": 1.0
  },
  "in first out": {
    "this": 1.0
  },
  "first out this": {
    "is": 1.0
  },
  "out this is": {
    "all": 1.0
  },
  "this is all": {
    "pretty": 1.0
  },
  "is all pretty": {
    "standard": 1.0
  },
  "all pretty standard": {
    "the": 1.0
  },
  "pretty standard the": {
    "way": 1.0
  },
  "standard the way": {
    "automatic": 1.0
  },
  "the way automatic": {
    "constructors": 1.0
  },
  "way automatic constructors": {
    "and": 1.0
  },
  "and destructors work": {
    "by": 1.0
  },
  "destructors work by": {
    "default": 1.0
  },
  "work by default": {
    "in": 1.0
  },
  "by default in": {
    "the": 1.0
  },
  "default in the": {
    "clarion": 1.0
  },
  "clarion language is": {
    "the": 1.0
  },
  "language is the": {
    "same": 1.0
  },
  "is the same": {
    "way": 0.3333333333333333,
    "record": 0.3333333333333333,
    "as": 0.3333333333333333
  },
  "the same way": {
    "they": 1.0
  },
  "same way they": {
    "work": 1.0
  },
  "way they work": {
    "in": 1.0
  },
  "they work in": {
    "most": 1.0
  },
  "work in most": {
    "other": 1.0
  },
  "in most other": {
    "oop": 1.0
  },
  "most other oop": {
    "languages": 1.0
  },
  "oop languages however": {
    "cl": 1.0
  },
  "languages however cl": {
    "arion": 1.0
  },
  "however cl arion": {
    "does": 1.0
  },
  "cl arion does": {
    "give": 1.0
  },
  "arion does give": {
    "you": 1.0
  },
  "does give you": {
    "some": 1.0
  },
  "give you some": {
    "flexibility": 1.0
  },
  "you some flexibility": {
    "that": 1.0
  },
  "some flexibility that": {
    "some": 1.0
  },
  "flexibility that some": {
    "other": 1.0
  },
  "that some other": {
    "oop": 1.0
  },
  "some other oop": {
    "languages": 1.0
  },
  "oop languages do": {
    "not": 1.0
  },
  "languages do not": {
    "i": 1.0
  },
  "do not i": {
    "told": 1.0
  },
  "not i told": {
    "you": 1.0
  },
  "i told you": {
    "that": 1.0
  },
  "told you that": {
    "automatic": 1.0
  },
  "you that automatic": {
    "constructors": 1.0
  },
  "that automatic constructors": {
    "and": 1.0
  },
  "and destructors are": {
    "not": 0.5,
    "a": 0.5
  },
  "destructors are not": {
    "automatically": 1.0
  },
  "automatically overridden in": {
    "clarion": 1.0
  },
  "overridden in clarion": {
    "the": 1.0
  },
  "in clarion the": {
    "key": 0.3333333333333333,
    "entire": 0.3333333333333333,
    "properties": 0.3333333333333333
  },
  "clarion the key": {
    "word": 1.0
  },
  "the key word": {
    "here": 1.0
  },
  "key word here": {
    "is": 1.0
  },
  "word here is": {
    "automatically": 1.0
  },
  "here is automatically": {
    "you": 1.0
  },
  "is automatically you": {
    "can": 1.0
  },
  "automatically you can": {
    "override": 1.0
  },
  "you can override": {
    "them": 0.5,
    "inherited": 0.5
  },
  "can override them": {
    "in": 1.0
  },
  "override them in": {
    "clarion": 1.0
  },
  "in clarion if": {
    "you": 1.0
  },
  "clarion if you": {
    "wan": 1.0
  },
  "if you wan": {
    "t": 1.0
  },
  "you wan t": {
    "to": 1.0
  },
  "wan t to": {
    "something": 1.0
  },
  "t to something": {
    "you": 1.0
  },
  "to something you": {
    "can": 1.0
  },
  "something you can": {
    "t": 1.0
  },
  "you can t": {
    "do": 1.0
  },
  "can t do": {
    "in": 1.0
  },
  "t do in": {
    "some": 1.0
  },
  "do in some": {
    "other": 1.0
  },
  "in some other": {
    "oop": 1.0
  },
  "oop languages if": {
    "you": 1.0
  },
  "languages if you": {
    "add": 1.0
  },
  "if you add": {
    "the": 1.0
  },
  "you add the": {
    "replace": 1.0
  },
  "add the replace": {
    "attribute": 1.0
  },
  "the replace attribute": {
    "to": 0.2,
    "on": 0.4,
    "is": 0.2,
    "a": 0.2
  },
  "replace attribute to": {
    "the": 1.0
  },
  "attribute to the": {
    "prototype": 0.5,
    "join": 0.5
  },
  "the prototype of": {
    "your": 1.0
  },
  "prototype of your": {
    "construct": 1.0
  },
  "of your construct": {
    "or": 1.0
  },
  "your construct or": {
    "destruct": 1.0
  },
  "construct or destruct": {
    "method": 1.0
  },
  "or destruct method": {
    "you": 0.3333333333333333,
    "in": 0.3333333333333333,
    "s": 0.3333333333333333
  },
  "destruct method you": {
    "are": 1.0
  },
  "method you are": {
    "telling": 1.0
  },
  "you are telling": {
    "the": 1.0
  },
  "are telling the": {
    "compiler": 1.0
  },
  "telling the compiler": {
    "that": 1.0
  },
  "the compiler that": {
    "you": 1.0
  },
  "compiler that you": {
    "do": 1.0
  },
  "you do want": {
    "to": 1.0
  },
  "do want to": {
    "override": 1.0
  },
  "want to override": {
    "the": 1.0
  },
  "the method so": {
    "what": 1.0
  },
  "method so what": {
    "does": 1.0
  },
  "so what does": {
    "that": 1.0
  },
  "what does that": {
    "buy": 1.0
  },
  "does that buy": {
    "you": 1.0
  },
  "that buy you": {
    "suppose": 1.0
  },
  "buy you suppose": {
    "tha": 1.0
  },
  "you suppose tha": {
    "t": 1.0
  },
  "suppose tha t": {
    "for": 1.0
  },
  "tha t for": {
    "some": 1.0
  },
  "t for some": {
    "reason": 1.0
  },
  "for some reason": {
    "you": 1.0
  },
  "some reason you": {
    "need": 1.0
  },
  "reason you need": {
    "to": 1.0
  },
  "need to initialize": {
    "a": 1.0
  },
  "to initialize a": {
    "variable": 1.0
  },
  "initialize a variable": {
    "in": 1.0
  },
  "a variable in": {
    "your": 1.0
  },
  "variable in your": {
    "derived": 1.0
  },
  "derived class before": {
    "the": 1.0
  },
  "class before the": {
    "parent": 1.0
  },
  "before the parent": {
    "class": 1.0
  },
  "constructor executes the": {
    "only": 1.0
  },
  "executes the only": {
    "way": 1.0
  },
  "the only way": {
    "to": 1.0
  },
  "only way to": {
    "do": 1.0
  },
  "way to do": {
    "that": 1.0
  },
  "do that is": {
    "to": 1.0
  },
  "that is to": {
    "override": 1.0
  },
  "override the constructor": {
    "you": 0.5,
    "end": 0.5
  },
  "constructor you simply": {
    "place": 1.0
  },
  "you simply place": {
    "the": 1.0
  },
  "simply place the": {
    "replace": 1.0
  },
  "place the replace": {
    "attribute": 1.0
  },
  "replace attribute on": {
    "the": 1.0
  },
  "attribute on the": {
    "derived": 0.3333333333333333,
    "prototype": 0.3333333333333333,
    "class": 0.3333333333333333
  },
  "on the derived": {
    "class": 1.0
  },
  "construct method s": {
    "prototype": 1.0
  },
  "method s prototype": {
    "then": 0.6666666666666666,
    "declares": 0.3333333333333333
  },
  "s prototype then": {
    "write": 0.5,
    "the": 0.5
  },
  "prototype then write": {
    "your": 1.0
  },
  "then write your": {
    "code": 1.0
  },
  "write your code": {
    "and": 1.0
  },
  "code and now": {
    "you": 1.0
  },
  "and now you": {
    "ll": 1.0
  },
  "now you ll": {
    "ask": 1.0
  },
  "you ll ask": {
    "what": 1.0
  },
  "ll ask what": {
    "about": 1.0
  },
  "ask what about": {
    "your": 1.0
  },
  "what about your": {
    "great": 1.0
  },
  "about your great": {
    "argument": 1.0
  },
  "your great argument": {
    "against": 1.0
  },
  "great argument against": {
    "automatically": 1.0
  },
  "argument against automatically": {
    "overriding": 1.0
  },
  "against automatically overriding": {
    "constructors": 1.0
  },
  "automatically overriding constructors": {
    "and": 1.0
  },
  "overriding constructors and": {
    "destructors": 1.0
  },
  "and destructors have": {
    "you": 1.0
  },
  "destructors have you": {
    "forgotten": 1.0
  },
  "have you forgotten": {
    "that": 1.0
  },
  "you forgotten that": {
    "the": 1.0
  },
  "forgotten that the": {
    "argument": 1.0
  },
  "that the argument": {
    "against": 1.0
  },
  "the argument against": {
    "automatically": 1.0
  },
  "and destructors is": {
    "still": 1.0
  },
  "destructors is still": {
    "valid": 1.0
  },
  "is still valid": {
    "and": 1.0
  },
  "still valid and": {
    "needs": 1.0
  },
  "valid and needs": {
    "to": 1.0
  },
  "and needs to": {
    "be": 1.0
  },
  "needs to be": {
    "considered": 0.5,
    "re": 0.5
  },
  "to be considered": {
    "carefully": 1.0
  },
  "be considered carefully": {
    "when": 1.0
  },
  "considered carefully when": {
    "you": 1.0
  },
  "carefully when you": {
    "decide": 1.0
  },
  "when you decide": {
    "to": 1.0
  },
  "you decide to": {
    "explicitly": 1.0
  },
  "decide to explicitly": {
    "override": 1.0
  },
  "to explicitly override": {
    "them": 1.0
  },
  "explicitly override them": {
    "but": 1.0
  },
  "override them but": {
    "we": 1.0
  },
  "them but we": {
    "have": 1.0
  },
  "but we have": {
    "thought": 1.0
  },
  "we have thought": {
    "of": 1.0
  },
  "have thought of": {
    "that": 1.0
  },
  "thought of that": {
    "parent": 1.0
  },
  "of that parent": {
    "you": 1.0
  },
  "that parent you": {
    "recall": 1.0
  },
  "parent you recall": {
    "that": 1.0
  },
  "that the way": {
    "to": 1.0
  },
  "the way to": {
    "reference": 0.5,
    "the": 0.5
  },
  "way to reference": {
    "the": 1.0
  },
  "to reference the": {
    "current": 1.0
  },
  "reference the current": {
    "object": 1.0
  },
  "current object within": {
    "a": 1.0
  },
  "object within a": {
    "method": 1.0
  },
  "a method s": {
    "code": 0.5,
    "prototype": 0.5
  },
  "s code is": {
    "to": 1.0
  },
  "code is to": {
    "use": 1.0
  },
  "is to use": {
    "self": 1.0
  },
  "to use self": {
    "instead": 1.0
  },
  "use self instead": {
    "of": 1.0
  },
  "self instead of": {
    "the": 1.0
  },
  "instead of the": {
    "objec": 0.3333333333333333,
    "clarion": 0.3333333333333333,
    "filt": 0.3333333333333333
  },
  "of the objec": {
    "t": 1.0
  },
  "the objec t": {
    "name": 1.0
  },
  "objec t name": {
    "well": 1.0
  },
  "t name well": {
    "we": 1.0
  },
  "name well we": {
    "ve": 1.0
  },
  "well we ve": {
    "provided": 1.0
  },
  "we ve provided": {
    "another": 1.0
  },
  "ve provided another": {
    "tool": 1.0
  },
  "provided another tool": {
    "in": 1.0
  },
  "another tool in": {
    "clarion": 1.0
  },
  "tool in clarion": {
    "s": 1.0
  },
  "s oop syntax": {
    "that": 1.0
  },
  "oop syntax that": {
    "allows": 1.0
  },
  "syntax that allows": {
    "you": 1.0
  },
  "that allows you": {
    "to": 1.0
  },
  "you to call": {
    "a": 0.5,
    "the": 0.5
  },
  "to call a": {
    "method": 1.0
  },
  "call a method": {
    "from": 0.6666666666666666,
    "that": 0.3333333333333333
  },
  "a method from": {
    "a": 0.5,
    "one": 0.5
  },
  "method from a": {
    "parent": 1.0
  },
  "parent class even": {
    "when": 1.0
  },
  "class even when": {
    "you": 1.0
  },
  "even when you": {
    "ve": 1.0
  },
  "when you ve": {
    "overridden": 1.0
  },
  "you ve overridden": {
    "that": 1.0
  },
  "ve overridden that": {
    "method": 1.0
  },
  "overridden that method": {
    "prepending": 1.0
  },
  "that method prepending": {
    "parent": 1.0
  },
  "method prepending parent": {
    "to": 1.0
  },
  "prepending parent to": {
    "the": 1.0
  },
  "parent to the": {
    "method": 1.0
  },
  "to the method": {
    "name": 0.5,
    "call": 0.5
  },
  "the method name": {
    "explicitly": 1.0
  },
  "method name explicitly": {
    "calls": 1.0
  },
  "name explicitly calls": {
    "the": 1.0
  },
  "explicitly calls the": {
    "parent": 1.0
  },
  "calls the parent": {
    "class": 1.0
  },
  "parent class s": {
    "method": 1.0
  },
  "class s method": {
    "even": 1.0
  },
  "s method even": {
    "though": 1.0
  },
  "method even though": {
    "it": 1.0
  },
  "even though it": {
    "has": 1.0
  },
  "though it has": {
    "been": 1.0
  },
  "it has been": {
    "overridden": 1.0
  },
  "has been overridden": {
    "this": 1.0
  },
  "been overridden this": {
    "technique": 1.0
  },
  "overridden this technique": {
    "holds": 1.0
  },
  "this technique holds": {
    "true": 1.0
  },
  "technique holds true": {
    "not": 1.0
  },
  "holds true not": {
    "only": 1.0
  },
  "true not only": {
    "for": 1.0
  },
  "not only for": {
    "constructors": 1.0
  },
  "only for constructors": {
    "and": 1.0
  },
  "for constructors and": {
    "destructors": 1.0
  },
  "and destructors but": {
    "also": 1.0
  },
  "destructors but also": {
    "for": 1.0
  },
  "but also for": {
    "any": 1.0
  },
  "also for any": {
    "overridden": 1.0
  },
  "for any overridden": {
    "methods": 1.0
  },
  "any overridden methods": {
    "program": 1.0
  },
  "overridden methods program": {
    "myclass": 1.0
  },
  "methods program myclass": {
    "class": 1.0
  },
  "myclass class type": {
    "declare": 0.5,
    "creates": 0.5
  },
  "construct procedure end": {
    "classa": 0.5,
    "clarion": 0.5
  },
  "aproperty long construct": {
    "procedure": 1.0
  },
  "long construct procedure": {
    "replace": 1.0
  },
  "construct procedure replace": {
    "end": 0.5,
    "override": 0.5
  },
  "procedure replace end": {
    "code": 1.0
  },
  "replace end code": {
    "classa": 1.0
  },
  "code classa instantiation": {
    "here": 1.0
  },
  "classa instantiation here": {
    "clarion": 1.0
  },
  "instantiation here clarion": {
    "language": 1.0
  },
  "here clarion language": {
    "programming": 1.0
  },
  "programming guide 20": {
    "classa": 1.0
  },
  "guide 20 classa": {
    "construct": 1.0
  },
  "20 classa construct": {
    "procedure": 1.0
  },
  "classa construct procedure": {
    "code": 1.0
  },
  "construct procedure code": {
    "self": 1.0
  },
  "code self aproperty": {
    "1": 1.0
  },
  "self aproperty 1": {
    "initialize": 1.0
  },
  "aproperty 1 initialize": {
    "then": 1.0
  },
  "1 initialize then": {
    "call": 1.0
  },
  "initialize then call": {
    "parent": 1.0
  },
  "then call parent": {
    "construct": 1.0
  },
  "call parent construct": {
    "parent": 0.5,
    "or": 0.5
  },
  "parent construct parent": {
    "constructor": 1.0
  },
  "construct parent constructor": {
    "therefore": 1.0
  },
  "parent constructor therefore": {
    "when": 1.0
  },
  "constructor therefore when": {
    "you": 1.0
  },
  "therefore when you": {
    "need": 1.0
  },
  "when you need": {
    "to": 1.0
  },
  "need to explicitly": {
    "control": 1.0
  },
  "to explicitly control": {
    "the": 1.0
  },
  "explicitly control the": {
    "execution": 1.0
  },
  "control the execution": {
    "order": 1.0
  },
  "the execution order": {
    "of": 1.0
  },
  "execution order of": {
    "your": 1.0
  },
  "order of your": {
    "constructors": 1.0
  },
  "of your constructors": {
    "or": 1.0
  },
  "your constructors or": {
    "destructors": 1.0
  },
  "constructors or destructors": {
    "you": 0.5,
    "without": 0.5
  },
  "or destructors you": {
    "simply": 1.0
  },
  "destructors you simply": {
    "put": 1.0
  },
  "you simply put": {
    "the": 1.0
  },
  "simply put the": {
    "replace": 1.0
  },
  "put the replace": {
    "attribute": 1.0
  },
  "on the prototype": {
    "then": 1.0
  },
  "the prototype then": {
    "in": 1.0
  },
  "prototype then in": {
    "your": 1.0
  },
  "then in your": {
    "constructor": 1.0
  },
  "in your constructor": {
    "or": 1.0
  },
  "your constructor or": {
    "destructor": 1.0
  },
  "constructor or destructor": {
    "method": 1.0
  },
  "or destructor method": {
    "s": 1.0
  },
  "destructor method s": {
    "cod": 0.5,
    "simply": 0.5
  },
  "method s cod": {
    "e": 1.0
  },
  "s cod e": {
    "directly": 1.0
  },
  "cod e directly": {
    "call": 1.0
  },
  "e directly call": {
    "parent": 1.0
  },
  "directly call parent": {
    "construct": 1.0
  },
  "parent construct or": {
    "parent": 1.0
  },
  "construct or parent": {
    "destruct": 1.0
  },
  "or parent destruct": {
    "at": 0.5,
    "this": 0.5
  },
  "parent destruct at": {
    "the": 1.0
  },
  "destruct at the": {
    "exact": 1.0
  },
  "at the exact": {
    "point": 1.0
  },
  "the exact point": {
    "within": 1.0
  },
  "exact point within": {
    "your": 1.0
  },
  "point within your": {
    "logic": 1.0
  },
  "within your logic": {
    "that": 1.0
  },
  "your logic that": {
    "is": 1.0
  },
  "logic that is": {
    "most": 1.0
  },
  "that is most": {
    "appropriate": 1.0
  },
  "is most appropriate": {
    "to": 1.0
  },
  "most appropriate to": {
    "what": 1.0
  },
  "appropriate to what": {
    "you": 1.0
  },
  "to what you": {
    "need": 1.0
  },
  "what you need": {
    "to": 1.0
  },
  "do that could": {
    "be": 1.0
  },
  "that could be": {
    "before": 0.5,
    "caused": 0.5
  },
  "could be before": {
    "after": 1.0
  },
  "be before after": {
    "or": 1.0
  },
  "before after or": {
    "in": 1.0
  },
  "after or in": {
    "the": 1.0
  },
  "or in the": {
    "middle": 0.5,
    "back": 0.5
  },
  "in the middle": {
    "of": 1.0
  },
  "the middle of": {
    "your": 1.0
  },
  "middle of your": {
    "derived": 1.0
  },
  "derived class s": {
    "code": 0.5,
    "createcrust": 0.5
  },
  "class s code": {
    "wherever": 1.0
  },
  "s code wherever": {
    "you": 1.0
  },
  "code wherever you": {
    "need": 1.0
  },
  "wherever you need": {
    "it": 1.0
  },
  "you need it": {
    "to": 1.0
  },
  "need it to": {
    "be": 1.0
  },
  "it to be": {
    "polymorphism": 1.0
  },
  "to be polymorphism": {
    "ok": 1.0
  },
  "be polymorphism ok": {
    "there": 1.0
  },
  "polymorphism ok there": {
    "s": 1.0
  },
  "ok there s": {
    "one": 1.0
  },
  "there s one": {
    "last": 0.5,
    "more": 0.5
  },
  "s one last": {
    "really": 1.0
  },
  "one last really": {
    "major": 1.0
  },
  "last really major": {
    "oop": 1.0
  },
  "really major oop": {
    "buzzword": 1.0
  },
  "major oop buzzword": {
    "you": 1.0
  },
  "oop buzzword you": {
    "have": 1.0
  },
  "buzzword you have": {
    "to": 1.0
  },
  "have to learn": {
    "polymorphism": 0.5,
    "disambiguate": 0.5
  },
  "to learn polymorphism": {
    "this": 1.0
  },
  "learn polymorphism this": {
    "is": 1.0
  },
  "polymorphism this is": {
    "a": 1.0
  },
  "this is a": {
    "really": 0.5,
    "situation": 0.5
  },
  "is a really": {
    "big": 1.0
  },
  "a really big": {
    "one": 1.0
  },
  "really big one": {
    "and": 1.0
  },
  "big one and": {
    "it": 1.0
  },
  "one and it": {
    "s": 1.0
  },
  "and it s": {
    "the": 1.0
  },
  "it s the": {
    "key": 1.0
  },
  "s the key": {
    "that": 1.0
  },
  "the key that": {
    "makes": 1.0
  },
  "key that makes": {
    "object": 1.0
  },
  "that makes object": {
    "oriented": 1.0
  },
  "makes object oriented": {
    "programming": 1.0
  },
  "programming so powerful": {
    "so": 1.0
  },
  "so powerful so": {
    "let": 1.0
  },
  "powerful so let": {
    "s": 1.0
  },
  "so let s": {
    "start": 1.0
  },
  "s start with": {
    "the": 1.0
  },
  "start with the": {
    "oxford": 1.0
  },
  "with the oxford": {
    "english": 1.0
  },
  "english dictionary definitio": {
    "n": 1.0
  },
  "dictionary definitio n": {
    "of": 1.0
  },
  "definitio n of": {
    "polymorphism": 1.0
  },
  "n of polymorphism": {
    "the": 1.0
  },
  "of polymorphism the": {
    "condition": 1.0
  },
  "polymorphism the condition": {
    "or": 1.0
  },
  "the condition or": {
    "character": 1.0
  },
  "condition or character": {
    "of": 1.0
  },
  "or character of": {
    "being": 1.0
  },
  "character of being": {
    "polymorphous": 1.0
  },
  "of being polymorphous": {
    "the": 1.0
  },
  "being polymorphous the": {
    "occurrence": 1.0
  },
  "polymorphous the occurrence": {
    "of": 1.0
  },
  "the occurrence of": {
    "something": 1.0
  },
  "occurrence of something": {
    "in": 1.0
  },
  "of something in": {
    "several": 1.0
  },
  "something in several": {
    "different": 1.0
  },
  "in several different": {
    "forms": 1.0
  },
  "several different forms": {
    "now": 1.0
  },
  "different forms now": {
    "the": 1.0
  },
  "forms now the": {
    "clarion": 1.0
  },
  "now the clarion": {
    "language": 1.0
  },
  "clarion language has": {
    "had": 0.5,
    "the": 0.5
  },
  "language has had": {
    "some": 1.0
  },
  "has had some": {
    "forms": 1.0
  },
  "had some forms": {
    "of": 1.0
  },
  "some forms of": {
    "polymorphism": 1.0
  },
  "forms of polymorphism": {
    "for": 1.0
  },
  "of polymorphism for": {
    "a": 1.0
  },
  "polymorphism for a": {
    "long": 1.0
  },
  "for a long": {
    "time": 1.0
  },
  "a long time": {
    "already": 1.0
  },
  "long time already": {
    "for": 1.0
  },
  "time already for": {
    "example": 1.0
  },
  "already for example": {
    "the": 1.0
  },
  "example the and": {
    "parameter": 1.0
  },
  "the and parameter": {
    "types": 1.0
  },
  "and parameter types": {
    "whic": 1.0
  },
  "parameter types whic": {
    "h": 1.0
  },
  "types whic h": {
    "indicate": 1.0
  },
  "whic h indicate": {
    "an": 1.0
  },
  "h indicate an": {
    "unknown": 1.0
  },
  "indicate an unknown": {
    "data": 1.0
  },
  "an unknown data": {
    "type": 1.0
  },
  "unknown data type": {
    "for": 1.0
  },
  "data type for": {
    "parameter": 1.0
  },
  "type for parameter": {
    "passing": 1.0
  },
  "for parameter passing": {
    "allow": 1.0
  },
  "parameter passing allow": {
    "you": 1.0
  },
  "passing allow you": {
    "to": 1.0
  },
  "allow you to": {
    "write": 0.2,
    "utilize": 0.2,
    "retrieve": 0.2,
    "create": 0.2,
    "pre": 0.2
  },
  "you to write": {
    "polymorphic": 0.3333333333333333,
    "applications": 0.3333333333333333,
    "your": 0.3333333333333333
  },
  "to write polymorphic": {
    "procedures": 1.0
  },
  "write polymorphic procedures": {
    "clarion": 1.0
  },
  "polymorphic procedures clarion": {
    "has": 1.0
  },
  "procedures clarion has": {
    "had": 1.0
  },
  "clarion has had": {
    "these": 1.0
  },
  "has had these": {
    "since": 1.0
  },
  "had these since": {
    "the": 1.0
  },
  "these since the": {
    "dos": 1.0
  },
  "since the dos": {
    "days": 1.0
  },
  "the dos days": {
    "in": 1.0
  },
  "dos days in": {
    "clarion": 1.0
  },
  "days in clarion": {
    "for": 1.0
  },
  "in clarion for": {
    "windows": 1.0
  },
  "clarion for windows": {
    "version": 1.0
  },
  "for windows version": {
    "2": 1.0
  },
  "windows version 2": {
    "0": 1.0
  },
  "version 2 0": {
    "we": 1.0
  },
  "2 0 we": {
    "introduced": 1.0
  },
  "0 we introduced": {
    "procedure": 1.0
  },
  "we introduced procedure": {
    "overloading": 1.0
  },
  "introduced procedure overloading": {
    "which": 1.0
  },
  "procedure overloading which": {
    "allows": 1.0
  },
  "overloading which allows": {
    "yo": 1.0
  },
  "which allows yo": {
    "u": 1.0
  },
  "allows yo u": {
    "to": 1.0
  },
  "yo u to": {
    "create": 1.0
  },
  "u to create": {
    "multiple": 1.0
  },
  "to create multiple": {
    "procedures": 1.0
  },
  "create multiple procedures": {
    "using": 1.0
  },
  "multiple procedures using": {
    "the": 1.0
  },
  "procedures using the": {
    "same": 1.0
  },
  "using the same": {
    "name": 1.0
  },
  "the same name": {
    "but": 0.5,
    "you": 0.25,
    "from": 0.25
  },
  "same name but": {
    "taking": 0.5,
    "different": 0.5
  },
  "name but taking": {
    "different": 1.0
  },
  "but taking different": {
    "parameter": 1.0
  },
  "taking different parameter": {
    "lists": 1.0
  },
  "different parameter lists": {
    "another": 0.5,
    "see": 0.5
  },
  "parameter lists another": {
    "form": 1.0
  },
  "lists another form": {
    "of": 1.0
  },
  "another form of": {
    "polymorphism": 1.0
  },
  "form of polymorphism": {
    "ok": 0.5,
    "virtual": 0.5
  },
  "of polymorphism ok": {
    "right": 1.0
  },
  "polymorphism ok right": {
    "about": 1.0
  },
  "ok right about": {
    "now": 1.0
  },
  "right about now": {
    "all": 1.0
  },
  "about now all": {
    "the": 1.0
  },
  "now all the": {
    "oop": 1.0
  },
  "all the oop": {
    "purists": 1.0
  },
  "the oop purists": {
    "in": 1.0
  },
  "oop purists in": {
    "the": 1.0
  },
  "purists in the": {
    "audience": 1.0
  },
  "in the audience": {
    "are": 1.0
  },
  "the audience are": {
    "saying": 1.0
  },
  "audience are saying": {
    "to": 1.0
  },
  "are saying to": {
    "themselves": 1.0
  },
  "saying to themselves": {
    "that": 1.0
  },
  "to themselves that": {
    "s": 1.0
  },
  "themselves that s": {
    "got": 1.0
  },
  "that s got": {
    "nothing": 1.0
  },
  "s got nothing": {
    "to": 1.0
  },
  "got nothing to": {
    "do": 1.0
  },
  "nothing to do": {
    "with": 1.0
  },
  "do with polymorphism": {
    "in": 1.0
  },
  "with polymorphism in": {
    "oop": 1.0
  },
  "polymorphism in oop": {
    "and": 1.0
  },
  "oop and they": {
    "re": 1.0
  },
  "and they re": {
    "right": 1.0
  },
  "they re right": {
    "all": 1.0
  },
  "re right all": {
    "that": 1.0
  },
  "right all that": {
    "polymorphic": 1.0
  },
  "all that polymorphic": {
    "functionality": 1.0
  },
  "that polymorphic functionality": {
    "that": 1.0
  },
  "polymorphic functionality that": {
    "we": 1.0
  },
  "functionality that we": {
    "ve": 1.0
  },
  "that we ve": {
    "given": 1.0
  },
  "we ve given": {
    "you": 1.0
  },
  "ve given you": {
    "in": 1.0
  },
  "given you in": {
    "previous": 1.0
  },
  "you in previous": {
    "versions": 1.0
  },
  "in previous versions": {
    "of": 1.0
  },
  "previous versions of": {
    "clarion": 1.0
  },
  "versions of clarion": {
    "going": 1.0
  },
  "of clarion going": {
    "all": 1.0
  },
  "clarion going all": {
    "the": 1.0
  },
  "going all the": {
    "way": 1.0
  },
  "all the way": {
    "back": 0.5,
    "to": 0.5
  },
  "the way back": {
    "to": 1.0
  },
  "way back to": {
    "the": 1.0
  },
  "to the origin": {
    "al": 1.0
  },
  "the origin al": {
    "dos": 1.0
  },
  "origin al dos": {
    "1": 1.0
  },
  "al dos 1": {
    "0": 1.0
  },
  "dos 1 0": {
    "version": 1.0
  },
  "1 0 version": {
    "has": 1.0
  },
  "0 version has": {
    "nothing": 1.0
  },
  "version has nothing": {
    "at": 1.0
  },
  "has nothing at": {
    "all": 1.0
  },
  "nothing at all": {
    "to": 1.0
  },
  "at all to": {
    "do": 0.5,
    "write": 0.5
  },
  "all to do": {
    "with": 1.0
  },
  "do with what": {
    "oop": 1.0
  },
  "with what oop": {
    "means": 1.0
  },
  "what oop means": {
    "when": 1.0
  },
  "oop means when": {
    "it": 1.0
  },
  "means when it": {
    "talks": 1.0
  },
  "when it talks": {
    "about": 1.0
  },
  "it talks about": {
    "polymorphism": 1.0
  },
  "talks about polymorphism": {
    "virtual": 1.0
  },
  "about polymorphism virtual": {
    "me": 1.0
  },
  "polymorphism virtual me": {
    "thods": 1.0
  },
  "virtual me thods": {
    "there": 1.0
  },
  "me thods there": {
    "s": 1.0
  },
  "thods there s": {
    "one": 1.0
  },
  "s one more": {
    "common": 1.0
  },
  "one more common": {
    "oop": 1.0
  },
  "oop term that": {
    "is": 1.0
  },
  "term that is": {
    "virtually": 1.0
  },
  "that is virtually": {
    "synonymous": 1.0
  },
  "is virtually synonymous": {
    "with": 1.0
  },
  "virtually synonymous with": {
    "polymorphism": 1.0
  },
  "synonymous with polymorphism": {
    "virtual": 1.0
  },
  "with polymorphism virtual": {
    "methods": 1.0
  },
  "polymorphism virtual methods": {
    "now": 0.5,
    "are": 0.5
  },
  "virtual methods now": {
    "this": 1.0
  },
  "methods now this": {
    "is": 1.0
  },
  "now this is": {
    "the": 1.0
  },
  "the point where": {
    "oop": 1.0
  },
  "point where oop": {
    "starts": 1.0
  },
  "where oop starts": {
    "to": 1.0
  },
  "oop starts to": {
    "get": 1.0
  },
  "starts to get": {
    "a": 1.0
  },
  "to get a": {
    "little": 0.5,
    "related": 0.5
  },
  "get a little": {
    "tricky": 1.0
  },
  "a little tricky": {
    "so": 1.0
  },
  "little tricky so": {
    "you": 1.0
  },
  "tricky so you": {
    "guys": 1.0
  },
  "so you guys": {
    "that": 1.0
  },
  "you guys that": {
    "are": 1.0
  },
  "guys that are": {
    "new": 1.0
  },
  "that are new": {
    "to": 1.0
  },
  "are new to": {
    "oop": 1.0
  },
  "new to oop": {
    "don": 1.0
  },
  "to oop don": {
    "t": 1.0
  },
  "oop don t": {
    "worry": 1.0
  },
  "don t worry": {
    "if": 1.0
  },
  "t worry if": {
    "you": 1.0
  },
  "worry if you": {
    "don": 1.0
  },
  "if you don": {
    "t": 1.0
  },
  "don t get": {
    "it": 1.0
  },
  "t get it": {
    "right": 1.0
  },
  "get it right": {
    "away": 1.0
  },
  "it right away": {
    "from": 1.0
  },
  "right away from": {
    "this": 1.0
  },
  "away from this": {
    "morning": 1.0
  },
  "from this morning": {
    "s": 1.0
  },
  "this morning s": {
    "talk": 1.0
  },
  "morning s talk": {
    "this": 1.0
  },
  "s talk this": {
    "is": 1.0
  },
  "talk this is": {
    "the": 1.0
  },
  "is the part": {
    "that": 1.0
  },
  "the part that": {
    "causes": 1.0
  },
  "part that causes": {
    "people": 1.0
  },
  "that causes people": {
    "to": 1.0
  },
  "causes people to": {
    "say": 1.0
  },
  "people to say": {
    "that": 1.0
  },
  "to say that": {
    "it": 1.0
  },
  "say that it": {
    "takes": 1.0
  },
  "that it takes": {
    "at": 1.0
  },
  "it takes at": {
    "least": 1.0
  },
  "takes at least": {
    "six": 1.0
  },
  "at least six": {
    "months": 1.0
  },
  "least six months": {
    "to": 1.0
  },
  "six months to": {
    "reall": 1.0
  },
  "months to reall": {
    "y": 1.0
  },
  "to reall y": {
    "get": 1.0
  },
  "reall y get": {
    "oop": 1.0
  },
  "y get oop": {
    "and": 1.0
  },
  "get oop and": {
    "how": 1.0
  },
  "oop and how": {
    "to": 1.0
  },
  "how to program": {
    "in": 1.0
  },
  "to program in": {
    "it": 1.0
  },
  "program in it": {
    "whether": 1.0
  },
  "in it whether": {
    "you": 1.0
  },
  "it whether you": {
    "already": 1.0
  },
  "whether you already": {
    "understand": 1.0
  },
  "you already understand": {
    "oop": 1.0
  },
  "already understand oop": {
    "or": 1.0
  },
  "understand oop or": {
    "not": 1.0
  },
  "oop or not": {
    "the": 1.0
  },
  "or not the": {
    "abc": 0.5,
    "target": 0.5
  },
  "not the abc": {
    "library": 1.0
  },
  "abc library is": {
    "an": 1.0
  },
  "library is an": {
    "excellent": 1.0
  },
  "is an excellent": {
    "example": 1.0
  },
  "an excellent example": {
    "of": 1.0
  },
  "excellent example of": {
    "well": 1.0
  },
  "example of well": {
    "designed": 1.0
  },
  "of well designed": {
    "classes": 1.0
  },
  "well designed classes": {
    "that": 1.0
  },
  "designed classes that": {
    "you": 1.0
  },
  "classes that you": {
    "can": 1.0
  },
  "you can study": {
    "and": 1.0
  },
  "can study and": {
    "learn": 1.0
  },
  "study and learn": {
    "from": 1.0
  },
  "and learn from": {
    "virtual": 1.0
  },
  "learn from virtual": {
    "methods": 1.0
  },
  "from virtual methods": {
    "are": 1.0
  },
  "virtual methods are": {
    "what": 0.25,
    "the": 0.25,
    "sort": 0.25,
    "prototyped": 0.25
  },
  "methods are what": {
    "oop": 1.0
  },
  "are what oop": {
    "purists": 1.0
  },
  "what oop purists": {
    "are": 1.0
  },
  "oop purists are": {
    "really": 1.0
  },
  "purists are really": {
    "talking": 1.0
  },
  "are really talking": {
    "about": 1.0
  },
  "really talking about": {
    "when": 1.0
  },
  "talking about when": {
    "they": 1.0
  },
  "about when they": {
    "say": 1.0
  },
  "when they say": {
    "polymorphism": 1.0
  },
  "they say polymorphism": {
    "what": 1.0
  },
  "say polymorphism what": {
    "s": 1.0
  },
  "polymorphism what s": {
    "a": 1.0
  },
  "what s a": {
    "virtual": 1.0
  },
  "s a virtual": {
    "method": 1.0
  },
  "a virtual method": {
    "the": 0.14285714285714285,
    "is": 0.14285714285714285,
    "table": 0.2857142857142857,
    "to": 0.14285714285714285,
    "this": 0.14285714285714285,
    "in": 0.14285714285714285
  },
  "virtual method the": {
    "simple": 1.0
  },
  "method the simple": {
    "answer": 1.0
  },
  "the simple answer": {
    "to": 1.0
  },
  "simple answer to": {
    "that": 1.0
  },
  "answer to that": {
    "is": 1.0
  },
  "to that is": {
    "a": 1.0
  },
  "that is a": {
    "virtual": 1.0
  },
  "is a virtual": {
    "method": 1.0
  },
  "virtual method is": {
    "a": 0.5,
    "appropriate": 0.5
  },
  "method is a": {
    "method": 0.3333333333333333,
    "dummy": 0.3333333333333333,
    "bit": 0.3333333333333333
  },
  "is a method": {
    "whose": 0.5,
    "of": 0.5
  },
  "a method whose": {
    "prototype": 1.0
  },
  "method whose prototype": {
    "is": 1.0
  },
  "whose prototype is": {
    "present": 1.0
  },
  "prototype is present": {
    "in": 1.0
  },
  "is present in": {
    "b": 1.0
  },
  "present in b": {
    "oth": 1.0
  },
  "in b oth": {
    "a": 1.0
  },
  "b oth a": {
    "parent": 1.0
  },
  "oth a parent": {
    "and": 1.0
  },
  "a parent and": {
    "derived": 1.0
  },
  "parent and derived": {
    "class": 1.0
  },
  "and derived class": {
    "structure": 0.5,
    "and": 0.5
  },
  "derived class structure": {
    "and": 0.25,
    "within": 0.25,
    "inherits": 0.25,
    "this": 0.25
  },
  "class structure and": {
    "has": 0.5,
    "the": 0.5
  },
  "structure and has": {
    "the": 1.0
  },
  "and has the": {
    "virtual": 1.0
  },
  "has the virtual": {
    "attribute": 1.0
  },
  "the virtual attribute": {
    "on": 0.5,
    "that": 0.25,
    "now": 0.25
  },
  "virtual attribute on": {
    "both": 0.5,
    "a": 0.5
  },
  "attribute on both": {
    "this": 1.0
  },
  "on both this": {
    "means": 1.0
  },
  "both this means": {
    "that": 1.0
  },
  "means that virtual": {
    "methods": 1.0
  },
  "that virtual methods": {
    "must": 1.0
  },
  "virtual methods must": {
    "have": 1.0
  },
  "methods must have": {
    "the": 1.0
  },
  "must have the": {
    "exact": 0.3333333333333333,
    "virtual": 0.3333333333333333,
    "same": 0.3333333333333333
  },
  "have the exact": {
    "same": 1.0
  },
  "the exact same": {
    "prototype": 1.0
  },
  "exact same prototype": {
    "in": 1.0
  },
  "same prototype in": {
    "both": 1.0
  },
  "prototype in both": {
    "a": 1.0
  },
  "in both a": {
    "parent": 1.0
  },
  "both a parent": {
    "and": 1.0
  },
  "derived class and": {
    "that": 1.0
  },
  "class and that": {
    "they": 1.0
  },
  "and that they": {
    "both": 1.0
  },
  "that they both": {
    "must": 1.0
  },
  "they both must": {
    "have": 1.0
  },
  "both must have": {
    "the": 1.0
  },
  "have the virtual": {
    "attribute": 1.0
  },
  "virtual attribute that": {
    "s": 1.0
  },
  "attribute that s": {
    "the": 1.0
  },
  "that s the": {
    "mechanics": 1.0
  },
  "s the mechanics": {
    "of": 1.0
  },
  "the mechanics of": {
    "virtual": 1.0
  },
  "mechanics of virtual": {
    "methods": 1.0
  },
  "of virtual methods": {
    "so": 0.5,
    "down": 0.5
  },
  "virtual methods so": {
    "now": 1.0
  },
  "methods so now": {
    "that": 1.0
  },
  "so now that": {
    "you": 1.0
  },
  "now that you": {
    "ve": 1.0
  },
  "that you ve": {
    "gotten": 1.0
  },
  "you ve gotten": {
    "the": 1.0
  },
  "ve gotten the": {
    "mechanics": 1.0
  },
  "gotten the mechanics": {
    "of": 1.0
  },
  "virtual methods down": {
    "we": 1.0
  },
  "methods down we": {
    "can": 1.0
  },
  "down we can": {
    "go": 1.0
  },
  "we can go": {
    "on": 1.0
  },
  "can go on": {
    "to": 1.0
  },
  "go on to": {
    "the": 1.0
  },
  "on to the": {
    "really": 1.0
  },
  "to the really": {
    "important": 1.0
  },
  "the really important": {
    "stuff": 1.0
  },
  "really important stuff": {
    "like": 1.0
  },
  "important stuff like": {
    "what": 1.0
  },
  "stuff like what": {
    "good": 1.0
  },
  "like what good": {
    "are": 1.0
  },
  "what good are": {
    "they": 1.0
  },
  "good are they": {
    "and": 1.0
  },
  "are they and": {
    "what": 1.0
  },
  "they and what": {
    "do": 1.0
  },
  "and what do": {
    "they": 1.0
  },
  "what do they": {
    "do": 1.0
  },
  "do they do": {
    "you": 1.0
  },
  "they do you": {
    "recall": 1.0
  },
  "do you recall": {
    "that": 1.0
  },
  "that a derived": {
    "class": 1.0
  },
  "derived class object": {
    "inherits": 1.0
  },
  "class object inherits": {
    "the": 1.0
  },
  "object inherits the": {
    "methods": 1.0
  },
  "inherits the methods": {
    "of": 1.0
  },
  "its parent clas": {
    "s": 1.0
  },
  "clas s that": {
    "effectively": 1.0
  },
  "s that effectively": {
    "means": 1.0
  },
  "that effectively means": {
    "that": 1.0
  },
  "effectively means that": {
    "a": 1.0
  },
  "means that a": {
    "derived": 0.5,
    "get": 0.25,
    "clarion": 0.25
  },
  "derived class can": {
    "call": 0.5,
    "add": 0.5
  },
  "class can call": {
    "down": 1.0
  },
  "can call down": {
    "to": 1.0
  },
  "call down to": {
    "execute": 0.5,
    "the": 0.5
  },
  "down to execute": {
    "a": 1.0
  },
  "to execute a": {
    "parent": 0.5,
    "derived": 0.5
  },
  "execute a parent": {
    "class": 1.0
  },
  "class method well": {
    "virtual": 1.0
  },
  "method well virtual": {
    "methods": 1.0
  },
  "well virtual methods": {
    "are": 1.0
  },
  "are the opposite": {
    "they": 1.0
  },
  "the opposite they": {
    "allow": 1.0
  },
  "opposite they allow": {
    "parent": 1.0
  },
  "they allow parent": {
    "class": 1.0
  },
  "allow parent class": {
    "methods": 1.0
  },
  "parent class methods": {
    "to": 1.0
  },
  "class methods to": {
    "call": 0.6666666666666666,
    "execute": 0.3333333333333333
  },
  "methods to call": {
    "up": 0.5,
    "derived": 0.5
  },
  "to call up": {
    "to": 1.0
  },
  "call up to": {
    "execute": 0.3333333333333333,
    "derived": 0.3333333333333333,
    "methods": 0.3333333333333333
  },
  "up to execute": {
    "a": 1.0
  },
  "execute a derived": {
    "class": 1.0
  },
  "class method to": {
    "repeat": 0.5,
    "call": 0.5
  },
  "method to repeat": {
    "virtual": 1.0
  },
  "to repeat virtual": {
    "methods": 1.0
  },
  "repeat virtual methods": {
    "allow": 1.0
  },
  "virtual methods allow": {
    "the": 0.5,
    "standard": 0.5
  },
  "methods allow the": {
    "code": 1.0
  },
  "allow the code": {
    "in": 1.0
  },
  "the code in": {
    "parent": 0.3333333333333333,
    "preparepie": 0.3333333333333333,
    "the": 0.3333333333333333
  },
  "code in parent": {
    "class": 1.0
  },
  "in parent class": {
    "methods": 1.0
  },
  "methods to execute": {
    "derived": 1.0
  },
  "to execute derived": {
    "class": 1.0
  },
  "execute derived class": {
    "methods": 1.0
  },
  "class methods 21": {
    "easing": 1.0
  },
  "methods 21 easing": {
    "into": 1.0
  },
  "21 easing into": {
    "oop": 1.0
  },
  "into oop more": {
    "apple": 1.0
  },
  "oop more apple": {
    "pie": 1.0
  },
  "more apple pie": {
    "the": 1.0
  },
  "apple pie the": {
    "easiest": 1.0
  },
  "pie the easiest": {
    "way": 1.0
  },
  "the easiest way": {
    "to": 1.0
  },
  "easiest way to": {
    "see": 1.0
  },
  "way to see": {
    "how": 1.0
  },
  "to see how": {
    "this": 1.0
  },
  "see how this": {
    "works": 1.0
  },
  "how this works": {
    "is": 1.0
  },
  "this works is": {
    "with": 1.0
  },
  "works is with": {
    "an": 1.0
  },
  "is with an": {
    "example": 1.0
  },
  "with an example": {
    "let": 1.0
  },
  "an example let": {
    "s": 1.0
  },
  "example let s": {
    "go": 1.0
  },
  "let s go": {
    "back": 1.0
  },
  "s go back": {
    "to": 1.0
  },
  "go back to": {
    "our": 1.0
  },
  "back to our": {
    "applepie": 1.0
  },
  "to our applepie": {
    "classes": 1.0
  },
  "our applepie classes": {
    "we": 1.0
  },
  "applepie classes we": {
    "ll": 1.0
  },
  "classes we ll": {
    "add": 1.0
  },
  "we ll add": {
    "a": 1.0
  },
  "ll add a": {
    "preparepie": 1.0
  },
  "add a preparepie": {
    "method": 1.0
  },
  "a preparepie method": {
    "to": 1.0
  },
  "preparepie method to": {
    "the": 1.0
  },
  "method to the": {
    "base": 1.0
  },
  "to the base": {
    "class": 1.0
  },
  "base class because": {
    "every": 1.0
  },
  "class because every": {
    "type": 1.0
  },
  "because every type": {
    "of": 1.0
  },
  "every type of": {
    "apple": 1.0
  },
  "type of apple": {
    "pie": 1.0
  },
  "of apple pie": {
    "needs": 1.0
  },
  "apple pie needs": {
    "preparation": 1.0
  },
  "pie needs preparation": {
    "some": 1.0
  },
  "needs preparation some": {
    "other": 1.0
  },
  "preparation some other": {
    "common": 1.0
  },
  "some other common": {
    "tasks": 1.0
  },
  "other common tasks": {
    "that": 1.0
  },
  "common tasks that": {
    "the": 1.0
  },
  "tasks that the": {
    "code": 1.0
  },
  "that the code": {
    "in": 0.3333333333333333,
    "defining": 0.3333333333333333,
    "should": 0.3333333333333333
  },
  "code in preparepie": {
    "will": 1.0
  },
  "in preparepie will": {
    "need": 1.0
  },
  "preparepie will need": {
    "to": 1.0
  },
  "will need to": {
    "execute": 1.0
  },
  "need to execute": {
    "will": 0.5,
    "as": 0.5
  },
  "to execute will": {
    "be": 1.0
  },
  "execute will be": {
    "createcrust": 1.0
  },
  "will be createcrust": {
    "and": 1.0
  },
  "be createcrust and": {
    "makefilling": 1.0
  },
  "createcrust and makefilling": {
    "so": 0.5,
    "are": 0.5
  },
  "and makefilling so": {
    "we": 1.0
  },
  "makefilling so we": {
    "ll": 1.0
  },
  "so we ll": {
    "prototype": 1.0
  },
  "we ll prototype": {
    "methods": 1.0
  },
  "ll prototype methods": {
    "for": 1.0
  },
  "prototype methods for": {
    "each": 1.0
  },
  "methods for each": {
    "of": 1.0
  },
  "for each of": {
    "these": 0.5,
    "the": 0.5
  },
  "of these tasks": {
    "applepie": 1.0
  },
  "these tasks applepie": {
    "class": 1.0
  },
  "tasks applepie class": {
    "type": 1.0
  },
  "class type preparepie": {
    "procedure": 1.0
  },
  "type preparepie procedure": {
    "createcrust": 1.0
  },
  "preparepie procedure createcrust": {
    "procedure": 1.0
  },
  "procedure createcrust procedure": {
    "virtual": 1.0
  },
  "createcrust procedure virtual": {
    "virtual": 1.0
  },
  "procedure virtual virtual": {
    "methods": 1.0
  },
  "virtual virtual methods": {
    "makefilling": 1.0
  },
  "virtual methods makefilling": {
    "procedure": 1.0
  },
  "methods makefilling procedure": {
    "virtual": 1.0
  },
  "makefilling procedure virtual": {
    "end": 1.0
  },
  "procedure virtual end": {
    "dutch": 0.25,
    "code": 0.5,
    "myproc": 0.25
  },
  "virtual end dutch": {
    "class": 1.0
  },
  "class applepie createcrust": {
    "procedure": 1.0
  },
  "applepie createcrust procedure": {
    "virtual": 1.0
  },
  "virtual end code": {
    "dutch": 0.5,
    "do": 0.5
  },
  "end code dutch": {
    "preparepie": 1.0
  },
  "code dutch preparepie": {
    "will": 1.0
  },
  "dutch preparepie will": {
    "call": 1.0
  },
  "preparepie will call": {
    "the": 1.0
  },
  "will call the": {
    "dutch": 0.3333333333333333,
    "anotherclass": 0.3333333333333333,
    "differentclass": 0.3333333333333333
  },
  "call the dutch": {
    "object": 1.0
  },
  "the dutch object": {
    "s": 0.5,
    "the": 0.5
  },
  "dutch object s": {
    "virtuals": 1.0
  },
  "object s virtuals": {
    "applepie": 1.0
  },
  "s virtuals applepie": {
    "preparepie": 1.0
  },
  "virtuals applepie preparepie": {
    "procedure": 1.0
  },
  "applepie preparepie procedure": {
    "code": 1.0
  },
  "preparepie procedure code": {
    "self": 1.0
  },
  "code self createcrust": {
    "self": 1.0
  },
  "self createcrust self": {
    "makefilling": 1.0
  },
  "createcrust self makefilling": {
    "these": 1.0
  },
  "self makefilling these": {
    "two": 1.0
  },
  "makefilling these two": {
    "methods": 1.0
  },
  "these two methods": {
    "are": 1.0
  },
  "two methods are": {
    "virtual": 1.0
  },
  "methods are virtual": {
    "because": 1.0
  },
  "are virtual because": {
    "the": 1.0
  },
  "virtual because the": {
    "actual": 1.0
  },
  "because the actual": {
    "code": 1.0
  },
  "the actual code": {
    "to": 1.0
  },
  "actual code to": {
    "accomplish": 0.5,
    "perform": 0.5
  },
  "code to accomplish": {
    "them": 1.0
  },
  "to accomplish them": {
    "will": 1.0
  },
  "accomplish them will": {
    "probably": 1.0
  },
  "them will probably": {
    "be": 1.0
  },
  "will probably be": {
    "a": 1.0
  },
  "probably be a": {
    "little": 1.0
  },
  "be a little": {
    "different": 1.0
  },
  "a little different": {
    "for": 1.0
  },
  "little different for": {
    "each": 1.0
  },
  "different for each": {
    "type": 1.0
  },
  "for each type": {
    "of": 1.0
  },
  "each type of": {
    "pie": 1.0
  },
  "type of pie": {
    "we": 1.0
  },
  "of pie we": {
    "derive": 1.0
  },
  "pie we derive": {
    "however": 1.0
  },
  "we derive however": {
    "we": 1.0
  },
  "derive however we": {
    "do": 1.0
  },
  "however we do": {
    "know": 1.0
  },
  "we do know": {
    "that": 1.0
  },
  "do know that": {
    "these": 1.0
  },
  "know that these": {
    "are": 1.0
  },
  "that these are": {
    "always": 1.0
  },
  "these are always": {
    "the": 1.0
  },
  "are always the": {
    "steps": 1.0
  },
  "always the steps": {
    "you": 1.0
  },
  "the steps you": {
    "need": 1.0
  },
  "steps you need": {
    "to": 1.0
  },
  "need to take": {
    "to": 1.0
  },
  "to take to": {
    "prepare": 1.0
  },
  "take to prepare": {
    "any": 1.0
  },
  "to prepare any": {
    "apple": 1.0
  },
  "prepare any apple": {
    "pie": 1.0
  },
  "any apple pie": {
    "so": 1.0
  },
  "apple pie so": {
    "we": 1.0
  },
  "pie so we": {
    "can": 1.0
  },
  "we can write": {
    "that": 1.0
  },
  "can write that": {
    "code": 1.0
  },
  "write that code": {
    "into": 1.0
  },
  "that code into": {
    "the": 1.0
  },
  "code into the": {
    "base": 1.0
  },
  "into the base": {
    "class": 1.0
  },
  "base class preparepie": {
    "method": 1.0
  },
  "class preparepie method": {
    "and": 0.5,
    "is": 0.5
  },
  "preparepie method and": {
    "know": 1.0
  },
  "method and know": {
    "that": 1.0
  },
  "and know that": {
    "it": 1.0
  },
  "know that it": {
    "won": 1.0
  },
  "that it won": {
    "t": 1.0
  },
  "it won t": {
    "change": 1.0
  },
  "won t change": {
    "now": 1.0
  },
  "t change now": {
    "we": 1.0
  },
  "change now we": {
    "ll": 1.0
  },
  "now we ll": {
    "derive": 1.0
  },
  "we ll derive": {
    "the": 1.0
  },
  "ll derive the": {
    "dutch": 1.0
  },
  "derive the dutch": {
    "applepie": 1.0
  },
  "dutch applepie class": {
    "notice": 1.0
  },
  "applepie class notice": {
    "that": 1.0
  },
  "that the prototypes": {
    "for": 1.0
  },
  "prototypes for createcrust": {
    "and": 1.0
  },
  "for createcrust and": {
    "makefilling": 1.0
  },
  "and makefilling are": {
    "exactly": 1.0
  },
  "makefilling are exactly": {
    "the": 1.0
  },
  "are exactly the": {
    "same": 1.0
  },
  "same as in": {
    "the": 1.0
  },
  "base class including": {
    "the": 1.0
  },
  "class including the": {
    "virtual": 1.0
  },
  "including the virtual": {
    "attribute": 1.0
  },
  "virtual attribute now": {
    "you": 1.0
  },
  "attribute now you": {
    "execute": 1.0
  },
  "now you execute": {
    "the": 1.0
  },
  "you execute the": {
    "dutch": 1.0
  },
  "execute the dutch": {
    "preparepie": 1.0
  },
  "the dutch preparepie": {
    "method": 1.0
  },
  "dutch preparepie method": {
    "this": 1.0
  },
  "preparepie method this": {
    "is": 1.0
  },
  "method this is": {
    "an": 1.0
  },
  "this is an": {
    "inherited": 0.25,
    "oop": 0.25,
    "issue": 0.25,
    "index": 0.25
  },
  "is an inherited": {
    "method": 1.0
  },
  "an inherited method": {
    "so": 0.25,
    "to": 0.25,
    "someclass": 0.25,
    "and": 0.25
  },
  "inherited method so": {
    "the": 1.0
  },
  "so the derived": {
    "class": 1.0
  },
  "derived class is": {
    "call": 1.0
  },
  "class is call": {
    "ing": 1.0
  },
  "is call ing": {
    "down": 1.0
  },
  "call ing down": {
    "to": 1.0
  },
  "ing down to": {
    "its": 1.0
  },
  "down to its": {
    "parent": 1.0
  },
  "to its parent": {
    "class": 1.0
  },
  "class method applepie": {
    "preparepie": 1.0
  },
  "method applepie preparepie": {
    "that": 1.0
  },
  "applepie preparepie that": {
    "means": 1.0
  },
  "preparepie that means": {
    "the": 1.0
  },
  "that means the": {
    "code": 1.0
  },
  "means the code": {
    "that": 1.0
  },
  "the code that": {
    "executes": 1.0
  },
  "code that executes": {
    "is": 1.0
  },
  "that executes is": {
    "the": 1.0
  },
  "executes is the": {
    "code": 1.0
  },
  "is the code": {
    "inside": 1.0
  },
  "inside the applepie": {
    "preparepie": 1.0
  },
  "the applepie preparepie": {
    "method": 1.0
  },
  "applepie preparepie method": {
    "the": 1.0
  },
  "preparepie method the": {
    "first": 1.0
  },
  "method the first": {
    "statement": 1.0
  },
  "first statement that": {
    "executes": 1.0
  },
  "statement that executes": {
    "in": 1.0
  },
  "that executes in": {
    "the": 1.0
  },
  "in the preparepie": {
    "method": 1.0
  },
  "the preparepie method": {
    "is": 1.0
  },
  "preparepie method is": {
    "the": 0.5,
    "calling": 0.5
  },
  "method is the": {
    "call": 1.0
  },
  "is the call": {
    "to": 1.0
  },
  "the call to": {
    "self": 0.5,
    "the": 0.5
  },
  "call to self": {
    "createcrust": 1.0
  },
  "to self createcrust": {
    "so": 1.0
  },
  "self createcrust so": {
    "the": 1.0
  },
  "createcrust so the": {
    "question": 1.0
  },
  "the question is": {
    "which": 1.0
  },
  "question is which": {
    "createcrust": 1.0
  },
  "is which createcrust": {
    "method": 1.0
  },
  "which createcrust method": {
    "will": 1.0
  },
  "createcrust method will": {
    "actually": 1.0
  },
  "method will actually": {
    "execute": 1.0
  },
  "will actually execute": {
    "at": 1.0
  },
  "actually execute at": {
    "this": 1.0
  },
  "execute at this": {
    "point": 1.0
  },
  "at this point": {
    "we": 0.5,
    "would": 0.5
  },
  "this point we": {
    "have": 1.0
  },
  "point we have": {
    "two": 1.0
  },
  "we have two": {
    "defined": 1.0
  },
  "have two defined": {
    "the": 1.0
  },
  "two defined the": {
    "one": 1.0
  },
  "defined the one": {
    "in": 1.0
  },
  "the one in": {
    "the": 1.0
  },
  "one in the": {
    "applepie": 1.0
  },
  "in the applepie": {
    "base": 1.0
  },
  "the applepie base": {
    "class": 1.0
  },
  "applepie base class": {
    "and": 0.3333333333333333,
    "preparepie": 0.3333333333333333,
    "tells": 0.3333333333333333
  },
  "class and the": {
    "other": 0.3333333333333333,
    "derived": 0.6666666666666666
  },
  "and the other": {
    "in": 0.5,
    "portion": 0.5
  },
  "the other in": {
    "the": 1.0
  },
  "other in the": {
    "dutch": 1.0
  },
  "in the dutch": {
    "derived": 1.0
  },
  "the dutch derived": {
    "class": 1.0
  },
  "dutch derived class": {
    "the": 1.0
  },
  "derived class the": {
    "answer": 0.5,
    "virtual": 0.5
  },
  "class the answer": {
    "is": 1.0
  },
  "the answer is": {
    "the": 0.3333333333333333,
    "using": 0.3333333333333333,
    "probably": 0.3333333333333333
  },
  "answer is the": {
    "actual": 1.0
  },
  "is the actual": {
    "method": 1.0
  },
  "the actual method": {
    "that": 0.5,
    "to": 0.5
  },
  "actual method that": {
    "will": 1.0
  },
  "method that will": {
    "execute": 1.0
  },
  "that will execute": {
    "is": 1.0
  },
  "will execute is": {
    "the": 1.0
  },
  "execute is the": {
    "dutch": 1.0
  },
  "is the dutch": {
    "createcrust": 1.0
  },
  "the dutch createcrust": {
    "method": 1.0
  },
  "dutch createcrust method": {
    "because": 1.0
  },
  "createcrust method because": {
    "the": 1.0
  },
  "method because the": {
    "original": 1.0
  },
  "because the original": {
    "call": 1.0
  },
  "the original call": {
    "to": 1.0
  },
  "original call to": {
    "preparepie": 1.0
  },
  "call to preparepie": {
    "referenced": 1.0
  },
  "to preparepie referenced": {
    "the": 1.0
  },
  "preparepie referenced the": {
    "dutch": 1.0
  },
  "referenced the dutch": {
    "object": 1.0
  },
  "dutch object the": {
    "applepie": 1.0
  },
  "object the applepie": {
    "base": 1.0
  },
  "method is calling": {
    "up": 1.0
  },
  "is calling up": {
    "the": 1.0
  },
  "calling up the": {
    "chain": 1.0
  },
  "up the chain": {
    "of": 1.0
  },
  "of derivation to": {
    "the": 1.0
  },
  "derivation to the": {
    "derived": 1.0
  },
  "class s createcrust": {
    "method": 1.0
  },
  "s createcrust method": {
    "ok": 1.0
  },
  "createcrust method ok": {
    "so": 1.0
  },
  "method ok so": {
    "now": 1.0
  },
  "so now you": {
    "see": 1.0
  },
  "now you see": {
    "how": 1.0
  },
  "you see how": {
    "it": 1.0
  },
  "see how it": {
    "all": 1.0
  },
  "how it all": {
    "works": 1.0
  },
  "it all works": {
    "virtual": 1.0
  },
  "all works virtual": {
    "methods": 1.0
  },
  "works virtual methods": {
    "are": 1.0
  },
  "methods are sort": {
    "of": 1.0
  },
  "are sort of": {
    "re": 1.0
  },
  "sort of re": {
    "verse": 1.0
  },
  "of re verse": {
    "inheritance": 1.0
  },
  "re verse inheritance": {
    "clarion": 1.0
  },
  "verse inheritance clarion": {
    "language": 1.0
  },
  "inheritance clarion language": {
    "programming": 1.0
  },
  "programming guide 22": {
    "the": 1.0
  },
  "guide 22 the": {
    "base": 1.0
  },
  "22 the base": {
    "class": 1.0
  },
  "base class code": {
    "calls": 0.3333333333333333,
    "in": 0.3333333333333333,
    "myqueue": 0.3333333333333333
  },
  "class code calls": {
    "a": 1.0
  },
  "code calls a": {
    "method": 1.0
  },
  "calls a method": {
    "and": 1.0
  },
  "a method and": {
    "at": 1.0
  },
  "method and at": {
    "the": 1.0
  },
  "and at the": {
    "time": 1.0
  },
  "at the time": {
    "the": 1.0
  },
  "the time the": {
    "code": 0.5,
    "get": 0.5
  },
  "time the code": {
    "is": 1.0
  },
  "the code is": {
    "compiled": 1.0
  },
  "code is compiled": {
    "it": 1.0
  },
  "is compiled it": {
    "doesn": 1.0
  },
  "compiled it doesn": {
    "t": 1.0
  },
  "t have any": {
    "idea": 1.0
  },
  "have any idea": {
    "at": 1.0
  },
  "any idea at": {
    "all": 1.0
  },
  "idea at all": {
    "what": 1.0
  },
  "at all what": {
    "actual": 1.0
  },
  "all what actual": {
    "code": 1.0
  },
  "what actual code": {
    "will": 1.0
  },
  "actual code will": {
    "need": 1.0
  },
  "code will need": {
    "to": 1.0
  },
  "to execute as": {
    "a": 1.0
  },
  "execute as a": {
    "result": 1.0
  },
  "as a result": {
    "of": 1.0
  },
  "a result of": {
    "the": 1.0
  },
  "result of the": {
    "virtual": 0.5,
    "expression": 0.5
  },
  "of the virtual": {
    "method": 0.6666666666666666,
    "methods": 0.3333333333333333
  },
  "the virtual method": {
    "call": 0.14285714285714285,
    "executes": 0.14285714285714285,
    "table": 0.14285714285714285,
    "in": 0.14285714285714285,
    "is": 0.14285714285714285,
    "end": 0.2857142857142857
  },
  "virtual method call": {
    "because": 1.0
  },
  "method call because": {
    "of": 1.0
  },
  "call because of": {
    "the": 1.0
  },
  "because of the": {
    "prototype": 0.5,
    "time": 0.5
  },
  "of the prototype": {
    "in": 1.0
  },
  "the prototype in": {
    "the": 1.0
  },
  "prototype in the": {
    "base": 1.0
  },
  "class it kno": {
    "ws": 1.0
  },
  "it kno ws": {
    "there": 1.0
  },
  "kno ws there": {
    "is": 1.0
  },
  "ws there is": {
    "a": 1.0
  },
  "method of that": {
    "name": 1.0
  },
  "of that name": {
    "that": 1.0
  },
  "that name that": {
    "it": 1.0
  },
  "name that it": {
    "can": 1.0
  },
  "that it can": {
    "call": 1.0
  },
  "it can call": {
    "to": 1.0
  },
  "can call to": {
    "perform": 1.0
  },
  "call to perform": {
    "a": 1.0
  },
  "to perform a": {
    "specified": 1.0
  },
  "perform a specified": {
    "task": 1.0
  },
  "a specified task": {
    "it": 1.0
  },
  "specified task it": {
    "just": 1.0
  },
  "task it just": {
    "doesn": 1.0
  },
  "it just doesn": {
    "t": 1.0
  },
  "just doesn t": {
    "know": 1.0
  },
  "t know exactly": {
    "how": 1.0
  },
  "know exactly how": {
    "that": 1.0
  },
  "exactly how that": {
    "code": 1.0
  },
  "how that code": {
    "will": 1.0
  },
  "that code will": {
    "do": 1.0
  },
  "code will do": {
    "its": 1.0
  },
  "will do its": {
    "task": 1.0
  },
  "do its task": {
    "and": 1.0
  },
  "its task and": {
    "it": 1.0
  },
  "task and it": {
    "doesn": 1.0
  },
  "and it doesn": {
    "t": 1.0
  },
  "t care the": {
    "applepie": 1.0
  },
  "care the applepie": {
    "base": 1.0
  },
  "base class tells": {
    "the": 1.0
  },
  "class tells the": {
    "current": 1.0
  },
  "tells the current": {
    "object": 1.0
  },
  "current object to": {
    "create": 0.5,
    "it": 0.5
  },
  "object to create": {
    "its": 1.0
  },
  "to create its": {
    "crust": 1.0
  },
  "create its crust": {
    "and": 1.0
  },
  "its crust and": {
    "it": 1.0
  },
  "crust and it": {
    "goes": 1.0
  },
  "and it goes": {
    "away": 1.0
  },
  "it goes away": {
    "and": 1.0
  },
  "goes away and": {
    "does": 1.0
  },
  "away and does": {
    "it": 1.0
  },
  "and does it": {
    "now": 1.0
  },
  "does it now": {
    "i": 1.0
  },
  "it now i": {
    "know": 1.0
  },
  "now i know": {
    "some": 1.0
  },
  "i know some": {
    "you": 1.0
  },
  "know some you": {
    "are": 1.0
  },
  "some you are": {
    "asking": 1.0
  },
  "you are asking": {
    "yourselves": 1.0
  },
  "are asking yourselves": {
    "how": 1.0
  },
  "asking yourselves how": {
    "can": 1.0
  },
  "yourselves how can": {
    "this": 1.0
  },
  "how can this": {
    "kind": 1.0
  },
  "can this kind": {
    "of": 1.0
  },
  "this kind of": {
    "code": 1.0
  },
  "kind of code": {
    "compile": 1.0
  },
  "of code compile": {
    "i": 1.0
  },
  "code compile i": {
    "remember": 1.0
  },
  "compile i remember": {
    "my": 1.0
  },
  "i remember my": {
    "compiler": 1.0
  },
  "remember my compiler": {
    "class": 1.0
  },
  "my compiler class": {
    "in": 1.0
  },
  "compiler class in": {
    "college": 1.0
  },
  "class in college": {
    "and": 1.0
  },
  "in college and": {
    "the": 1.0
  },
  "college and the": {
    "compiler": 1.0
  },
  "and the compiler": {
    "needs": 0.5,
    "would": 0.5
  },
  "the compiler needs": {
    "to": 1.0
  },
  "compiler needs to": {
    "resolve": 1.0
  },
  "needs to resolve": {
    "all": 1.0
  },
  "to resolve all": {
    "procedure": 1.0
  },
  "resolve all procedure": {
    "calls": 1.0
  },
  "all procedure calls": {
    "at": 0.5,
    "are": 0.5
  },
  "procedure calls at": {
    "compile": 1.0
  },
  "calls at compile": {
    "time": 1.0
  },
  "at compile time": {
    "the": 0.14285714285714285,
    "however": 0.14285714285714285,
    "t": 0.14285714285714285,
    "and": 0.14285714285714285,
    "exactly": 0.14285714285714285,
    "to": 0.14285714285714285,
    "create": 0.14285714285714285
  },
  "compile time the": {
    "answer": 1.0
  },
  "time the answer": {
    "is": 1.0
  },
  "answer is using": {
    "another": 1.0
  },
  "is using another": {
    "common": 1.0
  },
  "using another common": {
    "oop": 1.0
  },
  "common oop technique": {
    "late": 1.0
  },
  "oop technique late": {
    "bi": 1.0
  },
  "technique late bi": {
    "nding": 1.0
  },
  "late bi nding": {
    "late": 1.0
  },
  "bi nding late": {
    "binding": 1.0
  },
  "nding late binding": {
    "early": 1.0
  },
  "late binding early": {
    "binding": 1.0
  },
  "binding early binding": {
    "is": 1.0
  },
  "early binding is": {
    "the": 1.0
  },
  "binding is the": {
    "kind": 1.0
  },
  "is the kind": {
    "of": 1.0
  },
  "the kind of": {
    "stuff": 1.0
  },
  "kind of stuff": {
    "you": 1.0
  },
  "of stuff you": {
    "were": 1.0
  },
  "stuff you were": {
    "taught": 1.0
  },
  "you were taught": {
    "in": 1.0
  },
  "were taught in": {
    "your": 1.0
  },
  "taught in your": {
    "compiler": 1.0
  },
  "in your compiler": {
    "theory": 1.0
  },
  "your compiler theory": {
    "class": 1.0
  },
  "compiler theory class": {
    "where": 1.0
  },
  "theory class where": {
    "all": 1.0
  },
  "class where all": {
    "procedure": 1.0
  },
  "where all procedure": {
    "calls": 1.0
  },
  "procedure calls are": {
    "resolved": 1.0
  },
  "calls are resolved": {
    "at": 1.0
  },
  "are resolved at": {
    "compile": 1.0
  },
  "resolved at compile": {
    "time": 1.0
  },
  "compile time however": {
    "since": 1.0
  },
  "time however since": {
    "calls": 1.0
  },
  "however since calls": {
    "to": 1.0
  },
  "since calls to": {
    "virtual": 1.0
  },
  "calls to virtual": {
    "method": 1.0
  },
  "to virtual method": {
    "cannot": 1.0
  },
  "virtual method cannot": {
    "be": 1.0
  },
  "method cannot be": {
    "resolved": 1.0
  },
  "cannot be resolved": {
    "at": 1.0
  },
  "be resolved at": {
    "compile": 1.0
  },
  "compile time t": {
    "he": 1.0
  },
  "time t he": {
    "compiler": 1.0
  },
  "t he compiler": {
    "must": 1.0
  },
  "he compiler must": {
    "build": 1.0
  },
  "compiler must build": {
    "what": 1.0
  },
  "must build what": {
    "s": 1.0
  },
  "build what s": {
    "called": 1.0
  },
  "what s called": {
    "a": 1.0
  },
  "s called a": {
    "virtual": 1.0
  },
  "called a virtual": {
    "method": 1.0
  },
  "virtual method table": {
    "at": 0.3333333333333333,
    "i": 0.3333333333333333,
    "vmt": 0.3333333333333333
  },
  "method table at": {
    "compile": 1.0
  },
  "table at compile": {
    "time": 1.0
  },
  "compile time and": {
    "set": 1.0
  },
  "time and set": {
    "the": 1.0
  },
  "and set the": {
    "method": 1.0
  },
  "set the method": {
    "call": 1.0
  },
  "the method call": {
    "up": 0.5,
    "like": 0.5
  },
  "method call up": {
    "for": 1.0
  },
  "call up for": {
    "late": 1.0
  },
  "up for late": {
    "binding": 1.0
  },
  "for late binding": {
    "at": 1.0
  },
  "late binding at": {
    "run": 1.0
  },
  "binding at run": {
    "time": 1.0
  },
  "at run time": {
    "when": 0.25,
    "each": 0.25,
    "in": 0.25,
    "the": 0.25
  },
  "run time when": {
    "the": 1.0
  },
  "time when the": {
    "call": 1.0
  },
  "when the call": {
    "to": 1.0
  },
  "call to the": {
    "virtual": 0.5,
    "procedure": 0.5
  },
  "to the virtual": {
    "method": 1.0
  },
  "virtual method executes": {
    "late": 1.0
  },
  "method executes late": {
    "binding": 1.0
  },
  "executes late binding": {
    "means": 1.0
  },
  "late binding means": {
    "that": 1.0
  },
  "binding means that": {
    "the": 1.0
  },
  "that the actual": {
    "method": 1.0
  },
  "actual method to": {
    "call": 1.0
  },
  "method to call": {
    "is": 0.5,
    "methods": 0.5
  },
  "to call is": {
    "determined": 1.0
  },
  "call is determined": {
    "by": 1.0
  },
  "is determined by": {
    "a": 0.5,
    "the": 0.5
  },
  "determined by a": {
    "looku": 1.0
  },
  "by a looku": {
    "p": 1.0
  },
  "a looku p": {
    "into": 1.0
  },
  "looku p into": {
    "the": 1.0
  },
  "p into the": {
    "virtual": 1.0
  },
  "into the virtual": {
    "method": 1.0
  },
  "method table i": {
    "m": 1.0
  },
  "table i m": {
    "sure": 1.0
  },
  "i m sure": {
    "that": 1.0
  },
  "m sure that": {
    "all": 1.0
  },
  "sure that all": {
    "of": 1.0
  },
  "that all of": {
    "you": 1.0
  },
  "all of you": {
    "know": 1.0
  },
  "of you know": {
    "a": 1.0
  },
  "you know a": {
    "lot": 1.0
  },
  "know a lot": {
    "about": 1.0
  },
  "a lot about": {
    "lookups": 1.0
  },
  "lot about lookups": {
    "since": 1.0
  },
  "about lookups since": {
    "it": 1.0
  },
  "lookups since it": {
    "s": 1.0
  },
  "since it s": {
    "a": 1.0
  },
  "it s a": {
    "pretty": 0.5,
    "car": 0.5
  },
  "s a pretty": {
    "standard": 1.0
  },
  "a pretty standard": {
    "database": 1.0
  },
  "pretty standard database": {
    "application": 1.0
  },
  "standard database application": {
    "design": 1.0
  },
  "database application design": {
    "technique": 1.0
  },
  "application design technique": {
    "now": 1.0
  },
  "design technique now": {
    "in": 1.0
  },
  "technique now in": {
    "many": 1.0
  },
  "now in many": {
    "other": 1.0
  },
  "in many other": {
    "oop": 1.0
  },
  "many other oop": {
    "languages": 1.0
  },
  "oop languages this": {
    "late": 1.0
  },
  "languages this late": {
    "binding": 1.0
  },
  "this late binding": {
    "for": 1.0
  },
  "late binding for": {
    "virtual": 1.0
  },
  "binding for virtual": {
    "methods": 1.0
  },
  "for virtual methods": {
    "can": 1.0
  },
  "virtual methods can": {
    "cause": 0.5,
    "call": 0.5
  },
  "methods can cause": {
    "a": 1.0
  },
  "can cause a": {
    "real": 1.0
  },
  "cause a real": {
    "performance": 1.0
  },
  "a real performance": {
    "hit": 1.0
  },
  "real performance hit": {
    "however": 1.0
  },
  "performance hit however": {
    "in": 1.0
  },
  "hit however in": {
    "clarion": 1.0
  },
  "however in clarion": {
    "the": 1.0
  },
  "clarion the entire": {
    "late": 1.0
  },
  "the entire late": {
    "binding": 1.0
  },
  "entire late binding": {
    "process": 1.0
  },
  "late binding process": {
    "takes": 1.0
  },
  "binding process takes": {
    "only": 1.0
  },
  "process takes only": {
    "one": 1.0
  },
  "takes only one": {
    "more": 1.0
  },
  "only one more": {
    "extra": 1.0
  },
  "one more extra": {
    "reference": 1.0
  },
  "more extra reference": {
    "at": 1.0
  },
  "extra reference at": {
    "runtime": 1.0
  },
  "reference at runtime": {
    "than": 1.0
  },
  "at runtime than": {
    "early": 1.0
  },
  "runtime than early": {
    "binding": 1.0
  },
  "than early binding": {
    "does": 1.0
  },
  "early binding does": {
    "so": 1.0
  },
  "binding does so": {
    "there": 1.0
  },
  "does so there": {
    "s": 1.0
  },
  "so there s": {
    "virtually": 1.0
  },
  "there s virtually": {
    "no": 1.0
  },
  "s virtually no": {
    "performance": 1.0
  },
  "virtually no performance": {
    "hit": 1.0
  },
  "no performance hit": {
    "with": 1.0
  },
  "performance hit with": {
    "using": 1.0
  },
  "hit with using": {
    "virtual": 1.0
  },
  "with using virtual": {
    "methods": 1.0
  },
  "using virtual methods": {
    "in": 0.5,
    "if": 0.5
  },
  "virtual methods in": {
    "clarion": 0.6666666666666666,
    "two": 0.3333333333333333
  },
  "methods in clarion": {
    "as": 0.5,
    "ar": 0.5
  },
  "in clarion as": {
    "a": 1.0
  },
  "clarion as a": {
    "matter": 1.0
  },
  "as a matter": {
    "of": 1.0
  },
  "a matter of": {
    "fact": 0.3333333333333333,
    "looking": 0.3333333333333333,
    "specific": 0.3333333333333333
  },
  "matter of fact": {
    "virtual": 1.0
  },
  "of fact virtual": {
    "methods": 1.0
  },
  "fact virtual methods": {
    "in": 1.0
  },
  "in clarion ar": {
    "e": 1.0
  },
  "clarion ar e": {
    "so": 1.0
  },
  "ar e so": {
    "efficient": 1.0
  },
  "e so efficient": {
    "that": 1.0
  },
  "so efficient that": {
    "when": 1.0
  },
  "efficient that when": {
    "you": 1.0
  },
  "when you look": {
    "at": 1.0
  },
  "you look at": {
    "the": 0.5,
    "inheritance": 0.5
  },
  "look at the": {
    "code": 0.25,
    "generated": 0.25,
    "real": 0.25,
    "natural": 0.25
  },
  "the code generated": {
    "by": 0.5,
    "is": 0.5
  },
  "code generated by": {
    "the": 1.0
  },
  "generated by the": {
    "new": 0.5,
    "file": 0.5
  },
  "by the new": {
    "abc": 1.0
  },
  "the new abc": {
    "templates": 1.0
  },
  "new abc templates": {
    "you": 1.0
  },
  "abc templates you": {
    "ll": 1.0
  },
  "templates you ll": {
    "find": 1.0
  },
  "you ll find": {
    "that": 1.0
  },
  "ll find that": {
    "almost": 1.0
  },
  "find that almost": {
    "all": 1.0
  },
  "that almost all": {
    "the": 1.0
  },
  "almost all the": {
    "code": 1.0
  },
  "all the code": {
    "generated": 1.0
  },
  "code generated is": {
    "now": 1.0
  },
  "generated is now": {
    "in": 1.0
  },
  "is now in": {
    "virtual": 1.0
  },
  "now in virtual": {
    "methods": 1.0
  },
  "in virtual methods": {
    "this": 1.0
  },
  "virtual methods this": {
    "means": 0.5,
    "meant": 0.5
  },
  "methods this means": {
    "you": 0.5,
    "the": 0.5
  },
  "this means you": {
    "ve": 1.0
  },
  "means you ve": {
    "probably": 1.0
  },
  "you ve probably": {
    "seen": 1.0
  },
  "ve probably seen": {
    "the": 1.0
  },
  "probably seen the": {
    "last": 1.0
  },
  "seen the last": {
    "of": 1.0
  },
  "the last of": {
    "any": 1.0
  },
  "last of any": {
    "pool": 1.0
  },
  "of any pool": {
    "limit": 1.0
  },
  "any pool limit": {
    "errors": 1.0
  },
  "pool limit errors": {
    "that": 1.0
  },
  "limit errors that": {
    "brings": 1.0
  },
  "errors that brings": {
    "me": 1.0
  },
  "that brings me": {
    "to": 1.0
  },
  "brings me to": {
    "the": 1.0
  },
  "me to the": {
    "last": 1.0
  },
  "to the last": {
    "oop": 1.0
  },
  "the last oop": {
    "is": 1.0
  },
  "last oop is": {
    "sue": 1.0
  },
  "oop is sue": {
    "i": 1.0
  },
  "is sue i": {
    "want": 1.0
  },
  "sue i want": {
    "to": 1.0
  },
  "i want to": {
    "tell": 1.0
  },
  "want to tell": {
    "you": 1.0
  },
  "you about this": {
    "morning": 1.0
  },
  "about this morning": {
    "scoping": 1.0
  },
  "this morning scoping": {
    "in": 1.0
  },
  "morning scoping in": {
    "older": 1.0
  },
  "scoping in older": {
    "version": 1.0
  },
  "in older version": {
    "of": 1.0
  },
  "older version of": {
    "clarion": 1.0
  },
  "version of clarion": {
    "you": 1.0
  },
  "of clarion you": {
    "will": 1.0
  },
  "clarion you will": {
    "have": 1.0
  },
  "you will have": {
    "noticed": 1.0
  },
  "will have noticed": {
    "that": 1.0
  },
  "have noticed that": {
    "some": 1.0
  },
  "noticed that some": {
    "of": 1.0
  },
  "some of the": {
    "biggest": 1.0
  },
  "of the biggest": {
    "conversion": 1.0
  },
  "the biggest conversion": {
    "problems": 1.0
  },
  "biggest conversion problems": {
    "lay": 1.0
  },
  "conversion problems lay": {
    "in": 1.0
  },
  "problems lay in": {
    "the": 1.0
  },
  "lay in the": {
    "fact": 1.0
  },
  "fact that many": {
    "of": 1.0
  },
  "that many of": {
    "the": 1.0
  },
  "many of the": {
    "template": 1.0
  },
  "of the template": {
    "embed": 1.0
  },
  "the template embed": {
    "points": 1.0
  },
  "template embed points": {
    "were": 1.0
  },
  "embed points were": {
    "moved": 1.0
  },
  "points were moved": {
    "into": 1.0
  },
  "were moved into": {
    "virtual": 1.0
  },
  "moved into virtual": {
    "methods": 1.0
  },
  "into virtual methods": {
    "this": 1.0
  },
  "methods this meant": {
    "you": 1.0
  },
  "this meant you": {
    "had": 1.0
  },
  "meant you had": {
    "two": 1.0
  },
  "you had two": {
    "workarounds": 1.0
  },
  "had two workarounds": {
    "available": 1.0
  },
  "two workarounds available": {
    "to": 1.0
  },
  "workarounds available to": {
    "you": 1.0
  },
  "available to you": {
    "move": 1.0
  },
  "to you move": {
    "any": 1.0
  },
  "you move any": {
    "procedure": 1.0
  },
  "move any procedure": {
    "local": 1.0
  },
  "any procedure local": {
    "data": 1.0
  },
  "local data that": {
    "you": 1.0
  },
  "data that you": {
    "wanted": 1.0
  },
  "that you wanted": {
    "to": 1.0
  },
  "wanted to reference": {
    "in": 0.5,
    "and": 0.5
  },
  "to reference in": {
    "those": 1.0
  },
  "reference in those": {
    "embed": 1.0
  },
  "in those embed": {
    "points": 1.0
  },
  "those embed points": {
    "out": 1.0
  },
  "embed points out": {
    "of": 1.0
  },
  "points out of": {
    "the": 1.0
  },
  "the procedure itself": {
    "and": 0.3333333333333333,
    "by": 0.3333333333333333,
    "summary": 0.3333333333333333
  },
  "procedure itself and": {
    "into": 1.0
  },
  "itself and into": {
    "module": 1.0
  },
  "and into module": {
    "data": 1.0
  },
  "into module data": {
    "or": 1.0
  },
  "module data or": {
    "jump": 1.0
  },
  "data or jump": {
    "through": 1.0
  },
  "or jump through": {
    "some": 1.0
  },
  "jump through some": {
    "even": 1.0
  },
  "through some even": {
    "more": 1.0
  },
  "some even more": {
    "difficult": 1.0
  },
  "even more difficult": {
    "hoops": 1.0
  },
  "more difficult hoops": {
    "by": 1.0
  },
  "difficult hoops by": {
    "creating": 1.0
  },
  "hoops by creating": {
    "reference": 1.0
  },
  "by creating reference": {
    "variables": 1.0
  },
  "creating reference variables": {
    "for": 1.0
  },
  "reference variables for": {
    "each": 1.0
  },
  "variables for each": {
    "of": 1.0
  },
  "each of the": {
    "variables": 1.0
  },
  "of the variables": {
    "you": 1.0
  },
  "the variables you": {
    "wanted": 1.0
  },
  "variables you wanted": {
    "to": 1.0
  },
  "to reference and": {
    "reference": 1.0
  },
  "reference and reference": {
    "assigning": 1.0
  },
  "and reference assigning": {
    "to": 1.0
  },
  "reference assigning to": {
    "them": 1.0
  },
  "assigning to them": {
    "then": 1.0
  },
  "to them then": {
    "changing": 1.0
  },
  "them then changing": {
    "your": 1.0
  },
  "then changing your": {
    "embed": 1.0
  },
  "changing your embed": {
    "code": 1.0
  },
  "your embed code": {
    "to": 0.5,
    "as": 0.5
  },
  "embed code to": {
    "refer": 1.0
  },
  "code to refer": {
    "to": 1.0
  },
  "to refer to": {
    "those": 1.0
  },
  "refer to those": {
    "reference": 1.0
  },
  "to those reference": {
    "variables": 1.0
  },
  "those reference variables": {
    "needless": 1.0
  },
  "reference variables needless": {
    "to": 1.0
  },
  "variables needless to": {
    "say": 1.0
  },
  "needless to say": {
    "this": 1.0
  },
  "to say this": {
    "was": 1.0
  },
  "say this was": {
    "a": 1.0
  },
  "this was a": {
    "lot": 1.0
  },
  "was a lot": {
    "more": 1.0
  },
  "lot more work": {
    "than": 1.0
  },
  "more work than": {
    "clarion": 1.0
  },
  "work than clarion": {
    "programmers": 1.0
  },
  "than clarion programmers": {
    "have": 1.0
  },
  "clarion programmers have": {
    "grown": 1.0
  },
  "programmers have grown": {
    "accustomed": 1.0
  },
  "have grown accustomed": {
    "to": 1.0
  },
  "grown accustomed to": {
    "so": 1.0
  },
  "accustomed to so": {
    "to": 1.0
  },
  "to so to": {
    "solve": 1.0
  },
  "so to solve": {
    "that": 1.0
  },
  "to solve that": {
    "probl": 1.0
  },
  "solve that probl": {
    "em": 1.0
  },
  "that probl em": {
    "clarion": 1.0
  },
  "probl em clarion": {
    "supports": 1.0
  },
  "em clarion supports": {
    "a": 1.0
  },
  "clarion supports a": {
    "technique": 1.0
  },
  "supports a technique": {
    "called": 1.0
  },
  "a technique called": {
    "local": 1.0
  },
  "technique called local": {
    "derived": 1.0
  },
  "called local derived": {
    "methods": 1.0
  },
  "methods 23 easing": {
    "into": 1.0
  },
  "23 easing into": {
    "oop": 1.0
  },
  "into oop local": {
    "derived": 1.0
  },
  "oop local derived": {
    "methods": 1.0
  },
  "derived methods local": {
    "derived": 1.0
  },
  "methods local derived": {
    "methods": 1.0
  },
  "derived methods are": {
    "declared": 1.0
  },
  "methods are declared": {
    "in": 1.0
  },
  "class structure within": {
    "a": 1.0
  },
  "a procedure the": {
    "local": 1.0
  },
  "procedure the local": {
    "derived": 1.0
  },
  "the local derived": {
    "method": 0.5,
    "methods": 0.5
  },
  "local derived method": {
    "definitions": 1.0
  },
  "derived method definitions": {
    "their": 1.0
  },
  "method definitions their": {
    "executable": 1.0
  },
  "definitions their executable": {
    "code": 1.0
  },
  "their executable code": {
    "that": 1.0
  },
  "executable code that": {
    "is": 0.5,
    "tests": 0.5
  },
  "code that is": {
    "must": 1.0
  },
  "that is must": {
    "immediately": 1.0
  },
  "is must immediately": {
    "follow": 1.0
  },
  "follow the end": {
    "of": 1.0
  },
  "the end of": {
    "the": 1.0
  },
  "end of the": {
    "procedure": 0.25,
    "file": 0.5,
    "sample": 0.25
  },
  "are declared so": {
    "what": 1.0
  },
  "declared so what": {
    "s": 1.0
  },
  "so what s": {
    "the": 1.0
  },
  "what s the": {
    "advantage": 1.0
  },
  "s the advantage": {
    "you": 1.0
  },
  "the advantage you": {
    "get": 1.0
  },
  "advantage you get": {
    "from": 1.0
  },
  "you get from": {
    "these": 1.0
  },
  "get from these": {
    "things": 1.0
  },
  "from these things": {
    "local": 1.0
  },
  "these things local": {
    "derived": 1.0
  },
  "things local derived": {
    "methods": 1.0
  },
  "derived methods inherit": {
    "the": 1.0
  },
  "methods inherit the": {
    "scope": 1.0
  },
  "inherit the scope": {
    "of": 1.0
  },
  "the scope of": {
    "the": 1.0
  },
  "scope of the": {
    "procedure": 1.0
  },
  "are declared that": {
    "means": 1.0
  },
  "declared that means": {
    "that": 1.0
  },
  "that means that": {
    "all": 1.0
  },
  "means that all": {
    "the": 0.6666666666666666,
    "foreign": 0.3333333333333333
  },
  "that all the": {
    "procedure": 0.5,
    "simple": 0.5
  },
  "all the procedure": {
    "s": 1.0
  },
  "variables and routines": {
    "are": 0.5,
    "with": 0.5
  },
  "and routines are": {
    "visible": 0.5,
    "all": 0.5
  },
  "routines are visible": {
    "and": 1.0
  },
  "are visible and": {
    "available": 1.0
  },
  "and available inside": {
    "the": 1.0
  },
  "available inside the": {
    "local": 1.0
  },
  "inside the local": {
    "derived": 1.0
  },
  "derived methods that": {
    "eliminates": 1.0
  },
  "methods that eliminates": {
    "all": 1.0
  },
  "that eliminates all": {
    "the": 1.0
  },
  "eliminates all the": {
    "hoops": 1.0
  },
  "all the hoops": {
    "you": 1.0
  },
  "the hoops you": {
    "had": 1.0
  },
  "hoops you had": {
    "to": 1.0
  },
  "you had to": {
    "jump": 1.0
  },
  "had to jump": {
    "through": 1.0
  },
  "to jump through": {
    "in": 1.0
  },
  "jump through in": {
    "older": 1.0
  },
  "through in older": {
    "versions": 1.0
  },
  "in older versions": {
    "to": 1.0
  },
  "older versions to": {
    "access": 1.0
  },
  "versions to access": {
    "your": 1.0
  },
  "to access your": {
    "local": 1.0
  },
  "access your local": {
    "data": 1.0
  },
  "your local data": {
    "in": 1.0
  },
  "data in those": {
    "virtual": 1.0
  },
  "in those virtual": {
    "embed": 1.0
  },
  "those virtual embed": {
    "points": 1.0
  },
  "virtual embed points": {
    "and": 1.0
  },
  "embed points and": {
    "it": 1.0
  },
  "points and it": {
    "also": 1.0
  },
  "and it also": {
    "enables": 1.0
  },
  "it also enables": {
    "you": 1.0
  },
  "also enables you": {
    "to": 1.0
  },
  "enables you to": {
    "call": 1.0
  },
  "to call the": {
    "procedure": 1.0
  },
  "call the procedure": {
    "s": 1.0
  },
  "procedure s routines": {
    "from": 1.0
  },
  "s routines from": {
    "within": 1.0
  },
  "routines from within": {
    "them": 1.0
  },
  "from within them": {
    "too": 1.0
  },
  "within them too": {
    "just": 1.0
  },
  "them too just": {
    "as": 1.0
  },
  "too just as": {
    "if": 1.0
  },
  "just as if": {
    "your": 1.0
  },
  "as if your": {
    "code": 1.0
  },
  "if your code": {
    "were": 1.0
  },
  "your code were": {
    "still": 1.0
  },
  "code were still": {
    "within": 1.0
  },
  "were still within": {
    "the": 1.0
  },
  "still within the": {
    "procedure": 1.0
  },
  "procedure itself by": {
    "the": 1.0
  },
  "itself by the": {
    "way": 1.0
  },
  "the way for": {
    "those": 1.0
  },
  "way for those": {
    "of": 1.0
  },
  "for those of": {
    "you": 1.0
  },
  "those of you": {
    "who": 1.0
  },
  "of you who": {
    "still": 1.0
  },
  "you who still": {
    "remember": 1.0
  },
  "who still remember": {
    "some": 1.0
  },
  "still remember some": {
    "pascal": 1.0
  },
  "remember some pascal": {
    "from": 1.0
  },
  "some pascal from": {
    "college": 1.0
  },
  "pascal from college": {
    "this": 1.0
  },
  "from college this": {
    "concept": 1.0
  },
  "college this concept": {
    "is": 1.0
  },
  "this concept is": {
    "very": 1.0
  },
  "concept is very": {
    "similar": 1.0
  },
  "is very similar": {
    "to": 1.0
  },
  "very similar to": {
    "pascal": 1.0
  },
  "similar to pascal": {
    "s": 1.0
  },
  "to pascal s": {
    "nested": 1.0
  },
  "pascal s nested": {
    "procedures": 1.0
  },
  "s nested procedures": {
    "this": 1.0
  },
  "nested procedures this": {
    "new": 1.0
  },
  "procedures this new": {
    "implementation": 1.0
  },
  "this new implementation": {
    "of": 1.0
  },
  "new implementation of": {
    "scoping": 1.0
  },
  "implementation of scoping": {
    "for": 1.0
  },
  "of scoping for": {
    "local": 1.0
  },
  "scoping for local": {
    "derived": 1.0
  },
  "for local derived": {
    "methods": 1.0
  },
  "derived methods is": {
    "what": 1.0
  },
  "methods is what": {
    "allowed": 1.0
  },
  "is what allowed": {
    "great": 1.0
  },
  "what allowed great": {
    "flexibility": 1.0
  },
  "allowed great flexibility": {
    "and": 1.0
  },
  "great flexibility and": {
    "functionality": 1.0
  },
  "flexibility and functionality": {
    "in": 1.0
  },
  "and functionality in": {
    "the": 1.0
  },
  "functionality in the": {
    "abc": 1.0
  },
  "in the abc": {
    "templates": 1.0
  },
  "the abc templates": {
    "and": 1.0
  },
  "abc templates and": {
    "abc": 1.0
  },
  "templates and abc": {
    "library": 1.0
  },
  "and abc library": {
    "all": 1.0
  },
  "abc library all": {
    "you": 1.0
  },
  "library all you": {
    "need": 1.0
  },
  "do is run": {
    "the": 1.0
  },
  "is run the": {
    "app": 1.0
  },
  "run the app": {
    "wizard": 1.0
  },
  "the app wizard": {
    "on": 1.0
  },
  "app wizard on": {
    "any": 1.0
  },
  "wizard on any": {
    "dictionary": 1.0
  },
  "on any dictionary": {
    "then": 1.0
  },
  "any dictionary then": {
    "look": 1.0
  },
  "dictionary then look": {
    "at": 1.0
  },
  "then look at": {
    "the": 1.0
  },
  "at the generated": {
    "code": 1.0
  },
  "the generated code": {
    "to": 1.0
  },
  "generated code to": {
    "see": 1.0
  },
  "code to see": {
    "that": 1.0
  },
  "to see that": {
    "mos": 1.0
  },
  "see that mos": {
    "t": 1.0
  },
  "that mos t": {
    "generated": 1.0
  },
  "mos t generated": {
    "procedures": 1.0
  },
  "t generated procedures": {
    "now": 1.0
  },
  "generated procedures now": {
    "contain": 1.0
  },
  "procedures now contain": {
    "very": 1.0
  },
  "now contain very": {
    "little": 1.0
  },
  "contain very little": {
    "code": 1.0
  },
  "very little code": {
    "everything": 1.0
  },
  "little code everything": {
    "has": 1.0
  },
  "code everything has": {
    "been": 1.0
  },
  "everything has been": {
    "moved": 1.0
  },
  "has been moved": {
    "into": 1.0
  },
  "been moved into": {
    "local": 1.0
  },
  "moved into local": {
    "derived": 1.0
  },
  "into local derived": {
    "methods": 1.0
  },
  "derived methods and": {
    "you": 1.0
  },
  "methods and you": {
    "will": 1.0
  },
  "and you will": {
    "mostly": 1.0
  },
  "you will mostly": {
    "still": 1.0
  },
  "will mostly still": {
    "be": 1.0
  },
  "mostly still be": {
    "able": 1.0
  },
  "still be able": {
    "to": 1.0
  },
  "be able to": {
    "write": 0.5,
    "get": 0.5
  },
  "able to write": {
    "your": 1.0
  },
  "to write your": {
    "embed": 0.5,
    "applications": 0.5
  },
  "write your embed": {
    "code": 1.0
  },
  "embed code as": {
    "if": 1.0
  },
  "code as if": {
    "it": 1.0
  },
  "as if it": {
    "were": 1.0
  },
  "if it were": {
    "inside": 1.0
  },
  "it were inside": {
    "the": 1.0
  },
  "were inside the": {
    "procedure": 1.0
  },
  "inside the procedure": {
    "itself": 1.0
  },
  "procedure itself summary": {
    "you": 1.0
  },
  "itself summary you": {
    "ve": 1.0
  },
  "summary you ve": {
    "now": 1.0
  },
  "you ve now": {
    "been": 1.0
  },
  "ve now been": {
    "exposed": 1.0
  },
  "now been exposed": {
    "to": 1.0
  },
  "been exposed to": {
    "the": 1.0
  },
  "exposed to the": {
    "three": 1.0
  },
  "to the three": {
    "m": 1.0
  },
  "the three m": {
    "ajor": 1.0
  },
  "three m ajor": {
    "oop": 1.0
  },
  "m ajor oop": {
    "buzzwords": 1.0
  },
  "ajor oop buzzwords": {
    "encapsulation": 1.0
  },
  "buzzwords encapsulation inheritance": {
    "and": 1.0
  },
  "encapsulation inheritance and": {
    "polymorphism": 1.0
  },
  "inheritance and polymorphism": {
    "and": 0.3333333333333333,
    "the": 0.6666666666666666
  },
  "and polymorphism and": {
    "how": 1.0
  },
  "polymorphism and how": {
    "we": 1.0
  },
  "and how we": {
    "ve": 1.0
  },
  "language you ve": {
    "also": 1.0
  },
  "you ve also": {
    "heard": 1.0
  },
  "ve also heard": {
    "most": 1.0
  },
  "also heard most": {
    "of": 1.0
  },
  "heard most of": {
    "the": 1.0
  },
  "most of the": {
    "other": 1.0
  },
  "of the other": {
    "standard": 0.5,
    "class": 0.5
  },
  "the other standard": {
    "oop": 1.0
  },
  "other standard oop": {
    "terms": 1.0
  },
  "standard oop terms": {
    "properties": 1.0
  },
  "oop terms properties": {
    "methods": 1.0
  },
  "terms properties methods": {
    "objects": 1.0
  },
  "methods objects instantiation": {
    "base": 1.0
  },
  "objects instantiation base": {
    "classes": 1.0
  },
  "instantiation base classes": {
    "derived": 1.0
  },
  "base classes derived": {
    "classes": 1.0
  },
  "classes derived classes": {
    "s": 1.0
  },
  "derived classes s": {
    "elf": 1.0
  },
  "classes s elf": {
    "parent": 1.0
  },
  "s elf parent": {
    "constructors": 1.0
  },
  "elf parent constructors": {
    "and": 1.0
  },
  "parent constructors and": {
    "destructors": 1.0
  },
  "and destructors virtual": {
    "methods": 1.0
  },
  "destructors virtual methods": {
    "late": 1.0
  },
  "virtual methods late": {
    "binding": 1.0
  },
  "methods late binding": {
    "and": 1.0
  },
  "late binding and": {
    "let": 1.0
  },
  "binding and let": {
    "s": 1.0
  },
  "and let s": {
    "not": 1.0
  },
  "let s not": {
    "forget": 1.0
  },
  "s not forget": {
    "the": 1.0
  },
  "not forget the": {
    "one": 1.0
  },
  "forget the one": {
    "you": 1.0
  },
  "the one you": {
    "do": 1.0
  },
  "one you do": {
    "not": 1.0
  },
  "to learn disambiguate": {
    "clarion": 1.0
  },
  "learn disambiguate clarion": {
    "language": 1.0
  },
  "disambiguate clarion language": {
    "programming": 1.0
  },
  "programming guide 24": {
    "25": 1.0
  },
  "guide 24 25": {
    "object": 1.0
  },
  "24 25 object": {
    "oriented": 1.0
  },
  "25 object oriented": {
    "programming": 1.0
  },
  "oriented programming 3": {
    "object": 1.0
  },
  "programming 3 object": {
    "oriented": 1.0
  },
  "programming oop object": {
    "overview": 1.0
  },
  "oop object overview": {
    "wha": 1.0
  },
  "object overview wha": {
    "t": 1.0
  },
  "overview wha t": {
    "are": 1.0
  },
  "wha t are": {
    "objects": 1.0
  },
  "t are objects": {
    "an": 1.0
  },
  "are objects an": {
    "object": 1.0
  },
  "objects an object": {
    "is": 1.0
  },
  "object is a": {
    "single": 1.0
  },
  "is a single": {
    "thing": 1.0
  },
  "a single thing": {
    "we": 0.5,
    "why": 0.5
  },
  "single thing we": {
    "humans": 1.0
  },
  "thing we humans": {
    "tend": 1.0
  },
  "we humans tend": {
    "to": 1.0
  },
  "humans tend to": {
    "group": 1.0
  },
  "tend to group": {
    "what": 1.0
  },
  "to group what": {
    "we": 1.0
  },
  "group what we": {
    "see": 1.0
  },
  "what we see": {
    "in": 1.0
  },
  "we see in": {
    "the": 1.0
  },
  "see in the": {
    "world": 1.0
  },
  "in the world": {
    "into": 1.0
  },
  "the world into": {
    "classes": 1.0
  },
  "world into classes": {
    "of": 1.0
  },
  "into classes of": {
    "things": 1.0
  },
  "classes of things": {
    "we": 0.6666666666666666,
    "in": 0.3333333333333333
  },
  "of things we": {
    "group": 0.5,
    "see": 0.5
  },
  "things we group": {
    "them": 1.0
  },
  "we group them": {
    "according": 1.0
  },
  "group them according": {
    "to": 1.0
  },
  "them according to": {
    "the": 1.0
  },
  "properties and behaviors": {
    "that": 0.6666666666666666,
    "common": 0.3333333333333333
  },
  "and behaviors that": {
    "they": 0.3333333333333333,
    "describe": 0.3333333333333333,
    "define": 0.3333333333333333
  },
  "behaviors that they": {
    "have": 1.0
  },
  "that they have": {
    "in": 1.0
  },
  "they have in": {
    "common": 1.0
  },
  "have in common": {
    "therefore": 1.0
  },
  "in common therefore": {
    "things": 1.0
  },
  "common therefore things": {
    "that": 1.0
  },
  "therefore things that": {
    "belong": 1.0
  },
  "things that belong": {
    "to": 1.0
  },
  "that belong to": {
    "a": 0.4,
    "oneclass": 0.2,
    "someclass": 0.2,
    "anotherclass": 0.2
  },
  "belong to a": {
    "single": 0.5,
    "class": 0.5
  },
  "to a single": {
    "class": 0.5,
    "sql": 0.5
  },
  "a single class": {
    "have": 0.5,
    "reside": 0.5
  },
  "single class have": {
    "p": 1.0
  },
  "class have p": {
    "roperties": 1.0
  },
  "have p roperties": {
    "and": 1.0
  },
  "p roperties and": {
    "behaviors": 1.0
  },
  "roperties and behaviors": {
    "that": 1.0
  },
  "behaviors that describe": {
    "the": 1.0
  },
  "that describe the": {
    "type": 1.0
  },
  "describe the type": {
    "of": 1.0
  },
  "type of thing": {
    "it": 1.0
  },
  "of thing it": {
    "is": 1.0
  },
  "thing it is": {
    "and": 1.0
  },
  "it is and": {
    "what": 1.0
  },
  "is and what": {
    "it": 1.0
  },
  "and what it": {
    "does": 1.0
  },
  "what it does": {
    "we": 1.0
  },
  "it does we": {
    "also": 1.0
  },
  "does we also": {
    "tend": 1.0
  },
  "we also tend": {
    "to": 1.0
  },
  "also tend to": {
    "divide": 1.0
  },
  "tend to divide": {
    "the": 1.0
  },
  "to divide the": {
    "classes": 1.0
  },
  "divide the classes": {
    "of": 1.0
  },
  "the classes of": {
    "things": 1.0
  },
  "things we see": {
    "into": 1.0
  },
  "we see into": {
    "a": 1.0
  },
  "see into a": {
    "tree": 1.0
  },
  "into a tree": {
    "shaped": 1.0
  },
  "a tree shaped": {
    "hierarchy": 1.0
  },
  "tree shaped hierarchy": {
    "of": 1.0
  },
  "shaped hierarchy of": {
    "classes": 1.0
  },
  "hierarchy of classes": {
    "the": 1.0
  },
  "of classes the": {
    "hierarchy": 1.0
  },
  "classes the hierarchy": {
    "tree": 1.0
  },
  "the hierarchy tree": {
    "starts": 0.5,
    "it": 0.5
  },
  "hierarchy tree starts": {
    "with": 1.0
  },
  "tree starts with": {
    "the": 1.0
  },
  "starts with the": {
    "most": 0.5,
    "class": 0.5
  },
  "with the most": {
    "general": 1.0
  },
  "the most general": {
    "at": 1.0
  },
  "most general at": {
    "the": 1.0
  },
  "general at the": {
    "bottom": 1.0
  },
  "at the bottom": {
    "and": 1.0
  },
  "the bottom and": {
    "grows": 1.0
  },
  "bottom and grows": {
    "up": 1.0
  },
  "and grows up": {
    "to": 1.0
  },
  "grows up to": {
    "the": 1.0
  },
  "up to the": {
    "most": 0.3333333333333333,
    "minute": 0.3333333333333333,
    "enterprise": 0.3333333333333333
  },
  "to the most": {
    "specific": 1.0
  },
  "the most specific": {
    "each": 1.0
  },
  "most specific each": {
    "branch": 1.0
  },
  "specific each branch": {
    "of": 1.0
  },
  "each branch of": {
    "the": 1.0
  },
  "branch of the": {
    "tree": 1.0
  },
  "of the tree": {
    "is": 1.0
  },
  "the tree is": {
    "a": 1.0
  },
  "tree is a": {
    "separate": 1.0
  },
  "is a separate": {
    "class": 1.0
  },
  "a separate class": {
    "that": 1.0
  },
  "separate class that": {
    "shares": 1.0
  },
  "class that shares": {
    "the": 1.0
  },
  "that shares the": {
    "common": 1.0
  },
  "shares the common": {
    "properties": 1.0
  },
  "the common properties": {
    "of": 0.5,
    "and": 0.5
  },
  "common properties of": {
    "the": 1.0
  },
  "the class above": {
    "it": 1.0
  },
  "class above it": {
    "to": 1.0
  },
  "above it to": {
    "which": 1.0
  },
  "it to which": {
    "it": 1.0
  },
  "to which it": {
    "is": 0.5,
    "belongs": 0.5
  },
  "it is attached": {
    "its": 1.0
  },
  "is attached its": {
    "parent": 1.0
  },
  "attached its parent": {
    "because": 1.0
  },
  "its parent because": {
    "it": 1.0
  },
  "parent because it": {
    "is": 1.0
  },
  "because it is": {
    "derived": 0.5,
    "defined": 0.5
  },
  "it is derived": {
    "from": 0.3333333333333333,
    "its": 0.3333333333333333,
    "the": 0.3333333333333333
  },
  "is derived from": {
    "the": 0.5,
    "someclass": 0.5
  },
  "from the parent": {
    "each": 0.5,
    "and": 0.5
  },
  "the parent each": {
    "derived": 1.0
  },
  "parent each derived": {
    "class": 1.0
  },
  "each derived class": {
    "must": 1.0
  },
  "derived class must": {
    "also": 1.0
  },
  "class must also": {
    "have": 1.0
  },
  "must also have": {
    "characteristics": 1.0
  },
  "also have characteristics": {
    "that": 1.0
  },
  "have characteristics that": {
    "are": 1.0
  },
  "characteristics that are": {
    "unique": 1.0
  },
  "that are unique": {
    "to": 1.0
  },
  "are unique to": {
    "it": 1.0
  },
  "unique to it": {
    "that": 1.0
  },
  "to it that": {
    "separate": 1.0
  },
  "it that separate": {
    "it": 1.0
  },
  "that separate it": {
    "from": 1.0
  },
  "separate it from": {
    "the": 1.0
  },
  "it from the": {
    "parent": 1.0
  },
  "the parent and": {
    "from": 1.0
  },
  "parent and from": {
    "other": 1.0
  },
  "and from other": {
    "classes": 1.0
  },
  "from other classes": {
    "derived": 0.3333333333333333,
    "someclass": 0.3333333333333333,
    "not": 0.3333333333333333
  },
  "other classes derived": {
    "from": 1.0
  },
  "classes derived from": {
    "the": 1.0
  },
  "same parent an": {
    "object": 1.0
  },
  "parent an object": {
    "is": 1.0
  },
  "object is one": {
    "instance": 0.5,
    "specific": 0.5
  },
  "is one instance": {
    "of": 1.0
  },
  "one instance of": {
    "a": 1.0
  },
  "a class of": {
    "things": 1.0
  },
  "class of things": {
    "generally": 1.0
  },
  "of things generally": {
    "from": 1.0
  },
  "things generally from": {
    "the": 1.0
  },
  "generally from the": {
    "lowest": 1.0
  },
  "from the lowest": {
    "level": 1.0
  },
  "the lowest level": {
    "of": 1.0
  },
  "lowest level of": {
    "the": 1.0
  },
  "level of the": {
    "hierarchy": 1.0
  },
  "of the hierarchy": {
    "tree": 1.0
  },
  "hierarchy tree it": {
    "has": 1.0
  },
  "tree it has": {
    "properties": 1.0
  },
  "it has properties": {
    "and": 1.0
  },
  "has properties and": {
    "behaviors": 1.0
  },
  "behaviors that define": {
    "what": 1.0
  },
  "that define what": {
    "it": 1.0
  },
  "define what it": {
    "is": 1.0
  },
  "what it is": {
    "for": 1.0
  },
  "it is for": {
    "example": 1.0
  },
  "is for example": {
    "we": 1.0
  },
  "for example we": {
    "see": 1.0
  },
  "example we see": {
    "two": 1.0
  },
  "we see two": {
    "major": 1.0
  },
  "see two major": {
    "classes": 1.0
  },
  "two major classes": {
    "of": 1.0
  },
  "major classes of": {
    "things": 1.0
  },
  "of things in": {
    "our": 1.0
  },
  "things in our": {
    "world": 1.0
  },
  "in our world": {
    "living": 1.0
  },
  "our world living": {
    "things": 1.0
  },
  "world living things": {
    "and": 1.0
  },
  "living things and": {
    "non": 1.0
  },
  "things and non": {
    "living": 1.0
  },
  "and non living": {
    "things": 1.0
  },
  "non living things": {
    "we": 1.0
  },
  "living things we": {
    "can": 1.0
  },
  "things we can": {
    "divide": 1.0
  },
  "we can divide": {
    "the": 1.0
  },
  "can divide the": {
    "living": 1.0
  },
  "divide the living": {
    "things": 1.0
  },
  "the living things": {
    "class": 1.0
  },
  "living things class": {
    "into": 1.0
  },
  "things class into": {
    "two": 1.0
  },
  "class into two": {
    "sub": 1.0
  },
  "into two sub": {
    "classes": 1.0
  },
  "two sub classes": {
    "plants": 1.0
  },
  "sub classes plants": {
    "and": 1.0
  },
  "classes plants and": {
    "animals": 1.0
  },
  "plants and animals": {
    "within": 1.0
  },
  "and animals within": {
    "the": 1.0
  },
  "animals within the": {
    "animal": 1.0
  },
  "within the animal": {
    "class": 1.0
  },
  "the animal class": {
    "we": 1.0
  },
  "animal class we": {
    "can": 1.0
  },
  "class we can": {
    "see": 1.0
  },
  "we can see": {
    "many": 1.0
  },
  "can see many": {
    "sub": 1.0
  },
  "see many sub": {
    "classes": 1.0
  },
  "many sub classes": {
    "mammals": 1.0
  },
  "sub classes mammals": {
    "birds": 1.0
  },
  "classes mammals birds": {
    "fish": 1.0
  },
  "mammals birds fish": {
    "etc": 1.0
  },
  "birds fish etc": {
    "then": 1.0
  },
  "fish etc then": {
    "these": 1.0
  },
  "etc then these": {
    "sub": 1.0
  },
  "then these sub": {
    "classes": 1.0
  },
  "these sub classes": {
    "are": 1.0
  },
  "sub classes are": {
    "further": 1.0
  },
  "classes are further": {
    "sub": 1.0
  },
  "are further sub": {
    "divided": 1.0
  },
  "further sub divided": {
    "into": 1.0
  },
  "sub divided into": {
    "sub": 1.0
  },
  "divided into sub": {
    "sub": 1.0
  },
  "into sub sub": {
    "classes": 1.0
  },
  "sub sub classes": {
    "this": 1.0
  },
  "sub classes this": {
    "sub": 1.0
  },
  "classes this sub": {
    "division": 1.0
  },
  "this sub division": {
    "of": 1.0
  },
  "sub division of": {
    "classes": 1.0
  },
  "division of classes": {
    "goes": 1.0
  },
  "of classes goes": {
    "on": 1.0
  },
  "classes goes on": {
    "until": 1.0
  },
  "goes on until": {
    "you": 1.0
  },
  "on until you": {
    "get": 1.0
  },
  "until you get": {
    "all": 1.0
  },
  "you get all": {
    "the": 1.0
  },
  "get all the": {
    "way": 1.0
  },
  "way to the": {
    "individual": 1.0
  },
  "to the individual": {
    "object": 1.0
  },
  "the individual object": {
    "a": 1.0
  },
  "individual object a": {
    "single": 1.0
  },
  "object a single": {
    "thing": 1.0
  },
  "single thing why": {
    "objects": 1.0
  },
  "thing why objects": {
    "object": 1.0
  },
  "why objects object": {
    "oriented": 1.0
  },
  "objects object oriented": {
    "programming": 1.0
  },
  "programming oop techniques": {
    "w": 1.0
  },
  "oop techniques w": {
    "ere": 1.0
  },
  "techniques w ere": {
    "developed": 1.0
  },
  "w ere developed": {
    "to": 1.0
  },
  "ere developed to": {
    "let": 1.0
  },
  "developed to let": {
    "us": 1.0
  },
  "to let us": {
    "more": 1.0
  },
  "let us more": {
    "closely": 1.0
  },
  "us more closely": {
    "model": 1.0
  },
  "more closely model": {
    "the": 1.0
  },
  "closely model the": {
    "programs": 1.0
  },
  "model the programs": {
    "we": 1.0
  },
  "the programs we": {
    "write": 1.0
  },
  "programs we write": {
    "on": 1.0
  },
  "we write on": {
    "the": 1.0
  },
  "write on the": {
    "way": 1.0
  },
  "on the way": {
    "we": 1.0
  },
  "the way we": {
    "look": 1.0
  },
  "way we look": {
    "at": 1.0
  },
  "we look at": {
    "the": 1.0
  },
  "at the real": {
    "world": 1.0
  },
  "the real world": {
    "designing": 1.0
  },
  "real world designing": {
    "a": 1.0
  },
  "world designing a": {
    "class": 1.0
  },
  "designing a class": {
    "hierarchy": 1.0
  },
  "a class hierarchy": {
    "to": 1.0
  },
  "class hierarchy to": {
    "solve": 1.0
  },
  "hierarchy to solve": {
    "a": 1.0
  },
  "to solve a": {
    "real": 1.0
  },
  "solve a real": {
    "world": 1.0
  },
  "a real world": {
    "problem": 1.0
  },
  "real world problem": {
    "is": 1.0
  },
  "world problem is": {
    "a": 1.0
  },
  "problem is a": {
    "matter": 1.0
  },
  "is a matter": {
    "of": 1.0
  },
  "matter of looking": {
    "at": 1.0
  },
  "of looking at": {
    "the": 1.0
  },
  "looking at the": {
    "problem": 1.0
  },
  "at the problem": {
    "from": 1.0
  },
  "the problem from": {
    "the": 1.0
  },
  "problem from the": {
    "same": 1.0
  },
  "the same perspective": {
    "that": 1.0
  },
  "same perspective that": {
    "we": 1.0
  },
  "perspective that we": {
    "look": 1.0
  },
  "that we look": {
    "at": 1.0
  },
  "at the natural": {
    "wor": 1.0
  },
  "the natural wor": {
    "ld": 1.0
  },
  "natural wor ld": {
    "we": 1.0
  },
  "wor ld we": {
    "start": 1.0
  },
  "ld we start": {
    "at": 1.0
  },
  "we start at": {
    "the": 1.0
  },
  "start at the": {
    "most": 1.0
  },
  "at the most": {
    "abstract": 1.0
  },
  "the most abstract": {
    "general": 1.0
  },
  "most abstract general": {
    "classes": 1.0
  },
  "abstract general classes": {
    "that": 1.0
  },
  "general classes that": {
    "have": 1.0
  },
  "classes that have": {
    "the": 1.0
  },
  "that have the": {
    "properties": 1.0
  },
  "have the properties": {
    "and": 1.0
  },
  "and behaviors common": {
    "to": 1.0
  },
  "behaviors common to": {
    "all": 1.0
  },
  "to all members": {
    "of": 1.0
  },
  "all members of": {
    "the": 1.0
  },
  "members of the": {
    "class": 1.0
  },
  "the class then": {
    "derive": 0.3333333333333333,
    "execute": 0.3333333333333333,
    "executing": 0.3333333333333333
  },
  "class then derive": {
    "from": 1.0
  },
  "then derive from": {
    "those": 1.0
  },
  "derive from those": {
    "abstract": 1.0
  },
  "from those abstract": {
    "classes": 1.0
  },
  "those abstract classes": {
    "the": 1.0
  },
  "abstract classes the": {
    "specific": 1.0
  },
  "classes the specific": {
    "classes": 1.0
  },
  "the specific classes": {
    "that": 1.0
  },
  "specific classes that": {
    "fully": 1.0
  },
  "classes that fully": {
    "describe": 1.0
  },
  "that fully describe": {
    "the": 1.0
  },
  "fully describe the": {
    "set": 1.0
  },
  "describe the set": {
    "of": 1.0
  },
  "the set of": {
    "individual": 1.0
  },
  "set of individual": {
    "objects": 1.0
  },
  "of individual objects": {
    "in": 1.0
  },
  "individual objects in": {
    "the": 1.0
  },
  "objects in the": {
    "problem": 1.0
  },
  "in the problem": {
    "one": 1.0
  },
  "the problem one": {
    "m": 1.0
  },
  "problem one m": {
    "ajor": 1.0
  },
  "one m ajor": {
    "benefit": 1.0
  },
  "m ajor benefit": {
    "of": 1.0
  },
  "ajor benefit of": {
    "object": 1.0
  },
  "benefit of object": {
    "oriented": 1.0
  },
  "oriented programming is": {
    "extensive": 1.0
  },
  "programming is extensive": {
    "code": 1.0
  },
  "is extensive code": {
    "re": 1.0
  },
  "extensive code re": {
    "use": 1.0
  },
  "code re use": {
    "once": 0.5,
    "the": 0.5
  },
  "re use once": {
    "a": 1.0
  },
  "use once a": {
    "behavior": 1.0
  },
  "once a behavior": {
    "method": 1.0
  },
  "a behavior method": {
    "has": 1.0
  },
  "behavior method has": {
    "been": 1.0
  },
  "method has been": {
    "coded": 1.0
  },
  "has been coded": {
    "for": 1.0
  },
  "been coded for": {
    "the": 1.0
  },
  "coded for the": {
    "more": 1.0
  },
  "for the more": {
    "general": 1.0
  },
  "the more general": {
    "class": 0.5,
    "abstract": 0.5
  },
  "more general class": {
    "it": 1.0
  },
  "general class it": {
    "never": 1.0
  },
  "class it never": {
    "needs": 1.0
  },
  "it never needs": {
    "to": 1.0
  },
  "never needs to": {
    "be": 1.0
  },
  "to be re": {
    "written": 1.0
  },
  "be re written": {
    "for": 1.0
  },
  "re written for": {
    "the": 0.5,
    "lan": 0.5
  },
  "written for the": {
    "derived": 1.0
  },
  "for the derived": {
    "classes": 1.0
  },
  "the derived classes": {
    "in": 1.0
  },
  "derived classes in": {
    "which": 1.0
  },
  "classes in which": {
    "it": 1.0
  },
  "which it does": {
    "not": 1.0
  },
  "it does not": {
    "need": 0.25,
    "read": 0.25,
    "find": 0.25,
    "allocate": 0.25
  },
  "does not need": {
    "to": 1.0
  },
  "not need to": {
    "change": 0.14285714285714285,
    "have": 0.2857142857142857,
    "be": 0.5714285714285714
  },
  "need to change": {
    "therefore": 1.0
  },
  "to change therefore": {
    "it": 1.0
  },
  "change therefore it": {
    "is": 1.0
  },
  "therefore it is": {
    "written": 0.5,
    "possible": 0.5
  },
  "it is written": {
    "once": 1.0
  },
  "is written once": {
    "and": 1.0
  },
  "written once and": {
    "the": 1.0
  },
  "once and the": {
    "same": 1.0
  },
  "and the same": {
    "code": 1.0
  },
  "the same code": {
    "is": 1.0
  },
  "same code is": {
    "shared": 1.0
  },
  "code is shared": {
    "amongst": 1.0
  },
  "is shared amongst": {
    "all": 1.0
  },
  "shared amongst all": {
    "the": 1.0
  },
  "amongst all the": {
    "objects": 1.0
  },
  "all the objects": {
    "derived": 1.0
  },
  "the objects derived": {
    "from": 1.0
  },
  "objects derived from": {
    "that": 1.0
  },
  "that class what": {
    "makes": 1.0
  },
  "class what makes": {
    "an": 1.0
  },
  "are three major": {
    "concepts": 1.0
  },
  "three major concepts": {
    "in": 1.0
  },
  "major concepts in": {
    "object": 1.0
  },
  "concepts in object": {
    "orientation": 1.0
  },
  "in object orientation": {
    "encapsulation": 0.5,
    "are": 0.5
  },
  "object orientation encapsulation": {
    "inheritance": 1.0
  },
  "orientation encapsulation inheritance": {
    "and": 1.0
  },
  "and polymorphism the": {
    "clarion": 0.5,
    "class": 0.5
  },
  "polymorphism the clarion": {
    "language": 1.0
  },
  "clarion language contains": {
    "object": 1.0
  },
  "language contains object": {
    "oriented": 1.0
  },
  "contains object oriented": {
    "extens": 1.0
  },
  "object oriented extens": {
    "ions": 1.0
  },
  "oriented extens ions": {
    "that": 1.0
  },
  "extens ions that": {
    "cover": 1.0
  },
  "ions that cover": {
    "all": 1.0
  },
  "that cover all": {
    "these": 1.0
  },
  "cover all these": {
    "concepts": 1.0
  },
  "all these concepts": {
    "encapsulation": 1.0
  },
  "these concepts encapsulation": {
    "encapsulation": 1.0
  },
  "concepts encapsulation encapsulation": {
    "means": 1.0
  },
  "encapsulation encapsulation means": {
    "bundling": 1.0
  },
  "encapsulation means bundling": {
    "the": 1.0
  },
  "means bundling the": {
    "properties": 1.0
  },
  "bundling the properties": {
    "of": 1.0
  },
  "a class its": {
    "data": 1.0
  },
  "class its data": {
    "members": 1.0
  },
  "its data members": {
    "together": 1.0
  },
  "data members together": {
    "with": 1.0
  },
  "members together with": {
    "its": 1.0
  },
  "together with its": {
    "methods": 1.0
  },
  "with its methods": {
    "the": 1.0
  },
  "its methods the": {
    "procedures": 1.0
  },
  "methods the procedures": {
    "that": 1.0
  },
  "the procedures that": {
    "operate": 1.0
  },
  "procedures that operate": {
    "on": 1.0
  },
  "on the data": {
    "members": 1.0
  },
  "the data members": {
    "into": 0.3333333333333333,
    "declared": 0.3333333333333333,
    "and": 0.3333333333333333
  },
  "data members into": {
    "one": 1.0
  },
  "members into one": {
    "coherent": 1.0
  },
  "into one coherent": {
    "unit": 1.0
  },
  "one coherent unit": {
    "the": 1.0
  },
  "coherent unit the": {
    "most": 1.0
  },
  "unit the most": {
    "important": 1.0
  },
  "the most important": {
    "benefit": 0.5,
    "aspect": 0.5
  },
  "most important benefit": {
    "of": 1.0
  },
  "important benefit of": {
    "encapsulation": 1.0
  },
  "benefit of encapsulation": {
    "is": 1.0
  },
  "of encapsulation is": {
    "the": 1.0
  },
  "encapsulation is the": {
    "ability": 1.0
  },
  "ability to treat": {
    "the": 1.0
  },
  "to treat the": {
    "object": 1.0
  },
  "treat the object": {
    "as": 1.0
  },
  "the object as": {
    "a": 1.0
  },
  "as a single": {
    "comp": 0.5,
    "page": 0.5
  },
  "a single comp": {
    "lete": 1.0
  },
  "single comp lete": {
    "entity": 1.0
  },
  "comp lete entity": {
    "this": 1.0
  },
  "lete entity this": {
    "lets": 1.0
  },
  "entity this lets": {
    "us": 1.0
  },
  "this lets us": {
    "use": 1.0
  },
  "lets us use": {
    "the": 1.0
  },
  "us use the": {
    "object": 1.0
  },
  "use the object": {
    "without": 1.0
  },
  "the object without": {
    "knowing": 1.0
  },
  "object without knowing": {
    "everything": 1.0
  },
  "without knowing everything": {
    "about": 1.0
  },
  "knowing everything about": {
    "it": 1.0
  },
  "everything about it": {
    "it": 1.0
  },
  "about it it": {
    "also": 1.0
  },
  "it it also": {
    "lets": 1.0
  },
  "it also lets": {
    "us": 1.0
  },
  "also lets us": {
    "change": 1.0
  },
  "lets us change": {
    "one": 1.0
  },
  "us change one": {
    "object": 1.0
  },
  "change one object": {
    "without": 1.0
  },
  "one object without": {
    "affecting": 1.0
  },
  "object without affecting": {
    "other": 1.0
  },
  "without affecting other": {
    "unrelated": 1.0
  },
  "affecting other unrelated": {
    "objects": 1.0
  },
  "other unrelated objects": {
    "the": 1.0
  },
  "unrelated objects the": {
    "properties": 1.0
  },
  "objects the properties": {
    "of": 1.0
  },
  "properties of an": {
    "object": 1.0
  },
  "object are the": {
    "things": 1.0
  },
  "are the things": {
    "the": 1.0
  },
  "the things the": {
    "object": 1.0
  },
  "things the object": {
    "knows": 1.0
  },
  "the object knows": {
    "about": 1.0
  },
  "object knows about": {
    "itself": 1.0
  },
  "knows about itself": {
    "and": 1.0
  },
  "about itself and": {
    "the": 1.0
  },
  "itself and the": {
    "methods": 1.0
  },
  "and the methods": {
    "are": 0.5,
    "of": 0.5
  },
  "the methods are": {
    "its": 1.0
  },
  "methods are its": {
    "beh": 1.0
  },
  "are its beh": {
    "aviors": 1.0
  },
  "its beh aviors": {
    "the": 1.0
  },
  "beh aviors the": {
    "operations": 1.0
  },
  "aviors the operations": {
    "it": 1.0
  },
  "the operations it": {
    "can": 1.0
  },
  "operations it can": {
    "perform": 1.0
  },
  "it can perform": {
    "each": 1.0
  },
  "can perform each": {
    "object": 1.0
  },
  "perform each object": {
    "has": 1.0
  },
  "each object has": {
    "its": 1.0
  },
  "object has its": {
    "own": 1.0
  },
  "has its own": {
    "properties": 1.0
  },
  "its own properties": {
    "unique": 1.0
  },
  "own properties unique": {
    "to": 1.0
  },
  "properties unique to": {
    "itself": 1.0
  },
  "unique to itself": {
    "and": 1.0
  },
  "to itself and": {
    "it": 1.0
  },
  "itself and it": {
    "shares": 0.5,
    "does": 0.5
  },
  "and it shares": {
    "the": 1.0
  },
  "it shares the": {
    "same": 1.0
  },
  "the same methods": {
    "with": 1.0
  },
  "same methods with": {
    "all": 1.0
  },
  "methods with all": {
    "the": 0.5,
    "other": 0.5
  },
  "with all the": {
    "other": 1.0
  },
  "all the other": {
    "objects": 1.0
  },
  "the other objects": {
    "of": 1.0
  },
  "other objects of": {
    "the": 1.0
  },
  "same type other": {
    "object": 1.0
  },
  "type other object": {
    "instances": 1.0
  },
  "other object instances": {
    "of": 1.0
  },
  "object instances of": {
    "the": 0.5,
    "a": 0.5
  },
  "the same class": {
    "for": 0.5,
    "in": 0.5
  },
  "same class for": {
    "example": 1.0
  },
  "class for example": {
    "objects": 0.5,
    "suppose": 0.5
  },
  "for example objects": {
    "that": 1.0
  },
  "example objects that": {
    "belong": 1.0
  },
  "objects that belong": {
    "to": 1.0
  },
  "to a class": {
    "such": 0.5,
    "structure": 0.5
  },
  "a class such": {
    "as": 1.0
  },
  "class such as": {
    "the": 1.0
  },
  "such as the": {
    "class": 1.0
  },
  "the class normal": {
    "healthy": 1.0
  },
  "class normal healthy": {
    "human": 1.0
  },
  "normal healthy human": {
    "beings": 1.0
  },
  "healthy human beings": {
    "each": 1.0
  },
  "human beings each": {
    "have": 1.0
  },
  "beings each have": {
    "their": 1.0
  },
  "each have their": {
    "own": 1.0
  },
  "have their own": {
    "unique": 1.0
  },
  "their own unique": {
    "set": 1.0
  },
  "own unique set": {
    "of": 1.0
  },
  "unique set of": {
    "properties": 1.0
  },
  "of properties like": {
    "blue": 1.0
  },
  "properties like blue": {
    "eyes": 1.0
  },
  "like blue eyes": {
    "or": 1.0
  },
  "blue eyes or": {
    "brown": 1.0
  },
  "eyes or brown": {
    "eyes": 1.0
  },
  "or brown eyes": {
    "but": 1.0
  },
  "brown eyes but": {
    "they": 1.0
  },
  "eyes but they": {
    "all": 1.0
  },
  "the same basic": {
    "abilities": 1.0
  },
  "same basic abilities": {
    "common": 1.0
  },
  "basic abilities common": {
    "to": 1.0
  },
  "abilities common to": {
    "the": 1.0
  },
  "common to the": {
    "class": 1.0
  },
  "to the class": {
    "of": 0.5,
    "methods": 0.5
  },
  "the class of": {
    "objects": 1.0
  },
  "class of objects": {
    "to": 1.0
  },
  "of objects to": {
    "which": 1.0
  },
  "objects to which": {
    "they": 1.0
  },
  "to which they": {
    "belong": 1.0
  },
  "which they belong": {
    "vision": 1.0
  },
  "they belong vision": {
    "inheritance": 1.0
  },
  "belong vision inheritance": {
    "inheritance": 1.0
  },
  "vision inheritance inheritance": {
    "is": 1.0
  },
  "inheritance inheritance is": {
    "the": 1.0
  },
  "inheritance is the": {
    "mechanism": 1.0
  },
  "the mechanism that": {
    "allows": 1.0
  },
  "mechanism that allows": {
    "us": 1.0
  },
  "that allows us": {
    "to": 1.0
  },
  "allows us to": {
    "build": 0.5,
    "handle": 0.5
  },
  "us to build": {
    "hierarchies": 1.0
  },
  "to build hierarchies": {
    "of": 1.0
  },
  "build hierarchies of": {
    "classes": 1.0
  },
  "hierarchies of classes": {
    "a": 1.0
  },
  "of classes a": {
    "derived": 1.0
  },
  "classes a derived": {
    "class": 1.0
  },
  "class from which": {
    "it": 0.75,
    "a": 0.25
  },
  "is derived its": {
    "base": 1.0
  },
  "derived its base": {
    "class": 1.0
  },
  "its base class": {
    "this": 0.25,
    "the": 0.25,
    "inheriting": 0.25,
    "virtual": 0.25
  },
  "base class this": {
    "provides": 1.0
  },
  "class this provides": {
    "the": 1.0
  },
  "this provides the": {
    "derived": 1.0
  },
  "provides the derived": {
    "class": 1.0
  },
  "derived class with": {
    "a": 0.5,
    "exactly": 0.5
  },
  "class with a": {
    "starting": 1.0
  },
  "with a starting": {
    "point": 1.0
  },
  "a starting point": {
    "of": 1.0
  },
  "starting point of": {
    "all": 0.5,
    "sequential": 0.5
  },
  "point of all": {
    "the": 1.0
  },
  "of all the": {
    "common": 0.5,
    "virtual": 0.5
  },
  "all the common": {
    "properties": 1.0
  },
  "of the more": {
    "general": 1.0
  },
  "more general abstract": {
    "class": 1.0
  },
  "general abstract class": {
    "then": 1.0
  },
  "abstract class then": {
    "the": 1.0
  },
  "class can add": {
    "the": 1.0
  },
  "can add the": {
    "properties": 1.0
  },
  "add the properties": {
    "and": 1.0
  },
  "and methods that": {
    "differentiate": 0.5,
    "exist": 0.5
  },
  "methods that differentiate": {
    "it": 1.0
  },
  "that differentiate it": {
    "from": 1.0
  },
  "differentiate it from": {
    "its": 1.0
  },
  "it from its": {
    "parent": 1.0
  },
  "its parent inheritance": {
    "is": 1.0
  },
  "parent inheritance is": {
    "also": 1.0
  },
  "inheritance is also": {
    "a": 1.0
  },
  "is also a": {
    "core": 1.0
  },
  "also a core": {
    "element": 1.0
  },
  "a core element": {
    "of": 1.0
  },
  "core element of": {
    "object": 1.0
  },
  "element of object": {
    "orientation": 1.0
  },
  "of object orientation": {
    "that": 1.0
  },
  "object orientation that": {
    "provides": 1.0
  },
  "orientation that provides": {
    "for": 1.0
  },
  "that provides for": {
    "code": 1.0
  },
  "provides for code": {
    "re": 1.0
  },
  "for code re": {
    "use": 1.0
  },
  "use the code": {
    "for": 1.0
  },
  "the code for": {
    "inherited": 1.0
  },
  "code for inherited": {
    "methods": 1.0
  },
  "for inherited methods": {
    "that": 1.0
  },
  "inherited methods that": {
    "are": 1.0
  },
  "methods that are": {
    "not": 1.0
  },
  "that are not": {
    "overridden": 0.5,
    "possible": 0.5
  },
  "are not overridden": {
    "in": 1.0
  },
  "not overridden in": {
    "the": 1.0
  },
  "overridden in the": {
    "derived": 1.0
  },
  "derived class exists": {
    "only": 1.0
  },
  "class exists only": {
    "once": 1.0
  },
  "exists only once": {
    "in": 1.0
  },
  "only once in": {
    "the": 1.0
  },
  "once in the": {
    "class": 1.0
  },
  "in the class": {
    "in": 0.2,
    "and": 0.2,
    "structure": 0.2,
    "you": 0.2,
    "declaration": 0.2
  },
  "they are defined": {
    "clarion": 1.0
  },
  "are defined clarion": {
    "language": 1.0
  },
  "defined clarion language": {
    "programming": 1.0
  },
  "programming guide 26": {
    "polymorphism": 1.0
  },
  "guide 26 polymorphism": {
    "polymorphism": 1.0
  },
  "26 polymorphism polymorphism": {
    "generically": 1.0
  },
  "polymorphism polymorphism generically": {
    "means": 1.0
  },
  "polymorphism generically means": {
    "being": 1.0
  },
  "generically means being": {
    "able": 1.0
  },
  "means being able": {
    "to": 1.0
  },
  "being able to": {
    "call": 1.0
  },
  "able to call": {
    "a": 0.3333333333333333,
    "dow": 0.3333333333333333,
    "up": 0.3333333333333333
  },
  "a method that": {
    "operates": 1.0
  },
  "method that operates": {
    "differentl": 1.0
  },
  "that operates differentl": {
    "y": 1.0
  },
  "operates differentl y": {
    "depending": 1.0
  },
  "differentl y depending": {
    "on": 1.0
  },
  "y depending on": {
    "how": 1.0
  },
  "depending on how": {
    "it": 1.0
  },
  "on how it": {
    "is": 1.0
  },
  "how it is": {
    "called": 1.0
  },
  "is called for": {
    "example": 1.0
  },
  "called for example": {
    "the": 1.0
  },
  "example the clarion": {
    "open": 1.0
  },
  "the clarion open": {
    "statement": 1.0
  },
  "clarion open statement": {
    "is": 1.0
  },
  "open statement is": {
    "polymorphic": 1.0
  },
  "statement is polymorphic": {
    "because": 1.0
  },
  "is polymorphic because": {
    "it": 1.0
  },
  "polymorphic because it": {
    "performs": 1.0
  },
  "because it performs": {
    "different": 1.0
  },
  "it performs different": {
    "operations": 1.0
  },
  "performs different operations": {
    "depending": 1.0
  },
  "different operations depending": {
    "on": 1.0
  },
  "operations depending on": {
    "whether": 1.0
  },
  "depending on whether": {
    "it": 1.0
  },
  "on whether it": {
    "is": 1.0
  },
  "it is given": {
    "a": 1.0
  },
  "is given a": {
    "file": 1.0
  },
  "given a file": {
    "or": 1.0
  },
  "a file or": {
    "a": 0.2,
    "view": 0.8
  },
  "file or a": {
    "window": 1.0
  },
  "or a window": {
    "to": 1.0
  },
  "a window to": {
    "open": 1.0
  },
  "window to open": {
    "this": 1.0
  },
  "to open this": {
    "type": 1.0
  },
  "open this type": {
    "of": 1.0
  },
  "type of polymorphism": {
    "is": 1.0
  },
  "of polymorphism is": {
    "generally": 0.5,
    "the": 0.5
  },
  "polymorphism is generally": {
    "called": 1.0
  },
  "is generally called": {
    "procedure": 1.0
  },
  "generally called procedure": {
    "overload": 1.0
  },
  "called procedure overload": {
    "ing": 1.0
  },
  "procedure overload ing": {
    "because": 1.0
  },
  "overload ing because": {
    "you": 1.0
  },
  "ing because you": {
    "are": 1.0
  },
  "because you are": {
    "overloading": 1.0
  },
  "you are overloading": {
    "what": 1.0
  },
  "are overloading what": {
    "appears": 1.0
  },
  "overloading what appears": {
    "to": 1.0
  },
  "what appears to": {
    "be": 1.0
  },
  "appears to be": {
    "one": 1.0
  },
  "to be one": {
    "procedure": 1.0
  },
  "be one procedure": {
    "call": 1.0
  },
  "one procedure call": {
    "with": 1.0
  },
  "procedure call with": {
    "multiple": 1.0
  },
  "call with multiple": {
    "operations": 1.0
  },
  "with multiple operations": {
    "actually": 1.0
  },
  "multiple operations actually": {
    "procedure": 1.0
  },
  "operations actually procedure": {
    "overloading": 1.0
  },
  "actually procedure overloading": {
    "is": 1.0
  },
  "procedure overloading is": {
    "simply": 1.0
  },
  "overloading is simply": {
    "done": 1.0
  },
  "is simply done": {
    "in": 1.0
  },
  "simply done in": {
    "clarion": 1.0
  },
  "done in clarion": {
    "by": 1.0
  },
  "in clarion by": {
    "defining": 0.5,
    "placing": 0.5
  },
  "clarion by defining": {
    "separate": 1.0
  },
  "by defining separate": {
    "procedures": 1.0
  },
  "defining separate procedures": {
    "with": 1.0
  },
  "separate procedures with": {
    "the": 1.0
  },
  "procedures with the": {
    "same": 1.0
  },
  "with the same": {
    "name": 1.0
  },
  "name but different": {
    "parameter": 1.0
  },
  "but different parameter": {
    "lists": 1.0
  },
  "parameter lists see": {
    "procedure": 1.0
  },
  "lists see procedure": {
    "ove": 1.0
  },
  "see procedure ove": {
    "rloading": 1.0
  },
  "procedure ove rloading": {
    "in": 1.0
  },
  "ove rloading in": {
    "the": 1.0
  },
  "rloading in the": {
    "language": 1.0
  },
  "language reference for": {
    "a": 1.0
  },
  "reference for a": {
    "complete": 0.5,
    "full": 0.5
  },
  "a complete discussion": {
    "of": 1.0
  },
  "complete discussion of": {
    "this": 1.0
  },
  "discussion of this": {
    "topic": 0.5,
    "technique": 0.5
  },
  "of this topic": {
    "polymorphism": 1.0
  },
  "this topic polymorphism": {
    "in": 1.0
  },
  "topic polymorphism in": {
    "object": 1.0
  },
  "polymorphism in object": {
    "oriented": 1.0
  },
  "in object oriented": {
    "parlance": 1.0
  },
  "object oriented parlance": {
    "is": 1.0
  },
  "oriented parlance is": {
    "more": 1.0
  },
  "parlance is more": {
    "commonly": 1.0
  },
  "is more commonly": {
    "taken": 1.0
  },
  "more commonly taken": {
    "to": 1.0
  },
  "commonly taken to": {
    "mean": 1.0
  },
  "taken to mean": {
    "the": 1.0
  },
  "to mean the": {
    "ability": 1.0
  },
  "mean the ability": {
    "of": 1.0
  },
  "the ability of": {
    "a": 1.0
  },
  "ability of a": {
    "base": 1.0
  },
  "of a base": {
    "class": 1.0
  },
  "base class method": {
    "to": 0.1111111111111111,
    "from": 0.2222222222222222,
    "s": 0.1111111111111111,
    "however": 0.1111111111111111,
    "can": 0.1111111111111111,
    "does": 0.2222222222222222,
    "myroutine": 0.1111111111111111
  },
  "to call methods": {
    "of": 1.0
  },
  "call methods of": {
    "classes": 1.0
  },
  "methods of classes": {
    "derived": 1.0
  },
  "of classes derived": {
    "from": 1.0
  },
  "from the base": {
    "class": 1.0
  },
  "base class without": {
    "knowing": 1.0
  },
  "class without knowing": {
    "at": 1.0
  },
  "without knowing at": {
    "compile": 1.0
  },
  "knowing at compile": {
    "time": 1.0
  },
  "compile time exactly": {
    "what": 1.0
  },
  "time exactly what": {
    "method": 1.0
  },
  "exactly what method": {
    "is": 1.0
  },
  "what method is": {
    "actually": 1.0
  },
  "method is actually": {
    "going": 1.0
  },
  "is actually going": {
    "to": 1.0
  },
  "actually going to": {
    "be": 1.0
  },
  "to be called": {
    "this": 1.0
  },
  "be called this": {
    "is": 1.0
  },
  "called this is": {
    "called": 1.0
  },
  "is called using": {
    "virtual": 1.0
  },
  "called using virtual": {
    "methods": 1.0
  },
  "virtual methods if": {
    "you": 1.0
  },
  "methods if you": {
    "look": 0.5,
    "so": 0.5
  },
  "if you look": {
    "at": 1.0
  },
  "look at inheritance": {
    "as": 1.0
  },
  "at inheritance as": {
    "the": 1.0
  },
  "inheritance as the": {
    "derived": 1.0
  },
  "as the derived": {
    "class": 1.0
  },
  "derived class being": {
    "able": 1.0
  },
  "class being able": {
    "to": 1.0
  },
  "to call dow": {
    "n": 1.0
  },
  "call dow n": {
    "to": 1.0
  },
  "dow n to": {
    "base": 1.0
  },
  "n to base": {
    "class": 1.0
  },
  "to base class": {
    "methods": 1.0
  },
  "base class methods": {
    "then": 0.3333333333333333,
    "to": 0.3333333333333333,
    "parent": 0.3333333333333333
  },
  "class methods then": {
    "you": 1.0
  },
  "methods then you": {
    "can": 1.0
  },
  "then you can": {
    "also": 1.0
  },
  "you can also": {
    "look": 0.25,
    "label": 0.25,
    "declare": 0.25,
    "specify": 0.25
  },
  "can also look": {
    "at": 1.0
  },
  "also look at": {
    "virtual": 1.0
  },
  "look at virtual": {
    "methods": 1.0
  },
  "at virtual methods": {
    "as": 1.0
  },
  "virtual methods as": {
    "the": 1.0
  },
  "methods as the": {
    "base": 1.0
  },
  "as the base": {
    "class": 1.0
  },
  "base class being": {
    "able": 1.0
  },
  "up to derived": {
    "class": 1.0
  },
  "to derived class": {
    "methods": 1.0
  },
  "class methods this": {
    "seems": 1.0
  },
  "methods this seems": {
    "like": 1.0
  },
  "this seems like": {
    "a": 1.0
  },
  "seems like a": {
    "bit": 1.0
  },
  "like a bit": {
    "of": 1.0
  },
  "a bit of": {
    "magic": 1.0
  },
  "bit of magic": {
    "since": 1.0
  },
  "of magic since": {
    "the": 1.0
  },
  "magic since the": {
    "base": 1.0
  },
  "since the base": {
    "class": 1.0
  },
  "base class can": {
    "never": 1.0
  },
  "class can never": {
    "know": 1.0
  },
  "can never know": {
    "what": 1.0
  },
  "never know what": {
    "classes": 1.0
  },
  "know what classes": {
    "have": 1.0
  },
  "what classes have": {
    "been": 1.0
  },
  "classes have been": {
    "derived": 1.0
  },
  "have been derived": {
    "from": 1.0
  },
  "been derived from": {
    "it": 1.0
  },
  "from it to": {
    "handle": 1.0
  },
  "it to handle": {
    "virtual": 1.0
  },
  "to handle virtual": {
    "methods": 1.0
  },
  "handle virtual methods": {
    "the": 1.0
  },
  "virtual methods the": {
    "compiler": 1.0
  },
  "methods the compiler": {
    "must": 1.0
  },
  "the compiler must": {
    "implement": 0.3333333333333333,
    "at": 0.3333333333333333,
    "deal": 0.3333333333333333
  },
  "compiler must implement": {
    "late": 1.0
  },
  "must implement late": {
    "binding": 1.0
  },
  "implement late binding": {
    "instead": 1.0
  },
  "late binding instead": {
    "of": 1.0
  },
  "binding instead of": {
    "early": 1.0
  },
  "instead of early": {
    "binding": 1.0
  },
  "of early binding": {
    "when": 1.0
  },
  "early binding when": {
    "creating": 1.0
  },
  "binding when creating": {
    "the": 1.0
  },
  "when creating the": {
    "executable": 1.0
  },
  "creating the executable": {
    "with": 1.0
  },
  "the executable with": {
    "early": 1.0
  },
  "executable with early": {
    "binding": 1.0
  },
  "with early binding": {
    "the": 1.0
  },
  "early binding the": {
    "compiler": 1.0
  },
  "binding the compiler": {
    "can": 0.5,
    "must": 0.5
  },
  "the compiler can": {
    "resolve": 1.0
  },
  "compiler can resolve": {
    "a": 1.0
  },
  "can resolve a": {
    "non": 1.0
  },
  "resolve a non": {
    "virtual": 1.0
  },
  "a non virtual": {
    "procedure": 1.0
  },
  "non virtual procedure": {
    "call": 1.0
  },
  "virtual procedure call": {
    "at": 1.0
  },
  "procedure call at": {
    "compile": 1.0
  },
  "call at compile": {
    "time": 1.0
  },
  "compile time to": {
    "a": 1.0
  },
  "time to a": {
    "specific": 1.0
  },
  "to a specific": {
    "code": 0.14285714285714285,
    "type": 0.42857142857142855,
    "class": 0.14285714285714285,
    "record": 0.2857142857142857
  },
  "a specific code": {
    "address": 1.0
  },
  "specific code address": {
    "in": 1.0
  },
  "code address in": {
    "the": 1.0
  },
  "address in the": {
    "executable": 0.5,
    "customer": 0.5
  },
  "in the executable": {
    "this": 0.5,
    "source": 0.5
  },
  "the executable this": {
    "means": 1.0
  },
  "executable this means": {
    "a": 1.0
  },
  "this means a": {
    "direct": 1.0
  },
  "means a direct": {
    "call": 1.0
  },
  "a direct call": {
    "to": 1.0
  },
  "direct call to": {
    "the": 1.0
  },
  "the procedure which": {
    "is": 0.5,
    "actually": 0.5
  },
  "which is very": {
    "effici": 1.0
  },
  "is very effici": {
    "ent": 1.0
  },
  "very effici ent": {
    "however": 1.0
  },
  "effici ent however": {
    "with": 1.0
  },
  "ent however with": {
    "late": 1.0
  },
  "however with late": {
    "binding": 1.0
  },
  "with late binding": {
    "the": 1.0
  },
  "late binding the": {
    "compiler": 1.0
  },
  "compiler must at": {
    "compile": 1.0
  },
  "must at compile": {
    "time": 1.0
  },
  "compile time create": {
    "a": 1.0
  },
  "time create a": {
    "virtual": 1.0
  },
  "create a virtual": {
    "method": 1.0
  },
  "method table vmt": {
    "that": 1.0
  },
  "table vmt that": {
    "contains": 1.0
  },
  "vmt that contains": {
    "the": 1.0
  },
  "that contains the": {
    "specific": 0.5,
    "values": 0.5
  },
  "contains the specific": {
    "code": 1.0
  },
  "the specific code": {
    "addresses": 1.0
  },
  "specific code addresses": {
    "of": 1.0
  },
  "code addresses of": {
    "all": 1.0
  },
  "addresses of all": {
    "the": 1.0
  },
  "all the virtual": {
    "methods": 1.0
  },
  "the virtual methods": {
    "it": 0.5,
    "for": 0.5
  },
  "virtual methods it": {
    "then": 1.0
  },
  "methods it then": {
    "must": 1.0
  },
  "it then must": {
    "insert": 1.0
  },
  "then must insert": {
    "code": 1.0
  },
  "must insert code": {
    "that": 1.0
  },
  "insert code that": {
    "resolves": 1.0
  },
  "code that resolves": {
    "at": 1.0
  },
  "that resolves at": {
    "run": 1.0
  },
  "resolves at run": {
    "time": 1.0
  },
  "run time each": {
    "call": 1.0
  },
  "time each call": {
    "to": 1.0
  },
  "each call to": {
    "a": 1.0
  },
  "call to a": {
    "virtu": 1.0
  },
  "to a virtu": {
    "al": 1.0
  },
  "a virtu al": {
    "meth": 1.0
  },
  "virtu al meth": {
    "od": 1.0
  },
  "al meth od": {
    "by": 1.0
  },
  "meth od by": {
    "first": 1.0
  },
  "od by first": {
    "looking": 1.0
  },
  "by first looking": {
    "for": 1.0
  },
  "first looking for": {
    "the": 1.0
  },
  "looking for the": {
    "method": 1.0
  },
  "for the method": {
    "in": 1.0
  },
  "in the vmt": {
    "then": 1.0
  },
  "the vmt then": {
    "calling": 1.0
  },
  "vmt then calling": {
    "the": 1.0
  },
  "then calling the": {
    "appropriate": 1.0
  },
  "calling the appropriate": {
    "method": 1.0
  },
  "the appropriate method": {
    "this": 1.0
  },
  "appropriate method this": {
    "may": 1.0
  },
  "method this may": {
    "seem": 1.0
  },
  "this may seem": {
    "like": 1.0
  },
  "may seem like": {
    "it": 0.3333333333333333,
    "a": 0.6666666666666666
  },
  "seem like it": {
    "would": 1.0
  },
  "like it would": {
    "create": 1.0
  },
  "it would create": {
    "a": 1.0
  },
  "would create a": {
    "fairly": 1.0
  },
  "create a fairly": {
    "large": 1.0
  },
  "a fairly large": {
    "performance": 1.0
  },
  "fairly large performance": {
    "hit": 1.0
  },
  "large performance hit": {
    "but": 1.0
  },
  "performance hit but": {
    "with": 1.0
  },
  "hit but with": {
    "the": 1.0
  },
  "but with the": {
    "highly": 1.0
  },
  "with the highly": {
    "efficient": 1.0
  },
  "the highly efficient": {
    "clarion": 1.0
  },
  "highly efficient clarion": {
    "compiler": 1.0
  },
  "efficient clarion compiler": {
    "it": 1.0
  },
  "clarion compiler it": {
    "is": 1.0
  },
  "compiler it is": {
    "actually": 1.0
  },
  "it is actually": {
    "almost": 0.5,
    "possible": 0.5
  },
  "is actually almost": {
    "as": 1.0
  },
  "actually almost as": {
    "fast": 1.0
  },
  "almost as fast": {
    "as": 1.0
  },
  "as fast as": {
    "calling": 0.5,
    "possible": 0.5
  },
  "fast as calling": {
    "a": 1.0
  },
  "as calling a": {
    "no": 1.0
  },
  "calling a no": {
    "n": 1.0
  },
  "a no n": {
    "virtual": 1.0
  },
  "no n virtual": {
    "me": 1.0
  },
  "n virtual me": {
    "thod": 1.0
  },
  "virtual me thod": {
    "this": 1.0
  },
  "me thod this": {
    "virtual": 1.0
  },
  "thod this virtual": {
    "method": 1.0
  },
  "this virtual method": {
    "type": 1.0
  },
  "virtual method type": {
    "of": 1.0
  },
  "method type of": {
    "polymorphism": 1.0
  },
  "polymorphism is the": {
    "mechanism": 1.0
  },
  "us to handle": {
    "the": 1.0
  },
  "to handle the": {
    "individual": 1.0
  },
  "handle the individual": {
    "differences": 1.0
  },
  "the individual differences": {
    "between": 1.0
  },
  "individual differences between": {
    "classes": 1.0
  },
  "differences between classes": {
    "derived": 1.0
  },
  "between classes derived": {
    "from": 1.0
  },
  "the same base": {
    "class": 1.0
  },
  "same base class": {
    "while": 1.0
  },
  "base class while": {
    "also": 1.0
  },
  "class while also": {
    "allowing": 1.0
  },
  "while also allowing": {
    "the": 1.0
  },
  "also allowing the": {
    "base": 1.0
  },
  "allowing the base": {
    "class": 1.0
  },
  "base class to": {
    "ignore": 0.5,
    "call": 0.5
  },
  "class to ignore": {
    "those": 1.0
  },
  "to ignore those": {
    "differences": 1.0
  },
  "ignore those differences": {
    "this": 1.0
  },
  "those differences this": {
    "lets": 1.0
  },
  "differences this lets": {
    "a": 1.0
  },
  "this lets a": {
    "common": 1.0
  },
  "lets a common": {
    "method": 1.0
  },
  "a common method": {
    "i": 1.0
  },
  "common method i": {
    "n": 1.0
  },
  "method i n": {
    "a": 1.0
  },
  "i n a": {
    "base": 1.0
  },
  "n a base": {
    "class": 1.0
  },
  "base class call": {
    "a": 1.0
  },
  "class call a": {
    "method": 1.0
  },
  "method from one": {
    "of": 1.0
  },
  "from one of": {
    "its": 1.0
  },
  "one of its": {
    "derived": 1.0
  },
  "of its derived": {
    "classes": 1.0
  },
  "its derived classes": {
    "to": 1.0
  },
  "derived classes to": {
    "specifically": 1.0
  },
  "classes to specifically": {
    "handle": 1.0
  },
  "to specifically handle": {
    "some": 1.0
  },
  "specifically handle some": {
    "operation": 1.0
  },
  "handle some operation": {
    "in": 1.0
  },
  "some operation in": {
    "a": 1.0
  },
  "operation in a": {
    "manner": 1.0
  },
  "in a manner": {
    "appropriate": 1.0
  },
  "a manner appropriate": {
    "to": 1.0
  },
  "manner appropriate to": {
    "the": 1.0
  },
  "appropriate to the": {
    "specific": 0.25,
    "current": 0.25,
    "file": 0.5
  },
  "to the specific": {
    "derived": 1.0
  },
  "the specific derived": {
    "class": 1.0
  },
  "specific derived class": {
    "for": 1.0
  },
  "derived class for": {
    "example": 0.5,
    "the": 0.5
  },
  "for example suppose": {
    "we": 1.0
  },
  "example suppose we": {
    "have": 1.0
  },
  "suppose we have": {
    "a": 1.0
  },
  "we have a": {
    "vehicle": 1.0
  },
  "have a vehicle": {
    "class": 1.0
  },
  "a vehicle class": {
    "which": 1.0
  },
  "vehicle class which": {
    "contains": 1.0
  },
  "class which contains": {
    "a": 1.0
  },
  "which contains a": {
    "virtual": 1.0
  },
  "contains a virtual": {
    "method": 1.0
  },
  "virtual method to": {
    "steer": 1.0
  },
  "method to steer": {
    "the": 1.0
  },
  "to steer the": {
    "vehicle": 1.0
  },
  "steer the vehicle": {
    "be": 1.0
  },
  "the vehicle be": {
    "cause": 1.0
  },
  "vehicle be cause": {
    "all": 1.0
  },
  "be cause all": {
    "vehicles": 1.0
  },
  "cause all vehicles": {
    "must": 1.0
  },
  "all vehicles must": {
    "have": 1.0
  },
  "vehicles must have": {
    "some": 1.0
  },
  "must have some": {
    "way": 1.0
  },
  "have some way": {
    "to": 1.0
  },
  "some way to": {
    "steer": 1.0
  },
  "way to steer": {
    "themselves": 1.0
  },
  "to steer themselves": {
    "when": 1.0
  },
  "steer themselves when": {
    "you": 1.0
  },
  "themselves when you": {
    "derive": 1.0
  },
  "derive a bicycle": {
    "class": 1.0
  },
  "a bicycle class": {
    "from": 1.0
  },
  "bicycle class from": {
    "the": 1.0
  },
  "from the vehicle": {
    "class": 1.0
  },
  "the vehicle class": {
    "the": 0.5,
    "it": 0.5
  },
  "vehicle class the": {
    "derived": 1.0
  },
  "class the derived": {
    "class": 1.0
  },
  "derived class contains": {
    "its": 1.0
  },
  "class contains its": {
    "own": 1.0
  },
  "contains its own": {
    "specific": 1.0
  },
  "its own specific": {
    "steer": 1.0
  },
  "own specific steer": {
    "virtual": 1.0
  },
  "specific steer virtual": {
    "method": 1.0
  },
  "steer virtual method": {
    "appropriate": 0.5,
    "for": 0.5
  },
  "virtual method appropriate": {
    "to": 1.0
  },
  "method appropriate to": {
    "a": 1.0
  },
  "appropriate to a": {
    "bicycle": 1.0
  },
  "to a bicycle": {
    "then": 1.0
  },
  "a bicycle then": {
    "when": 1.0
  },
  "bicycle then when": {
    "you": 1.0
  },
  "then when you": {
    "derive": 1.0
  },
  "derive a car": {
    "class": 1.0
  },
  "a car class": {
    "from": 1.0
  },
  "car class from": {
    "the": 1.0
  },
  "vehicle class it": {
    "also": 1.0
  },
  "it also contains": {
    "its": 0.5,
    "one": 0.5
  },
  "also contains its": {
    "own": 1.0
  },
  "virtual method for": {
    "a": 1.0
  },
  "method for a": {
    "car": 1.0
  },
  "for a car": {
    "of": 1.0
  },
  "a car of": {
    "course": 1.0
  },
  "car of course": {
    "both": 1.0
  },
  "of course both": {
    "the": 1.0
  },
  "course both the": {
    "bicycle": 1.0
  },
  "both the bicycle": {
    "and": 1.0
  },
  "the bicycle and": {
    "car": 1.0
  },
  "bicycle and car": {
    "derived": 1.0
  },
  "and car derived": {
    "classes": 1.0
  },
  "car derived classes": {
    "also": 1.0
  },
  "derived classes also": {
    "inherit": 1.0
  },
  "classes also inherit": {
    "a": 1.0
  },
  "also inherit a": {
    "common": 1.0
  },
  "inherit a common": {
    "move": 1.0
  },
  "a common move": {
    "method": 1.0
  },
  "common move method": {
    "which": 1.0
  },
  "move method which": {
    "calls": 1.0
  },
  "method which calls": {
    "the": 1.0
  },
  "calls the steer": {
    "method": 1.0
  },
  "the steer method": {
    "the": 1.0
  },
  "steer method the": {
    "inherited": 1.0
  },
  "method the inherited": {
    "move": 1.0
  },
  "the inherited move": {
    "method": 1.0
  },
  "inherited move method": {
    "does": 1.0
  },
  "move method does": {
    "not": 1.0
  },
  "method does not": {
    "know": 0.5,
    "automatically": 0.5
  },
  "does not know": {
    "or": 1.0
  },
  "not know or": {
    "care": 1.0
  },
  "know or care": {
    "whether": 1.0
  },
  "or care whether": {
    "it": 1.0
  },
  "care whether it": {
    "s": 1.0
  },
  "whether it s": {
    "actual": 0.5,
    "a": 0.5
  },
  "it s actual": {
    "ly": 1.0
  },
  "s actual ly": {
    "calling": 1.0
  },
  "actual ly calling": {
    "the": 1.0
  },
  "ly calling the": {
    "car": 1.0
  },
  "calling the car": {
    "s": 1.0
  },
  "the car s": {
    "steer": 1.0
  },
  "car s steer": {
    "method": 1.0
  },
  "s steer method": {
    "or": 0.5,
    "at": 0.5
  },
  "steer method or": {
    "the": 1.0
  },
  "method or the": {
    "bicycle": 1.0
  },
  "or the bicycle": {
    "s": 1.0
  },
  "the bicycle s": {
    "steer": 1.0
  },
  "bicycle s steer": {
    "method": 1.0
  },
  "steer method at": {
    "runtime": 1.0
  },
  "method at runtime": {
    "it": 1.0
  },
  "at runtime it": {
    "just": 1.0
  },
  "runtime it just": {
    "tells": 1.0
  },
  "it just tells": {
    "the": 1.0
  },
  "just tells the": {
    "object": 1.0
  },
  "tells the object": {
    "whether": 1.0
  },
  "the object whether": {
    "it": 1.0
  },
  "object whether it": {
    "s": 1.0
  },
  "s a car": {
    "or": 1.0
  },
  "a car or": {
    "a": 1.0
  },
  "car or a": {
    "bicycle": 1.0
  },
  "or a bicycle": {
    "to": 1.0
  },
  "a bicycle to": {
    "steer": 1.0
  },
  "bicycle to steer": {
    "itself": 1.0
  },
  "to steer itself": {
    "and": 1.0
  },
  "steer itself and": {
    "it": 1.0
  },
  "and it does": {
    "clarion": 1.0
  },
  "it does clarion": {
    "s": 1.0
  },
  "does clarion s": {
    "oop": 1.0
  },
  "oop extensions the": {
    "specific": 1.0
  },
  "extensions the specific": {
    "clarion": 1.0
  },
  "the specific clarion": {
    "language": 1.0
  },
  "specific clarion language": {
    "syntax": 1.0
  },
  "clarion language syntax": {
    "that": 1.0
  },
  "language syntax that": {
    "allows": 1.0
  },
  "to declare c": {
    "lasses": 1.0
  },
  "declare c lasses": {
    "of": 1.0
  },
  "c lasses of": {
    "objects": 1.0
  },
  "lasses of objects": {
    "and": 1.0
  },
  "of objects and": {
    "derive": 1.0
  },
  "objects and derive": {
    "classes": 1.0
  },
  "and derive classes": {
    "from": 1.0
  },
  "derive classes from": {
    "previously": 1.0
  },
  "classes from previously": {
    "declared": 1.0
  },
  "from previously declared": {
    "base": 1.0
  },
  "previously declared base": {
    "classes": 1.0
  },
  "declared base classes": {
    "starts": 1.0
  },
  "base classes starts": {
    "with": 1.0
  },
  "classes starts with": {
    "the": 1.0
  },
  "with the class": {
    "structure": 1.0
  },
  "class structure the": {
    "class": 1.0
  },
  "structure the class": {
    "structure": 1.0
  },
  "structure encapsulation the": {
    "clarion": 1.0
  },
  "encapsulation the clarion": {
    "class": 1.0
  },
  "an object class": {
    "containing": 1.0
  },
  "object class containing": {
    "properties": 1.0
  },
  "class containing properties": {
    "and": 1.0
  },
  "containing properties and": {
    "declaring": 1.0
  },
  "properties and declaring": {
    "the": 1.0
  },
  "and declaring the": {
    "methods": 1.0
  },
  "declaring the methods": {
    "that": 1.0
  },
  "the methods that": {
    "operate": 0.5,
    "belong": 0.5
  },
  "those properties in": {
    "clarion": 1.0
  },
  "clarion the properties": {
    "of": 1.0
  },
  "the class are": {
    "the": 1.0
  },
  "class are the": {
    "data": 1.0
  },
  "data members declared": {
    "in": 1.0
  },
  "members declared in": {
    "the": 1.0
  },
  "the class and": {
    "methods": 0.3333333333333333,
    "instantiates": 0.3333333333333333,
    "also": 0.3333333333333333
  },
  "class and methods": {
    "are": 1.0
  },
  "are the procedures": {
    "prototyped": 1.0
  },
  "the procedures prototyped": {
    "in": 1.0
  },
  "procedures prototyped in": {
    "the": 1.0
  },
  "class structure this": {
    "example": 0.75,
    "completely": 0.25
  },
  "structure this example": {
    "declares": 1.0
  },
  "this example declares": {
    "a": 0.6666666666666666,
    "one": 0.3333333333333333
  },
  "example declares a": {
    "very": 0.5,
    "simple": 0.5
  },
  "declares a very": {
    "simple": 1.0
  },
  "a very simple": {
    "class": 0.5,
    "order": 0.5
  },
  "very simple class": {
    "structure": 1.0
  },
  "simple class structure": {
    "someclass": 0.5,
    "containing": 0.5
  },
  "class structure someclass": {
    "c": 1.0
  },
  "structure someclass c": {
    "lass": 1.0
  },
  "someclass c lass": {
    "module": 1.0
  },
  "c lass module": {
    "someclas": 1.0
  },
  "lass module someclas": {
    "clw": 1.0
  },
  "module someclas clw": {
    "propertya": 0.5,
    "type": 0.5
  },
  "someclas clw propertya": {
    "long": 1.0
  },
  "clw propertya long": {
    "data": 0.5,
    "propertyb": 0.5
  },
  "propertya long data": {
    "member": 1.0
  },
  "long data member": {
    "property": 1.0
  },
  "data member property": {
    "propertyb": 1.0
  },
  "member property propertyb": {
    "long": 1.0
  },
  "property propertyb long": {
    "manipulateaandb": 1.0
  },
  "propertyb long manipulateaandb": {
    "procedure": 1.0
  },
  "long manipulateaandb procedure": {
    "method": 0.1,
    "end": 0.7,
    "override": 0.1,
    "construct": 0.1
  },
  "manipulateaandb procedure method": {
    "end": 1.0
  },
  "procedure method end": {
    "this": 1.0
  },
  "method end this": {
    "class": 1.0
  },
  "end this class": {
    "is": 1.0
  },
  "this class is": {
    "named": 1.0
  },
  "class is named": {
    "someclass": 1.0
  },
  "is named someclass": {
    "and": 1.0
  },
  "named someclass and": {
    "it": 1.0
  },
  "someclass and it": {
    "contains": 1.0
  },
  "and it contains": {
    "two": 1.0
  },
  "it contains two": {
    "properties": 1.0
  },
  "contains two properties": {
    "data": 1.0
  },
  "two properties data": {
    "members": 1.0
  },
  "properties data members": {
    "propertya": 0.3333333333333333,
    "that": 0.3333333333333333,
    "for": 0.3333333333333333
  },
  "data members propertya": {
    "and": 1.0
  },
  "members propertya and": {
    "propertyb": 1.0
  },
  "propertya and propertyb": {
    "it": 1.0
  },
  "and propertyb it": {
    "also": 1.0
  },
  "propertyb it also": {
    "contains": 1.0
  },
  "also contains one": {
    "method": 1.0
  },
  "contains one method": {
    "the": 1.0
  },
  "one method the": {
    "manipulateaandb": 1.0
  },
  "method the manipulateaandb": {
    "procedure": 1.0
  },
  "the manipulateaandb procedure": {
    "the": 0.5,
    "exists": 0.5
  },
  "manipulateaandb procedure the": {
    "module": 1.0
  },
  "procedure the module": {
    "attribute": 1.0
  },
  "the module attribute": {
    "on": 0.5,
    "this": 0.5
  },
  "module attribute on": {
    "the": 1.0
  },
  "on the class": {
    "statement": 1.0
  },
  "the class statement": {
    "specifies": 1.0
  },
  "class statement specifies": {
    "that": 1.0
  },
  "statement specifies that": {
    "the": 1.0
  },
  "specifies that the": {
    "code": 0.25,
    "property": 0.5,
    "restrict": 0.25
  },
  "the code defining": {
    "the": 1.0
  },
  "code defining the": {
    "manipulateaandb": 1.0
  },
  "defining the manipulateaandb": {
    "procedure": 1.0
  },
  "manipulateaandb procedure exists": {
    "in": 1.0
  },
  "procedure exists in": {
    "the": 1.0
  },
  "exists in the": {
    "someclas": 1.0
  },
  "in the someclas": {
    "clw": 1.0
  },
  "the someclas clw": {
    "file": 0.6666666666666666,
    "source": 0.3333333333333333
  },
  "someclas clw file": {
    "27": 0.5,
    "would": 0.5
  },
  "clw file 27": {
    "object": 1.0
  },
  "file 27 object": {
    "oriented": 1.0
  },
  "27 object oriented": {
    "programming": 1.0
  },
  "oriented programming class": {
    "properties": 1.0
  },
  "programming class properties": {
    "the": 1.0
  },
  "class properties the": {
    "properties": 1.0
  },
  "properties the properties": {
    "data": 1.0
  },
  "the properties data": {
    "members": 1.0
  },
  "data members that": {
    "a": 1.0
  },
  "members that a": {
    "class": 1.0
  },
  "that a class": {
    "may": 1.0
  },
  "a class may": {
    "contain": 0.6666666666666666,
    "seem": 0.3333333333333333
  },
  "class may contain": {
    "are": 0.5,
    "da": 0.5
  },
  "may contain are": {
    "limited": 1.0
  },
  "contain are limited": {
    "to": 1.0
  },
  "are limited to": {
    "the": 1.0
  },
  "to the data": {
    "types": 1.0
  },
  "the data types": {
    "that": 1.0
  },
  "data types that": {
    "are": 1.0
  },
  "types that are": {
    "appropriate": 1.0
  },
  "that are appropriate": {
    "to": 1.0
  },
  "are appropriate to": {
    "have": 1.0
  },
  "appropriate to have": {
    "in": 1.0
  },
  "to have in": {
    "a": 1.0
  },
  "have in a": {
    "group": 1.0
  },
  "in a group": {
    "structure": 1.0
  },
  "a group structure": {
    "this": 1.0
  },
  "group structure this": {
    "means": 1.0
  },
  "structure this means": {
    "that": 1.0
  },
  "all the simple": {
    "data": 1.0
  },
  "the simple data": {
    "types": 1.0
  },
  "data types are": {
    "allowed": 1.0
  },
  "types are allowed": {
    "long": 1.0
  },
  "are allowed long": {
    "short": 1.0
  },
  "allowed long short": {
    "real": 1.0
  },
  "long short real": {
    "etc": 1.0
  },
  "short real etc": {
    "including": 1.0
  },
  "real etc including": {
    "group": 1.0
  },
  "etc including group": {
    "structures": 1.0
  },
  "including group structures": {
    "but": 1.0
  },
  "group structures but": {
    "complex": 1.0
  },
  "structures but complex": {
    "data": 1.0
  },
  "but complex data": {
    "types": 1.0
  },
  "complex data types": {
    "file": 0.3333333333333333,
    "queue": 0.3333333333333333,
    "including": 0.3333333333333333
  },
  "data types file": {
    "queue": 1.0
  },
  "types file queue": {
    "window": 1.0
  },
  "file queue window": {
    "etc": 1.0
  },
  "queue window etc": {
    "are": 1.0
  },
  "window etc are": {
    "not": 1.0
  },
  "etc are not": {
    "allowed": 1.0
  },
  "are not allowed": {
    "allowing": 1.0
  },
  "not allowed allowing": {
    "only": 1.0
  },
  "allowed allowing only": {
    "simple": 1.0
  },
  "allowing only simple": {
    "data": 1.0
  },
  "only simple data": {
    "types": 1.0
  },
  "data types in": {
    "a": 1.0
  },
  "types in a": {
    "class": 1.0
  },
  "class may seem": {
    "like": 1.0
  },
  "seem like a": {
    "limitation": 0.5,
    "lot": 0.5
  },
  "like a limitation": {
    "but": 1.0
  },
  "a limitation but": {
    "it": 1.0
  },
  "limitation but it": {
    "actually": 1.0
  },
  "but it actually": {
    "is": 1.0
  },
  "it actually is": {
    "not": 1.0
  },
  "actually is not": {
    "because": 1.0
  },
  "is not because": {
    "reference": 1.0
  },
  "not because reference": {
    "variables": 1.0
  },
  "because reference variables": {
    "are": 1.0
  },
  "reference variables are": {
    "also": 0.5,
    "valid": 0.5
  },
  "variables are also": {
    "allowed": 1.0
  },
  "are also allowed": {
    "more": 1.0
  },
  "also allowed more": {
    "on": 1.0
  },
  "allowed more on": {
    "this": 1.0
  },
  "more on this": {
    "later": 1.0
  },
  "on this later": {
    "class": 1.0
  },
  "this later class": {
    "methods": 1.0
  },
  "later class methods": {
    "the": 1.0
  },
  "class methods the": {
    "methods": 0.3333333333333333,
    "same": 0.3333333333333333,
    "data": 0.3333333333333333
  },
  "methods the methods": {
    "procedures": 1.0
  },
  "the methods procedures": {
    "declared": 1.0
  },
  "methods procedures declared": {
    "in": 1.0
  },
  "procedures declared in": {
    "a": 1.0
  },
  "a class are": {
    "defined": 0.5,
    "public": 0.5
  },
  "class are defined": {
    "in": 1.0
  },
  "defined in the": {
    "source": 0.5,
    "same": 0.5
  },
  "the source file": {
    "named": 1.0
  },
  "source file named": {
    "in": 1.0
  },
  "file named in": {
    "the": 1.0
  },
  "named in the": {
    "module": 0.5,
    "variable": 0.5
  },
  "module attribute this": {
    "encapsulates": 1.0
  },
  "attribute this encapsulates": {
    "all": 1.0
  },
  "this encapsulates all": {
    "the": 1.0
  },
  "encapsulates all the": {
    "methods": 1.0
  },
  "all the methods": {
    "in": 0.6666666666666666,
    "of": 0.3333333333333333
  },
  "the methods in": {
    "a": 1.0
  },
  "methods in a": {
    "single": 0.6666666666666666,
    "base": 0.3333333333333333
  },
  "in a single": {
    "source": 0.6666666666666666,
    "class": 0.3333333333333333
  },
  "a single source": {
    "file": 0.5,
    "module": 0.5
  },
  "single source file": {
    "making": 1.0
  },
  "source file making": {
    "maintenance": 1.0
  },
  "file making maintenance": {
    "much": 1.0
  },
  "making maintenance much": {
    "easier": 1.0
  },
  "maintenance much easier": {
    "and": 1.0
  },
  "much easier and": {
    "also": 1.0
  },
  "easier and also": {
    "offers": 1.0
  },
  "and also offers": {
    "some": 1.0
  },
  "also offers some": {
    "other": 1.0
  },
  "offers some other": {
    "advantages": 1.0
  },
  "some other advantages": {
    "that": 1.0
  },
  "other advantages that": {
    "we": 1.0
  },
  "advantages that we": {
    "will": 1.0
  },
  "that we will": {
    "get": 0.6666666666666666,
    "use": 0.3333333333333333
  },
  "we will get": {
    "to": 1.0
  },
  "will get to": {
    "later": 0.6666666666666666,
    "shortly": 0.3333333333333333
  },
  "get to later": {
    "for": 0.5,
    "clarion": 0.5
  },
  "to later for": {
    "the": 1.0
  },
  "later for the": {
    "class": 1.0
  },
  "for the class": {
    "declaration": 0.5,
    "then": 0.5
  },
  "class declaration above": {
    "the": 1.0
  },
  "declaration above the": {
    "someclas": 1.0
  },
  "above the someclas": {
    "clw": 1.0
  },
  "clw file would": {
    "contain": 1.0
  },
  "file would contain": {
    "code": 1.0
  },
  "would contain code": {
    "similar": 1.0
  },
  "contain code similar": {
    "to": 1.0
  },
  "code similar to": {
    "the": 1.0
  },
  "to the following": {
    "someclass": 1.0
  },
  "the following someclass": {
    "manipulateaandb": 1.0
  },
  "following someclass manipulateaandb": {
    "procedure": 1.0
  },
  "someclass manipulateaandb procedure": {
    "code": 0.25,
    "end": 0.25,
    "product": 0.25,
    "base": 0.25
  },
  "manipulateaandb procedure code": {
    "message": 1.0
  },
  "procedure code message": {
    "a": 1.0
  },
  "code message a": {
    "self": 1.0
  },
  "message a self": {
    "propertya": 1.0
  },
  "a self propertya": {
    "message": 1.0
  },
  "self propertya message": {
    "b": 1.0
  },
  "propertya message b": {
    "self": 1.0
  },
  "message b self": {
    "propertyb": 1.0
  },
  "b self propertyb": {
    "the": 0.5,
    "within": 0.5
  },
  "self propertyb the": {
    "label": 1.0
  },
  "propertyb the label": {
    "of": 1.0
  },
  "label of the": {
    "procedure": 0.5,
    "data": 0.5
  },
  "the procedure statement": {
    "b": 1.0
  },
  "procedure statement b": {
    "egins": 1.0
  },
  "statement b egins": {
    "with": 1.0
  },
  "b egins with": {
    "the": 1.0
  },
  "egins with the": {
    "name": 1.0
  },
  "with the name": {
    "of": 1.0
  },
  "the class to": {
    "which": 0.6666666666666666,
    "contain": 0.3333333333333333
  },
  "class to which": {
    "the": 0.5,
    "it": 0.5
  },
  "which the method": {
    "belongs": 0.5,
    "is": 0.5
  },
  "the method belongs": {
    "prepended": 1.0
  },
  "method belongs prepended": {
    "to": 1.0
  },
  "belongs prepended to": {
    "the": 1.0
  },
  "prepended to the": {
    "name": 1.0
  },
  "to the name": {
    "of": 1.0
  },
  "of the method": {
    "and": 1.0
  },
  "the method and": {
    "connected": 0.5,
    "name": 0.5
  },
  "method and connected": {
    "with": 1.0
  },
  "and connected with": {
    "a": 1.0
  },
  "connected with a": {
    "period": 1.0
  },
  "with a period": {
    "you": 1.0
  },
  "a period you": {
    "can": 1.0
  },
  "period you can": {
    "also": 1.0
  },
  "can also label": {
    "the": 1.0
  },
  "also label the": {
    "method": 1.0
  },
  "label the method": {
    "and": 1.0
  },
  "method and name": {
    "the": 1.0
  },
  "and name the": {
    "class": 1.0
  },
  "name the class": {
    "to": 0.5,
    "as": 0.5
  },
  "which it belongs": {
    "as": 1.0
  },
  "it belongs as": {
    "an": 1.0
  },
  "belongs as an": {
    "implicit": 1.0
  },
  "as an implicit": {
    "first": 1.0
  },
  "an implicit first": {
    "parameter": 1.0
  },
  "implicit first parameter": {
    "and": 1.0
  },
  "first parameter and": {
    "labeling": 1.0
  },
  "parameter and labeling": {
    "the": 1.0
  },
  "and labeling the": {
    "classname": 1.0
  },
  "labeling the classname": {
    "self": 1.0
  },
  "the classname self": {
    "like": 1.0
  },
  "classname self like": {
    "this": 1.0
  },
  "self like this": {
    "manipulateaandb": 1.0
  },
  "like this manipulateaandb": {
    "procedure": 1.0
  },
  "this manipulateaandb procedure": {
    "someclass": 1.0
  },
  "manipulateaandb procedure someclass": {
    "self": 1.0
  },
  "procedure someclass self": {
    "code": 1.0
  },
  "someclass self code": {
    "message": 1.0
  },
  "self code message": {
    "a": 1.0
  },
  "self propertyb within": {
    "a": 1.0
  },
  "propertyb within a": {
    "method": 1.0
  },
  "a method you": {
    "use": 1.0
  },
  "method you use": {
    "the": 1.0
  },
  "use the self": {
    "keyword": 1.0
  },
  "the self keyword": {
    "not": 1.0
  },
  "self keyword not": {
    "the": 1.0
  },
  "keyword not the": {
    "class": 1.0
  },
  "not the class": {
    "label": 1.0
  },
  "the class label": {
    "to": 1.0
  },
  "class label to": {
    "address": 1.0
  },
  "label to address": {
    "a": 1.0
  },
  "to address a": {
    "property": 1.0
  },
  "address a property": {
    "or": 1.0
  },
  "or method of": {
    "the": 1.0
  },
  "method of the": {
    "current": 0.5,
    "same": 0.5
  },
  "of the current": {
    "instance": 0.5,
    "object": 0.5
  },
  "the current instance": {
    "of": 1.0
  },
  "current instance of": {
    "the": 1.0
  },
  "instance of the": {
    "class": 1.0
  },
  "the class the": {
    "current": 1.0
  },
  "class the current": {
    "object": 1.0
  },
  "current object on": {
    "which": 1.0
  },
  "object on which": {
    "the": 1.0
  },
  "on which the": {
    "method": 1.0
  },
  "the method is": {
    "operating": 1.0
  },
  "method is operating": {
    "creating": 1.0
  },
  "is operating creating": {
    "objects": 1.0
  },
  "operating creating objects": {
    "an": 1.0
  },
  "creating objects an": {
    "object": 1.0
  },
  "is one specific": {
    "instance": 1.0
  },
  "one specific instance": {
    "of": 1.0
  },
  "specific instance of": {
    "a": 0.5,
    "the": 0.5
  },
  "a class containing": {
    "its": 1.0
  },
  "class containing its": {
    "own": 1.0
  },
  "containing its own": {
    "set": 1.0
  },
  "of properties specific": {
    "to": 1.0
  },
  "properties specific to": {
    "that": 1.0
  },
  "specific to that": {
    "one": 0.5,
    "back": 0.5
  },
  "to that one": {
    "instance": 1.0
  },
  "that one instance": {
    "all": 1.0
  },
  "one instance all": {
    "object": 1.0
  },
  "instance all object": {
    "instances": 1.0
  },
  "all object instances": {
    "of": 1.0
  },
  "a class share": {
    "all": 0.5,
    "s": 0.5
  },
  "class share all": {
    "the": 1.0
  },
  "share all the": {
    "methods": 1.0
  },
  "the class so": {
    "the": 1.0
  },
  "class so the": {
    "methods": 1.0
  },
  "so the methods": {
    "exist": 1.0
  },
  "the methods exist": {
    "only": 1.0
  },
  "methods exist only": {
    "once": 1.0
  },
  "exist only once": {
    "each": 1.0
  },
  "only once each": {
    "a": 1.0
  },
  "once each a": {
    "class": 1.0
  },
  "each a class": {
    "declaration": 1.0
  },
  "class declaration with": {
    "the": 1.0
  },
  "declaration with the": {
    "type": 1.0
  },
  "with the type": {
    "attribute": 1.0
  },
  "type attribute only": {
    "declares": 1.0
  },
  "attribute only declares": {
    "the": 1.0
  },
  "only declares the": {
    "class": 1.0
  },
  "declares the class": {
    "there": 0.5,
    "and": 0.5
  },
  "the class there": {
    "are": 1.0
  },
  "class there are": {
    "no": 1.0
  },
  "there are no": {
    "objects": 0.5,
    "foreign": 0.5
  },
  "are no objects": {
    "until": 1.0
  },
  "no objects until": {
    "you": 1.0
  },
  "objects until you": {
    "create": 1.0
  },
  "until you create": {
    "an": 1.0
  },
  "you create an": {
    "instance": 1.0
  },
  "create an instance": {
    "of": 1.0
  },
  "the class also": {
    "called": 1.0
  },
  "class also called": {
    "instantiation": 1.0
  },
  "also called instantiation": {
    "a": 1.0
  },
  "called instantiation a": {
    "class": 1.0
  },
  "instantiation a class": {
    "declaration": 1.0
  },
  "class declaration w": {
    "ithout": 1.0
  },
  "declaration w ithout": {
    "the": 1.0
  },
  "w ithout the": {
    "type": 1.0
  },
  "ithout the type": {
    "attribute": 1.0
  },
  "type attribute both": {
    "declares": 1.0
  },
  "attribute both declares": {
    "the": 1.0
  },
  "both declares the": {
    "class": 1.0
  },
  "class and instantiates": {
    "it": 1.0
  },
  "and instantiates it": {
    "creates": 1.0
  },
  "instantiates it creates": {
    "the": 1.0
  },
  "it creates the": {
    "first": 1.0
  },
  "creates the first": {
    "object": 1.0
  },
  "the first object": {
    "there": 1.0
  },
  "first object there": {
    "are": 1.0
  },
  "are two ways": {
    "to": 1.0
  },
  "two ways to": {
    "create": 0.5,
    "access": 0.5
  },
  "ways to create": {
    "an": 1.0
  },
  "to create an": {
    "object": 1.0
  },
  "create an object": {
    "declare": 0.5,
    "dynamically": 0.5
  },
  "an object declare": {
    "it": 1.0
  },
  "object declare it": {
    "in": 1.0
  },
  "declare it in": {
    "a": 1.0
  },
  "it in a": {
    "data": 0.5,
    "hold": 0.5
  },
  "section or create": {
    "one": 1.0
  },
  "or create one": {
    "dynamically": 1.0
  },
  "create one dynamically": {
    "in": 1.0
  },
  "one dynamically in": {
    "executable": 1.0
  },
  "dynamically in executable": {
    "code": 1.0
  },
  "in executable code": {
    "using": 1.0
  },
  "executable code using": {
    "new": 1.0
  },
  "code using new": {
    "to": 0.5,
    "declare": 0.5
  },
  "using new to": {
    "declare": 1.0
  },
  "new to declare": {
    "an": 1.0
  },
  "an object in": {
    "the": 0.5,
    "local": 0.5
  },
  "object in the": {
    "dat": 0.3333333333333333,
    "new": 0.3333333333333333,
    "class": 0.3333333333333333
  },
  "in the dat": {
    "a": 1.0
  },
  "the dat a": {
    "section": 1.0
  },
  "dat a section": {
    "simply": 1.0
  },
  "a section simply": {
    "name": 1.0
  },
  "section simply name": {
    "the": 1.0
  },
  "the class as": {
    "the": 1.0
  },
  "as the data": {
    "type": 1.0
  },
  "data type program": {
    "someclass": 1.0
  },
  "type program someclass": {
    "class": 1.0
  },
  "program someclass class": {
    "creates": 0.3333333333333333,
    "type": 0.6666666666666666
  },
  "someclass class creates": {
    "a": 1.0
  },
  "class creates a": {
    "class": 1.0
  },
  "creates a class": {
    "and": 1.0
  },
  "a class and": {
    "an": 1.0
  },
  "class and an": {
    "instance": 1.0
  },
  "an instance propertya": {
    "long": 1.0
  },
  "instance propertya long": {
    "propertyb": 1.0
  },
  "propertya long propertyb": {
    "long": 0.9,
    "lon": 0.1
  },
  "long propertyb long": {
    "manipulateaandb": 0.8888888888888888,
    "initaandb": 0.1111111111111111
  },
  "manipulateaandb procedure end": {
    "myclass": 0.125,
    "someclassobject1": 0.125,
    "someclassobjectref": 0.125,
    "anotherclass": 0.5,
    "someclass": 0.125
  },
  "procedure end myclass": {
    "class": 1.0
  },
  "end myclass class": {
    "type": 1.0
  },
  "class type creates": {
    "just": 1.0
  },
  "type creates just": {
    "a": 1.0
  },
  "creates just a": {
    "class": 1.0
  },
  "just a class": {
    "propertya": 1.0
  },
  "a class propertya": {
    "long": 1.0
  },
  "class propertya long": {
    "propertyb": 1.0
  },
  "procedure end someclassobject1": {
    "someclass": 1.0
  },
  "end someclassobject1 someclass": {
    "create": 1.0
  },
  "someclassobject1 someclass create": {
    "an": 1.0
  },
  "someclass create an": {
    "instance": 1.0
  },
  "instance of someclass": {
    "someclassobject2": 0.5,
    "myclassobject1": 0.5
  },
  "of someclass someclassobject2": {
    "so": 1.0
  },
  "someclass someclassobject2 so": {
    "meclass": 1.0
  },
  "someclassobject2 so meclass": {
    "another": 1.0
  },
  "so meclass another": {
    "instance": 1.0
  },
  "meclass another instance": {
    "of": 1.0
  },
  "another instance of": {
    "someclass": 0.5,
    "myclass": 0.5
  },
  "of someclass myclassobject1": {
    "myclass": 1.0
  },
  "someclass myclassobject1 myclass": {
    "create": 1.0
  },
  "myclassobject1 myclass create": {
    "an": 1.0
  },
  "myclass create an": {
    "instance": 1.0
  },
  "instance of myclass": {
    "myclassobject2": 0.5,
    "code": 0.5
  },
  "of myclass myclassobject2": {
    "myclass": 1.0
  },
  "myclass myclassobject2 myclass": {
    "another": 1.0
  },
  "myclassobject2 myclass another": {
    "instance": 1.0
  },
  "myclass another instance": {
    "of": 1.0
  },
  "of myclass code": {
    "clarion": 1.0
  },
  "myclass code clarion": {
    "language": 1.0
  },
  "code clarion language": {
    "programming": 1.0
  },
  "programming guide 28": {
    "an": 1.0
  },
  "guide 28 an": {
    "object": 1.0
  },
  "28 an object": {
    "declared": 1.0
  },
  "section is automatically": {
    "destroyed": 1.0
  },
  "you when it": {
    "goes": 1.0
  },
  "when it goes": {
    "out": 1.0
  },
  "it goes out": {
    "of": 1.0
  },
  "goes out of": {
    "scope": 1.0
  },
  "out of scope": {
    "for": 0.25,
    "and": 0.5,
    "the": 0.25
  },
  "of scope for": {
    "example": 1.0
  },
  "scope for example": {
    "an": 1.0
  },
  "for example an": {
    "object": 1.0
  },
  "example an object": {
    "declared": 1.0
  },
  "local data section": {
    "goes": 0.5,
    "share": 0.5
  },
  "data section goes": {
    "out": 1.0
  },
  "section goes out": {
    "of": 1.0
  },
  "of scope and": {
    "is": 0.5,
    "are": 0.5
  },
  "scope and is": {
    "destroyed": 1.0
  },
  "and is destroyed": {
    "upon": 1.0
  },
  "is destroyed upon": {
    "return": 1.0
  },
  "destroyed upon return": {
    "from": 1.0
  },
  "upon return from": {
    "the": 1.0
  },
  "the procedure objects": {
    "declared": 1.0
  },
  "procedure objects declared": {
    "in": 1.0
  },
  "in a global": {
    "or": 1.0
  },
  "a global or": {
    "module": 1.0
  },
  "global or module": {
    "data": 1.0
  },
  "or module data": {
    "section": 1.0
  },
  "module data section": {
    "go": 1.0
  },
  "data section go": {
    "out": 1.0
  },
  "section go out": {
    "of": 1.0
  },
  "go out of": {
    "scope": 1.0
  },
  "scope and are": {
    "destroyed": 1.0
  },
  "and are destroyed": {
    "only": 1.0
  },
  "are destroyed only": {
    "when": 1.0
  },
  "destroyed only when": {
    "the": 1.0
  },
  "only when the": {
    "program": 1.0
  },
  "program terminates to": {
    "create": 1.0
  },
  "terminates to create": {
    "an": 1.0
  },
  "an object dynamically": {
    "in": 1.0
  },
  "object dynamically in": {
    "executable": 1.0
  },
  "using new declare": {
    "a": 1.0
  },
  "new declare a": {
    "reference": 1.0
  },
  "a reference variable": {
    "for": 0.5,
    "in": 0.25,
    "that": 0.25
  },
  "reference variable for": {
    "the": 1.0
  },
  "variable for the": {
    "class": 0.5,
    "file": 0.5
  },
  "class then execute": {
    "a": 1.0
  },
  "then execute a": {
    "reference": 1.0
  },
  "execute a reference": {
    "assignment": 1.0
  },
  "a reference assignment": {
    "statement": 1.0
  },
  "reference assignment statement": {
    "to": 0.5,
    "for": 0.5
  },
  "assignment statement to": {
    "the": 1.0
  },
  "statement to the": {
    "reference": 0.25,
    "back": 0.25,
    "dat": 0.25,
    "filter": 0.25
  },
  "to the reference": {
    "variable": 1.0
  },
  "the reference variable": {
    "naming": 0.5,
    "that": 0.5
  },
  "reference variable naming": {
    "the": 1.0
  },
  "variable naming the": {
    "class": 1.0
  },
  "naming the class": {
    "as": 1.0
  },
  "as the parameter": {
    "to": 1.0
  },
  "parameter to new": {
    "program": 1.0
  },
  "to new program": {
    "someclass": 1.0
  },
  "new program someclass": {
    "class": 1.0
  },
  "someclass class type": {
    "propertya": 0.42857142857142855,
    "objectq": 0.14285714285714285,
    "base": 0.14285714285714285,
    "someclass": 0.14285714285714285,
    "module": 0.14285714285714285
  },
  "class type propertya": {
    "long": 1.0
  },
  "type propertya long": {
    "propertyb": 1.0
  },
  "procedure end someclassobjectref": {
    "someclass": 1.0
  },
  "end someclassobjectref someclass": {
    "a": 1.0
  },
  "someclassobjectref someclass a": {
    "reference": 1.0
  },
  "someclass a reference": {
    "to": 1.0
  },
  "reference to a": {
    "someclass": 0.42857142857142855,
    "queue": 0.14285714285714285,
    "specific": 0.42857142857142855
  },
  "to a someclass": {
    "object": 1.0
  },
  "a someclass object": {
    "code": 0.6,
    "which": 0.2,
    "propertya": 0.2
  },
  "someclass object code": {
    "someclassobjectref": 0.3333333333333333,
    "classref": 0.6666666666666666
  },
  "object code someclassobjectref": {
    "new": 1.0
  },
  "code someclassobjectref new": {
    "someclass": 1.0
  },
  "someclassobjectref new someclass": {
    "create": 1.0
  },
  "new someclass create": {
    "the": 0.5,
    "a": 0.5
  },
  "someclass create the": {
    "object": 1.0
  },
  "create the object": {
    "it": 1.0
  },
  "the object it": {
    "is": 1.0
  },
  "object it is": {
    "important": 1.0
  },
  "it is important": {
    "to": 1.0
  },
  "is important to": {
    "note": 1.0
  },
  "important to note": {
    "that": 1.0
  },
  "to note that": {
    "when": 1.0
  },
  "note that when": {
    "you": 1.0
  },
  "when you use": {
    "new": 1.0
  },
  "you use new": {
    "to": 1.0
  },
  "use new to": {
    "instantiate": 1.0
  },
  "new to instantiate": {
    "the": 1.0
  },
  "to instantiate the": {
    "object": 0.5,
    "contained": 0.5
  },
  "instantiate the object": {
    "you": 1.0
  },
  "the object you": {
    "must": 1.0
  },
  "object you must": {
    "also": 1.0
  },
  "you must also": {
    "use": 1.0
  },
  "must also use": {
    "dispose": 1.0
  },
  "also use dispose": {
    "to": 1.0
  },
  "dispose to destroy": {
    "it": 1.0
  },
  "to destroy it": {
    "when": 1.0
  },
  "destroy it when": {
    "it": 1.0
  },
  "it when it": {
    "goes": 1.0
  },
  "of scope the": {
    "object": 1.0
  },
  "scope the object": {
    "is": 1.0
  },
  "object is not": {
    "automatically": 1.0
  },
  "is not automatically": {
    "destroyed": 1.0
  },
  "not automatically destroyed": {
    "for": 1.0
  },
  "for you the": {
    "advan": 0.5,
    "real": 0.5
  },
  "you the advan": {
    "tage": 1.0
  },
  "the advan tage": {
    "of": 1.0
  },
  "advan tage of": {
    "using": 1.0
  },
  "tage of using": {
    "new": 1.0
  },
  "of using new": {
    "is": 1.0
  },
  "using new is": {
    "the": 1.0
  },
  "new is the": {
    "ability": 1.0
  },
  "ability to place": {
    "the": 1.0
  },
  "to place the": {
    "reference": 1.0
  },
  "place the reference": {
    "variable": 1.0
  },
  "reference variable that": {
    "points": 1.0
  },
  "variable that points": {
    "at": 0.5,
    "to": 0.5
  },
  "that points at": {
    "the": 1.0
  },
  "points at the": {
    "object": 1.0
  },
  "at the object": {
    "inside": 1.0
  },
  "the object inside": {
    "another": 1.0
  },
  "object inside another": {
    "object": 1.0
  },
  "inside another object": {
    "as": 1.0
  },
  "a property using": {
    "references": 1.0
  },
  "property using references": {
    "as": 1.0
  },
  "using references as": {
    "properties": 1.0
  },
  "references as properties": {
    "since": 1.0
  },
  "as properties since": {
    "reference": 1.0
  },
  "properties since reference": {
    "variables": 1.0
  },
  "since reference variables": {
    "are": 1.0
  },
  "variables are valid": {
    "to": 1.0
  },
  "are valid to": {
    "use": 1.0
  },
  "valid to use": {
    "anywhere": 1.0
  },
  "to use anywhere": {
    "the": 1.0
  },
  "use anywhere the": {
    "label": 1.0
  },
  "anywhere the label": {
    "of": 1.0
  },
  "of the data": {
    "type": 0.5,
    "within": 0.5
  },
  "data type they": {
    "reference": 1.0
  },
  "type they reference": {
    "may": 1.0
  },
  "they reference may": {
    "be": 1.0
  },
  "reference may be": {
    "used": 1.0
  },
  "be used they": {
    "allow": 1.0
  },
  "used they allow": {
    "a": 1.0
  },
  "they allow a": {
    "class": 1.0
  },
  "allow a class": {
    "to": 1.0
  },
  "a class to": {
    "access": 1.0
  },
  "class to access": {
    "all": 1.0
  },
  "to access all": {
    "the": 1.0
  },
  "access all the": {
    "types": 1.0
  },
  "all the types": {
    "of": 1.0
  },
  "the types of": {
    "complex": 1.0
  },
  "types of complex": {
    "structures": 1.0
  },
  "of complex structures": {
    "that": 1.0
  },
  "complex structures that": {
    "cannot": 1.0
  },
  "structures that cannot": {
    "be": 1.0
  },
  "that cannot be": {
    "directly": 1.0
  },
  "cannot be directly": {
    "declared": 1.0
  },
  "be directly declared": {
    "inside": 1.0
  },
  "directly declared inside": {
    "the": 1.0
  },
  "declared inside the": {
    "class": 1.0
  },
  "inside the class": {
    "when": 1.0
  },
  "the class when": {
    "you": 1.0
  },
  "class when you": {
    "couple": 1.0
  },
  "when you couple": {
    "with": 1.0
  },
  "you couple with": {
    "this": 1.0
  },
  "couple with this": {
    "the": 1.0
  },
  "with this the": {
    "use": 1.0
  },
  "this the use": {
    "of": 1.0
  },
  "use of new": {
    "and": 1.0
  },
  "of new and": {
    "dispose": 1.0
  },
  "and dispose to": {
    "dynamically": 1.0
  },
  "dispose to dynamically": {
    "create": 1.0
  },
  "to dynamically create": {
    "and": 1.0
  },
  "dynamically create and": {
    "destroy": 1.0
  },
  "create and destroy": {
    "variables": 1.0
  },
  "and destroy variables": {
    "a": 1.0
  },
  "destroy variables a": {
    "nd": 1.0
  },
  "variables a nd": {
    "objects": 1.0
  },
  "a nd objects": {
    "you": 1.0
  },
  "nd objects you": {
    "give": 1.0
  },
  "objects you give": {
    "a": 1.0
  },
  "you give a": {
    "class": 1.0
  },
  "give a class": {
    "the": 1.0
  },
  "a class the": {
    "ability": 1.0
  },
  "class the ability": {
    "to": 1.0
  },
  "ability to contain": {
    "almost": 1.0
  },
  "to contain almost": {
    "all": 1.0
  },
  "contain almost all": {
    "these": 1.0
  },
  "almost all these": {
    "complex": 1.0
  },
  "all these complex": {
    "structures": 1.0
  },
  "these complex structures": {
    "for": 0.5,
    "the": 0.5
  },
  "complex structures for": {
    "example": 1.0
  },
  "structures for example": {
    "using": 1.0
  },
  "for example using": {
    "a": 1.0
  },
  "example using a": {
    "reference": 1.0
  },
  "using a reference": {
    "variable": 1.0
  },
  "reference variable in": {
    "the": 1.0
  },
  "variable in the": {
    "class": 1.0
  },
  "the class you": {
    "can": 1.0
  },
  "class you can": {
    "declare": 1.0
  },
  "you can declare": {
    "a": 1.0
  },
  "can declare a": {
    "reference": 1.0
  },
  "to a queue": {
    "queue": 1.0
  },
  "a queue queue": {
    "that": 1.0
  },
  "queue queue that": {
    "is": 1.0
  },
  "queue that is": {
    "passed": 1.0
  },
  "that is passed": {
    "to": 1.0
  },
  "is passed to": {
    "the": 1.0
  },
  "passed to the": {
    "class": 0.5,
    "procedure": 0.5
  },
  "the class methods": {
    "the": 0.6666666666666666,
    "can": 0.3333333333333333
  },
  "methods the same": {
    "thing": 1.0
  },
  "true of al": {
    "l": 1.0
  },
  "of al l": {
    "the": 1.0
  },
  "al l the": {
    "complex": 1.0
  },
  "l the complex": {
    "data": 1.0
  },
  "the complex data": {
    "types": 1.0
  },
  "data types queue": {
    "file": 1.0
  },
  "types queue file": {
    "key": 1.0
  },
  "queue file key": {
    "blob": 1.0
  },
  "file key blob": {
    "view": 1.0
  },
  "key blob view": {
    "or": 1.0
  },
  "blob view or": {
    "window": 1.0
  },
  "view or window": {
    "although": 1.0
  },
  "or window although": {
    "the": 1.0
  },
  "window although the": {
    "class": 1.0
  },
  "although the class": {
    "cannot": 1.0
  },
  "the class cannot": {
    "directly": 1.0
  },
  "class cannot directly": {
    "contain": 1.0
  },
  "cannot directly contain": {
    "the": 1.0
  },
  "directly contain the": {
    "data": 1.0
  },
  "contain the data": {
    "declaration": 1.0
  },
  "data declaration of": {
    "these": 1.0
  },
  "declaration of these": {
    "complex": 1.0
  },
  "of these complex": {
    "structures": 1.0
  },
  "complex structures the": {
    "class": 1.0
  },
  "structures the class": {
    "methods": 1.0
  },
  "class methods can": {
    "act": 1.0
  },
  "methods can act": {
    "as": 1.0
  },
  "can act as": {
    "if": 1.0
  },
  "act as if": {
    "they": 1.0
  },
  "as if they": {
    "own": 1.0
  },
  "if they own": {
    "the": 1.0
  },
  "they own the": {
    "structure": 1.0
  },
  "own the structure": {
    "just": 1.0
  },
  "the structure just": {
    "as": 1.0
  },
  "structure just as": {
    "surely": 1.0
  },
  "just as surely": {
    "as": 1.0
  },
  "as surely as": {
    "the": 1.0
  },
  "surely as the": {
    "instance": 1.0
  },
  "as the instance": {
    "owns": 1.0
  },
  "the instance owns": {
    "its": 1.0
  },
  "instance owns its": {
    "own": 1.0
  },
  "owns its own": {
    "set": 1.0
  },
  "of properties data": {
    "members": 1.0
  },
  "data members for": {
    "example": 1.0
  },
  "members for example": {
    "although": 1.0
  },
  "for example although": {
    "a": 1.0
  },
  "example although a": {
    "file": 1.0
  },
  "although a file": {
    "declaration": 1.0
  },
  "a file declaration": {
    "must": 1.0
  },
  "file declaration must": {
    "be": 1.0
  },
  "declaration must be": {
    "external": 1.0
  },
  "must be external": {
    "to": 1.0
  },
  "be external to": {
    "a": 1.0
  },
  "external to a": {
    "class": 1.0
  },
  "a class structure": {
    "by": 1.0
  },
  "class structure by": {
    "declaring": 1.0
  },
  "structure by declaring": {
    "a": 1.0
  },
  "by declaring a": {
    "reference": 1.0
  },
  "for the file": {
    "file": 0.25,
    "other": 0.25,
    "the": 0.25,
    "system": 0.25
  },
  "the file file": {
    "within": 1.0
  },
  "file file within": {
    "the": 1.0
  },
  "file within the": {
    "class": 1.0
  },
  "class then executing": {
    "a": 1.0
  },
  "then executing a": {
    "reference": 1.0
  },
  "executing a reference": {
    "assignment": 1.0
  },
  "assignment statement for": {
    "a": 1.0
  },
  "statement for a": {
    "s": 1.0
  },
  "for a s": {
    "pecific": 1.0
  },
  "a s pecific": {
    "file": 1.0
  },
  "s pecific file": {
    "structure": 1.0
  },
  "pecific file structure": {
    "to": 1.0
  },
  "file structure to": {
    "an": 1.0
  },
  "structure to an": {
    "object": 1.0
  },
  "to an object": {
    "s": 0.5,
    "of": 0.5
  },
  "object s one": {
    "specific": 1.0
  },
  "s one specific": {
    "instance": 1.0
  },
  "the class reference": {
    "variable": 1.0
  },
  "class reference variable": {
    "the": 1.0
  },
  "reference variable the": {
    "object": 1.0
  },
  "variable the object": {
    "can": 1.0
  },
  "the object can": {
    "own": 1.0
  },
  "object can own": {
    "the": 1.0
  },
  "can own the": {
    "file": 1.0
  },
  "own the file": {
    "and": 1.0
  },
  "the file and": {
    "its": 0.25,
    "in": 0.25,
    "the": 0.25,
    "any": 0.25
  },
  "file and its": {
    "methods": 1.0
  },
  "and its methods": {
    "can": 1.0
  },
  "its methods can": {
    "execute": 1.0
  },
  "methods can execute": {
    "any": 1.0
  },
  "can execute any": {
    "statement": 1.0
  },
  "execute any statement": {
    "that": 1.0
  },
  "any statement that": {
    "requires": 1.0
  },
  "statement that requires": {
    "the": 1.0
  },
  "that requires the": {
    "label": 1.0
  },
  "requires the label": {
    "of": 1.0
  },
  "of a file": {
    "structure": 0.2,
    "procedure": 0.2,
    "while": 0.2,
    "or": 0.4
  },
  "a file structure": {
    "as": 1.0
  },
  "file structure as": {
    "a": 1.0
  },
  "structure as a": {
    "parameter": 1.0
  },
  "a parameter effectively": {
    "operating": 1.0
  },
  "parameter effectively operating": {
    "directl": 1.0
  },
  "effectively operating directl": {
    "y": 1.0
  },
  "operating directl y": {
    "on": 1.0
  },
  "directl y on": {
    "the": 1.0
  },
  "y on the": {
    "file": 1.0
  },
  "on the file": {
    "structure": 1.0
  },
  "the file structure": {
    "itself": 1.0
  },
  "file structure itself": {
    "you": 1.0
  },
  "structure itself you": {
    "can": 1.0
  },
  "itself you can": {
    "also": 1.0
  },
  "also declare a": {
    "reference": 1.0
  },
  "type of queue": {
    "group": 0.2,
    "structure": 0.2,
    "field1": 0.2,
    "construct": 0.2,
    "with": 0.2
  },
  "of queue group": {
    "or": 1.0
  },
  "queue group or": {
    "class": 1.0
  },
  "group or class": {
    "structure": 1.0
  },
  "or class structure": {
    "queuename": 1.0
  },
  "class structure queuename": {
    "groupname": 1.0
  },
  "structure queuename groupname": {
    "or": 1.0
  },
  "queuename groupname or": {
    "classname": 1.0
  },
  "groupname or classname": {
    "which": 1.0
  },
  "or classname which": {
    "a": 1.0
  },
  "classname which a": {
    "class": 1.0
  },
  "which a class": {
    "method": 0.5,
    "is": 0.5
  },
  "class method can": {
    "then": 0.5,
    "be": 0.5
  },
  "method can then": {
    "dynamically": 1.0
  },
  "can then dynamically": {
    "create": 1.0
  },
  "then dynamically create": {
    "this": 1.0
  },
  "dynamically create this": {
    "allows": 1.0
  },
  "create this allows": {
    "the": 1.0
  },
  "this allows the": {
    "class": 0.5,
    "back": 0.5
  },
  "allows the class": {
    "to": 1.0
  },
  "class to contain": {
    "specific": 1.0
  },
  "to contain specific": {
    "type": 1.0
  },
  "contain specific type": {
    "s": 1.0
  },
  "specific type s": {
    "of": 1.0
  },
  "type s of": {
    "queues": 1.0
  },
  "s of queues": {
    "and": 1.0
  },
  "of queues and": {
    "other": 1.0
  },
  "queues and other": {
    "named": 1.0
  },
  "and other named": {
    "classes": 1.0
  },
  "other named classes": {
    "without": 1.0
  },
  "named classes without": {
    "the": 1.0
  },
  "classes without the": {
    "need": 1.0
  },
  "without the need": {
    "to": 1.0
  },
  "the need to": {
    "declare": 1.0
  },
  "to declare them": {
    "within": 1.0
  },
  "declare them within": {
    "the": 1.0
  },
  "them within the": {
    "class": 1.0
  },
  "declares a simple": {
    "class": 1.0
  },
  "a simple class": {
    "structure": 1.0
  },
  "class structure containing": {
    "a": 1.0
  },
  "structure containing a": {
    "reference": 1.0
  },
  "containing a reference": {
    "variable": 1.0
  },
  "that points to": {
    "a": 1.0
  },
  "points to a": {
    "specific": 1.0
  },
  "of queue structure": {
    "myqueue": 1.0
  },
  "queue structure myqueue": {
    "queue": 1.0
  },
  "structure myqueue queue": {
    "type": 1.0
  },
  "myqueue queue type": {
    "define": 0.5,
    "declare": 0.5
  },
  "queue type define": {
    "a": 1.0
  },
  "type define a": {
    "specific": 1.0
  },
  "define a specific": {
    "type": 1.0
  },
  "of queue field1": {
    "long": 1.0
  },
  "queue field1 long": {
    "field2": 1.0
  },
  "field1 long field2": {
    "string": 1.0
  },
  "long field2 string": {
    "20": 0.2,
    "10": 0.8
  },
  "field2 string 20": {
    "end": 1.0
  },
  "20 end someclass": {
    "class": 1.0
  },
  "end someclass class": {
    "queref": 0.5,
    "type": 0.5
  },
  "someclass class queref": {
    "myqueue": 1.0
  },
  "class queref myqueue": {
    "a": 1.0
  },
  "queref myqueue a": {
    "queue": 1.0
  },
  "myqueue a queue": {
    "with": 1.0
  },
  "a queue with": {
    "a": 1.0
  },
  "queue with a": {
    "long": 1.0
  },
  "with a long": {
    "and": 1.0
  },
  "a long and": {
    "a": 1.0
  },
  "long and a": {
    "string": 1.0
  },
  "and a string": {
    "20": 1.0
  },
  "a string 20": {
    "createque": 1.0
  },
  "string 20 createque": {
    "procedure": 1.0
  },
  "20 createque procedure": {
    "create": 1.0
  },
  "createque procedure create": {
    "the": 1.0
  },
  "procedure create the": {
    "queue": 1.0
  },
  "create the queue": {
    "f": 0.5,
    "someclass": 0.5
  },
  "the queue f": {
    "or": 1.0
  },
  "queue f or": {
    "each": 1.0
  },
  "f or each": {
    "object": 1.0
  },
  "or each object": {
    "end": 1.0
  },
  "each object end": {
    "someclass": 1.0
  },
  "object end someclass": {
    "createque": 1.0
  },
  "end someclass createque": {
    "procedure": 1.0
  },
  "someclass createque procedure": {
    "code": 1.0
  },
  "createque procedure code": {
    "self": 1.0
  },
  "code self queref": {
    "new": 1.0
  },
  "self queref new": {
    "myqueue": 1.0
  },
  "queref new myqueue": {
    "create": 1.0
  },
  "new myqueue create": {
    "a": 0.5,
    "the": 0.5
  },
  "myqueue create a": {
    "queue": 1.0
  },
  "create a queue": {
    "for": 1.0
  },
  "a queue for": {
    "the": 1.0
  },
  "queue for the": {
    "current": 1.0
  },
  "for the current": {
    "object": 1.0
  },
  "current object self": {
    "queref": 1.0
  },
  "object self queref": {
    "field1": 1.0
  },
  "self queref field1": {
    "1": 1.0
  },
  "queref field1 1": {
    "self": 1.0
  },
  "field1 1 self": {
    "queref": 1.0
  },
  "1 self queref": {
    "field2": 1.0
  },
  "self queref field2": {
    "first": 1.0
  },
  "queref field2 first": {
    "entry": 1.0
  },
  "field2 first entry": {
    "add": 1.0
  },
  "first entry add": {
    "self": 1.0
  },
  "entry add self": {
    "queref": 1.0
  },
  "add self queref": {
    "and": 1.0
  },
  "self queref and": {
    "add": 1.0
  },
  "queref and add": {
    "the": 1.0
  },
  "and add the": {
    "first": 1.0
  },
  "add the first": {
    "entry": 1.0
  },
  "the first entry": {
    "to": 1.0
  },
  "first entry to": {
    "the": 1.0
  },
  "entry to the": {
    "queue": 1.0
  },
  "to the queue": {
    "if": 1.0
  },
  "the queue if": {
    "errorcode": 1.0
  },
  "queue if errorcode": {
    "then": 1.0
  },
  "if errorcode then": {
    "stop": 0.6363636363636364,
    "break": 0.36363636363636365
  },
  "errorcode then stop": {
    "error": 1.0
  },
  "then stop error": {
    "29": 0.14285714285714285,
    "end": 0.8571428571428571
  },
  "stop error 29": {
    "object": 1.0
  },
  "error 29 object": {
    "oriented": 1.0
  },
  "29 object oriented": {
    "programming": 1.0
  },
  "oriented programming using": {
    "these": 1.0
  },
  "programming using these": {
    "named": 1.0
  },
  "using these named": {
    "references": 1.0
  },
  "these named references": {
    "and": 1.0
  },
  "named references and": {
    "naming": 1.0
  },
  "references and naming": {
    "a": 1.0
  },
  "and naming a": {
    "reference": 1.0
  },
  "naming a reference": {
    "to": 1.0
  },
  "a specific class": {
    "structure": 1.0
  },
  "specific class structure": {
    "makes": 1.0
  },
  "class structure makes": {
    "it": 1.0
  },
  "structure makes it": {
    "possible": 1.0
  },
  "makes it possible": {
    "for": 0.5,
    "to": 0.5
  },
  "it possible for": {
    "one": 1.0
  },
  "possible for one": {
    "object": 0.5,
    "user": 0.5
  },
  "for one object": {
    "to": 1.0
  },
  "one object to": {
    "effectively": 1.0
  },
  "object to effectively": {
    "contain": 1.0
  },
  "to effectively contain": {
    "an": 1.0
  },
  "effectively contain an": {
    "instance": 1.0
  },
  "contain an instance": {
    "of": 1.0
  },
  "instance of another": {
    "object": 1.0
  },
  "of another object": {
    "this": 1.0
  },
  "another object this": {
    "is": 1.0
  },
  "object this is": {
    "an": 0.5,
    "simple": 0.5
  },
  "oop technique known": {
    "as": 1.0
  },
  "technique known as": {
    "composition": 1.0
  },
  "known as composition": {
    "which": 1.0
  },
  "as composition which": {
    "provides": 1.0
  },
  "composition which provides": {
    "an": 1.0
  },
  "which provides an": {
    "alternative": 1.0
  },
  "provides an alternative": {
    "to": 1.0
  },
  "an alternative to": {
    "multiple": 1.0
  },
  "alternative to multiple": {
    "inheritance": 1.0
  },
  "multiple inheritance which": {
    "we": 1.0
  },
  "inheritance which we": {
    "will": 1.0
  },
  "which we will": {
    "get": 1.0
  },
  "get to shortly": {
    "when": 1.0
  },
  "to shortly when": {
    "we": 1.0
  },
  "shortly when we": {
    "discuss": 1.0
  },
  "when we discuss": {
    "inheritance": 1.0
  },
  "we discuss inheritance": {
    "constructors": 1.0
  },
  "discuss inheritance constructors": {
    "and": 1.0
  },
  "inheritance constructors and": {
    "destructors": 1.0
  },
  "and destructors constructors": {
    "and": 1.0
  },
  "destructors constructors and": {
    "destructors": 1.0
  },
  "destructors are a": {
    "feature": 1.0
  },
  "are a feature": {
    "of": 1.0
  },
  "a feature of": {
    "many": 1.0
  },
  "feature of many": {
    "object": 1.0
  },
  "of many object": {
    "oriented": 1.0
  },
  "many object oriented": {
    "languages": 1.0
  },
  "object oriented languages": {
    "these": 0.25,
    "is": 0.25,
    "usually": 0.25,
    "you": 0.25
  },
  "oriented languages these": {
    "are": 1.0
  },
  "languages these are": {
    "methods": 1.0
  },
  "these are methods": {
    "which": 1.0
  },
  "are methods which": {
    "you": 1.0
  },
  "methods which you": {
    "must": 1.0
  },
  "which you must": {
    "write": 0.5,
    "detect": 0.5
  },
  "you must write": {
    "that": 0.5,
    "extra": 0.5
  },
  "must write that": {
    "execute": 1.0
  },
  "write that execute": {
    "automatically": 1.0
  },
  "that execute automatically": {
    "without": 1.0
  },
  "execute automatically without": {
    "being": 1.0
  },
  "automatically without being": {
    "explicitly": 1.0
  },
  "without being explicitly": {
    "called": 1.0
  },
  "being explicitly called": {
    "a": 1.0
  },
  "explicitly called a": {
    "constructor": 1.0
  },
  "called a constructor": {
    "executes": 1.0
  },
  "a constructor executes": {
    "when": 1.0
  },
  "constructor executes when": {
    "the": 1.0
  },
  "executes when the": {
    "object": 1.0
  },
  "object is created": {
    "and": 0.5,
    "or": 0.5
  },
  "is created and": {
    "a": 1.0
  },
  "created and a": {
    "destructor": 1.0
  },
  "and a destructor": {
    "executes": 1.0
  },
  "a destructor executes": {
    "when": 1.0
  },
  "destructor executes when": {
    "the": 1.0
  },
  "object is destroye": {
    "d": 1.0
  },
  "is destroye d": {
    "the": 1.0
  },
  "destroye d the": {
    "most": 1.0
  },
  "d the most": {
    "common": 1.0
  },
  "most common purpose": {
    "of": 1.0
  },
  "common purpose of": {
    "a": 1.0
  },
  "purpose of a": {
    "constructor": 1.0
  },
  "of a constructor": {
    "method": 1.0
  },
  "a constructor method": {
    "in": 0.3333333333333333,
    "to": 0.3333333333333333,
    "end": 0.3333333333333333
  },
  "constructor method in": {
    "other": 1.0
  },
  "method in other": {
    "object": 1.0
  },
  "in other object": {
    "oriented": 1.0
  },
  "other object oriented": {
    "languages": 1.0
  },
  "oriented languages is": {
    "to": 1.0
  },
  "for the object": {
    "and": 0.5,
    "the": 0.5
  },
  "the object and": {
    "initialize": 1.0
  },
  "object and initialize": {
    "data": 1.0
  },
  "and initialize data": {
    "members": 1.0
  },
  "initialize data members": {
    "to": 1.0
  },
  "data members to": {
    "prevent": 1.0
  },
  "members to prevent": {
    "bugs": 1.0
  },
  "to prevent bugs": {
    "that": 1.0
  },
  "prevent bugs that": {
    "could": 1.0
  },
  "bugs that could": {
    "be": 1.0
  },
  "could be caused": {
    "by": 1.0
  },
  "be caused by": {
    "uninitialized": 1.0
  },
  "caused by uninitialized": {
    "variables": 1.0
  },
  "by uninitialized variables": {
    "destructor": 1.0
  },
  "uninitialized variables destructor": {
    "methods": 1.0
  },
  "variables destructor methods": {
    "in": 1.0
  },
  "destructor methods in": {
    "other": 1.0
  },
  "methods in other": {
    "object": 1.0
  },
  "oriented languages usually": {
    "just": 1.0
  },
  "languages usually just": {
    "de": 1.0
  },
  "usually just de": {
    "allocate": 1.0
  },
  "just de allocate": {
    "the": 1.0
  },
  "the object the": {
    "clarion": 1.0
  },
  "object the clarion": {
    "language": 1.0
  },
  "clarion language automatically": {
    "allocates": 1.0
  },
  "language automatically allocates": {
    "and": 1.0
  },
  "automatically allocates and": {
    "de": 1.0
  },
  "allocates and de": {
    "allocates": 1.0
  },
  "and de allocates": {
    "memory": 1.0
  },
  "de allocates memory": {
    "and": 1.0
  },
  "allocates memory and": {
    "initializes": 1.0
  },
  "memory and initializes": {
    "variables": 1.0
  },
  "and initializes variables": {
    "to": 1.0
  },
  "initializes variables to": {
    "blank": 1.0
  },
  "variables to blank": {
    "zero": 1.0
  },
  "to blank zero": {
    "or": 1.0
  },
  "blank zero or": {
    "the": 1.0
  },
  "zero or the": {
    "value": 1.0
  },
  "or the value": {
    "named": 1.0
  },
  "the value named": {
    "in": 1.0
  },
  "value named in": {
    "the": 1.0
  },
  "in the variable": {
    "s": 1.0
  },
  "the variable s": {
    "declaration": 1.0
  },
  "variable s declaration": {
    "this": 1.0
  },
  "s declaration this": {
    "means": 1.0
  },
  "declaration this means": {
    "the": 1.0
  },
  "means the biggest": {
    "reaso": 1.0
  },
  "the biggest reaso": {
    "n": 1.0
  },
  "biggest reaso n": {
    "for": 1.0
  },
  "reaso n for": {
    "supporting": 1.0
  },
  "n for supporting": {
    "automatic": 1.0
  },
  "for supporting automatic": {
    "constructors": 1.0
  },
  "supporting automatic constructors": {
    "and": 1.0
  },
  "and destructors doesn": {
    "t": 1.0
  },
  "destructors doesn t": {
    "exist": 1.0
  },
  "doesn t exist": {
    "in": 1.0
  },
  "t exist in": {
    "clarion": 0.3333333333333333,
    "someclass": 0.3333333333333333,
    "the": 0.3333333333333333
  },
  "exist in clarion": {
    "however": 1.0
  },
  "in clarion however": {
    "clarion": 1.0
  },
  "clarion however clarion": {
    "does": 1.0
  },
  "however clarion does": {
    "support": 1.0
  },
  "clarion does support": {
    "automatic": 1.0
  },
  "does support automatic": {
    "constructors": 1.0
  },
  "support automatic constructors": {
    "and": 1.0
  },
  "and destructors anyway": {
    "if": 1.0
  },
  "destructors anyway if": {
    "a": 1.0
  },
  "anyway if a": {
    "class": 1.0
  },
  "if a class": {
    "contains": 1.0
  },
  "a class contains": {
    "a": 1.0
  },
  "class contains a": {
    "method": 1.0
  },
  "contains a method": {
    "named": 1.0
  },
  "named construct which": {
    "must": 1.0
  },
  "construct which must": {
    "be": 1.0
  },
  "must be a": {
    "procedure": 0.5,
    "valid": 0.5
  },
  "be a procedure": {
    "that": 1.0
  },
  "a procedure that": {
    "takes": 0.6666666666666666,
    "while": 0.3333333333333333
  },
  "procedure that takes": {
    "no": 1.0
  },
  "that takes no": {
    "parameters": 1.0
  },
  "takes no parameters": {
    "then": 1.0
  },
  "no parameters then": {
    "that": 1.0
  },
  "parameters then that": {
    "construct": 0.5,
    "destruct": 0.5
  },
  "then that construct": {
    "method": 1.0
  },
  "that construct method": {
    "is": 1.0
  },
  "construct method is": {
    "automatically": 1.0
  },
  "method is automatically": {
    "called": 1.0
  },
  "automatically called when": {
    "the": 0.6666666666666666,
    "an": 0.3333333333333333
  },
  "called when the": {
    "object": 1.0
  },
  "is instantiated if": {
    "a": 1.0
  },
  "instantiated if a": {
    "class": 1.0
  },
  "named destruct also": {
    "a": 1.0
  },
  "destruct also a": {
    "procedure": 1.0
  },
  "also a procedure": {
    "that": 1.0
  },
  "then that destruct": {
    "method": 1.0
  },
  "that destruct method": {
    "is": 1.0
  },
  "destruct method is": {
    "automatically": 1.0
  },
  "is destroyed since": {
    "clarion": 1.0
  },
  "destroyed since clarion": {
    "automatically": 1.0
  },
  "since clarion automatically": {
    "takes": 1.0
  },
  "clarion automatically takes": {
    "care": 1.0
  },
  "automatically takes care": {
    "of": 1.0
  },
  "takes care of": {
    "memory": 1.0
  },
  "care of memory": {
    "allocation": 1.0
  },
  "of memory allocation": {
    "and": 1.0
  },
  "memory allocation and": {
    "initialization": 1.0
  },
  "allocation and initialization": {
    "the": 1.0
  },
  "and initialization the": {
    "most": 1.0
  },
  "initialization the most": {
    "common": 1.0
  },
  "most common use": {
    "of": 1.0
  },
  "common use of": {
    "constructors": 0.3333333333333333,
    "lock": 0.3333333333333333,
    "buffer": 0.3333333333333333
  },
  "use of constructors": {
    "and": 1.0
  },
  "of constructors and": {
    "destructors": 1.0
  },
  "destructors in a": {
    "clarion": 1.0
  },
  "clarion program would": {
    "be": 1.0
  },
  "program would be": {
    "to": 1.0
  },
  "would be to": {
    "initialize": 0.3333333333333333,
    "build": 0.3333333333333333,
    "specify": 0.3333333333333333
  },
  "to initialize and": {
    "dispose": 1.0
  },
  "initialize and dispose": {
    "of": 1.0
  },
  "and dispose of": {
    "an": 1.0
  },
  "dispose of an": {
    "object": 1.0
  },
  "object s reference": {
    "variables": 1.0
  },
  "s reference variables": {
    "someclass": 1.0
  },
  "reference variables someclass": {
    "class": 1.0
  },
  "variables someclass class": {
    "type": 1.0
  },
  "class type objectq": {
    "myqueue": 1.0
  },
  "type objectq myqueue": {
    "reference": 1.0
  },
  "objectq myqueue reference": {
    "to": 1.0
  },
  "myqueue reference to": {
    "a": 1.0
  },
  "of queue construct": {
    "procedure": 1.0
  },
  "queue construct procedure": {
    "constructor": 1.0
  },
  "construct procedure constructor": {
    "method": 1.0
  },
  "procedure constructor method": {
    "destruct": 1.0
  },
  "constructor method destruct": {
    "procedure": 1.0
  },
  "method destruct procedure": {
    "destructor": 0.5,
    "destr": 0.5
  },
  "destruct procedure destructor": {
    "method": 1.0
  },
  "procedure destructor method": {
    "end": 1.0
  },
  "destructor method end": {
    "classref": 1.0
  },
  "method end classref": {
    "someclass": 1.0
  },
  "end classref someclass": {
    "reference": 1.0
  },
  "classref someclass reference": {
    "to": 1.0
  },
  "someclass reference to": {
    "a": 1.0
  },
  "object code classref": {
    "new": 1.0
  },
  "code classref new": {
    "someclass": 0.5,
    "anotherclass": 0.5
  },
  "classref new someclass": {
    "create": 1.0
  },
  "someclass create a": {
    "someclass": 1.0
  },
  "create a someclass": {
    "object": 1.0
  },
  "someclass object which": {
    "auto": 1.0
  },
  "object which auto": {
    "calls": 1.0
  },
  "which auto calls": {
    "its": 1.0
  },
  "auto calls its": {
    "constructor": 0.6666666666666666,
    "destructor": 0.3333333333333333
  },
  "calls its constructor": {
    "method": 0.5,
    "multiclass": 0.5
  },
  "its constructor method": {
    "dispose": 1.0
  },
  "constructor method dispose": {
    "classref": 1.0
  },
  "method dispose classref": {
    "destroy": 1.0
  },
  "dispose classref destroy": {
    "the": 1.0
  },
  "classref destroy the": {
    "someclass": 0.5,
    "object": 0.5
  },
  "destroy the someclass": {
    "object": 1.0
  },
  "the someclass object": {
    "which": 1.0
  },
  "calls its destructor": {
    "method": 1.0
  },
  "its destructor method": {
    "someclass": 1.0
  },
  "destructor method someclass": {
    "construct": 1.0
  },
  "method someclass construct": {
    "procedure": 1.0
  },
  "someclass construct procedure": {
    "code": 0.5,
    "base": 0.5
  },
  "code self objectq": {
    "new": 1.0
  },
  "self objectq new": {
    "myqueue": 1.0
  },
  "objectq new myqueue": {
    "create": 0.5,
    "someclass": 0.5
  },
  "myqueue create the": {
    "queue": 1.0
  },
  "the queue someclass": {
    "destruct": 1.0
  },
  "queue someclass destruct": {
    "procedure": 1.0
  },
  "someclass destruct procedure": {
    "code": 0.5,
    "base": 0.5
  },
  "destruct procedure code": {
    "free": 1.0
  },
  "procedure code free": {
    "self": 1.0
  },
  "code free self": {
    "objectq": 1.0
  },
  "free self objectq": {
    "free": 0.5,
    "dispose": 0.5
  },
  "self objectq free": {
    "any": 1.0
  },
  "objectq free any": {
    "queue": 1.0
  },
  "free any queue": {
    "entires": 1.0
  },
  "any queue entires": {
    "dispose": 1.0
  },
  "queue entires dispose": {
    "self": 1.0
  },
  "entires dispose self": {
    "objectq": 1.0
  },
  "dispose self objectq": {
    "destroy": 0.5,
    "clarion": 0.5
  },
  "self objectq destroy": {
    "the": 1.0
  },
  "objectq destroy the": {
    "queue": 1.0
  },
  "destroy the queue": {
    "in": 1.0
  },
  "the queue in": {
    "clarion": 1.0
  },
  "queue in clarion": {
    "unlike": 1.0
  },
  "in clarion unlike": {
    "many": 1.0
  },
  "clarion unlike many": {
    "other": 1.0
  },
  "unlike many other": {
    "object": 1.0
  },
  "many other object": {
    "oriented": 1.0
  },
  "oriented languages you": {
    "may": 1.0
  },
  "languages you may": {
    "also": 1.0
  },
  "you may also": {
    "explicitly": 1.0
  },
  "may also explicitly": {
    "call": 1.0
  },
  "also explicitly call": {
    "the": 1.0
  },
  "explicitly call the": {
    "constructor": 0.5,
    "method": 0.5
  },
  "call the constructor": {
    "and": 1.0
  },
  "the constructor and": {
    "destructor": 1.0
  },
  "constructor and destructor": {
    "methods": 0.6666666666666666,
    "method": 0.3333333333333333
  },
  "and destructor methods": {
    "this": 0.5,
    "named": 0.5
  },
  "destructor methods this": {
    "allows": 1.0
  },
  "methods this allows": {
    "you": 1.0
  },
  "you to re": {
    "start": 1.0
  },
  "to re start": {
    "an": 1.0
  },
  "re start an": {
    "object": 1.0
  },
  "start an object": {
    "at": 1.0
  },
  "an object at": {
    "any": 1.0
  },
  "object at any": {
    "time": 1.0
  },
  "at any time": {
    "by": 1.0
  },
  "any time by": {
    "simply": 1.0
  },
  "time by simply": {
    "calling": 1.0
  },
  "by simply calling": {
    "the": 1.0
  },
  "simply calling the": {
    "ob": 1.0
  },
  "calling the ob": {
    "ject": 1.0
  },
  "the ob ject": {
    "s": 1.0
  },
  "ob ject s": {
    "destructor": 1.0
  },
  "ject s destructor": {
    "clearing": 1.0
  },
  "s destructor clearing": {
    "it": 1.0
  },
  "destructor clearing it": {
    "then": 1.0
  },
  "clearing it then": {
    "its": 1.0
  },
  "it then its": {
    "constructor": 1.0
  },
  "then its constructor": {
    "re": 1.0
  },
  "its constructor re": {
    "initialize": 1.0
  },
  "constructor re initialize": {
    "it": 1.0
  },
  "re initialize it": {
    "public": 1.0
  },
  "initialize it public": {
    "vs": 1.0
  },
  "it public vs": {
    "private": 1.0
  },
  "vs protected all": {
    "the": 1.0
  },
  "protected all the": {
    "properties": 1.0
  },
  "class are public": {
    "unless": 1.0
  },
  "are public unless": {
    "explicitly": 1.0
  },
  "public unless explicitly": {
    "declared": 1.0
  },
  "unless explicitly declared": {
    "with": 1.0
  },
  "explicitly declared with": {
    "the": 1.0
  },
  "declared with the": {
    "private": 1.0
  },
  "the private or": {
    "p": 0.5,
    "protected": 0.5
  },
  "private or p": {
    "rotected": 1.0
  },
  "or p rotected": {
    "attribute": 1.0
  },
  "p rotected attribute": {
    "in": 1.0
  },
  "rotected attribute in": {
    "this": 1.0
  },
  "attribute in this": {
    "case": 1.0
  },
  "in this case": {
    "public": 0.16666666666666666,
    "the": 0.16666666666666666,
    "either": 0.16666666666666666,
    "next": 0.16666666666666666,
    "a": 0.16666666666666666,
    "clarion": 0.16666666666666666
  },
  "this case public": {
    "means": 1.0
  },
  "case public means": {
    "they": 1.0
  },
  "public means they": {
    "are": 1.0
  },
  "they are visible": {
    "and": 1.0
  },
  "and available for": {
    "use": 1.0
  },
  "use anywhere that": {
    "the": 1.0
  },
  "anywhere that the": {
    "object": 1.0
  },
  "that the object": {
    "is": 1.0
  },
  "object is in": {
    "scope": 1.0
  },
  "in scope clarion": {
    "language": 1.0
  },
  "scope clarion language": {
    "programming": 1.0
  },
  "programming guide 30": {
    "private": 1.0
  },
  "guide 30 private": {
    "the": 1.0
  },
  "30 private the": {
    "private": 1.0
  },
  "private the private": {
    "attribute": 1.0
  },
  "private attribute specifies": {
    "that": 1.0
  },
  "attribute specifies that": {
    "the": 0.6666666666666666,
    "data": 0.3333333333333333
  },
  "or method on": {
    "which": 1.0
  },
  "method on which": {
    "it": 1.0
  },
  "on which it": {
    "is": 1.0
  },
  "it is placed": {
    "is": 1.0
  },
  "is placed is": {
    "visible": 1.0
  },
  "placed is visible": {
    "only": 1.0
  },
  "the procedures defined": {
    "within": 1.0
  },
  "procedures defined within": {
    "the": 1.0
  },
  "defined within the": {
    "source": 0.6666666666666666,
    "same": 0.3333333333333333
  },
  "within the source": {
    "module": 1.0
  },
  "the source module": {
    "containing": 1.0
  },
  "source module containing": {
    "the": 1.0
  },
  "module containing the": {
    "methods": 1.0
  },
  "containing the methods": {
    "of": 1.0
  },
  "structure this completely": {
    "encapsulates": 1.0
  },
  "this completely encapsulates": {
    "the": 1.0
  },
  "completely encapsulates the": {
    "data": 1.0
  },
  "encapsulates the data": {
    "and": 1.0
  },
  "methods from other": {
    "classes": 1.0
  },
  "other classes someclass": {
    "class": 1.0
  },
  "classes someclass class": {
    "module": 0.5,
    "type": 0.5
  },
  "someclass class module": {
    "someclas": 1.0
  },
  "class module someclas": {
    "clw": 1.0
  },
  "someclas clw type": {
    "publicvar": 1.0
  },
  "clw type publicvar": {
    "long": 1.0
  },
  "type publicvar long": {
    "declare": 1.0
  },
  "publicvar long declare": {
    "a": 1.0
  },
  "long declare a": {
    "public": 1.0
  },
  "declare a public": {
    "property": 0.5,
    "method": 0.5
  },
  "a public property": {
    "privatevar": 1.0
  },
  "public property privatevar": {
    "long": 1.0
  },
  "property privatevar long": {
    "private": 1.0
  },
  "privatevar long private": {
    "declare": 1.0
  },
  "long private declare": {
    "a": 1.0
  },
  "private declare a": {
    "private": 1.0
  },
  "declare a private": {
    "property": 0.5,
    "method": 0.5
  },
  "a private property": {
    "baseproc": 1.0
  },
  "private property baseproc": {
    "procedure": 1.0
  },
  "property baseproc procedure": {
    "real": 1.0
  },
  "baseproc procedure real": {
    "parm": 1.0
  },
  "procedure real parm": {
    "declare": 0.25,
    "private": 0.25,
    "code": 0.5
  },
  "real parm declare": {
    "a": 1.0
  },
  "parm declare a": {
    "public": 1.0
  },
  "a public method": {
    "proc": 1.0
  },
  "public method proc": {
    "procedure": 1.0
  },
  "method proc procedure": {
    "real": 1.0
  },
  "proc procedure real": {
    "parm": 1.0
  },
  "real parm private": {
    "declare": 1.0
  },
  "parm private declare": {
    "a": 1.0
  },
  "a private method": {
    "end": 1.0
  },
  "method end twoclass": {
    "someclass": 1.0
  },
  "end twoclass someclass": {
    "declare": 1.0
  },
  "twoclass someclass declare": {
    "an": 1.0
  },
  "someclass declare an": {
    "object": 1.0
  },
  "an object code": {
    "twoclass": 1.0
  },
  "object code twoclass": {
    "publicvar": 1.0
  },
  "code twoclass publicvar": {
    "1": 1.0
  },
  "twoclass publicvar 1": {
    "legal": 1.0
  },
  "publicvar 1 legal": {
    "assignment": 1.0
  },
  "1 legal assignment": {
    "twoclass": 0.5,
    "a": 0.5
  },
  "legal assignment twoclass": {
    "privatevar": 1.0
  },
  "assignment twoclass privatevar": {
    "1": 1.0
  },
  "twoclass privatevar 1": {
    "illegal": 1.0
  },
  "privatevar 1 illegal": {
    "assignment": 1.0
  },
  "1 illegal assignment": {
    "twoclass": 1.0
  },
  "illegal assignment twoclass": {
    "proc": 1.0
  },
  "assignment twoclass proc": {
    "2": 1.0
  },
  "twoclass proc 2": {
    "illegal": 1.0
  },
  "proc 2 illegal": {
    "call": 1.0
  },
  "2 illegal call": {
    "to": 1.0
  },
  "illegal call to": {
    "proc": 1.0
  },
  "call to proc": {
    "the": 0.5,
    "somelocalproc": 0.5
  },
  "to proc the": {
    "someclas": 1.0
  },
  "proc the someclas": {
    "clw": 1.0
  },
  "someclas clw source": {
    "code": 1.0
  },
  "clw source code": {
    "file": 1.0
  },
  "code file contains": {
    "member": 1.0
  },
  "file contains member": {
    "myprog": 1.0
  },
  "contains member myprog": {
    "map": 1.0
  },
  "member myprog map": {
    "a": 1.0
  },
  "myprog map a": {
    "local": 1.0
  },
  "map a local": {
    "map": 1.0
  },
  "a local map": {
    "which": 1.0
  },
  "local map which": {
    "declares": 1.0
  },
  "map which declares": {
    "somelocalproc": 1.0
  },
  "which declares somelocalproc": {
    "procedure": 1.0
  },
  "declares somelocalproc procedure": {
    "someclass": 1.0
  },
  "somelocalproc procedure someclass": {
    "a": 1.0
  },
  "procedure someclass a": {
    "friend": 1.0
  },
  "someclass a friend": {
    "of": 1.0
  },
  "a friend of": {
    "someclass": 0.5,
    "oneclass": 0.5
  },
  "friend of someclass": {
    "and": 1.0
  },
  "of someclass and": {
    "passing": 1.0
  },
  "someclass and passing": {
    "current": 1.0
  },
  "and passing current": {
    "object": 1.0
  },
  "passing current object": {
    "to": 1.0
  },
  "object to it": {
    "end": 1.0
  },
  "to it end": {
    "someclass": 1.0
  },
  "it end someclass": {
    "baseproc": 1.0
  },
  "end someclass baseproc": {
    "procedure": 1.0
  },
  "someclass baseproc procedure": {
    "real": 1.0
  },
  "real parm code": {
    "self": 0.5,
    "return": 0.5
  },
  "parm code self": {
    "privatevar": 1.0
  },
  "code self privatevar": {
    "parm": 1.0
  },
  "self privatevar parm": {
    "legal": 1.0
  },
  "privatevar parm legal": {
    "assignment": 1.0
  },
  "parm legal assignment": {
    "self": 1.0
  },
  "legal assignment self": {
    "proc": 1.0
  },
  "assignment self proc": {
    "parm": 1.0
  },
  "self proc parm": {
    "le": 1.0
  },
  "proc parm le": {
    "gal": 1.0
  },
  "parm le gal": {
    "call": 1.0
  },
  "le gal call": {
    "to": 1.0
  },
  "gal call to": {
    "proc": 1.0
  },
  "to proc somelocalproc": {
    "self": 1.0
  },
  "proc somelocalproc self": {
    "call": 1.0
  },
  "somelocalproc self call": {
    "the": 1.0
  },
  "self call the": {
    "friend": 1.0
  },
  "call the friend": {
    "passing": 1.0
  },
  "the friend passing": {
    "it": 1.0
  },
  "friend passing it": {
    "the": 1.0
  },
  "passing it the": {
    "current": 1.0
  },
  "it the current": {
    "object": 1.0
  },
  "current object instance": {
    "someclass": 0.5,
    "are": 0.5
  },
  "object instance someclass": {
    "proc": 1.0
  },
  "instance someclass proc": {
    "procedure": 1.0
  },
  "someclass proc procedure": {
    "real": 1.0
  },
  "parm code return": {
    "parm": 1.0
  },
  "code return parm": {
    "somelocalproc": 1.0
  },
  "return parm somelocalproc": {
    "procedure": 1.0
  },
  "parm somelocalproc procedure": {
    "passedobject": 1.0
  },
  "somelocalproc procedure passedobject": {
    "visible": 1.0
  },
  "procedure passedobject visible": {
    "only": 1.0
  },
  "passedobject visible only": {
    "in": 1.0
  },
  "visible only in": {
    "this": 1.0
  },
  "only in this": {
    "mo": 1.0
  },
  "in this mo": {
    "dule": 1.0
  },
  "this mo dule": {
    "code": 1.0
  },
  "mo dule code": {
    "passedobject": 1.0
  },
  "dule code passedobject": {
    "privatevar": 1.0
  },
  "code passedobject privatevar": {
    "1": 1.0
  },
  "passedobject privatevar 1": {
    "legal": 1.0
  },
  "privatevar 1 legal": {
    "assignment": 1.0
  },
  "legal assignment a": {
    "side": 1.0
  },
  "assignment a side": {
    "benefit": 1.0
  },
  "a side benefit": {
    "of": 1.0
  },
  "side benefit of": {
    "the": 1.0
  },
  "benefit of the": {
    "clarion": 1.0
  },
  "the clarion implementation": {
    "of": 1.0
  },
  "clarion implementation of": {
    "private": 1.0
  },
  "implementation of private": {
    "properties": 1.0
  },
  "of private properties": {
    "and": 1.0
  },
  "methods are friends": {
    "in": 1.0
  },
  "are friends in": {
    "c": 1.0
  },
  "friends in c": {
    "the": 1.0
  },
  "in c the": {
    "concept": 1.0
  },
  "c the concept": {
    "of": 1.0
  },
  "the concept of": {
    "a": 0.6666666666666666,
    "null": 0.3333333333333333
  },
  "concept of a": {
    "friend": 0.5,
    "null": 0.5
  },
  "of a friend": {
    "is": 1.0
  },
  "a friend is": {
    "a": 1.0
  },
  "friend is a": {
    "procedure": 1.0
  },
  "is a procedure": {
    "that": 1.0
  },
  "procedure that while": {
    "not": 1.0
  },
  "that while not": {
    "a": 1.0
  },
  "while not a": {
    "method": 1.0
  },
  "not a method": {
    "of": 1.0
  },
  "method of a": {
    "class": 1.0
  },
  "class share s": {
    "the": 1.0
  },
  "share s the": {
    "private": 1.0
  },
  "s the private": {
    "properties": 1.0
  },
  "the private properties": {
    "of": 1.0
  },
  "private properties of": {
    "the": 1.0
  },
  "class in the": {
    "above": 0.5,
    "declaration": 0.5
  },
  "in the above": {
    "example": 1.0
  },
  "the above example": {
    "somelocalproc": 0.5,
    "requires": 0.5
  },
  "above example somelocalproc": {
    "is": 1.0
  },
  "example somelocalproc is": {
    "a": 1.0
  },
  "somelocalproc is a": {
    "friend": 1.0
  },
  "is a friend": {
    "of": 1.0
  },
  "friend of oneclass": {
    "because": 1.0
  },
  "of oneclass because": {
    "it": 1.0
  },
  "oneclass because it": {
    "is": 1.0
  },
  "it is defined": {
    "in": 1.0
  },
  "is defined in": {
    "the": 1.0
  },
  "code module as": {
    "the": 1.0
  },
  "module as the": {
    "methods": 0.5,
    "declaring": 0.5
  },
  "as the methods": {
    "that": 1.0
  },
  "methods that belong": {
    "to": 1.0
  },
  "belong to oneclass": {
    "which": 1.0
  },
  "to oneclass which": {
    "gives": 1.0
  },
  "oneclass which gives": {
    "it": 1.0
  },
  "which gives it": {
    "access": 1.0
  },
  "gives it access": {
    "to": 1.0
  },
  "it access to": {
    "the": 1.0
  },
  "access to the": {
    "private": 0.14285714285714285,
    "procedure": 0.14285714285714285,
    "files": 0.14285714285714285,
    "user": 0.14285714285714285,
    "file": 0.14285714285714285,
    "record": 0.2857142857142857
  },
  "to the private": {
    "data": 1.0
  },
  "the private data": {
    "members": 1.0
  },
  "private data members": {
    "passing": 0.5,
    "and": 0.5
  },
  "data members passing": {
    "the": 1.0
  },
  "members passing the": {
    "c": 1.0
  },
  "passing the c": {
    "urrent": 1.0
  },
  "the c urrent": {
    "object": 1.0
  },
  "c urrent object": {
    "to": 1.0
  },
  "urrent object to": {
    "somelocalproc": 1.0
  },
  "object to somelocalproc": {
    "enables": 1.0
  },
  "to somelocalproc enables": {
    "it": 1.0
  },
  "somelocalproc enables it": {
    "to": 1.0
  },
  "enables it to": {
    "directly": 1.0
  },
  "it to directly": {
    "address": 1.0
  },
  "to directly address": {
    "the": 1.0
  },
  "directly address the": {
    "private": 1.0
  },
  "address the private": {
    "properties": 1.0
  },
  "current object the": {
    "current": 1.0
  },
  "object the current": {
    "instance": 1.0
  },
  "the class protected": {
    "the": 1.0
  },
  "class protected the": {
    "protected": 1.0
  },
  "protected the protected": {
    "attribute": 1.0
  },
  "protected attribute specifies": {
    "that": 1.0
  },
  "structure and the": {
    "methods": 1.0
  },
  "methods of any": {
    "class": 1.0
  },
  "of any class": {
    "derived": 1.0
  },
  "class this only": {
    "encapsul": 1.0
  },
  "this only encapsul": {
    "ates": 1.0
  },
  "only encapsul ates": {
    "the": 1.0
  },
  "encapsul ates the": {
    "data": 1.0
  },
  "ates the data": {
    "or": 1.0
  },
  "the data or": {
    "method": 1.0
  },
  "data or method": {
    "from": 0.5,
    "s": 0.5
  },
  "or method from": {
    "other": 1.0
  },
  "method from other": {
    "classes": 1.0
  },
  "other classes not": {
    "derived": 1.0
  },
  "classes not derived": {
    "from": 1.0
  },
  "not derived from": {
    "the": 1.0
  },
  "from the class": {
    "in": 1.0
  },
  "it was declared": {
    "or": 1.0
  },
  "was declared or": {
    "any": 1.0
  },
  "or any other": {
    "non": 1.0
  },
  "any other non": {
    "class": 1.0
  },
  "other non class": {
    "code": 1.0
  },
  "non class code": {
    "the": 1.0
  },
  "class code the": {
    "purpose": 1.0
  },
  "code the purpose": {
    "of": 1.0
  },
  "the purpose of": {
    "the": 1.0
  },
  "purpose of the": {
    "protected": 0.3333333333333333,
    "relational": 0.3333333333333333,
    "foreign": 0.3333333333333333
  },
  "of the protected": {
    "attribute": 1.0
  },
  "attribute is to": {
    "provide": 0.5,
    "allow": 0.5
  },
  "is to provide": {
    "a": 1.0
  },
  "to provide a": {
    "level": 1.0
  },
  "provide a level": {
    "of": 1.0
  },
  "a level of": {
    "encapsulation": 1.0
  },
  "level of encapsulation": {
    "between": 1.0
  },
  "of encapsulation between": {
    "public": 1.0
  },
  "encapsulation between public": {
    "and": 1.0
  },
  "between public and": {
    "private": 1.0
  },
  "and private protected": {
    "data": 1.0
  },
  "private protected data": {
    "or": 1.0
  },
  "protected data or": {
    "method": 1.0
  },
  "or method s": {
    "are": 1.0
  },
  "method s are": {
    "available": 1.0
  },
  "s are available": {
    "for": 1.0
  },
  "are available for": {
    "use": 1.0
  },
  "for use within": {
    "their": 0.5,
    "the": 0.5
  },
  "use within their": {
    "own": 1.0
  },
  "within their own": {
    "class": 1.0
  },
  "their own class": {
    "and": 1.0
  },
  "own class and": {
    "derived": 1.0
  },
  "classes but not": {
    "available": 1.0
  },
  "but not available": {
    "to": 1.0
  },
  "not available to": {
    "any": 1.0
  },
  "any code outside": {
    "those": 1.0
  },
  "code outside those": {
    "specific": 1.0
  },
  "outside those specific": {
    "classes": 1.0
  },
  "those specific classes": {
    "31": 1.0
  },
  "specific classes 31": {
    "object": 1.0
  },
  "classes 31 object": {
    "oriented": 1.0
  },
  "31 object oriented": {
    "programming": 1.0
  },
  "oriented programming derived": {
    "classes": 1.0
  },
  "programming derived classes": {
    "inheritance": 1.0
  },
  "classes inheritance clarion": {
    "supports": 1.0
  },
  "inheritance clarion supports": {
    "inheritance": 1.0
  },
  "clarion supports inheritance": {
    "one": 1.0
  },
  "supports inheritance one": {
    "class": 1.0
  },
  "inheritance one class": {
    "declaration": 1.0
  },
  "one class declaration": {
    "can": 1.0
  },
  "class declaration can": {
    "be": 1.0
  },
  "declaration can be": {
    "built": 1.0
  },
  "can be built": {
    "on": 1.0
  },
  "be built on": {
    "the": 1.0
  },
  "built on the": {
    "foundat": 1.0
  },
  "on the foundat": {
    "ion": 1.0
  },
  "the foundat ion": {
    "of": 1.0
  },
  "foundat ion of": {
    "another": 1.0
  },
  "ion of another": {
    "class": 1.0
  },
  "another class s": {
    "properties": 1.0
  },
  "class s properties": {
    "and": 1.0
  },
  "s properties and": {
    "methods": 1.0
  },
  "and methods the": {
    "class": 1.0
  },
  "methods the class": {
    "from": 1.0
  },
  "from which a": {
    "class": 1.0
  },
  "a class is": {
    "derived": 1.0
  },
  "class is derived": {
    "is": 0.5,
    "contain": 0.5
  },
  "is derived is": {
    "generally": 1.0
  },
  "derived is generally": {
    "referred": 1.0
  },
  "is generally referred": {
    "to": 1.0
  },
  "generally referred to": {
    "as": 1.0
  },
  "to as its": {
    "base": 1.0
  },
  "as its base": {
    "class": 1.0
  },
  "base class the": {
    "derived": 1.0
  },
  "class structure inherits": {
    "all": 1.0
  },
  "structure inherits all": {
    "the": 1.0
  },
  "the public and": {
    "protected": 1.0
  },
  "public and protected": {
    "data": 1.0
  },
  "and protected data": {
    "members": 1.0
  },
  "protected data members": {
    "and": 1.0
  },
  "data members and": {
    "methods": 1.0
  },
  "members and methods": {
    "of": 0.25,
    "this": 0.25,
    "are": 0.25,
    "appropriate": 0.25
  },
  "of the base": {
    "class": 1.0
  },
  "base class as": {
    "a": 1.0
  },
  "class as a": {
    "starting": 1.0
  },
  "as a starting": {
    "po": 1.0
  },
  "a starting po": {
    "int": 1.0
  },
  "starting po int": {
    "but": 1.0
  },
  "po int but": {
    "not": 1.0
  },
  "int but not": {
    "the": 1.0
  },
  "but not the": {
    "private": 1.0
  },
  "not the private": {
    "data": 1.0
  },
  "and methods this": {
    "means": 1.0
  },
  "means the inherited": {
    "data": 1.0
  },
  "the inherited data": {
    "members": 1.0
  },
  "inherited data members": {
    "and": 1.0
  },
  "methods are visible": {
    "and": 1.0
  },
  "use within the": {
    "methods": 1.0
  },
  "the methods declared": {
    "within": 1.0
  },
  "declared within the": {
    "derived": 1.0
  },
  "within the derived": {
    "class": 1.0
  },
  "example declares one": {
    "class": 1.0
  },
  "declares one class": {
    "structure": 1.0
  },
  "one class structure": {
    "derived": 1.0
  },
  "class structure derived": {
    "from": 1.0
  },
  "structure derived from": {
    "a": 1.0
  },
  "from a nother": {
    "someclass": 1.0
  },
  "a nother someclass": {
    "class": 1.0
  },
  "nother someclass class": {
    "declare": 1.0
  },
  "someclass class declare": {
    "a": 1.0
  },
  "class declare a": {
    "base": 1.0
  },
  "declare a base": {
    "class": 1.0
  },
  "base class propertya": {
    "long": 1.0
  },
  "procedure end anotherclass": {
    "class": 1.0
  },
  "end anotherclass class": {
    "someclass": 0.8333333333333334,
    "type": 0.16666666666666666
  },
  "anotherclass class someclass": {
    "derived": 0.3333333333333333,
    "propertyc": 0.16666666666666666,
    "manipulateaandb": 0.16666666666666666,
    "type": 0.16666666666666666,
    "declare": 0.16666666666666666
  },
  "class someclass derived": {
    "from": 0.5,
    "class": 0.5
  },
  "someclass derived from": {
    "someclass": 1.0
  },
  "derived from someclass": {
    "propertyc": 0.5,
    "its": 0.5
  },
  "from someclass propertyc": {
    "long": 1.0
  },
  "someclass propertyc long": {
    "manipulateandc": 0.5,
    "manipulateaandb": 0.5
  },
  "propertyc long manipulateandc": {
    "procedure": 1.0
  },
  "long manipulateandc procedure": {
    "end": 1.0
  },
  "manipulateandc procedure end": {
    "in": 0.3333333333333333,
    "someclass": 0.3333333333333333,
    "multiclass": 0.3333333333333333
  },
  "procedure end in": {
    "this": 1.0
  },
  "end in this": {
    "simple": 1.0
  },
  "in this simple": {
    "example": 1.0
  },
  "this simple example": {
    "anotherclass": 1.0
  },
  "simple example anotherclass": {
    "is": 1.0
  },
  "example anotherclass is": {
    "derived": 1.0
  },
  "anotherclass is derived": {
    "from": 1.0
  },
  "from someclass its": {
    "base": 1.0
  },
  "someclass its base": {
    "class": 1.0
  },
  "base class inheriting": {
    "all": 1.0
  },
  "class inheriting all": {
    "the": 1.0
  },
  "inheriting all the": {
    "properties": 1.0
  },
  "methods that exist": {
    "in": 1.0
  },
  "that exist in": {
    "someclass": 1.0
  },
  "exist in someclass": {
    "anotherclass": 0.5,
    "therefore": 0.5
  },
  "in someclass anotherclass": {
    "also": 1.0
  },
  "someclass anotherclass also": {
    "declares": 1.0
  },
  "anotherclass also declares": {
    "one": 1.0
  },
  "also declares one": {
    "new": 1.0
  },
  "declares one new": {
    "property": 1.0
  },
  "one new property": {
    "and": 1.0
  },
  "new property and": {
    "one": 1.0
  },
  "property and one": {
    "new": 1.0
  },
  "and one new": {
    "method": 1.0
  },
  "one new method": {
    "tha": 1.0
  },
  "new method tha": {
    "t": 1.0
  },
  "method tha t": {
    "don": 1.0
  },
  "tha t don": {
    "t": 1.0
  },
  "t don t": {
    "exist": 1.0
  },
  "don t exist": {
    "in": 1.0
  },
  "in someclass therefore": {
    "objects": 1.0
  },
  "someclass therefore objects": {
    "that": 1.0
  },
  "therefore objects that": {
    "belong": 1.0
  },
  "belong to someclass": {
    "have": 1.0
  },
  "to someclass have": {
    "two": 1.0
  },
  "someclass have two": {
    "properties": 1.0
  },
  "have two properties": {
    "and": 1.0
  },
  "two properties and": {
    "one": 1.0
  },
  "properties and one": {
    "method": 1.0
  },
  "and one method": {
    "while": 1.0
  },
  "one method while": {
    "objects": 1.0
  },
  "method while objects": {
    "that": 1.0
  },
  "while objects that": {
    "belong": 1.0
  },
  "belong to anotherclass": {
    "have": 1.0
  },
  "to anotherclass have": {
    "three": 1.0
  },
  "anotherclass have three": {
    "properties": 1.0
  },
  "have three properties": {
    "and": 1.0
  },
  "three properties and": {
    "two": 1.0
  },
  "properties and two": {
    "methods": 1.0
  },
  "and two methods": {
    "given": 1.0
  },
  "two methods given": {
    "the": 1.0
  },
  "methods given the": {
    "two": 1.0
  },
  "given the two": {
    "class": 1.0
  },
  "the two class": {
    "declarations": 1.0
  },
  "two class declarations": {
    "above": 1.0
  },
  "class declarations above": {
    "the": 1.0
  },
  "declarations above the": {
    "following": 1.0
  },
  "above the following": {
    "executable": 1.0
  },
  "the following executable": {
    "st": 0.5,
    "statements": 0.5
  },
  "following executable st": {
    "atements": 1.0
  },
  "executable st atements": {
    "are": 1.0
  },
  "st atements are": {
    "all": 1.0
  },
  "atements are all": {
    "valid": 1.0
  },
  "are all valid": {
    "code": 1.0
  },
  "all valid code": {
    "someclass": 1.0
  },
  "valid code someclass": {
    "propertya": 1.0
  },
  "code someclass propertya": {
    "10": 1.0
  },
  "someclass propertya 10": {
    "assign": 1.0
  },
  "propertya 10 assign": {
    "values": 1.0
  },
  "10 assign values": {
    "to": 1.0
  },
  "assign values to": {
    "the": 1.0
  },
  "values to the": {
    "properties": 0.6666666666666666,
    "foreign": 0.3333333333333333
  },
  "the properties someclass": {
    "propertyb": 1.0
  },
  "properties someclass propertyb": {
    "10": 1.0
  },
  "someclass propertyb 10": {
    "someclass": 1.0
  },
  "propertyb 10 someclass": {
    "manipulateaandb": 1.0
  },
  "10 someclass manipulateaandb": {
    "call": 1.0
  },
  "someclass manipulateaandb call": {
    "the": 1.0
  },
  "manipulateaandb call the": {
    "object": 0.6666666666666666,
    "parent": 0.3333333333333333
  },
  "call the object": {
    "s": 1.0
  },
  "object s method": {
    "anotherclass": 1.0
  },
  "s method anotherclass": {
    "propertya": 1.0
  },
  "method anotherclass propertya": {
    "10": 1.0
  },
  "anotherclass propertya 10": {
    "assign": 1.0
  },
  "the properties anotherclass": {
    "propertyb": 1.0
  },
  "properties anotherclass propertyb": {
    "10": 1.0
  },
  "anotherclass propertyb 10": {
    "anotherclass": 1.0
  },
  "propertyb 10 anotherclass": {
    "propertyc": 1.0
  },
  "10 anotherclass propertyc": {
    "10": 1.0
  },
  "anotherclass propertyc 10": {
    "anotherclass": 1.0
  },
  "propertyc 10 anotherclass": {
    "manipulateaandb": 1.0
  },
  "10 anotherclass manipulateaandb": {
    "call": 0.5,
    "anotherclass": 0.5
  },
  "anotherclass manipulateaandb call": {
    "the": 1.0
  },
  "object s methods": {
    "anotherclass": 1.0
  },
  "s methods anotherclass": {
    "manipulateandc": 1.0
  },
  "methods anotherclass manipulateandc": {
    "also": 1.0
  },
  "anotherclass manipulateandc also": {
    "given": 1.0
  },
  "manipulateandc also given": {
    "the": 1.0
  },
  "also given the": {
    "declarations": 1.0
  },
  "given the declarations": {
    "above": 1.0
  },
  "the declarations above": {
    "the": 1.0
  },
  "following executable statements": {
    "are": 1.0
  },
  "executable statements are": {
    "not": 1.0
  },
  "statements are not": {
    "valid": 1.0
  },
  "are not valid": {
    "someclass": 1.0
  },
  "not valid someclass": {
    "propertyc": 1.0
  },
  "valid someclass propertyc": {
    "10": 1.0
  },
  "someclass propertyc 10": {
    "invalid": 1.0
  },
  "propertyc 10 invalid": {
    "object": 1.0
  },
  "10 invalid object": {
    "does": 1.0
  },
  "invalid object does": {
    "not": 1.0
  },
  "object does not": {
    "have": 1.0
  },
  "does not have": {
    "this": 1.0
  },
  "not have this": {
    "property": 0.5,
    "method": 0.5
  },
  "have this property": {
    "someclass": 1.0
  },
  "this property someclass": {
    "manipulateandc": 1.0
  },
  "property someclass manipulateandc": {
    "invalid": 1.0
  },
  "someclass manipulateandc invalid": {
    "object": 1.0
  },
  "manipulateandc invalid object": {
    "does": 1.0
  },
  "have this method": {
    "these": 1.0
  },
  "this method these": {
    "statements": 1.0
  },
  "method these statements": {
    "are": 1.0
  },
  "these statements are": {
    "invalid": 1.0
  },
  "statements are invalid": {
    "because": 1.0
  },
  "are invalid because": {
    "although": 1.0
  },
  "invalid because although": {
    "the": 1.0
  },
  "because although the": {
    "derived": 1.0
  },
  "although the derived": {
    "object": 1.0
  },
  "the derived object": {
    "contains": 1.0
  },
  "derived object contains": {
    "all": 1.0
  },
  "object contains all": {
    "the": 1.0
  },
  "contains all the": {
    "properties": 0.25,
    "customer": 0.25,
    "information": 0.5
  },
  "properties and metho": {
    "ds": 1.0
  },
  "and metho ds": {
    "of": 1.0
  },
  "metho ds of": {
    "the": 1.0
  },
  "ds of the": {
    "class": 1.0
  },
  "is derived the": {
    "reverse": 1.0
  },
  "derived the reverse": {
    "is": 1.0
  },
  "the reverse is": {
    "not": 1.0
  },
  "reverse is not": {
    "true": 1.0
  },
  "is not true": {
    "inheritance": 1.0
  },
  "not true inheritance": {
    "is": 1.0
  },
  "true inheritance is": {
    "one": 1.0
  },
  "inheritance is one": {
    "way": 1.0
  },
  "one way there": {
    "is": 1.0
  },
  "way there is": {
    "a": 1.0
  },
  "is a mechanism": {
    "that": 1.0
  },
  "a mechanism that": {
    "gets": 1.0
  },
  "mechanism that gets": {
    "around": 1.0
  },
  "that gets around": {
    "this": 1.0
  },
  "gets around this": {
    "and": 1.0
  },
  "around this and": {
    "allows": 1.0
  },
  "this and allows": {
    "base": 1.0
  },
  "and allows base": {
    "class": 1.0
  },
  "allows base class": {
    "methods": 1.0
  },
  "to call derived": {
    "class": 1.0
  },
  "call derived class": {
    "methods": 1.0
  },
  "class methods virtual": {
    "methods": 1.0
  },
  "methods virtual methods": {
    "that": 1.0
  },
  "virtual methods that": {
    "we": 1.0
  },
  "methods that we": {
    "will": 1.0
  },
  "to later clarion": {
    "language": 1.0
  },
  "later clarion language": {
    "programming": 1.0
  },
  "programming guide 32": {
    "overriding": 1.0
  },
  "guide 32 overriding": {
    "inherited": 1.0
  },
  "32 overriding inherited": {
    "methods": 1.0
  },
  "inherited methods there": {
    "are": 1.0
  },
  "there are circumstances": {
    "where": 1.0
  },
  "are circumstances where": {
    "a": 1.0
  },
  "circumstances where a": {
    "derived": 1.0
  },
  "where a derived": {
    "class": 1.0
  },
  "derived class may": {
    "need": 0.5,
    "explicitly": 0.5
  },
  "class may need": {
    "to": 1.0
  },
  "may need to": {
    "override": 0.5,
    "write": 0.5
  },
  "need to override": {
    "an": 1.0
  },
  "to override an": {
    "inherited": 1.0
  },
  "override an inherited": {
    "method": 1.0
  },
  "inherited method to": {
    "provide": 1.0
  },
  "method to provide": {
    "the": 1.0
  },
  "to provide the": {
    "explicit": 1.0
  },
  "provide the explicit": {
    "functionality": 1.0
  },
  "the explicit functionality": {
    "required": 1.0
  },
  "explicit functionality required": {
    "for": 1.0
  },
  "functionality required for": {
    "that": 1.0
  },
  "required for that": {
    "specific": 1.0
  },
  "for that specific": {
    "class": 1.0
  },
  "that specific class": {
    "of": 1.0
  },
  "specific class of": {
    "object": 1.0
  },
  "class of object": {
    "this": 1.0
  },
  "of object this": {
    "is": 1.0
  },
  "this is simple": {
    "to": 1.0
  },
  "is simple to": {
    "accomplish": 1.0
  },
  "simple to accomplish": {
    "in": 1.0
  },
  "to accomplish in": {
    "clarion": 1.0
  },
  "accomplish in clarion": {
    "just": 1.0
  },
  "in clarion just": {
    "re": 1.0
  },
  "clarion just re": {
    "declare": 1.0
  },
  "just re declare": {
    "the": 1.0
  },
  "re declare the": {
    "method": 0.3333333333333333,
    "virtual": 0.6666666666666666
  },
  "declare the method": {
    "in": 1.0
  },
  "class with exactly": {
    "the": 1.0
  },
  "with exactly the": {
    "same": 1.0
  },
  "the same parameter": {
    "list": 1.0
  },
  "same parameter list": {
    "then": 1.0
  },
  "parameter list then": {
    "re": 1.0
  },
  "list then re": {
    "define": 1.0
  },
  "then re define": {
    "the": 1.0
  },
  "re define the": {
    "method": 1.0
  },
  "define the method": {
    "in": 1.0
  },
  "class for the": {
    "new": 1.0
  },
  "for the new": {
    "functionality": 1.0
  },
  "the new functionality": {
    "this": 1.0
  },
  "new functionality this": {
    "example": 1.0
  },
  "functionality this example": {
    "overrides": 1.0
  },
  "this example overrides": {
    "an": 1.0
  },
  "example overrides an": {
    "inherited": 1.0
  },
  "overrides an inherited": {
    "method": 1.0
  },
  "inherited method someclass": {
    "class": 1.0
  },
  "method someclass class": {
    "propertya": 1.0
  },
  "someclass class propertya": {
    "long": 1.0
  },
  "class someclass propertyc": {
    "long": 1.0
  },
  "propertyc long manipulateaandb": {
    "procedure": 1.0
  },
  "manipulateaandb procedure override": {
    "the": 1.0
  },
  "procedure override the": {
    "inherited": 1.0
  },
  "override the inherited": {
    "method": 1.0
  },
  "the inherited method": {
    "manipulateandc": 0.3333333333333333,
    "doubleproduct": 0.3333333333333333,
    "unless": 0.3333333333333333
  },
  "inherited method manipulateandc": {
    "procedure": 1.0
  },
  "method manipulateandc procedure": {
    "end": 1.0
  },
  "procedure end someclass": {
    "manipula": 0.5,
    "manipulateaandb": 0.5
  },
  "end someclass manipula": {
    "teaandb": 1.0
  },
  "someclass manipula teaandb": {
    "procedure": 1.0
  },
  "manipula teaandb procedure": {
    "product": 1.0
  },
  "teaandb procedure product": {
    "long": 1.0
  },
  "procedure product long": {
    "code": 1.0
  },
  "product long code": {
    "product": 1.0
  },
  "long code product": {
    "self": 1.0
  },
  "code product self": {
    "propertya": 1.0
  },
  "product self propertya": {
    "self": 1.0
  },
  "self propertya self": {
    "propertyb": 0.875,
    "propertyc": 0.125
  },
  "propertya self propertyb": {
    "message": 0.2857142857142857,
    "2": 0.2857142857142857,
    "differentclass": 0.14285714285714285,
    "in": 0.14285714285714285,
    "localvar": 0.14285714285714285
  },
  "self propertyb message": {
    "product": 1.0
  },
  "propertyb message product": {
    "of": 1.0
  },
  "message product of": {
    "a": 1.0
  },
  "product of a": {
    "b": 0.8571428571428571,
    "c": 0.14285714285714285
  },
  "of a b": {
    "is": 0.8571428571428571,
    "localvar": 0.14285714285714285
  },
  "a b is": {
    "product": 0.3333333333333333,
    "doubleproduct": 0.3333333333333333,
    "self": 0.3333333333333333
  },
  "b is product": {
    "anotherclass": 1.0
  },
  "is product anotherclass": {
    "manipulateaandb": 1.0
  },
  "product anotherclass manipulateaandb": {
    "procedure": 1.0
  },
  "anotherclass manipulateaandb procedure": {
    "override": 0.25,
    "doubleproduct": 0.25,
    "virtual": 0.5
  },
  "inherited method doubleproduct": {
    "long": 1.0
  },
  "method doubleproduct long": {
    "code": 1.0
  },
  "doubleproduct long code": {
    "doubleproduct": 0.6666666666666666,
    "parent": 0.3333333333333333
  },
  "long code doubleproduct": {
    "self": 1.0
  },
  "code doubleproduct self": {
    "propertya": 1.0
  },
  "doubleproduct self propertya": {
    "self": 1.0
  },
  "self propertyb 2": {
    "message": 1.0
  },
  "propertyb 2 message": {
    "double": 1.0
  },
  "2 message double": {
    "the": 1.0
  },
  "message double the": {
    "product": 1.0
  },
  "double the product": {
    "of": 1.0
  },
  "the product of": {
    "a": 1.0
  },
  "b is doubleproduct": {
    "anotherclass": 0.5,
    "for": 0.5
  },
  "is doubleproduct anotherclass": {
    "manipulateandc": 1.0
  },
  "doubleproduct anotherclass manipulateandc": {
    "procedure": 1.0
  },
  "anotherclass manipulateandc procedure": {
    "doubleproduct": 1.0
  },
  "manipulateandc procedure doubleproduct": {
    "long": 1.0
  },
  "procedure doubleproduct long": {
    "code": 1.0
  },
  "propertya self propertyc": {
    "2": 1.0
  },
  "self propertyc 2": {
    "message": 1.0
  },
  "propertyc 2 message": {
    "double": 1.0
  },
  "of a c": {
    "is": 1.0
  },
  "a c is": {
    "doubleproduct": 1.0
  },
  "c is doubleproduct": {
    "in": 1.0
  },
  "is doubleproduct in": {
    "this": 1.0
  },
  "doubleproduct in this": {
    "example": 1.0
  },
  "this example anotherclass": {
    "overrides": 1.0
  },
  "example anotherclass overrides": {
    "the": 1.0
  },
  "anotherclass overrides the": {
    "manipulateaandb": 1.0
  },
  "overrides the manipulateaandb": {
    "method": 1.0
  },
  "the manipulateaandb method": {
    "with": 0.5,
    "is": 0.5
  },
  "manipulateaandb method with": {
    "its": 1.0
  },
  "method with its": {
    "own": 1.0
  },
  "with its own": {
    "version": 0.5,
    "set": 0.5
  },
  "its own version": {
    "containing": 1.0
  },
  "own version containing": {
    "a": 1.0
  },
  "version containing a": {
    "slightly": 1.0
  },
  "containing a slightly": {
    "different": 1.0
  },
  "a slightly different": {
    "algorithm": 1.0
  },
  "slightly different algorithm": {
    "notice": 1.0
  },
  "different algorithm notice": {
    "that": 1.0
  },
  "algorithm notice that": {
    "the": 1.0
  },
  "the parameter lists": {
    "are": 0.3333333333333333,
    "must": 0.3333333333333333,
    "of": 0.3333333333333333
  },
  "parameter lists are": {
    "the": 1.0
  },
  "lists are the": {
    "same": 1.0
  },
  "are the same": {
    "neither": 0.5,
    "allow": 0.5
  },
  "the same neither": {
    "method": 1.0
  },
  "same neither method": {
    "receives": 1.0
  },
  "neither method receives": {
    "parameters": 1.0
  },
  "method receives parameters": {
    "this": 1.0
  },
  "receives parameters this": {
    "is": 1.0
  },
  "parameters this is": {
    "the": 1.0
  },
  "is the key": {
    "to": 1.0
  },
  "key to overriding": {
    "methods": 1.0
  },
  "to overriding methods": {
    "in": 1.0
  },
  "derived classes the": {
    "parameter": 1.0
  },
  "classes the parameter": {
    "lists": 1.0
  },
  "parameter lists must": {
    "be": 1.0
  },
  "lists must be": {
    "the": 1.0
  },
  "must be the": {
    "same": 1.0
  },
  "be the same": {
    "if": 1.0
  },
  "the same if": {
    "the": 1.0
  },
  "same if the": {
    "parameter": 1.0
  },
  "if the parameter": {
    "lists": 1.0
  },
  "parameter lists of": {
    "the": 1.0
  },
  "lists of the": {
    "two": 1.0
  },
  "of the two": {
    "manipulateaandb": 1.0
  },
  "the two manipulateaandb": {
    "methods": 1.0
  },
  "two manipulateaandb methods": {
    "in": 1.0
  },
  "manipulateaandb methods in": {
    "this": 1.0
  },
  "methods in this": {
    "example": 1.0
  },
  "this example were": {
    "different": 1.0
  },
  "example were different": {
    "then": 1.0
  },
  "were different then": {
    "you": 1.0
  },
  "different then you": {
    "would": 1.0
  },
  "then you would": {
    "have": 1.0
  },
  "you would have": {
    "procedure": 1.0
  },
  "would have procedure": {
    "overloading": 1.0
  },
  "have procedure overloading": {
    "in": 1.0
  },
  "procedure overloading in": {
    "anotherclass": 1.0
  },
  "overloading in anotherclass": {
    "that": 1.0
  },
  "in anotherclass that": {
    "is": 1.0
  },
  "anotherclass that is": {
    "anotherclass": 1.0
  },
  "that is anotherclass": {
    "would": 1.0
  },
  "is anotherclass would": {
    "actually": 1.0
  },
  "anotherclass would actually": {
    "contain": 1.0
  },
  "would actually contain": {
    "two": 1.0
  },
  "actually contain two": {
    "methods": 1.0
  },
  "contain two methods": {
    "named": 1.0
  },
  "two methods named": {
    "manipulateaandb": 1.0
  },
  "methods named manipulateaandb": {
    "and": 1.0
  },
  "named manipulateaandb and": {
    "the": 1.0
  },
  "manipulateaandb and the": {
    "compiler": 1.0
  },
  "the compiler would": {
    "have": 1.0
  },
  "compiler would have": {
    "to": 1.0
  },
  "would have to": {
    "resolve": 0.3333333333333333,
    "be": 0.6666666666666666
  },
  "have to resolve": {
    "which": 1.0
  },
  "to resolve which": {
    "one": 1.0
  },
  "resolve which one": {
    "to": 1.0
  },
  "which one to": {
    "call": 1.0
  },
  "one to call": {
    "by": 1.0
  },
  "to call by": {
    "means": 1.0
  },
  "call by means": {
    "of": 1.0
  },
  "by means of": {
    "the": 1.0
  },
  "means of the": {
    "differing": 1.0
  },
  "of the differing": {
    "parameters": 1.0
  },
  "the differing parameters": {
    "see": 1.0
  },
  "differing parameters see": {
    "function": 1.0
  },
  "parameters see function": {
    "overloading": 1.0
  },
  "see function overloading": {
    "in": 1.0
  },
  "function overloading in": {
    "the": 1.0
  },
  "overloading in the": {
    "language": 1.0
  },
  "for a full": {
    "discussion": 1.0
  },
  "a full discussion": {
    "of": 1.0
  },
  "full discussion of": {
    "this": 1.0
  },
  "of this technique": {
    "simply": 1.0
  },
  "this technique simply": {
    "overriding": 1.0
  },
  "technique simply overriding": {
    "a": 1.0
  },
  "simply overriding a": {
    "method": 1.0
  },
  "overriding a method": {
    "in": 1.0
  },
  "derived class does": {
    "not": 1.0
  },
  "class does not": {
    "automatically": 0.5,
    "override": 0.5
  },
  "does not automatically": {
    "mean": 0.5,
    "call": 0.5
  },
  "not automatically mean": {
    "you": 1.0
  },
  "automatically mean you": {
    "cannot": 1.0
  },
  "mean you cannot": {
    "also": 1.0
  },
  "you cannot also": {
    "call": 1.0
  },
  "cannot also call": {
    "the": 1.0
  },
  "also call the": {
    "base": 1.0
  },
  "call the base": {
    "class": 1.0
  },
  "class method from": {
    "within": 0.5,
    "the": 0.5
  },
  "method from within": {
    "derived": 1.0
  },
  "from within derived": {
    "class": 1.0
  },
  "within derived class": {
    "methods": 1.0
  },
  "class methods prepending": {
    "parent": 1.0
  },
  "methods prepending parent": {
    "to": 1.0
  },
  "method call like": {
    "self": 1.0
  },
  "call like self": {
    "allows": 1.0
  },
  "like self allows": {
    "a": 1.0
  },
  "self allows a": {
    "derived": 1.0
  },
  "allows a derived": {
    "class": 1.0
  },
  "derived class to": {
    "explicitly": 0.5,
    "call": 0.5
  },
  "class to explicitly": {
    "call": 1.0
  },
  "to explicitly call": {
    "base": 1.0
  },
  "explicitly call base": {
    "class": 1.0
  },
  "call base class": {
    "methods": 0.5,
    "method": 0.5
  },
  "class methods parent": {
    "methodname": 1.0
  },
  "methods parent methodname": {
    "this": 1.0
  },
  "parent methodname this": {
    "allows": 1.0
  },
  "methodname this allows": {
    "you": 1.0
  },
  "you to incrementally": {
    "override": 0.5,
    "customize": 0.5
  },
  "to incrementally override": {
    "methods": 1.0
  },
  "incrementally override methods": {
    "without": 1.0
  },
  "override methods without": {
    "requiring": 1.0
  },
  "methods without requiring": {
    "that": 1.0
  },
  "without requiring that": {
    "you": 1.0
  },
  "requiring that you": {
    "duplicate": 1.0
  },
  "that you duplicate": {
    "the": 1.0
  },
  "you duplicate the": {
    "base": 1.0
  },
  "duplicate the base": {
    "class": 1.0
  },
  "class code in": {
    "the": 1.0
  },
  "code in the": {
    "derived": 0.5,
    "case": 0.5
  },
  "method that overrides": {
    "it": 1.0
  },
  "that overrides it": {
    "assuming": 1.0
  },
  "overrides it assuming": {
    "you": 1.0
  },
  "it assuming you": {
    "still": 1.0
  },
  "assuming you still": {
    "need": 1.0
  },
  "you still need": {
    "the": 1.0
  },
  "still need the": {
    "base": 1.0
  },
  "need the base": {
    "class": 1.0
  },
  "class method s": {
    "functionality": 0.5,
    "code": 0.5
  },
  "method s functionality": {
    "33": 1.0
  },
  "s functionality 33": {
    "object": 1.0
  },
  "functionality 33 object": {
    "oriented": 1.0
  },
  "33 object oriented": {
    "programming": 1.0
  },
  "oriented programming this": {
    "e": 1.0
  },
  "programming this e": {
    "xample": 1.0
  },
  "this e xample": {
    "overrides": 1.0
  },
  "e xample overrides": {
    "an": 1.0
  },
  "xample overrides an": {
    "inherited": 1.0
  },
  "inherited method and": {
    "calls": 1.0
  },
  "method and calls": {
    "the": 1.0
  },
  "and calls the": {
    "base": 1.0
  },
  "calls the base": {
    "class": 1.0
  },
  "method from the": {
    "derived": 1.0
  },
  "from the derived": {
    "class": 1.0
  },
  "derived class someclass": {
    "class": 1.0
  },
  "class someclass class": {
    "propertya": 1.0
  },
  "class someclass manipulateaandb": {
    "procedure": 1.0
  },
  "end someclass manipulateaandb": {
    "procedure": 1.0
  },
  "manipulateaandb procedure product": {
    "long": 1.0
  },
  "manipulateaandb procedure doubleproduct": {
    "long": 1.0
  },
  "long code parent": {
    "manipulateaandb": 1.0
  },
  "code parent manipulateaandb": {
    "call": 1.0
  },
  "parent manipulateaandb call": {
    "the": 1.0
  },
  "call the parent": {
    "method": 1.0
  },
  "the parent method": {
    "first": 1.0
  },
  "parent method first": {
    "doubleproduct": 1.0
  },
  "method first doubleproduct": {
    "self": 1.0
  },
  "first doubleproduct self": {
    "propertya": 1.0
  },
  "is doubleproduct for": {
    "constructor": 1.0
  },
  "doubleproduct for constructor": {
    "and": 1.0
  },
  "for constructor and": {
    "destructor": 1.0
  },
  "and destructor method": {
    "s": 1.0
  },
  "method s simply": {
    "re": 1.0
  },
  "s simply re": {
    "declaring": 1.0
  },
  "simply re declaring": {
    "the": 1.0
  },
  "re declaring the": {
    "construct": 1.0
  },
  "declaring the construct": {
    "or": 1.0
  },
  "the construct or": {
    "destruct": 1.0
  },
  "destruct method in": {
    "the": 1.0
  },
  "does not override": {
    "the": 1.0
  },
  "not override the": {
    "inherited": 1.0
  },
  "inherited method unless": {
    "the": 1.0
  },
  "method unless the": {
    "replace": 1.0
  },
  "unless the replace": {
    "attribute": 1.0
  },
  "replace attribute is": {
    "specified": 1.0
  },
  "attribute is specified": {
    "on": 1.0
  },
  "is specified on": {
    "the": 1.0
  },
  "specified on the": {
    "method": 0.5,
    "join": 0.5
  },
  "on the method": {
    "prototype": 0.5,
    "s": 0.5
  },
  "the method prototype": {
    "without": 1.0
  },
  "method prototype without": {
    "the": 1.0
  },
  "prototype without the": {
    "replace": 1.0
  },
  "without the replace": {
    "attribute": 1.0
  },
  "replace attribute a": {
    "derived": 1.0
  },
  "attribute a derived": {
    "class": 1.0
  },
  "derived class constructor": {
    "automatically": 0.25,
    "executes": 0.25,
    "dispose": 0.25,
    "mystring": 0.25
  },
  "class constructor automatically": {
    "calls": 1.0
  },
  "constructor automatically calls": {
    "the": 1.0
  },
  "automatically calls the": {
    "base": 1.0
  },
  "base class constructor": {
    "first": 0.5,
    "code": 0.5
  },
  "class constructor first": {
    "before": 1.0
  },
  "constructor first before": {
    "the": 1.0
  },
  "first before the": {
    "derived": 1.0
  },
  "before the derived": {
    "class": 1.0
  },
  "constructor executes and": {
    "a": 1.0
  },
  "executes and a": {
    "derived": 1.0
  },
  "and a derived": {
    "class": 1.0
  },
  "destructor automatically calls": {
    "the": 1.0
  },
  "class destructor last": {
    "after": 1.0
  },
  "destructor last after": {
    "the": 1.0
  },
  "last after the": {
    "derived": 1.0
  },
  "after the derived": {
    "class": 1.0
  },
  "destructor executes if": {
    "the": 1.0
  },
  "executes if the": {
    "replace": 0.5,
    "lock": 0.5
  },
  "if the replace": {
    "attribu": 1.0
  },
  "the replace attribu": {
    "te": 1.0
  },
  "replace attribu te": {
    "is": 1.0
  },
  "attribu te is": {
    "present": 1.0
  },
  "te is present": {
    "on": 1.0
  },
  "is present on": {
    "the": 1.0
  },
  "present on the": {
    "construct": 1.0
  },
  "on the construct": {
    "or": 1.0
  },
  "destruct method s": {
    "prototype": 1.0
  },
  "prototype then the": {
    "derived": 1.0
  },
  "class method does": {
    "not": 0.3333333333333333,
    "code": 0.3333333333333333,
    "nothing": 0.3333333333333333
  },
  "not automatically call": {
    "the": 1.0
  },
  "automatically call the": {
    "base": 1.0
  },
  "class method however": {
    "the": 1.0
  },
  "method however the": {
    "base": 1.0
  },
  "however the base": {
    "class": 1.0
  },
  "method can be": {
    "called": 1.0
  },
  "can be called": {
    "from": 1.0
  },
  "be called from": {
    "within": 1.0
  },
  "called from within": {
    "the": 1.0
  },
  "from within the": {
    "derived": 1.0
  },
  "s code by": {
    "explicitly": 1.0
  },
  "code by explicitly": {
    "calling": 1.0
  },
  "by explicitly calling": {
    "p": 1.0
  },
  "explicitly calling p": {
    "arent": 1.0
  },
  "calling p arent": {
    "construct": 1.0
  },
  "p arent construct": {
    "or": 1.0
  },
  "arent construct or": {
    "parent": 1.0
  },
  "parent destruct this": {
    "allows": 1.0
  },
  "destruct this allows": {
    "you": 1.0
  },
  "to incrementally customize": {
    "derived": 1.0
  },
  "incrementally customize derived": {
    "class": 1.0
  },
  "customize derived class": {
    "constructors": 1.0
  },
  "class constructors or": {
    "destructors": 1.0
  },
  "or destructors without": {
    "completely": 1.0
  },
  "destructors without completely": {
    "re": 1.0
  },
  "without completely re": {
    "writing": 1.0
  },
  "completely re writing": {
    "the": 1.0
  },
  "re writing the": {
    "base": 1.0
  },
  "writing the base": {
    "class": 1.0
  },
  "class code myqueue": {
    "queue": 1.0
  },
  "code myqueue queue": {
    "type": 1.0
  },
  "queue type declare": {
    "a": 1.0
  },
  "type declare a": {
    "type": 1.0
  },
  "declare a type": {
    "of": 1.0
  },
  "of queue with": {
    "one": 1.0
  },
  "queue with one": {
    "field": 1.0
  },
  "with one field": {
    "field1": 1.0
  },
  "one field field1": {
    "string": 1.0
  },
  "field field1 string": {
    "10": 1.0
  },
  "field1 string 10": {
    "containing": 1.0
  },
  "string 10 containing": {
    "10": 1.0
  },
  "10 containing 10": {
    "bytes": 1.0
  },
  "containing 10 bytes": {
    "of": 1.0
  },
  "10 bytes of": {
    "string": 1.0
  },
  "bytes of string": {
    "data": 1.0
  },
  "of string data": {
    "end": 1.0
  },
  "string data end": {
    "someclass": 1.0
  },
  "data end someclass": {
    "class": 1.0
  },
  "class type base": {
    "class": 1.0
  },
  "type base class": {
    "objectq": 1.0
  },
  "base class objectq": {
    "myqueue": 1.0
  },
  "class objectq myqueue": {
    "construct": 1.0
  },
  "objectq myqueue construct": {
    "procedure": 1.0
  },
  "myqueue construct procedure": {
    "constructor": 1.0
  },
  "destruct procedure destr": {
    "uctor": 1.0
  },
  "procedure destr uctor": {
    "method": 1.0
  },
  "destr uctor method": {
    "end": 1.0
  },
  "uctor method end": {
    "anotherclass": 1.0
  },
  "method end anotherclass": {
    "class": 1.0
  },
  "someclass derived class": {
    "construct": 1.0
  },
  "class construct procedure": {
    "replace": 1.0
  },
  "procedure replace override": {
    "the": 1.0
  },
  "replace override the": {
    "constructor": 1.0
  },
  "the constructor end": {
    "classref": 1.0
  },
  "constructor end classref": {
    "anotherclass": 1.0
  },
  "end classref anotherclass": {
    "reference": 1.0
  },
  "classref anotherclass reference": {
    "to": 1.0
  },
  "anotherclass reference to": {
    "a": 1.0
  },
  "classref new anotherclass": {
    "create": 1.0
  },
  "new anotherclass create": {
    "a": 0.5,
    "the": 0.5
  },
  "anotherclass create a": {
    "anotherclass": 1.0
  },
  "create a anotherclass": {
    "object": 1.0
  },
  "a anotherclass object": {
    "which": 1.0
  },
  "anotherclass object which": {
    "calls": 1.0
  },
  "object which calls": {
    "the": 1.0
  },
  "calls the derived": {
    "class": 1.0
  },
  "class constructor dispose": {
    "classref": 1.0
  },
  "constructor dispose classref": {
    "destroy": 1.0
  },
  "the object which": {
    "calls": 1.0
  },
  "class destructor someclass": {
    "construct": 1.0
  },
  "destructor someclass construct": {
    "procedure": 1.0
  },
  "construct procedure base": {
    "class": 1.0
  },
  "procedure base class": {
    "constructor": 0.3333333333333333,
    "destructor": 0.3333333333333333,
    "method": 0.3333333333333333
  },
  "class constructor code": {
    "self": 1.0
  },
  "constructor code self": {
    "objectq": 1.0
  },
  "new myqueue someclass": {
    "destruct": 1.0
  },
  "myqueue someclass destruct": {
    "procedure": 1.0
  },
  "destruct procedure base": {
    "class": 1.0
  },
  "class destructor code": {
    "free": 1.0
  },
  "destructor code free": {
    "self": 1.0
  },
  "self objectq dispose": {
    "self": 1.0
  },
  "objectq dispose self": {
    "objectq": 1.0
  },
  "self objectq clarion": {
    "language": 1.0
  },
  "objectq clarion language": {
    "programming": 1.0
  },
  "programming guide 34": {
    "anotherclass": 1.0
  },
  "guide 34 anotherclass": {
    "construct": 1.0
  },
  "34 anotherclass construct": {
    "pro": 1.0
  },
  "anotherclass construct pro": {
    "cedure": 1.0
  },
  "construct pro cedure": {
    "derived": 1.0
  },
  "pro cedure derived": {
    "class": 1.0
  },
  "cedure derived class": {
    "constructor": 1.0
  },
  "class constructor mystring": {
    "string": 1.0
  },
  "constructor mystring string": {
    "10": 1.0
  },
  "mystring string 10": {
    "dim": 1.0
  },
  "string 10 dim": {
    "10": 1.0
  },
  "10 dim 10": {
    "code": 1.0
  },
  "dim 10 code": {
    "loop": 1.0
  },
  "10 code loop": {
    "x": 1.0
  },
  "code loop x": {
    "1": 1.0
  },
  "loop x 1": {
    "to": 1.0
  },
  "x 1 to": {
    "10": 0.6666666666666666,
    "maximum": 0.3333333333333333
  },
  "1 to 10": {
    "do": 0.5,
    "then": 0.5
  },
  "to 10 do": {
    "some": 1.0
  },
  "10 do some": {
    "preliminary": 1.0
  },
  "do some preliminary": {
    "work": 1.0
  },
  "some preliminary work": {
    "then": 1.0
  },
  "preliminary work then": {
    "mystring": 1.0
  },
  "work then mystring": {
    "x": 1.0
  },
  "then mystring x": {
    "entry": 1.0
  },
  "mystring x entry": {
    "format": 1.0
  },
  "x entry format": {
    "x": 1.0
  },
  "entry format x": {
    "n02": 1.0
  },
  "format x n02": {
    "end": 1.0
  },
  "x n02 end": {
    "parent": 1.0
  },
  "n02 end parent": {
    "construct": 1.0
  },
  "end parent construct": {
    "call": 1.0
  },
  "parent construct call": {
    "the": 1.0
  },
  "construct call the": {
    "base": 1.0
  },
  "base class construct": {
    "or": 1.0
  },
  "class construct or": {
    "loop": 1.0
  },
  "construct or loop": {
    "x": 1.0
  },
  "or loop x": {
    "1": 1.0
  },
  "to 10 then": {
    "finish": 1.0
  },
  "10 then finish": {
    "off": 1.0
  },
  "then finish off": {
    "the": 1.0
  },
  "finish off the": {
    "construction": 1.0
  },
  "off the construction": {
    "self": 1.0
  },
  "the construction self": {
    "objectq": 1.0
  },
  "construction self objectq": {
    "field1": 1.0
  },
  "self objectq field1": {
    "mystring": 1.0
  },
  "objectq field1 mystring": {
    "x": 1.0
  },
  "field1 mystring x": {
    "add": 1.0
  },
  "mystring x add": {
    "self": 1.0
  },
  "x add self": {
    "objectq": 1.0
  },
  "add self objectq": {
    "assert": 1.0
  },
  "self objectq assert": {
    "errorcode": 1.0
  },
  "objectq assert errorcode": {
    "end": 1.0
  },
  "assert errorcode end": {
    "35": 1.0
  },
  "errorcode end 35": {
    "object": 1.0
  },
  "end 35 object": {
    "oriented": 1.0
  },
  "35 object oriented": {
    "programming": 1.0
  },
  "oriented programming multiple": {
    "inheritance": 1.0
  },
  "programming multiple inheritance": {
    "vs": 1.0
  },
  "vs composition single": {
    "inheritance": 1.0
  },
  "composition single inheritance": {
    "means": 1.0
  },
  "single inheritance means": {
    "that": 1.0
  },
  "inheritance means that": {
    "a": 1.0
  },
  "derived class has": {
    "on": 1.0
  },
  "class has on": {
    "ly": 1.0
  },
  "has on ly": {
    "one": 1.0
  },
  "on ly one": {
    "base": 1.0
  },
  "ly one base": {
    "class": 1.0
  },
  "one base class": {
    "from": 1.0
  },
  "base class from": {
    "which": 1.0
  },
  "which it inherits": {
    "properties": 1.0
  },
  "it inherits properties": {
    "and": 1.0
  },
  "inherits properties and": {
    "methods": 1.0
  },
  "and methods clarion": {
    "directly": 1.0
  },
  "methods clarion directly": {
    "supports": 1.0
  },
  "clarion directly supports": {
    "single": 1.0
  },
  "directly supports single": {
    "inheritance": 1.0
  },
  "supports single inheritance": {
    "some": 0.5,
    "like": 0.5
  },
  "single inheritance some": {
    "oop": 1.0
  },
  "inheritance some oop": {
    "languages": 1.0
  },
  "some oop languages": {
    "most": 1.0
  },
  "oop languages most": {
    "notably": 1.0
  },
  "languages most notably": {
    "c": 1.0
  },
  "most notably c": {
    "allow": 1.0
  },
  "notably c allow": {
    "multiple": 1.0
  },
  "c allow multiple": {
    "inheritance": 1.0
  },
  "allow multiple inheritance": {
    "wherein": 1.0
  },
  "multiple inheritance wherein": {
    "a": 1.0
  },
  "inheritance wherein a": {
    "derived": 1.0
  },
  "wherein a derived": {
    "class": 1.0
  },
  "class inherits properties": {
    "and": 1.0
  },
  "methods from several": {
    "classes": 1.0
  },
  "from several classes": {
    "this": 1.0
  },
  "several classes this": {
    "has": 1.0
  },
  "classes this has": {
    "the": 1.0
  },
  "this has the": {
    "advantage": 1.0
  },
  "has the advantage": {
    "of": 1.0
  },
  "advantage of easily": {
    "combining": 1.0
  },
  "of easily combining": {
    "existing": 1.0
  },
  "easily combining existing": {
    "classes": 1.0
  },
  "combining existing classes": {
    "to": 1.0
  },
  "existing classes to": {
    "create": 1.0
  },
  "classes to create": {
    "derived": 1.0
  },
  "to create derived": {
    "classes": 1.0
  },
  "create derived classes": {
    "it": 1.0
  },
  "derived classes it": {
    "also": 1.0
  },
  "classes it also": {
    "has": 1.0
  },
  "it also has": {
    "the": 1.0
  },
  "also has the": {
    "drawback": 1.0
  },
  "has the drawback": {
    "that": 1.0
  },
  "the drawback that": {
    "the": 1.0
  },
  "drawback that the": {
    "compiler": 1.0
  },
  "that the compiler": {
    "must": 1.0
  },
  "compiler must deal": {
    "with": 1.0
  },
  "must deal with": {
    "a": 1.0
  },
  "deal with a": {
    "lot": 1.0
  },
  "with a lot": {
    "of": 1.0
  },
  "lot of potential": {
    "ambiguity": 1.0
  },
  "of potential ambiguity": {
    "if": 1.0
  },
  "potential ambiguity if": {
    "two": 1.0
  },
  "ambiguity if two": {
    "or": 1.0
  },
  "if two or": {
    "more": 1.0
  },
  "two or more": {
    "of": 1.0
  },
  "or more of": {
    "the": 1.0
  },
  "more of the": {
    "classes": 1.0
  },
  "of the classes": {
    "from": 1.0
  },
  "the classes from": {
    "which": 1.0
  },
  "classes from which": {
    "the": 1.0
  },
  "from which the": {
    "new": 1.0
  },
  "which the new": {
    "class": 1.0
  },
  "new class is": {
    "derived": 1.0
  },
  "is derived contain": {
    "methods": 1.0
  },
  "derived contain methods": {
    "with": 1.0
  },
  "contain methods with": {
    "the": 1.0
  },
  "methods with the": {
    "same": 1.0
  },
  "same name you": {
    "must": 1.0
  },
  "name you must": {
    "write": 1.0
  },
  "must write extra": {
    "code": 1.0
  },
  "write extra code": {
    "to": 1.0
  },
  "extra code to": {
    "disambiguate": 1.0
  },
  "code to disambiguate": {
    "the": 1.0
  },
  "to disambiguate the": {
    "overloaded": 1.0
  },
  "disambiguate the overloaded": {
    "methods": 1.0
  },
  "the overloaded methods": {
    "although": 1.0
  },
  "overloaded methods although": {
    "clarion": 1.0
  },
  "methods although clarion": {
    "only": 1.0
  },
  "although clarion only": {
    "supports": 1.0
  },
  "clarion only supports": {
    "single": 1.0
  },
  "only supports single": {
    "inheritance": 1.0
  },
  "single inheritance like": {
    "many": 1.0
  },
  "inheritance like many": {
    "other": 1.0
  },
  "like many other": {
    "oop": 1.0
  },
  "oop languages you": {
    "can": 1.0
  },
  "languages you can": {
    "easily": 1.0
  },
  "you can easily": {
    "get": 1.0
  },
  "can easily get": {
    "around": 1.0
  },
  "easily get around": {
    "this": 1.0
  },
  "get around this": {
    "limitation": 1.0
  },
  "around this limitation": {
    "using": 1.0
  },
  "this limitation using": {
    "a": 1.0
  },
  "limitation using a": {
    "standard": 1.0
  },
  "using a standard": {
    "oop": 1.0
  },
  "a standard oop": {
    "technique": 1.0
  },
  "standard oop technique": {
    "called": 1.0
  },
  "technique called composit": {
    "ion": 1.0
  },
  "called composit ion": {
    "composition": 1.0
  },
  "composit ion composition": {
    "means": 1.0
  },
  "ion composition means": {
    "to": 1.0
  },
  "composition means to": {
    "place": 1.0
  },
  "means to place": {
    "an": 1.0
  },
  "to place an": {
    "object": 1.0
  },
  "place an object": {
    "of": 1.0
  },
  "object of one": {
    "class": 1.0
  },
  "of one class": {
    "within": 1.0
  },
  "one class within": {
    "another": 1.0
  },
  "class within another": {
    "composition": 1.0
  },
  "within another composition": {
    "provides": 1.0
  },
  "another composition provides": {
    "the": 1.0
  },
  "composition provides the": {
    "benefits": 1.0
  },
  "provides the benefits": {
    "of": 1.0
  },
  "inheritance without the": {
    "potential": 1.0
  },
  "without the potential": {
    "ambiguity": 1.0
  },
  "the potential ambiguity": {
    "for": 1.0
  },
  "potential ambiguity for": {
    "those": 1.0
  },
  "ambiguity for those": {
    "instances": 1.0
  },
  "for those instances": {
    "where": 1.0
  },
  "those instances where": {
    "you": 1.0
  },
  "instances where you": {
    "need": 1.0
  },
  "where you need": {
    "multiple": 1.0
  },
  "you need multiple": {
    "inheritance": 1.0
  },
  "need multiple inheritance": {
    "simply": 1.0
  },
  "multiple inheritance simply": {
    "decide": 1.0
  },
  "inheritance simply decide": {
    "wh": 1.0
  },
  "simply decide wh": {
    "ich": 1.0
  },
  "decide wh ich": {
    "class": 1.0
  },
  "wh ich class": {
    "to": 1.0
  },
  "ich class to": {
    "derive": 1.0
  },
  "class to derive": {
    "from": 1.0
  },
  "derive from and": {
    "place": 1.0
  },
  "from and place": {
    "an": 1.0
  },
  "and place an": {
    "object": 1.0
  },
  "the other class": {
    "the": 1.0
  },
  "other class the": {
    "contained": 1.0
  },
  "class the contained": {
    "object": 1.0
  },
  "the contained object": {
    "in": 0.25,
    "you": 0.25,
    "when": 0.25,
    "this": 0.25
  },
  "contained object in": {
    "the": 1.0
  },
  "in the new": {
    "class": 1.0
  },
  "new class the": {
    "container": 1.0
  },
  "class the container": {
    "object": 1.0
  },
  "the container object": {
    "you": 0.5,
    "comes": 0.5
  },
  "container object you": {
    "then": 1.0
  },
  "object you then": {
    "need": 1.0
  },
  "you then need": {
    "to": 1.0
  },
  "then need to": {
    "implement": 1.0
  },
  "need to implement": {
    "a": 1.0
  },
  "to implement a": {
    "constructor": 1.0
  },
  "implement a constructor": {
    "method": 1.0
  },
  "constructor method to": {
    "instantiate": 1.0
  },
  "method to instantiate": {
    "the": 1.0
  },
  "instantiate the contained": {
    "object": 1.0
  },
  "contained object you": {
    "implement": 1.0
  },
  "object you implement": {
    "composition": 1.0
  },
  "you implement composition": {
    "in": 1.0
  },
  "implement composition in": {
    "clarion": 1.0
  },
  "composition in clarion": {
    "by": 1.0
  },
  "clarion by placing": {
    "a": 1.0
  },
  "by placing a": {
    "reference": 1.0
  },
  "placing a reference": {
    "to": 1.0
  },
  "to the object": {
    "in": 1.0
  },
  "the object in": {
    "the": 1.0
  },
  "class declaration like": {
    "this": 1.0
  },
  "declaration like this": {
    "program": 0.5,
    "someclass": 0.5
  },
  "like this program": {
    "someclass": 1.0
  },
  "this program someclass": {
    "class": 1.0
  },
  "anotherclass class type": {
    "propertyc": 1.0
  },
  "class type propertyc": {
    "l": 1.0
  },
  "type propertyc l": {
    "ong": 1.0
  },
  "propertyc l ong": {
    "manipulateandc": 1.0
  },
  "l ong manipulateandc": {
    "procedure": 1.0
  },
  "ong manipulateandc procedure": {
    "end": 1.0
  },
  "procedure end multiclass": {
    "class": 1.0
  },
  "end multiclass class": {
    "someclass": 1.0
  },
  "multiclass class someclass": {
    "type": 1.0
  },
  "class someclass type": {
    "inherits": 0.3333333333333333,
    "manipulateaandb": 0.6666666666666666
  },
  "someclass type inherits": {
    "from": 1.0
  },
  "type inherits from": {
    "someclass": 1.0
  },
  "inherits from someclass": {
    "and": 1.0
  },
  "from someclass and": {
    "anotherclassref": 1.0
  },
  "someclass and anotherclassref": {
    "anotherclass": 1.0
  },
  "and anotherclassref anotherclass": {
    "contains": 1.0
  },
  "anotherclassref anotherclass contains": {
    "an": 1.0
  },
  "anotherclass contains an": {
    "anotherclass": 1.0
  },
  "contains an anotherclass": {
    "object": 1.0
  },
  "an anotherclass object": {
    "construct": 1.0
  },
  "anotherclass object construct": {
    "procedure": 1.0
  },
  "object construct procedure": {
    "and": 1.0
  },
  "construct procedure and": {
    "a": 1.0
  },
  "procedure and a": {
    "constructor": 1.0
  },
  "and a constructor": {
    "method": 1.0
  },
  "constructor method end": {
    "mclass": 1.0
  },
  "method end mclass": {
    "multiclass": 1.0
  },
  "end mclass multiclass": {
    "declare": 1.0
  },
  "mclass multiclass declare": {
    "an": 1.0
  },
  "multiclass declare an": {
    "object": 1.0
  },
  "an object mclassref": {
    "multiclass": 1.0
  },
  "object mclassref multiclass": {
    "declare": 1.0
  },
  "mclassref multiclass declare": {
    "an": 1.0
  },
  "an object reference": {
    "code": 1.0
  },
  "object reference code": {
    "the": 1.0
  },
  "reference code the": {
    "constructor": 1.0
  },
  "code the constructor": {
    "instantiates": 1.0
  },
  "the constructor instantiates": {
    "the": 1.0
  },
  "constructor instantiates the": {
    "contained": 1.0
  },
  "instantiates the contained": {
    "object": 1.0
  },
  "contained object when": {
    "the": 1.0
  },
  "object when the": {
    "container": 1.0
  },
  "when the container": {
    "object": 1.0
  },
  "container object comes": {
    "into": 1.0
  },
  "object comes into": {
    "scope": 1.0
  },
  "comes into scope": {
    "mclassref": 1.0
  },
  "into scope mclassref": {
    "new": 1.0
  },
  "scope mclassref new": {
    "multiclass": 1.0
  },
  "mclassref new multiclass": {
    "create": 1.0
  },
  "new multiclass create": {
    "a": 1.0
  },
  "multiclass create a": {
    "new": 1.0
  },
  "create a new": {
    "container": 1.0
  },
  "a new container": {
    "object": 1.0
  },
  "new container object": {
    "which": 1.0
  },
  "container object which": {
    "auto": 1.0
  },
  "its constructor multiclass": {
    "construct": 1.0
  },
  "constructor multiclass construct": {
    "procedure": 1.0
  },
  "multiclass construct procedure": {
    "code": 1.0
  },
  "code self anotherclassref": {
    "new": 1.0
  },
  "self anotherclassref new": {
    "anotherclass": 1.0
  },
  "anotherclassref new anotherclass": {
    "create": 1.0
  },
  "anotherclass create the": {
    "contained": 1.0
  },
  "create the contained": {
    "object": 1.0
  },
  "contained object this": {
    "same": 1.0
  },
  "object this same": {
    "technique": 1.0
  },
  "this same technique": {
    "also": 1.0
  },
  "same technique also": {
    "gives": 1.0
  },
  "technique also gives": {
    "you": 1.0
  },
  "also gives you": {
    "recursive": 1.0
  },
  "gives you recursive": {
    "classes": 1.0
  },
  "you recursive classes": {
    "by": 1.0
  },
  "recursive classes by": {
    "placing": 1.0
  },
  "classes by placing": {
    "a": 1.0
  },
  "reference to an": {
    "object": 1.0
  },
  "same class in": {
    "the": 1.0
  },
  "in the declaration": {
    "like": 1.0
  },
  "the declaration like": {
    "this": 1.0
  },
  "like this someclass": {
    "class": 1.0
  },
  "this someclass class": {
    "type": 1.0
  },
  "class type someclass": {
    "recurses": 1.0
  },
  "type someclass recurses": {
    "into": 1.0
  },
  "someclass recurses into": {
    "itse": 1.0
  },
  "recurses into itse": {
    "lf": 1.0
  },
  "into itse lf": {
    "by": 1.0
  },
  "itse lf by": {
    "someclassref": 1.0
  },
  "lf by someclassref": {
    "someclass": 1.0
  },
  "by someclassref someclass": {
    "containing": 1.0
  },
  "someclassref someclass containing": {
    "a": 1.0
  },
  "someclass containing a": {
    "someclass": 1.0
  },
  "containing a someclass": {
    "object": 1.0
  },
  "someclass object propertya": {
    "long": 1.0
  },
  "object propertya long": {
    "propertyb": 1.0
  },
  "manipulateaandb procedure construct": {
    "procedure": 1.0
  },
  "procedure end clarion": {
    "language": 1.0
  },
  "programming guide 36": {
    "virtual": 1.0
  },
  "guide 36 virtual": {
    "methods": 1.0
  },
  "36 virtual methods": {
    "polymorphism": 1.0
  },
  "methods polymorphism inheritance": {
    "allows": 1.0
  },
  "polymorphism inheritance allows": {
    "a": 1.0
  },
  "inheritance allows a": {
    "derived": 1.0
  },
  "class to call": {
    "down": 0.5,
    "up": 0.5
  },
  "to call down": {
    "to": 1.0
  },
  "down to the": {
    "methods": 1.0
  },
  "to the methods": {
    "it": 1.0
  },
  "the methods it": {
    "has": 1.0
  },
  "methods it has": {
    "inherited": 1.0
  },
  "it has inherited": {
    "from": 1.0
  },
  "has inherited from": {
    "its": 1.0
  },
  "inherited from its": {
    "base": 1.0
  },
  "from its base": {
    "class": 1.0
  },
  "base class virtual": {
    "methods": 1.0
  },
  "class virtual methods": {
    "on": 1.0
  },
  "virtual methods on": {
    "the": 1.0
  },
  "methods on the": {
    "other": 1.0
  },
  "on the other": {
    "hand": 1.0
  },
  "the other hand": {
    "allow": 1.0
  },
  "other hand allow": {
    "the": 1.0
  },
  "hand allow the": {
    "methods": 1.0
  },
  "allow the methods": {
    "in": 1.0
  },
  "in a base": {
    "class": 1.0
  },
  "up to methods": {
    "in": 1.0
  },
  "to methods in": {
    "derived": 1.0
  },
  "derived classes despite": {
    "not": 1.0
  },
  "classes despite not": {
    "knowing": 1.0
  },
  "despite not knowing": {
    "exactly": 1.0
  },
  "not knowing exactly": {
    "what": 1.0
  },
  "knowing exactly what": {
    "is": 1.0
  },
  "exactly what is": {
    "being": 1.0
  },
  "what is being": {
    "called": 1.0
  },
  "is being called": {
    "to": 1.0
  },
  "being called to": {
    "accomplish": 1.0
  },
  "called to accomplish": {
    "this": 1.0
  },
  "to accomplish this": {
    "you": 1.0
  },
  "accomplish this you": {
    "must": 1.0
  },
  "this you must": {
    "prototype": 1.0
  },
  "you must prototype": {
    "the": 1.0
  },
  "must prototype the": {
    "virtual": 1.0
  },
  "prototype the virtual": {
    "method": 1.0
  },
  "virtual method in": {
    "both": 0.5,
    "the": 0.5
  },
  "method in both": {
    "the": 1.0
  },
  "in both the": {
    "base": 0.75,
    "client": 0.25
  },
  "both the base": {
    "class": 0.6666666666666666,
    "and": 0.3333333333333333
  },
  "class the virtual": {
    "attribute": 1.0
  },
  "on a method": {
    "s": 1.0
  },
  "s prototype declares": {
    "a": 1.0
  },
  "prototype declares a": {
    "virtual": 1.0
  },
  "declares a virtual": {
    "method": 1.0
  },
  "virtual method this": {
    "attribute": 1.0
  },
  "method this attribute": {
    "must": 1.0
  },
  "this attribute must": {
    "appear": 1.0
  },
  "attribute must appear": {
    "on": 1.0
  },
  "must appear on": {
    "the": 1.0
  },
  "appear on the": {
    "method": 1.0
  },
  "method s proto": {
    "type": 1.0
  },
  "s proto type": {
    "in": 1.0
  },
  "proto type in": {
    "both": 1.0
  },
  "type in both": {
    "the": 1.0
  },
  "derived class usually": {
    "the": 1.0
  },
  "class usually the": {
    "base": 1.0
  },
  "usually the base": {
    "class": 1.0
  },
  "base class definition": {
    "of": 1.0
  },
  "class definition of": {
    "the": 1.0
  },
  "is a dummy": {
    "procedure": 1.0
  },
  "a dummy procedure": {
    "one": 1.0
  },
  "dummy procedure one": {
    "that": 1.0
  },
  "procedure one that": {
    "does": 1.0
  },
  "one that does": {
    "nothing": 1.0
  },
  "that does nothing": {
    "or": 1.0
  },
  "does nothing or": {
    "one": 1.0
  },
  "nothing or one": {
    "that": 1.0
  },
  "or one that": {
    "provides": 1.0
  },
  "one that provides": {
    "some": 1.0
  },
  "that provides some": {
    "simple": 1.0
  },
  "provides some simple": {
    "default": 1.0
  },
  "some simple default": {
    "functionality": 1.0
  },
  "simple default functionality": {
    "for": 1.0
  },
  "default functionality for": {
    "those": 1.0
  },
  "functionality for those": {
    "derived": 1.0
  },
  "for those derived": {
    "classes": 1.0
  },
  "those derived classes": {
    "that": 1.0
  },
  "derived classes that": {
    "don": 1.0
  },
  "classes that don": {
    "t": 1.0
  },
  "that don t": {
    "need": 0.5,
    "n": 0.5
  },
  "don t need": {
    "their": 1.0
  },
  "t need their": {
    "own": 1.0
  },
  "need their own": {
    "method": 1.0
  },
  "their own method": {
    "definition": 1.0
  },
  "own method definition": {
    "this": 1.0
  },
  "method definition this": {
    "example": 1.0
  },
  "definition this example": {
    "defines": 1.0
  },
  "this example defines": {
    "two": 1.0
  },
  "example defines two": {
    "simple": 1.0
  },
  "defines two simple": {
    "virtual": 1.0
  },
  "two simple virtual": {
    "methods": 1.0
  },
  "simple virtual methods": {
    "in": 1.0
  },
  "methods in two": {
    "derived": 1.0
  },
  "in two derived": {
    "classes": 1.0
  },
  "two derived classes": {
    "someclass": 1.0
  },
  "derived classes someclass": {
    "class": 1.0
  },
  "propertyb long initaandb": {
    "procedure": 1.0
  },
  "long initaandb procedure": {
    "long": 1.0
  },
  "initaandb procedure long": {
    "passeda": 1.0
  },
  "procedure long passeda": {
    "long": 1.0
  },
  "long passeda long": {
    "passedb": 1.0
  },
  "passeda long passedb": {
    "manipulateaandb": 0.5,
    "code": 0.5
  },
  "long passedb manipulateaandb": {
    "procedure": 1.0
  },
  "passedb manipulateaandb procedure": {
    "virtual": 1.0
  },
  "manipulateaandb procedure virtual": {
    "declare": 0.14285714285714285,
    "re": 0.14285714285714285,
    "method": 0.42857142857142855,
    "end": 0.2857142857142857
  },
  "procedure virtual declare": {
    "base": 1.0
  },
  "virtual declare base": {
    "method": 1.0
  },
  "declare base method": {
    "virtual": 1.0
  },
  "base method virtual": {
    "end": 1.0
  },
  "method virtual end": {
    "anotherclass": 1.0
  },
  "virtual end anotherclass": {
    "class": 1.0
  },
  "someclass type manipulateaandb": {
    "procedure": 0.5,
    "pr": 0.5
  },
  "type manipulateaandb procedure": {
    "virtual": 1.0
  },
  "procedure virtual re": {
    "declare": 1.0
  },
  "virtual re declare": {
    "the": 1.0
  },
  "declare the virtual": {
    "method": 1.0
  },
  "virtual method end": {
    "differentclass": 0.5,
    "object1": 0.5
  },
  "method end differentclass": {
    "class": 1.0
  },
  "end differentclass class": {
    "someclass": 1.0
  },
  "differentclass class someclass": {
    "type": 1.0
  },
  "type manipulateaandb pr": {
    "ocedure": 1.0
  },
  "manipulateaandb pr ocedure": {
    "virtual": 1.0
  },
  "pr ocedure virtual": {
    "re": 1.0
  },
  "ocedure virtual re": {
    "declare": 1.0
  },
  "method end object1": {
    "anotherclass": 1.0
  },
  "end object1 anotherclass": {
    "declare": 1.0
  },
  "object1 anotherclass declare": {
    "an": 1.0
  },
  "anotherclass declare an": {
    "object": 1.0
  },
  "an object object2": {
    "differentclass": 1.0
  },
  "object object2 differentclass": {
    "declare": 1.0
  },
  "object2 differentclass declare": {
    "a": 1.0
  },
  "differentclass declare a": {
    "diferent": 1.0
  },
  "declare a diferent": {
    "object": 1.0
  },
  "a diferent object": {
    "code": 1.0
  },
  "diferent object code": {
    "object1": 1.0
  },
  "object code object1": {
    "initaandb": 1.0
  },
  "code object1 initaandb": {
    "10": 1.0
  },
  "object1 initaandb 10": {
    "20": 1.0
  },
  "initaandb 10 20": {
    "initaandb": 0.3333333333333333,
    "statement": 0.3333333333333333,
    "call": 0.3333333333333333
  },
  "10 20 initaandb": {
    "will": 1.0
  },
  "20 initaandb will": {
    "call": 1.0
  },
  "initaandb will call": {
    "the": 1.0
  },
  "call the anotherclass": {
    "method": 1.0
  },
  "the anotherclass method": {
    "object2": 1.0
  },
  "anotherclass method object2": {
    "initaandb": 1.0
  },
  "method object2 initaandb": {
    "30": 1.0
  },
  "object2 initaandb 30": {
    "40": 1.0
  },
  "initaandb 30 40": {
    "initaandb": 0.5,
    "statement": 0.5
  },
  "30 40 initaandb": {
    "will": 1.0
  },
  "40 initaandb will": {
    "call": 1.0
  },
  "call the differentclass": {
    "method": 1.0
  },
  "the differentclass method": {
    "someclass": 1.0
  },
  "differentclass method someclass": {
    "initaandb": 1.0
  },
  "method someclass initaandb": {
    "procedure": 1.0
  },
  "someclass initaandb procedure": {
    "long": 1.0
  },
  "long passedb code": {
    "self": 1.0
  },
  "passedb code self": {
    "propertya": 1.0
  },
  "code self propertya": {
    "passeda": 1.0
  },
  "self propertya passeda": {
    "self": 1.0
  },
  "propertya passeda self": {
    "propert": 0.5,
    "propertyb": 0.5
  },
  "passeda self propert": {
    "yb": 1.0
  },
  "self propert yb": {
    "passedb": 1.0
  },
  "propert yb passedb": {
    "self": 1.0
  },
  "yb passedb self": {
    "manipulateaandb": 1.0
  },
  "passedb self manipulateaandb": {
    "call": 1.0
  },
  "self manipulateaandb call": {
    "whichever": 1.0
  },
  "manipulateaandb call whichever": {
    "virtual": 1.0
  },
  "call whichever virtual": {
    "method": 1.0
  },
  "whichever virtual method": {
    "is": 1.0
  },
  "method is appropriate": {
    "for": 1.0
  },
  "is appropriate for": {
    "the": 0.6666666666666666,
    "that": 0.3333333333333333
  },
  "appropriate for the": {
    "current": 1.0
  },
  "current object someclass": {
    "manipulateaandb": 1.0
  },
  "object someclass manipulateaandb": {
    "procedure": 0.5,
    "procedur": 0.5
  },
  "manipulateaandb procedure base": {
    "class": 1.0
  },
  "method does code": {
    "nothing": 1.0
  },
  "does code nothing": {
    "anotherclass": 1.0
  },
  "code nothing anotherclass": {
    "manipulateaandb": 1.0
  },
  "nothing anotherclass manipulateaandb": {
    "procedure": 1.0
  },
  "procedure virtual method": {
    "code": 0.6666666666666666,
    "with": 0.3333333333333333
  },
  "virtual method code": {
    "message": 1.0
  },
  "method code message": {
    "the": 1.0
  },
  "code message the": {
    "product": 0.5,
    "sum": 0.5
  },
  "message the product": {
    "of": 1.0
  },
  "b is self": {
    "propertya": 1.0
  },
  "is self propertya": {
    "self": 1.0
  },
  "self propertyb differentclass": {
    "manipulateaandb": 1.0
  },
  "propertyb differentclass manipulateaandb": {
    "procedure": 1.0
  },
  "differentclass manipulateaandb procedure": {
    "virtual": 1.0
  },
  "message the sum": {
    "of": 1.0
  },
  "the sum of": {
    "a": 1.0
  },
  "sum of a": {
    "b": 1.0
  },
  "self propertyb in": {
    "this": 1.0
  },
  "propertyb in this": {
    "example": 1.0
  },
  "example the manipulateaandb": {
    "method": 1.0
  },
  "manipulateaandb method is": {
    "virtual": 1.0
  },
  "method is virtual": {
    "the": 1.0
  },
  "is virtual the": {
    "initaandb": 1.0
  },
  "virtual the initaandb": {
    "method": 1.0
  },
  "the initaandb method": {
    "calls": 1.0
  },
  "initaandb method calls": {
    "self": 1.0
  },
  "method calls self": {
    "manipulateaandb": 1.0
  },
  "calls self manipulateaandb": {
    "without": 1.0
  },
  "self manipulateaandb without": {
    "knowing": 1.0
  },
  "manipulateaandb without knowing": {
    "which": 1.0
  },
  "without knowing which": {
    "actual": 1.0
  },
  "knowing which actual": {
    "method": 1.0
  },
  "which actual method": {
    "is": 1.0
  },
  "actual method is": {
    "going": 1.0
  },
  "method is going": {
    "to": 1.0
  },
  "is going to": {
    "execute": 1.0
  },
  "going to execute": {
    "when": 1.0
  },
  "to execute when": {
    "the": 1.0
  },
  "execute when the": {
    "object1": 1.0
  },
  "when the object1": {
    "initaandb": 1.0
  },
  "the object1 initaandb": {
    "10": 1.0
  },
  "10 20 statement": {
    "ex": 1.0
  },
  "20 statement ex": {
    "ecutes": 1.0
  },
  "statement ex ecutes": {
    "self": 1.0
  },
  "ex ecutes self": {
    "manipulateaandb": 1.0
  },
  "ecutes self manipulateaandb": {
    "calls": 1.0
  },
  "self manipulateaandb calls": {
    "anotherclass": 1.0
  },
  "manipulateaandb calls anotherclass": {
    "manipulateaandb": 1.0
  },
  "calls anotherclass manipulateaandb": {
    "and": 1.0
  },
  "anotherclass manipulateaandb and": {
    "when": 1.0
  },
  "manipulateaandb and when": {
    "the": 1.0
  },
  "and when the": {
    "object2": 1.0
  },
  "when the object2": {
    "initaandb": 1.0
  },
  "the object2 initaandb": {
    "30": 1.0
  },
  "30 40 statement": {
    "executes": 1.0
  },
  "40 statement executes": {
    "it": 1.0
  },
  "statement executes it": {
    "calls": 1.0
  },
  "executes it calls": {
    "the": 1.0
  },
  "it calls the": {
    "differentclass": 1.0
  },
  "calls the differentclass": {
    "manipulateaandb": 1.0
  },
  "the differentclass manipulateaandb": {
    "method": 1.0
  },
  "differentclass manipulateaandb method": {
    "a": 1.0
  },
  "manipulateaandb method a": {
    "virtual": 1.0
  },
  "method a virtual": {
    "method": 1.0
  },
  "class may explicitly": {
    "call": 1.0
  },
  "may explicitly call": {
    "the": 1.0
  },
  "call the method": {
    "of": 1.0
  },
  "the method of": {
    "the": 1.0
  },
  "same name from": {
    "the": 1.0
  },
  "name from the": {
    "base": 1.0
  },
  "base class by": {
    "calling": 1.0
  },
  "class by calling": {
    "parent": 1.0
  },
  "by calling parent": {
    "virtualmethodname": 1.0
  },
  "calling parent virtualmethodname": {
    "this": 1.0
  },
  "parent virtualmethodname this": {
    "is": 1.0
  },
  "virtualmethodname this is": {
    "just": 1.0
  },
  "this is just": {
    "the": 1.0
  },
  "is just the": {
    "same": 0.5,
    "mechanism": 0.5
  },
  "just the same": {
    "technique": 1.0
  },
  "the same technique": {
    "as": 1.0
  },
  "same technique as": {
    "previously": 1.0
  },
  "technique as previously": {
    "demonstrated": 1.0
  },
  "as previously demonstrated": {
    "in": 1.0
  },
  "previously demonstrated in": {
    "overriding": 1.0
  },
  "demonstrated in overriding": {
    "inherited": 1.0
  },
  "in overriding inherited": {
    "methods": 1.0
  },
  "inherited methods 37": {
    "object": 1.0
  },
  "methods 37 object": {
    "oriented": 1.0
  },
  "37 object oriented": {
    "programming": 1.0
  },
  "oriented programming local": {
    "derived": 1.0
  },
  "programming local derived": {
    "methods": 1.0
  },
  "derived methods methods": {
    "prototyped": 1.0
  },
  "methods methods prototyped": {
    "in": 1.0
  },
  "methods prototyped in": {
    "a": 1.0
  },
  "derived class declaration": {
    "within": 1.0
  },
  "class declaration within": {
    "a": 1.0
  },
  "declaration within a": {
    "procedure": 1.0
  },
  "data section share": {
    "the": 1.0
  },
  "section share the": {
    "declaring": 1.0
  },
  "share the declaring": {
    "procedure": 1.0
  },
  "procedure s scope": {
    "for": 1.0
  },
  "s scope for": {
    "all": 1.0
  },
  "scope for all": {
    "local": 1.0
  },
  "for all local": {
    "data": 1.0
  },
  "all local data": {
    "declarations": 1.0
  },
  "local data declarations": {
    "and": 1.0
  },
  "data declarations and": {
    "routines": 1.0
  },
  "declarations and routines": {
    "the": 0.5,
    "are": 0.5
  },
  "and routines the": {
    "requirement": 1.0
  },
  "routines the requirement": {
    "for": 1.0
  },
  "the requirement for": {
    "this": 1.0
  },
  "requirement for this": {
    "is": 1.0
  },
  "for this is": {
    "that": 1.0
  },
  "this is that": {
    "the": 1.0
  },
  "that the methods": {
    "must": 1.0
  },
  "the methods must": {
    "be": 0.5,
    "come": 0.5
  },
  "methods must be": {
    "defined": 1.0
  },
  "must be defined": {
    "within": 1.0
  },
  "be defined within": {
    "the": 1.0
  },
  "source module as": {
    "the": 1.0
  },
  "as the declaring": {
    "procedure": 1.0
  },
  "declaring procedure an": {
    "d": 1.0
  },
  "procedure an d": {
    "must": 1.0
  },
  "an d must": {
    "immediately": 1.0
  },
  "d must immediately": {
    "follow": 1.0
  },
  "procedure within that": {
    "source": 1.0
  },
  "that source that": {
    "is": 1.0
  },
  "source that is": {
    "the": 1.0
  },
  "that is the": {
    "methods": 1.0
  },
  "is the methods": {
    "must": 1.0
  },
  "methods must come": {
    "after": 1.0
  },
  "must come after": {
    "any": 1.0
  },
  "come after any": {
    "routines": 1.0
  },
  "after any routines": {
    "and": 1.0
  },
  "any routines and": {
    "before": 1.0
  },
  "routines and before": {
    "any": 1.0
  },
  "and before any": {
    "other": 1.0
  },
  "before any other": {
    "procedures": 1.0
  },
  "any other procedures": {
    "that": 1.0
  },
  "other procedures that": {
    "may": 1.0
  },
  "procedures that may": {
    "be": 1.0
  },
  "that may be": {
    "in": 0.5,
    "defined": 0.5
  },
  "may be in": {
    "the": 0.5,
    "ascending": 0.5
  },
  "be in the": {
    "same": 0.3333333333333333,
    "records": 0.3333333333333333,
    "procedure": 0.3333333333333333
  },
  "source module this": {
    "means": 1.0
  },
  "module this means": {
    "the": 1.0
  },
  "means the procedure": {
    "s": 1.0
  },
  "routines are all": {
    "vis": 1.0
  },
  "are all vis": {
    "ible": 1.0
  },
  "all vis ible": {
    "and": 1.0
  },
  "vis ible and": {
    "can": 1.0
  },
  "ible and can": {
    "be": 1.0
  },
  "and can be": {
    "referenced": 1.0
  },
  "be referenced within": {
    "these": 1.0
  },
  "referenced within these": {
    "methods": 1.0
  },
  "within these methods": {
    "the": 1.0
  },
  "these methods the": {
    "most": 1.0
  },
  "methods the most": {
    "common": 1.0
  },
  "most common need": {
    "for": 1.0
  },
  "common need for": {
    "this": 1.0
  },
  "need for this": {
    "scoping": 1.0
  },
  "for this scoping": {
    "is": 1.0
  },
  "this scoping is": {
    "the": 1.0
  },
  "scoping is the": {
    "definition": 1.0
  },
  "is the definition": {
    "of": 1.0
  },
  "the definition of": {
    "the": 0.5,
    "client": 0.5
  },
  "virtual methods for": {
    "a": 1.0
  },
  "methods for a": {
    "derived": 1.0
  },
  "for a derived": {
    "object": 1.0
  },
  "a derived object": {
    "declared": 1.0
  },
  "derived object declared": {
    "locally": 1.0
  },
  "object declared locally": {
    "to": 1.0
  },
  "declared locally to": {
    "a": 1.0
  },
  "locally to a": {
    "procedure": 1.0
  },
  "procedure to serve": {
    "some": 1.0
  },
  "to serve some": {
    "purpose": 1.0
  },
  "serve some purpose": {
    "for": 1.0
  },
  "some purpose for": {
    "the": 1.0
  },
  "purpose for the": {
    "declaring": 1.0
  },
  "for the declaring": {
    "procedure": 1.0
  },
  "declaring procedure typically": {
    "these": 1.0
  },
  "procedure typically these": {
    "virtual": 1.0
  },
  "typically these virtual": {
    "methods": 1.0
  },
  "these virtual methods": {
    "need": 1.0
  },
  "virtual methods need": {
    "access": 1.0
  },
  "methods need access": {
    "to": 1.0
  },
  "need access to": {
    "the": 1.0
  },
  "local data to": {
    "perform": 1.0
  },
  "data to perform": {
    "their": 1.0
  },
  "to perform their": {
    "intended": 1.0
  },
  "perform their intended": {
    "function": 1.0
  },
  "their intended function": {
    "for": 1.0
  },
  "intended function for": {
    "example": 1.0
  },
  "function for example": {
    "member": 1.0
  },
  "for example member": {
    "myapp": 1.0
  },
  "example member myapp": {
    "a": 1.0
  },
  "member myapp a": {
    "source": 1.0
  },
  "myapp a source": {
    "module": 1.0
  },
  "a source module": {
    "someclass": 1.0
  },
  "source module someclass": {
    "class": 1.0
  },
  "module someclass class": {
    "type": 1.0
  },
  "class type module": {
    "someclass": 1.0
  },
  "type module someclass": {
    "clw": 1.0
  },
  "module someclass clw": {
    "propertya": 0.5,
    "contains": 0.5
  },
  "someclass clw propertya": {
    "long": 1.0
  },
  "long propertyb lon": {
    "g": 1.0
  },
  "propertyb lon g": {
    "initaandb": 1.0
  },
  "lon g initaandb": {
    "procedure": 1.0
  },
  "g initaandb procedure": {
    "long": 1.0
  },
  "virtual end myproc": {
    "procedure": 1.0
  },
  "end myproc procedure": {
    "some": 1.0
  },
  "myproc procedure some": {
    "non": 1.0
  },
  "procedure some non": {
    "object": 1.0
  },
  "some non object": {
    "procedure": 1.0
  },
  "non object procedure": {
    "localvar": 1.0
  },
  "object procedure localvar": {
    "long": 1.0
  },
  "procedure localvar long": {
    "local": 1.0
  },
  "localvar long local": {
    "variable": 1.0
  },
  "long local variable": {
    "anotherclass": 1.0
  },
  "local variable anotherclass": {
    "class": 1.0
  },
  "variable anotherclass class": {
    "someclass": 1.0
  },
  "class someclass declare": {
    "an": 1.0
  },
  "object in local": {
    "data": 1.0
  },
  "in local data": {
    "manipulateaandb": 1.0
  },
  "local data manipulateaandb": {
    "procedure": 1.0
  },
  "data manipulateaandb procedure": {
    "virtual": 1.0
  },
  "end code do": {
    "myroutine": 1.0
  },
  "do myroutine anotherclass": {
    "initaandb": 1.0
  },
  "myroutine anotherclass initaandb": {
    "10": 1.0
  },
  "anotherclass initaandb 10": {
    "20": 1.0
  },
  "10 20 call": {
    "base": 1.0
  },
  "20 call base": {
    "class": 1.0
  },
  "class method myroutine": {
    "routine": 1.0
  },
  "method myroutine routine": {
    "routine": 1.0
  },
  "myroutine routine routine": {
    "local": 1.0
  },
  "routine routine local": {
    "to": 1.0
  },
  "routine local to": {
    "myproc": 1.0
  },
  "local to myproc": {
    "and": 1.0
  },
  "to myproc and": {
    "localvar": 1.0
  },
  "myproc and localvar": {
    "10": 1.0
  },
  "and localvar 10": {
    "anotherclass": 1.0
  },
  "localvar 10 anotherclass": {
    "manipulateaandb": 1.0
  },
  "anotherclass manipulateaandb anotherclass": {
    "manipulateaandb": 1.0
  },
  "manipulateaandb anotherclass manipulateaandb": {
    "procedure": 1.0
  },
  "virtual method with": {
    "access": 1.0
  },
  "method with access": {
    "to": 1.0
  },
  "with access to": {
    "x": 1.0
  },
  "access to x": {
    "long": 1.0
  },
  "to x long": {
    "local": 1.0
  },
  "x long local": {
    "data": 1.0
  },
  "long local data": {
    "and": 1.0
  },
  "and routines code": {
    "loop": 1.0
  },
  "routines code loop": {
    "10": 1.0
  },
  "code loop 10": {
    "times": 1.0
  },
  "loop 10 times": {
    "x": 1.0
  },
  "10 times x": {
    "self": 1.0
  },
  "times x self": {
    "propertya": 1.0
  },
  "x self propertya": {
    "self": 1.0
  },
  "self propertyb localvar": {
    "message": 1.0
  },
  "propertyb localvar message": {
    "the": 1.0
  },
  "localvar message the": {
    "product": 1.0
  },
  "a b localvar": {
    "is": 1.0
  },
  "b localvar is": {
    "x": 1.0
  },
  "localvar is x": {
    "do": 1.0
  },
  "is x do": {
    "myroutine": 1.0
  },
  "x do myroutine": {
    "increment": 1.0
  },
  "do myroutine increment": {
    "the": 1.0
  },
  "myroutine increment the": {
    "local": 1.0
  },
  "local variable end": {
    "module": 1.0
  },
  "variable end module": {
    "someclass": 1.0
  },
  "end module someclass": {
    "clw": 1.0
  },
  "someclass clw contains": {
    "someclass": 1.0
  },
  "clw contains someclass": {
    "initaandb": 1.0
  },
  "contains someclass initaandb": {
    "procedure": 1.0
  },
  "passeda self propertyb": {
    "passedb": 1.0
  },
  "self propertyb passedb": {
    "self": 1.0
  },
  "propertyb passedb self": {
    "manipulateaandb": 1.0
  },
  "someclass manipulateaandb procedur": {
    "e": 1.0
  },
  "manipulateaandb procedur e": {
    "base": 1.0
  },
  "procedur e base": {
    "class": 1.0
  },
  "e base class": {
    "method": 1.0
  },
  "method does nothing": {
    "code": 1.0
  },
  "does nothing code": {
    "clarion": 1.0
  },
  "nothing code clarion": {
    "language": 1.0
  },
  "programming guide 38": {
    "summary": 1.0
  },
  "guide 38 summary": {
    "the": 1.0
  },
  "38 summary the": {
    "three": 1.0
  },
  "summary the three": {
    "most": 1.0
  },
  "the three most": {
    "important": 0.3333333333333333,
    "common": 0.3333333333333333,
    "commonly": 0.3333333333333333
  },
  "three most important": {
    "concepts": 1.0
  },
  "most important concepts": {
    "in": 1.0
  },
  "important concepts in": {
    "object": 1.0
  },
  "object orientation are": {
    "encapsulation": 1.0
  },
  "orientation are encapsulation": {
    "inheritance": 1.0
  },
  "are encapsulation inheritance": {
    "and": 1.0
  },
  "polymorphism the class": {
    "structure": 1.0
  },
  "class structure creates": {
    "encapsulation": 1.0
  },
  "structure creates encapsulation": {
    "the": 1.0
  },
  "creates encapsulation the": {
    "source": 1.0
  },
  "encapsulation the source": {
    "code": 1.0
  },
  "code for all": {
    "the": 1.0
  },
  "for all the": {
    "methods": 1.0
  },
  "single class reside": {
    "in": 1.0
  },
  "class reside in": {
    "a": 1.0
  },
  "reside in a": {
    "single": 1.0
  },
  "single source module": {
    "making": 1.0
  },
  "source module making": {
    "maintenance": 1.0
  },
  "module making maintenance": {
    "easier": 1.0
  },
  "making maintenance easier": {
    "an": 1.0
  },
  "maintenance easier an": {
    "object": 1.0
  },
  "easier an object": {
    "is": 1.0
  },
  "object is an": {
    "instance": 1.0
  },
  "is an instance": {
    "of": 1.0
  },
  "a class with": {
    "its": 1.0
  },
  "class with its": {
    "own": 1.0
  },
  "of data members": {
    "properties": 1.0
  },
  "data members properties": {
    "which": 1.0
  },
  "members properties which": {
    "shares": 1.0
  },
  "properties which shares": {
    "methods": 1.0
  },
  "which shares methods": {
    "with": 1.0
  },
  "shares methods with": {
    "all": 1.0
  },
  "with all other": {
    "instances": 1.0
  },
  "all other instances": {
    "of": 1.0
  },
  "other instances of": {
    "the": 1.0
  },
  "and also any": {
    "derived": 1.0
  },
  "also any derived": {
    "classes": 1.0
  },
  "any derived classes": {
    "a": 1.0
  },
  "classes a class": {
    "may": 1.0
  },
  "may contain da": {
    "ta": 1.0
  },
  "contain da ta": {
    "members": 1.0
  },
  "da ta members": {
    "properties": 1.0
  },
  "ta members properties": {
    "declared": 1.0
  },
  "members properties declared": {
    "as": 1.0
  },
  "properties declared as": {
    "simple": 1.0
  },
  "declared as simple": {
    "data": 1.0
  },
  "as simple data": {
    "types": 1.0
  },
  "data types or": {
    "as": 1.0
  },
  "types or as": {
    "reference": 1.0
  },
  "or as reference": {
    "variables": 1.0
  },
  "reference variables to": {
    "complex": 1.0
  },
  "variables to complex": {
    "data": 1.0
  },
  "to complex data": {
    "types": 1.0
  },
  "data types including": {
    "other": 1.0
  },
  "types including other": {
    "classes": 1.0
  },
  "including other classes": {
    "within": 1.0
  },
  "other classes within": {
    "the": 1.0
  },
  "classes within the": {
    "class": 1.0
  },
  "methods the data": {
    "members": 1.0
  },
  "and methods appropriate": {
    "to": 1.0
  },
  "methods appropriate to": {
    "the": 1.0
  },
  "to the current": {
    "object": 1.0
  },
  "object instance are": {
    "referenced": 1.0
  },
  "instance are referenced": {
    "using": 1.0
  },
  "are referenced using": {
    "self": 1.0
  },
  "referenced using self": {
    "as": 1.0
  },
  "using self as": {
    "the": 1.0
  },
  "object name self": {
    "datamembername": 1.0
  },
  "name self datamembername": {
    "or": 1.0
  },
  "self datamembername or": {
    "self": 1.0
  },
  "datamembername or self": {
    "methodname": 1.0
  },
  "or self methodname": {
    "constructor": 1.0
  },
  "self methodname constructor": {
    "and": 1.0
  },
  "methodname constructor and": {
    "destructor": 1.0
  },
  "destructor methods named": {
    "construct": 1.0
  },
  "methods named construct": {
    "and": 1.0
  },
  "named construct and": {
    "destruct": 1.0
  },
  "construct and destruct": {
    "are": 1.0
  },
  "and destruct are": {
    "automatically": 1.0
  },
  "destruct are automatically": {
    "called": 1.0
  },
  "are automatically called": {
    "when": 1.0
  },
  "called when an": {
    "object": 1.0
  },
  "is created or": {
    "destroyed": 1.0
  },
  "created or destroyed": {
    "and": 1.0
  },
  "or destroyed and": {
    "may": 1.0
  },
  "destroyed and may": {
    "also": 1.0
  },
  "and may also": {
    "be": 1.0
  },
  "also be explicitly": {
    "called": 1.0
  },
  "be explicitly called": {
    "all": 1.0
  },
  "explicitly called all": {
    "properties": 1.0
  },
  "called all properties": {
    "and": 1.0
  },
  "all properties and": {
    "methods": 1.0
  },
  "methods are pub": {
    "lic": 1.0
  },
  "are pub lic": {
    "unless": 1.0
  },
  "pub lic unless": {
    "explicitly": 1.0
  },
  "lic unless explicitly": {
    "declared": 1.0
  },
  "private or protected": {
    "attribute": 1.0
  },
  "or protected attribute": {
    "inheritance": 1.0
  },
  "protected attribute inheritance": {
    "is": 1.0
  },
  "attribute inheritance is": {
    "achieved": 1.0
  },
  "inheritance is achieved": {
    "by": 1.0
  },
  "is achieved by": {
    "deriving": 1.0
  },
  "achieved by deriving": {
    "one": 1.0
  },
  "by deriving one": {
    "class": 1.0
  },
  "deriving one class": {
    "from": 1.0
  },
  "one class from": {
    "another": 1.0
  },
  "class from another": {
    "you": 1.0
  },
  "from another you": {
    "can": 1.0
  },
  "another you can": {
    "override": 1.0
  },
  "can override inherited": {
    "methods": 1.0
  },
  "override inherited methods": {
    "by": 1.0
  },
  "inherited methods by": {
    "re": 1.0
  },
  "methods by re": {
    "declaring": 1.0
  },
  "by re declaring": {
    "and": 1.0
  },
  "re declaring and": {
    "re": 1.0
  },
  "declaring and re": {
    "defining": 1.0
  },
  "and re defining": {
    "them": 1.0
  },
  "re defining them": {
    "in": 1.0
  },
  "defining them in": {
    "the": 1.0
  },
  "derived class using": {
    "exactly": 1.0
  },
  "class using exactly": {
    "the": 1.0
  },
  "using exactly the": {
    "same": 1.0
  },
  "the same paramet": {
    "er": 1.0
  },
  "same paramet er": {
    "list": 1.0
  },
  "paramet er list": {
    "overridden": 1.0
  },
  "er list overridden": {
    "inherited": 1.0
  },
  "list overridden inherited": {
    "methods": 1.0
  },
  "overridden inherited methods": {
    "and": 1.0
  },
  "inherited methods and": {
    "virtual": 1.0
  },
  "methods and virtual": {
    "methods": 1.0
  },
  "and virtual methods": {
    "can": 1.0
  },
  "methods can call": {
    "their": 1.0
  },
  "can call their": {
    "base": 1.0
  },
  "call their base": {
    "class": 1.0
  },
  "their base class": {
    "constituents": 1.0
  },
  "base class constituents": {
    "by": 1.0
  },
  "class constituents by": {
    "using": 1.0
  },
  "constituents by using": {
    "parent": 1.0
  },
  "by using parent": {
    "just": 1.0
  },
  "using parent just": {
    "like": 1.0
  },
  "parent just like": {
    "self": 1.0
  },
  "just like self": {
    "composition": 1.0
  },
  "like self composition": {
    "provides": 1.0
  },
  "self composition provides": {
    "a": 1.0
  },
  "composition provides a": {
    "viable": 1.0
  },
  "provides a viable": {
    "alternative": 1.0
  },
  "a viable alternative": {
    "to": 1.0
  },
  "viable alternative to": {
    "multiple": 1.0
  },
  "multiple inheritance virtual": {
    "methods": 1.0
  },
  "inheritance virtual methods": {
    "allow": 1.0
  },
  "methods allow standard": {
    "oop": 1.0
  },
  "allow standard oop": {
    "polymorphism": 1.0
  },
  "standard oop polymorphism": {
    "while": 1.0
  },
  "oop polymorphism while": {
    "cla": 1.0
  },
  "polymorphism while cla": {
    "rion": 1.0
  },
  "while cla rion": {
    "s": 1.0
  },
  "cla rion s": {
    "procedure": 1.0
  },
  "rion s procedure": {
    "overloading": 1.0
  },
  "s procedure overloading": {
    "permits": 1.0
  },
  "procedure overloading permits": {
    "a": 1.0
  },
  "overloading permits a": {
    "non": 1.0
  },
  "permits a non": {
    "oop": 1.0
  },
  "a non oop": {
    "form": 1.0
  },
  "non oop form": {
    "of": 1.0
  },
  "oop form of": {
    "polymorphism": 1.0
  },
  "of polymorphism virtual": {
    "methods": 1.0
  },
  "methods are prototyped": {
    "in": 1.0
  },
  "are prototyped in": {
    "both": 1.0
  },
  "prototyped in both": {
    "the": 1.0
  },
  "the base and": {
    "derived": 1.0
  },
  "base and derived": {
    "classes": 1.0
  },
  "derived classes objects": {
    "local": 1.0
  },
  "classes objects local": {
    "to": 1.0
  },
  "objects local to": {
    "a": 1.0
  },
  "a procedure share": {
    "local": 1.0
  },
  "procedure share local": {
    "variables": 1.0
  },
  "share local variables": {
    "and": 1.0
  },
  "local variables and": {
    "routines": 1.0
  },
  "and routines with": {
    "the": 1.0
  },
  "routines with the": {
    "declaring": 1.0
  },
  "with the declaring": {
    "procedure": 1.0
  },
  "declaring procedure 39": {
    "database": 1.0
  },
  "procedure 39 database": {
    "design": 1.0
  },
  "database design 4": {
    "database": 1.0
  },
  "design 4 database": {
    "design": 1.0
  },
  "database design database": {
    "design": 1.0
  },
  "design database design": {
    "there": 1.0
  },
  "database design there": {
    "are": 1.0
  },
  "design there are": {
    "a": 1.0
  },
  "there are a": {
    "number": 1.0
  },
  "are a number": {
    "of": 1.0
  },
  "a number of": {
    "methods": 0.25,
    "foreign": 0.25,
    "records": 0.25,
    "statements": 0.25
  },
  "number of methods": {
    "of": 1.0
  },
  "of methods of": {
    "database": 1.0
  },
  "methods of database": {
    "organization": 1.0
  },
  "of database organization": {
    "in": 0.5,
    "on": 0.5
  },
  "database organization in": {
    "use": 1.0
  },
  "organization in use": {
    "today": 1.0
  },
  "in use today": {
    "the": 1.0
  },
  "use today the": {
    "inverted": 1.0
  },
  "today the inverted": {
    "list": 1.0
  },
  "the inverted list": {
    "model": 1.0
  },
  "inverted list model": {
    "the": 1.0
  },
  "list model the": {
    "hierarchical": 1.0
  },
  "model the hierarchical": {
    "model": 1.0
  },
  "the hierarchical model": {
    "and": 1.0
  },
  "hierarchical model and": {
    "the": 1.0
  },
  "model and the": {
    "network": 1.0
  },
  "and the network": {
    "model": 1.0
  },
  "the network model": {
    "are": 1.0
  },
  "network model are": {
    "three": 1.0
  },
  "model are three": {
    "that": 1.0
  },
  "are three that": {
    "have": 1.0
  },
  "three that have": {
    "been": 1.0
  },
  "have been widely": {
    "used": 1.0
  },
  "been widely used": {
    "in": 1.0
  },
  "widely used in": {
    "the": 1.0
  },
  "used in the": {
    "past": 0.5,
    "application": 0.5
  },
  "in the past": {
    "mostly": 1.0
  },
  "the past mostly": {
    "these": 1.0
  },
  "past mostly these": {
    "models": 1.0
  },
  "mostly these models": {
    "have": 1.0
  },
  "these models have": {
    "been": 1.0
  },
  "models have been": {
    "used": 1.0
  },
  "have been used": {
    "on": 1.0
  },
  "been used on": {
    "mainframe": 1.0
  },
  "used on mainframe": {
    "computers": 1.0
  },
  "on mainframe computers": {
    "and": 1.0
  },
  "mainframe computers and": {
    "have": 1.0
  },
  "computers and have": {
    "not": 1.0
  },
  "and have not": {
    "been": 1.0
  },
  "have not been": {
    "implemented": 1.0
  },
  "not been implemented": {
    "on": 1.0
  },
  "been implemented on": {
    "pc": 1.0
  },
  "implemented on pc": {
    "systems": 1.0
  },
  "on pc systems": {
    "on": 0.5,
    "today": 0.5
  },
  "pc systems on": {
    "a": 1.0
  },
  "systems on a": {
    "widespread": 1.0
  },
  "on a widespread": {
    "basis": 1.0
  },
  "a widespread basis": {
    "the": 1.0
  },
  "widespread basis the": {
    "clarion": 1.0
  },
  "basis the clarion": {
    "language": 1.0
  },
  "language has the": {
    "tools": 1.0
  },
  "has the tools": {
    "to": 1.0
  },
  "the tools to": {
    "allow": 1.0
  },
  "tools to allow": {
    "you": 1.0
  },
  "to allow you": {
    "to": 1.0
  },
  "you to utilize": {
    "any": 1.0
  },
  "to utilize any": {
    "of": 1.0
  },
  "utilize any of": {
    "these": 1.0
  },
  "any of these": {
    "methods": 1.0
  },
  "of these methods": {
    "if": 1.0
  },
  "these methods if": {
    "you": 1.0
  },
  "if you so": {
    "choose": 0.5,
    "ch": 0.5
  },
  "you so choose": {
    "by": 1.0
  },
  "so choose by": {
    "far": 1.0
  },
  "choose by far": {
    "the": 1.0
  },
  "by far the": {
    "most": 0.5,
    "more": 0.5
  },
  "far the most": {
    "common": 1.0
  },
  "most common method": {
    "of": 1.0
  },
  "common method of": {
    "database": 1.0
  },
  "method of database": {
    "organization": 1.0
  },
  "database organization on": {
    "pc": 1.0
  },
  "organization on pc": {
    "systems": 1.0
  },
  "pc systems today": {
    "is": 1.0
  },
  "systems today is": {
    "the": 1.0
  },
  "today is the": {
    "relational": 1.0
  },
  "is the relational": {
    "model": 1.0
  },
  "the relational model": {
    "as": 0.3333333333333333,
    "this": 0.3333333333333333,
    "which": 0.3333333333333333
  },
  "relational model as": {
    "defined": 1.0
  },
  "model as defined": {
    "by": 1.0
  },
  "as defined by": {
    "e": 1.0
  },
  "defined by e": {
    "f": 1.0
  },
  "by e f": {
    "codd": 1.0
  },
  "e f codd": {
    "there": 1.0
  },
  "f codd there": {
    "is": 1.0
  },
  "codd there is": {
    "no": 1.0
  },
  "is no database": {
    "program": 1.0
  },
  "no database program": {
    "which": 1.0
  },
  "database program which": {
    "completely": 1.0
  },
  "program which completely": {
    "implements": 1.0
  },
  "which completely implements": {
    "all": 1.0
  },
  "completely implements all": {
    "of": 1.0
  },
  "implements all of": {
    "codd": 1.0
  },
  "all of codd": {
    "s": 1.0
  },
  "of codd s": {
    "rules": 1.0
  },
  "codd s rules": {
    "regarding": 0.5,
    "to": 0.5
  },
  "s rules regarding": {
    "relational": 1.0
  },
  "rules regarding relational": {
    "database": 1.0
  },
  "regarding relational database": {
    "because": 1.0
  },
  "relational database because": {
    "it": 1.0
  },
  "database because it": {
    "i": 1.0
  },
  "because it i": {
    "s": 1.0
  },
  "it i s": {
    "an": 1.0
  },
  "i s an": {
    "extremely": 1.0
  },
  "s an extremely": {
    "complex": 1.0
  },
  "an extremely complex": {
    "mathematical": 1.0
  },
  "extremely complex mathematical": {
    "model": 1.0
  },
  "complex mathematical model": {
    "however": 1.0
  },
  "mathematical model however": {
    "most": 1.0
  },
  "model however most": {
    "database": 1.0
  },
  "however most database": {
    "programs": 1.0
  },
  "most database programs": {
    "implement": 1.0
  },
  "database programs implement": {
    "a": 1.0
  },
  "programs implement a": {
    "sufficient": 1.0
  },
  "implement a sufficient": {
    "sub": 1.0
  },
  "a sufficient sub": {
    "set": 1.0
  },
  "sufficient sub set": {
    "of": 1.0
  },
  "sub set of": {
    "codd": 0.5,
    "the": 0.5
  },
  "set of codd": {
    "s": 1.0
  },
  "s rules to": {
    "allow": 1.0
  },
  "rules to allow": {
    "practical": 1.0
  },
  "to allow practical": {
    "use": 1.0
  },
  "allow practical use": {
    "of": 1.0
  },
  "practical use of": {
    "the": 1.0
  },
  "use of the": {
    "principles": 0.3333333333333333,
    "computing": 0.3333333333333333,
    "capabilities": 0.3333333333333333
  },
  "of the principles": {
    "of": 1.0
  },
  "the principles of": {
    "the": 1.0
  },
  "principles of the": {
    "relational": 1.0
  },
  "of the relational": {
    "model": 0.5,
    "terms": 0.5
  },
  "relational model this": {
    "essay": 1.0
  },
  "model this essay": {
    "is": 1.0
  },
  "is a very": {
    "brief": 1.0
  },
  "a very brief": {
    "overview": 1.0
  },
  "very brief overview": {
    "of": 1.0
  },
  "brief overview of": {
    "the": 1.0
  },
  "overview of the": {
    "most": 1.0
  },
  "of the most": {
    "fundamental": 1.0
  },
  "the most fundamental": {
    "aspect": 1.0
  },
  "most fundamental aspect": {
    "s": 1.0
  },
  "fundamental aspect s": {
    "of": 1.0
  },
  "aspect s of": {
    "relational": 1.0
  },
  "s of relational": {
    "database": 1.0
  },
  "of relational database": {
    "design": 0.5,
    "involves": 0.5
  },
  "database design as": {
    "they": 1.0
  },
  "design as they": {
    "impact": 1.0
  },
  "as they impact": {
    "business": 1.0
  },
  "they impact business": {
    "programming": 1.0
  },
  "impact business programming": {
    "relational": 1.0
  },
  "business programming relational": {
    "database": 1.0
  },
  "programming relational database": {
    "design": 1.0
  },
  "database design one": {
    "basic": 0.5,
    "primary": 0.5
  },
  "design one basic": {
    "principle": 1.0
  },
  "one basic principle": {
    "of": 1.0
  },
  "basic principle of": {
    "relational": 1.0
  },
  "principle of relational": {
    "database": 1.0
  },
  "relational database involves": {
    "the": 1.0
  },
  "database involves the": {
    "database": 1.0
  },
  "involves the database": {
    "design": 1.0
  },
  "the database design": {
    "a": 0.5,
    "order": 0.5
  },
  "database design a": {
    "data": 0.5,
    "clarion": 0.5
  },
  "design a data": {
    "item": 1.0
  },
  "a data item": {
    "should": 0.5,
    "returned": 0.5
  },
  "data item should": {
    "be": 1.0
  },
  "item should be": {
    "stored": 1.0
  },
  "should be stored": {
    "once": 0.6666666666666666,
    "there": 0.3333333333333333
  },
  "be stored once": {
    "not": 0.5,
    "separate": 0.5
  },
  "stored once not": {
    "duplicated": 1.0
  },
  "once not duplicated": {
    "in": 1.0
  },
  "not duplicated in": {
    "m": 1.0
  },
  "duplicated in m": {
    "any": 1.0
  },
  "in m any": {
    "places": 1.0
  },
  "m any places": {
    "there": 1.0
  },
  "any places there": {
    "are": 1.0
  },
  "places there are": {
    "two": 1.0
  },
  "are two benefits": {
    "to": 1.0
  },
  "two benefits to": {
    "this": 1.0
  },
  "benefits to this": {
    "lowered": 1.0
  },
  "to this lowered": {
    "disk": 1.0
  },
  "this lowered disk": {
    "space": 1.0
  },
  "lowered disk space": {
    "requirements": 1.0
  },
  "disk space requirements": {
    "and": 1.0
  },
  "space requirements and": {
    "easier": 1.0
  },
  "requirements and easier": {
    "data": 1.0
  },
  "and easier data": {
    "maintenance": 1.0
  },
  "easier data maintenance": {
    "to": 1.0
  },
  "data maintenance to": {
    "achieve": 1.0
  },
  "maintenance to achieve": {
    "this": 1.0
  },
  "to achieve this": {
    "end": 1.0
  },
  "achieve this end": {
    "a": 1.0
  },
  "this end a": {
    "relational": 1.0
  },
  "end a relational": {
    "database": 1.0
  },
  "a relational database": {
    "design": 0.5,
    "one": 0.5
  },
  "database design splits": {
    "the": 1.0
  },
  "design splits the": {
    "data": 1.0
  },
  "splits the data": {
    "into": 1.0
  },
  "the data into": {
    "separate": 1.0
  },
  "data into separate": {
    "related": 0.5,
    "files": 0.5
  },
  "into separate related": {
    "files": 1.0
  },
  "separate related files": {
    "for": 1.0
  },
  "related files for": {
    "example": 1.0
  },
  "files for example": {
    "assume": 1.0
  },
  "example assume a": {
    "very": 1.0
  },
  "assume a very": {
    "simple": 1.0
  },
  "very simple order": {
    "entry": 1.0
  },
  "simple order entry": {
    "syste": 1.0
  },
  "order entry syste": {
    "m": 1.0
  },
  "entry syste m": {
    "which": 1.0
  },
  "syste m which": {
    "needs": 1.0
  },
  "m which needs": {
    "to": 1.0
  },
  "which needs to": {
    "store": 1.0
  },
  "needs to store": {
    "the": 1.0
  },
  "to store the": {
    "following": 1.0
  },
  "store the following": {
    "data": 1.0
  },
  "the following data": {
    "customer": 1.0
  },
  "following data customer": {
    "name": 1.0
  },
  "data customer name": {
    "customer": 1.0
  },
  "customer name customer": {
    "address": 1.0
  },
  "name customer address": {
    "shipto": 0.3333333333333333,
    "order": 0.6666666666666666
  },
  "customer address shipto": {
    "address": 1.0
  },
  "address shipto address": {
    "order": 0.5,
    "and": 0.5
  },
  "shipto address order": {
    "date": 1.0
  },
  "address order date": {
    "product": 0.3333333333333333,
    "item": 0.6666666666666666
  },
  "order date product": {
    "ordered": 1.0
  },
  "date product ordered": {
    "quantity": 1.0
  },
  "product ordered quantity": {
    "ordered": 1.0
  },
  "ordered quantity ordered": {
    "unit": 1.0
  },
  "quantity ordered unit": {
    "price": 1.0
  },
  "ordered unit price": {
    "this": 0.3333333333333333,
    "with": 0.3333333333333333,
    "in": 0.3333333333333333
  },
  "unit price this": {
    "data": 1.0
  },
  "price this data": {
    "could": 1.0
  },
  "this data could": {
    "all": 1.0
  },
  "data could all": {
    "be": 1.0
  },
  "all be stored": {
    "in": 1.0
  },
  "be stored in": {
    "each": 1.0
  },
  "stored in each": {
    "record": 1.0
  },
  "in each record": {
    "of": 1.0
  },
  "each record of": {
    "one": 1.0
  },
  "record of one": {
    "file": 1.0
  },
  "of one file": {
    "but": 1.0
  },
  "one file but": {
    "that": 1.0
  },
  "file but that": {
    "would": 1.0
  },
  "but that would": {
    "be": 1.0
  },
  "that would be": {
    "very": 1.0
  },
  "would be very": {
    "inefficient": 1.0
  },
  "be very inefficient": {
    "the": 1.0
  },
  "very inefficient the": {
    "customer": 1.0
  },
  "inefficient the customer": {
    "name": 1.0
  },
  "the customer name": {
    "address": 1.0
  },
  "customer name address": {
    "shipto": 0.5,
    "string": 0.5
  },
  "name address shipto": {
    "address": 1.0
  },
  "shipto address and": {
    "order": 1.0
  },
  "address and order": {
    "date": 1.0
  },
  "and order date": {
    "would": 1.0
  },
  "order date would": {
    "be": 1.0
  },
  "date would be": {
    "duplicated": 1.0
  },
  "would be duplicated": {
    "for": 1.0
  },
  "be duplicated for": {
    "every": 1.0
  },
  "duplicated for every": {
    "item": 1.0
  },
  "for every item": {
    "ordered": 1.0
  },
  "every item ordered": {
    "on": 1.0
  },
  "item ordered on": {
    "every": 1.0
  },
  "ordered on every": {
    "order": 1.0
  },
  "on every order": {
    "to": 1.0
  },
  "every order to": {
    "eliminate": 1.0
  },
  "order to eliminate": {
    "the": 1.0
  },
  "to eliminate the": {
    "duplication": 1.0
  },
  "eliminate the duplication": {
    "you": 1.0
  },
  "the duplication you": {
    "split": 1.0
  },
  "duplication you split": {
    "the": 1.0
  },
  "you split the": {
    "data": 1.0
  },
  "split the data": {
    "into": 1.0
  },
  "into separate files": {
    "customer": 1.0
  },
  "separate files customer": {
    "file": 1.0
  },
  "files customer file": {
    "customer": 1.0
  },
  "customer file customer": {
    "name": 0.5,
    "number": 0.5
  },
  "file customer name": {
    "customer": 1.0
  },
  "customer address order": {
    "file": 1.0
  },
  "address order file": {
    "shipto": 0.5,
    "order": 0.5
  },
  "order file shipto": {
    "address": 1.0
  },
  "file shipto address": {
    "order": 1.0
  },
  "order date item": {
    "file": 1.0
  },
  "date item file": {
    "product": 0.5,
    "order": 0.5
  },
  "item file product": {
    "ordered": 1.0
  },
  "file product ordered": {
    "quantity": 1.0
  },
  "unit price with": {
    "this": 1.0
  },
  "price with this": {
    "file": 1.0
  },
  "with this file": {
    "configuration": 1.0
  },
  "this file configuration": {
    "the": 1.0
  },
  "file configuration the": {
    "customer": 1.0
  },
  "configuration the customer": {
    "file": 1.0
  },
  "the customer file": {
    "contains": 0.2,
    "there": 0.2,
    "the": 0.4,
    "and": 0.2
  },
  "customer file contains": {
    "all": 1.0
  },
  "file contains all": {
    "the": 1.0
  },
  "all the customer": {
    "information": 1.0
  },
  "the customer information": {
    "the": 1.0
  },
  "customer information the": {
    "order": 1.0
  },
  "information the order": {
    "file": 1.0
  },
  "the order file": {
    "contains": 0.125,
    "as": 0.125,
    "to": 0.125,
    "it": 0.125,
    "is": 0.125,
    "and": 0.125,
    "many": 0.125,
    "was": 0.125
  },
  "order file contains": {
    "all": 1.0
  },
  "all the information": {
    "that": 0.6666666666666666,
    "for": 0.3333333333333333
  },
  "the information that": {
    "is": 0.5,
    "the": 0.5
  },
  "information that is": {
    "pertinent": 1.0
  },
  "that is pertinent": {
    "to": 1.0
  },
  "is pertinent to": {
    "one": 1.0
  },
  "pertinent to one": {
    "order": 1.0
  },
  "to one order": {
    "and": 1.0
  },
  "one order and": {
    "the": 1.0
  },
  "order and the": {
    "item": 1.0
  },
  "and the item": {
    "file": 1.0
  },
  "the item file": {
    "contains": 0.16666666666666666,
    "now": 0.16666666666666666,
    "also": 0.16666666666666666,
    "is": 0.16666666666666666,
    "and": 0.16666666666666666,
    "s": 0.16666666666666666
  },
  "item file contains": {
    "all": 1.0
  },
  "the information for": {
    "each": 1.0
  },
  "information for each": {
    "item": 1.0
  },
  "for each item": {
    "in": 1.0
  },
  "each item in": {
    "the": 1.0
  },
  "item in the": {
    "order": 1.0
  },
  "the order this": {
    "certainly": 1.0
  },
  "order this certainly": {
    "eliminates": 1.0
  },
  "this certainly eliminates": {
    "duplicate": 1.0
  },
  "certainly eliminates duplicate": {
    "data": 1.0
  },
  "eliminates duplicate data": {
    "however": 1.0
  },
  "duplicate data however": {
    "how": 1.0
  },
  "data however how": {
    "do": 1.0
  },
  "however how do": {
    "you": 1.0
  },
  "how do you": {
    "tell": 1.0
  },
  "do you tell": {
    "which": 1.0
  },
  "you tell which": {
    "record": 1.0
  },
  "tell which record": {
    "in": 1.0
  },
  "which record in": {
    "what": 1.0
  },
  "record in what": {
    "file": 1.0
  },
  "in what file": {
    "relates": 1.0
  },
  "what file relates": {
    "to": 1.0
  },
  "file relates to": {
    "what": 1.0
  },
  "relates to what": {
    "other": 1.0
  },
  "to what other": {
    "records": 1.0
  },
  "what other records": {
    "in": 1.0
  },
  "other records in": {
    "which": 1.0
  },
  "records in which": {
    "other": 1.0
  },
  "in which other": {
    "files": 1.0
  },
  "which other files": {
    "this": 1.0
  },
  "other files this": {
    "is": 1.0
  },
  "is the purpose": {
    "of": 1.0
  },
  "the relational terms": {
    "primar": 1.0
  },
  "relational terms primar": {
    "y": 1.0
  },
  "terms primar y": {
    "key": 1.0
  },
  "primar y key": {
    "and": 1.0
  },
  "y key and": {
    "foreign": 1.0
  },
  "key and foreign": {
    "key": 0.75,
    "k": 0.25
  },
  "and foreign key": {
    "a": 0.1,
    "product": 0.2,
    "shipto": 0.1,
    "quantity": 0.3,
    "address": 0.1,
    "prodno": 0.2
  },
  "foreign key a": {
    "primary": 1.0
  },
  "key a primary": {
    "key": 1.0
  },
  "a primary key": {
    "is": 0.4,
    "would": 0.2,
    "and": 0.2,
    "value": 0.2
  },
  "primary key is": {
    "an": 0.25,
    "required": 0.25,
    "not": 0.25,
    "a": 0.25
  },
  "key is an": {
    "index": 1.0
  },
  "is an index": {
    "into": 0.6666666666666666,
    "whose": 0.3333333333333333
  },
  "an index into": {
    "a": 1.0
  },
  "index into a": {
    "file": 1.0
  },
  "into a file": {
    "based": 0.5,
    "which": 0.5
  },
  "a file based": {
    "on": 1.0
  },
  "file based on": {
    "a": 1.0
  },
  "based on a": {
    "field": 1.0
  },
  "on a field": {
    "or": 1.0
  },
  "a field or": {
    "fields": 1.0
  },
  "field or fields": {
    "that": 0.5,
    "which": 0.5
  },
  "or fields that": {
    "cannot": 1.0
  },
  "fields that cannot": {
    "contain": 1.0
  },
  "that cannot contain": {
    "duplicate": 1.0
  },
  "cannot contain duplicate": {
    "or": 1.0
  },
  "contain duplicate or": {
    "null": 1.0
  },
  "duplicate or null": {
    "values": 1.0
  },
  "or null values": {
    "to": 1.0
  },
  "null values to": {
    "translat": 0.5,
    "the": 0.5
  },
  "values to translat": {
    "e": 1.0
  },
  "to translat e": {
    "this": 1.0
  },
  "translat e this": {
    "to": 1.0
  },
  "e this to": {
    "clarion": 1.0
  },
  "this to clarion": {
    "language": 1.0
  },
  "to clarion language": {
    "terms": 1.0
  },
  "clarion language terms": {
    "a": 1.0
  },
  "language terms a": {
    "primary": 1.0
  },
  "terms a primary": {
    "key": 1.0
  },
  "primary key would": {
    "be": 1.0
  },
  "key would be": {
    "a": 1.0
  },
  "would be a": {
    "unique": 1.0
  },
  "be a unique": {
    "key": 1.0
  },
  "a unique key": {
    "no": 0.5,
    "two": 0.5
  },
  "unique key no": {
    "dup": 1.0
  },
  "key no dup": {
    "attribute": 1.0
  },
  "no dup attribute": {
    "with": 1.0
  },
  "dup attribute with": {
    "key": 1.0
  },
  "attribute with key": {
    "compone": 1.0
  },
  "with key compone": {
    "nts": 1.0
  },
  "key compone nts": {
    "that": 1.0
  },
  "compone nts that": {
    "are": 1.0
  },
  "nts that are": {
    "all": 1.0
  },
  "that are all": {
    "required": 1.0
  },
  "are all required": {
    "fields": 1.0
  },
  "all required fields": {
    "for": 1.0
  },
  "required fields for": {
    "data": 1.0
  },
  "fields for data": {
    "entry": 1.0
  },
  "for data entry": {
    "in": 0.5,
    "verification": 0.5
  },
  "data entry in": {
    "strict": 1.0
  },
  "entry in strict": {
    "relational": 1.0
  },
  "in strict relational": {
    "database": 1.0
  },
  "strict relational database": {
    "design": 1.0
  },
  "design one primary": {
    "key": 1.0
  },
  "one primary key": {
    "is": 1.0
  },
  "key is required": {
    "for": 1.0
  },
  "required for every": {
    "file": 1.0
  },
  "for every file": {
    "a": 1.0
  },
  "every file a": {
    "foreign": 1.0
  },
  "file a foreign": {
    "key": 1.0
  },
  "a foreign key": {
    "is": 0.14285714285714285,
    "contains": 0.2857142857142857,
    "to": 0.2857142857142857,
    "the": 0.14285714285714285,
    "instead": 0.14285714285714285
  },
  "foreign key is": {
    "an": 0.5,
    "to": 0.5
  },
  "or fields which": {
    "contain": 1.0
  },
  "fields which contain": {
    "values": 1.0
  },
  "which contain values": {
    "that": 1.0
  },
  "contain values that": {
    "duplicate": 1.0
  },
  "values that duplicate": {
    "t": 1.0
  },
  "that duplicate t": {
    "he": 1.0
  },
  "duplicate t he": {
    "values": 1.0
  },
  "t he values": {
    "contained": 1.0
  },
  "he values contained": {
    "in": 1.0
  },
  "values contained in": {
    "the": 1.0
  },
  "contained in the": {
    "primary": 0.6666666666666666,
    "case": 0.3333333333333333
  },
  "in the primary": {
    "key": 0.5,
    "and": 0.5
  },
  "the primary key": {
    "fields": 0.04,
    "of": 0.04,
    "record": 0.2,
    "in": 0.04,
    "because": 0.04,
    "on": 0.04,
    "is": 0.04,
    "a": 0.04,
    "itm": 0.04,
    "the": 0.04,
    "value": 0.36,
    "being": 0.04,
    "values": 0.04
  },
  "primary key fields": {
    "of": 1.0
  },
  "key fields of": {
    "another": 1.0
  },
  "fields of another": {
    "related": 1.0
  },
  "of another related": {
    "file": 1.0
  },
  "another related file": {
    "to": 1.0
  },
  "related file to": {
    "re": 1.0
  },
  "file to re": {
    "state": 1.0
  },
  "to re state": {
    "this": 1.0
  },
  "re state this": {
    "a": 1.0
  },
  "state this a": {
    "foreign": 1.0
  },
  "this a foreign": {
    "key": 1.0
  },
  "foreign key contains": {
    "a": 1.0
  },
  "key contains a": {
    "reference": 1.0
  },
  "to the primary": {
    "key": 1.0
  },
  "primary key of": {
    "another": 1.0
  },
  "key of another": {
    "file": 1.0
  },
  "of another file": {
    "primary": 1.0
  },
  "another file primary": {
    "keys": 1.0
  },
  "file primary keys": {
    "and": 1.0
  },
  "primary keys and": {
    "foreign": 1.0
  },
  "keys and foreign": {
    "keys": 1.0
  },
  "and foreign keys": {
    "form": 0.2,
    "are": 0.2,
    "for": 0.2,
    "a": 0.2,
    "t": 0.2
  },
  "foreign keys form": {
    "the": 1.0
  },
  "keys form the": {
    "basis": 1.0
  },
  "form the basis": {
    "of": 1.0
  },
  "the basis of": {
    "file": 1.0
  },
  "basis of file": {
    "relationships": 1.0
  },
  "of file relationships": {
    "in": 1.0
  },
  "file relationships in": {
    "relational": 1.0
  },
  "relationships in relational": {
    "database": 1.0
  },
  "in relational database": {
    "the": 1.0
  },
  "relational database the": {
    "matching": 1.0
  },
  "database the matching": {
    "values": 1.0
  },
  "the matching values": {
    "contained": 1.0
  },
  "matching values contained": {
    "in": 1.0
  },
  "the primary and": {
    "foreign": 1.0
  },
  "primary and foreign": {
    "keys": 1.0
  },
  "foreign keys are": {
    "the": 1.0
  },
  "keys are the": {
    "pointers": 1.0
  },
  "are the pointers": {
    "to": 1.0
  },
  "the pointers to": {
    "the": 1.0
  },
  "pointers to the": {
    "related": 1.0
  },
  "to the related": {
    "records": 1.0
  },
  "the related records": {
    "the": 0.5,
    "in": 0.5
  },
  "related records the": {
    "foreign": 1.0
  },
  "records the foreign": {
    "key": 1.0
  },
  "foreign key records": {
    "in": 0.5,
    "from": 0.5
  },
  "key records in": {
    "file": 1.0
  },
  "records in file": {
    "a": 1.0
  },
  "in file a": {
    "point": 0.5,
    "defining": 0.5
  },
  "file a point": {
    "back": 1.0
  },
  "a point back": {
    "to": 1.0
  },
  "point back to": {
    "the": 1.0
  },
  "primary key record": {
    "in": 0.1,
    "record": 0.5,
    "what": 0.1,
    "or": 0.3
  },
  "key record in": {
    "file": 1.0
  },
  "record in file": {
    "b": 1.0
  },
  "in file b": {
    "and": 0.5,
    "points": 0.5
  },
  "file b and": {
    "the": 0.5,
    "cannot": 0.5
  },
  "b and the": {
    "primary": 1.0
  },
  "and the primary": {
    "key": 1.0
  },
  "primary key in": {
    "file": 1.0
  },
  "key in file": {
    "b": 1.0
  },
  "file b points": {
    "to": 1.0
  },
  "b points to": {
    "the": 1.0
  },
  "to the foreign": {
    "key": 1.0
  },
  "foreign key recor": {
    "ds": 1.0
  },
  "key recor ds": {
    "in": 1.0
  },
  "recor ds in": {
    "file": 1.0
  },
  "ds in file": {
    "a": 1.0
  },
  "file a defining": {
    "the": 1.0
  },
  "a defining the": {
    "primary": 1.0
  },
  "defining the primary": {
    "and": 1.0
  },
  "foreign keys for": {
    "the": 1.0
  },
  "keys for the": {
    "above": 1.0
  },
  "for the above": {
    "example": 1.0
  },
  "above example requires": {
    "that": 1.0
  },
  "example requires that": {
    "you": 1.0
  },
  "requires that you": {
    "add": 1.0
  },
  "that you add": {
    "some": 1.0
  },
  "you add some": {
    "fields": 1.0
  },
  "add some fields": {
    "to": 1.0
  },
  "some fields to": {
    "the": 1.0
  },
  "fields to the": {
    "files": 1.0
  },
  "to the files": {
    "to": 0.5,
    "need": 0.5
  },
  "the files to": {
    "fulfill": 1.0
  },
  "files to fulfill": {
    "the": 1.0
  },
  "to fulfill the": {
    "relational": 1.0
  },
  "fulfill the relational": {
    "requirements": 1.0
  },
  "the relational requirements": {
    "clarion": 1.0
  },
  "relational requirements clarion": {
    "language": 1.0
  },
  "requirements clarion language": {
    "programming": 1.0
  },
  "programming guide 40": {
    "customer": 1.0
  },
  "guide 40 customer": {
    "file": 1.0
  },
  "40 customer file": {
    "customer": 1.0
  },
  "file customer number": {
    "primary": 1.0
  },
  "customer number primary": {
    "key": 1.0
  },
  "number primary key": {
    "customer": 0.25,
    "and": 0.16666666666666666,
    "part": 0.16666666666666666,
    "product": 0.16666666666666666,
    "name": 0.08333333333333333,
    "custno": 0.08333333333333333,
    "description": 0.08333333333333333
  },
  "primary key customer": {
    "name": 0.3333333333333333,
    "number": 0.6666666666666666
  },
  "key customer name": {
    "customer": 1.0
  },
  "order file order": {
    "number": 1.0
  },
  "file order number": {
    "primary": 0.75,
    "1st": 0.25
  },
  "order number primary": {
    "key": 1.0
  },
  "key customer number": {
    "foreign": 1.0
  },
  "customer number foreign": {
    "key": 1.0
  },
  "number foreign key": {
    "shipto": 0.3333333333333333,
    "order": 0.3333333333333333,
    "date": 0.3333333333333333
  },
  "foreign key shipto": {
    "address": 1.0
  },
  "key shipto address": {
    "order": 0.5,
    "41": 0.5
  },
  "item file order": {
    "number": 1.0
  },
  "order number 1st": {
    "primary": 1.0
  },
  "number 1st primary": {
    "key": 1.0
  },
  "1st primary key": {
    "component": 1.0
  },
  "primary key component": {
    "and": 0.75,
    "quantity": 0.25
  },
  "key component and": {
    "foreign": 1.0
  },
  "component and foreign": {
    "key": 1.0
  },
  "foreign key product": {
    "ordered": 0.5,
    "number": 0.5
  },
  "key product ordered": {
    "2nd": 1.0
  },
  "product ordered 2nd": {
    "primary": 1.0
  },
  "ordered 2nd primary": {
    "key": 1.0
  },
  "2nd primary key": {
    "component": 1.0
  },
  "key component quantity": {
    "ordered": 1.0
  },
  "component quantity ordered": {
    "unit": 1.0
  },
  "unit price in": {
    "the": 1.0
  },
  "price in the": {
    "customer": 1.0
  },
  "in the customer": {
    "file": 1.0
  },
  "customer file there": {
    "is": 1.0
  },
  "file there is": {
    "no": 1.0
  },
  "is no guarantee": {
    "that": 1.0
  },
  "no guarantee that": {
    "there": 1.0
  },
  "guarantee that there": {
    "could": 1.0
  },
  "that there could": {
    "not": 1.0
  },
  "there could not": {
    "be": 1.0
  },
  "could not be": {
    "duplicate": 1.0
  },
  "not be duplicate": {
    "customer": 1.0
  },
  "be duplicate customer": {
    "names": 1.0
  },
  "duplicate customer names": {
    "therefore": 1.0
  },
  "customer names therefore": {
    "the": 1.0
  },
  "names therefore the": {
    "customer": 1.0
  },
  "therefore the customer": {
    "number": 1.0
  },
  "the customer number": {
    "field": 0.5,
    "was": 0.5
  },
  "customer number field": {
    "is": 1.0
  },
  "number field is": {
    "added": 1.0
  },
  "field is added": {
    "to": 1.0
  },
  "is added to": {
    "become": 0.5,
    "the": 0.5
  },
  "added to become": {
    "t": 1.0
  },
  "to become t": {
    "he": 1.0
  },
  "become t he": {
    "primary": 1.0
  },
  "t he primary": {
    "key": 1.0
  },
  "he primary key": {
    "the": 1.0
  },
  "primary key the": {
    "order": 0.3333333333333333,
    "relational": 0.3333333333333333,
    "item": 0.3333333333333333
  },
  "key the order": {
    "number": 1.0
  },
  "the order number": {
    "has": 0.5,
    "as": 0.5
  },
  "order number has": {
    "been": 1.0
  },
  "number has been": {
    "added": 1.0
  },
  "has been added": {
    "to": 1.0
  },
  "been added to": {
    "the": 1.0
  },
  "added to the": {
    "order": 0.3333333333333333,
    "shipto": 0.3333333333333333,
    "database": 0.3333333333333333
  },
  "to the order": {
    "file": 1.0
  },
  "order file as": {
    "the": 1.0
  },
  "file as the": {
    "primary": 1.0
  },
  "as the primary": {
    "key": 1.0
  },
  "primary key because": {
    "there": 1.0
  },
  "key because there": {
    "is": 1.0
  },
  "because there is": {
    "no": 1.0
  },
  "is no other": {
    "field": 1.0
  },
  "no other field": {
    "that": 1.0
  },
  "other field that": {
    "is": 1.0
  },
  "field that is": {
    "absolutely": 1.0
  },
  "that is absolutely": {
    "unique": 1.0
  },
  "is absolutely unique": {
    "in": 1.0
  },
  "absolutely unique in": {
    "that": 1.0
  },
  "unique in that": {
    "file": 1.0
  },
  "in that file": {
    "the": 1.0
  },
  "that file the": {
    "customer": 1.0
  },
  "file the customer": {
    "number": 1.0
  },
  "customer number was": {
    "also": 1.0
  },
  "number was also": {
    "added": 1.0
  },
  "was also added": {
    "as": 1.0
  },
  "also added as": {
    "a": 1.0
  },
  "added as a": {
    "foreign": 1.0
  },
  "as a foreign": {
    "key": 1.0
  },
  "foreign key to": {
    "relate": 1.0
  },
  "key to relate": {
    "the": 0.5,
    "to": 0.5
  },
  "to relate the": {
    "order": 1.0
  },
  "relate the order": {
    "file": 1.0
  },
  "order file to": {
    "the": 1.0
  },
  "file to the": {
    "customer": 0.5,
    "database": 0.5
  },
  "to the customer": {
    "file": 1.0
  },
  "customer file the": {
    "item": 0.5,
    "shipto": 0.5
  },
  "file the item": {
    "file": 1.0
  },
  "item file now": {
    "contains": 1.0
  },
  "file now contains": {
    "the": 1.0
  },
  "contains the order": {
    "number": 1.0
  },
  "order number as": {
    "a": 1.0
  },
  "number as a": {
    "foreign": 1.0
  },
  "to relate to": {
    "the": 1.0
  },
  "relate to the": {
    "order": 1.0
  },
  "order file it": {
    "also": 1.0
  },
  "file it also": {
    "becomes": 1.0
  },
  "it also becomes": {
    "the": 1.0
  },
  "also becomes the": {
    "first": 1.0
  },
  "becomes the first": {
    "component": 1.0
  },
  "the first component": {
    "of": 0.5,
    "field": 0.5
  },
  "first component of": {
    "the": 1.0
  },
  "component of the": {
    "multiple": 1.0
  },
  "of the multiple": {
    "component": 1.0
  },
  "the multiple component": {
    "order": 1.0
  },
  "multiple component order": {
    "number": 1.0
  },
  "component order number": {
    "product": 1.0
  },
  "order number product": {
    "ordered": 1.0
  },
  "number product ordered": {
    "primary": 1.0
  },
  "product ordered primary": {
    "key": 1.0
  },
  "ordered primary key": {
    "the": 1.0
  },
  "key the relational": {
    "definitions": 1.0
  },
  "the relational definitions": {
    "of": 1.0
  },
  "relational definitions of": {
    "primary": 1.0
  },
  "definitions of primary": {
    "key": 1.0
  },
  "of primary key": {
    "and": 0.5,
    "declarations": 0.5
  },
  "primary key and": {
    "foreign": 0.6,
    "two": 0.2,
    "the": 0.2
  },
  "and foreign k": {
    "ey": 1.0
  },
  "foreign k ey": {
    "do": 1.0
  },
  "k ey do": {
    "not": 1.0
  },
  "ey do not": {
    "necessarily": 1.0
  },
  "do not necessarily": {
    "require": 1.0
  },
  "not necessarily require": {
    "the": 1.0
  },
  "necessarily require the": {
    "declaration": 1.0
  },
  "require the declaration": {
    "of": 1.0
  },
  "the declaration of": {
    "a": 1.0
  },
  "declaration of a": {
    "clarion": 1.0
  },
  "of a clarion": {
    "key": 1.0
  },
  "a clarion key": {
    "based": 0.14285714285714285,
    "if": 0.14285714285714285,
    "but": 0.14285714285714285,
    "may": 0.14285714285714285,
    "a": 0.2857142857142857,
    "is": 0.14285714285714285
  },
  "clarion key based": {
    "on": 1.0
  },
  "key based on": {
    "the": 1.0
  },
  "based on the": {
    "primary": 0.6666666666666666,
    "sort": 0.3333333333333333
  },
  "on the primary": {
    "or": 0.5,
    "key": 0.5
  },
  "the primary or": {
    "foreign": 1.0
  },
  "primary or foreign": {
    "key": 1.0
  },
  "or foreign key": {
    "this": 1.0
  },
  "foreign key this": {
    "means": 1.0
  },
  "key this means": {
    "that": 1.0
  },
  "means that despite": {
    "the": 1.0
  },
  "that despite the": {
    "fact": 1.0
  },
  "fact that these": {
    "keys": 1.0
  },
  "that these keys": {
    "exist": 1.0
  },
  "these keys exist": {
    "in": 1.0
  },
  "keys exist in": {
    "theory": 1.0
  },
  "exist in theory": {
    "you": 1.0
  },
  "in theory you": {
    "will": 1.0
  },
  "theory you will": {
    "only": 1.0
  },
  "you will only": {
    "declare": 1.0
  },
  "will only declare": {
    "a": 1.0
  },
  "only declare a": {
    "clarion": 1.0
  },
  "declare a clarion": {
    "key": 1.0
  },
  "clarion key if": {
    "your": 1.0
  },
  "key if your": {
    "application": 1.0
  },
  "if your application": {
    "actually": 1.0
  },
  "your application actually": {
    "needs": 1.0
  },
  "application actually needs": {
    "it": 1.0
  },
  "actually needs it": {
    "for": 1.0
  },
  "needs it for": {
    "some": 1.0
  },
  "it for some": {
    "speci": 0.5,
    "kind": 0.5
  },
  "for some speci": {
    "fic": 1.0
  },
  "some speci fic": {
    "file": 1.0
  },
  "speci fic file": {
    "access": 1.0
  },
  "fic file access": {
    "generally": 1.0
  },
  "file access generally": {
    "speaking": 1.0
  },
  "access generally speaking": {
    "most": 1.0
  },
  "generally speaking most": {
    "all": 1.0
  },
  "speaking most all": {
    "primary": 1.0
  },
  "most all primary": {
    "keys": 1.0
  },
  "all primary keys": {
    "will": 1.0
  },
  "primary keys will": {
    "have": 1.0
  },
  "keys will have": {
    "a": 1.0
  },
  "will have a": {
    "clarion": 1.0
  },
  "have a clarion": {
    "key": 1.0
  },
  "clarion key but": {
    "fewer": 1.0
  },
  "key but fewer": {
    "foreign": 1.0
  },
  "but fewer foreign": {
    "keys": 1.0
  },
  "fewer foreign keys": {
    "need": 1.0
  },
  "foreign keys need": {
    "have": 1.0
  },
  "keys need have": {
    "clarion": 1.0
  },
  "need have clarion": {
    "keys": 1.0
  },
  "have clarion keys": {
    "declared": 1.0
  },
  "clarion keys declared": {
    "file": 0.5,
    "referential": 0.5
  },
  "keys declared file": {
    "relationships": 1.0
  },
  "declared file relationships": {
    "there": 1.0
  },
  "file relationships there": {
    "are": 1.0
  },
  "relationships there are": {
    "three": 1.0
  },
  "are three types": {
    "of": 1.0
  },
  "three types of": {
    "relationships": 1.0
  },
  "types of relationships": {
    "that": 1.0
  },
  "of relationships that": {
    "may": 1.0
  },
  "relationships that may": {
    "be": 1.0
  },
  "may be defined": {
    "between": 1.0
  },
  "be defined between": {
    "a": 1.0
  },
  "defined between a": {
    "ny": 1.0
  },
  "between a ny": {
    "two": 1.0
  },
  "a ny two": {
    "files": 1.0
  },
  "ny two files": {
    "in": 1.0
  },
  "two files in": {
    "a": 1.0
  },
  "files in a": {
    "relational": 1.0
  },
  "in a relational": {
    "database": 1.0
  },
  "relational database one": {
    "to": 1.0
  },
  "database one to": {
    "one": 1.0
  },
  "one to one": {
    "one": 0.2,
    "relationship": 0.6,
    "file": 0.2
  },
  "to one one": {
    "to": 1.0
  },
  "one one to": {
    "many": 1.0
  },
  "one to many": {
    "also": 0.09090909090909091,
    "one": 0.09090909090909091,
    "relation": 0.09090909090909091,
    "parent": 0.18181818181818182,
    "relationships": 0.18181818181818182,
    "and": 0.09090909090909091,
    "this": 0.09090909090909091,
    "looked": 0.09090909090909091,
    "file": 0.09090909090909091
  },
  "to many also": {
    "called": 1.0
  },
  "many also called": {
    "parent": 1.0
  },
  "also called parent": {
    "child": 1.0
  },
  "called parent child": {
    "and": 1.0
  },
  "parent child and": {
    "its": 0.5,
    "many": 0.5
  },
  "child and its": {
    "reverse": 1.0
  },
  "and its reverse": {
    "view": 1.0
  },
  "its reverse view": {
    "many": 1.0
  },
  "reverse view many": {
    "to": 1.0
  },
  "view many to": {
    "one": 1.0
  },
  "many to one": {
    "and": 0.3333333333333333,
    "relationship": 0.3333333333333333,
    "same": 0.3333333333333333
  },
  "to one and": {
    "many": 1.0
  },
  "one and many": {
    "to": 1.0
  },
  "and many to": {
    "many": 0.5,
    "one": 0.5
  },
  "many to many": {
    "these": 0.2,
    "is": 0.2,
    "relationship": 0.4,
    "relationships": 0.2
  },
  "to many these": {
    "relationships": 1.0
  },
  "many these relationships": {
    "refer": 1.0
  },
  "these relationships refer": {
    "to": 1.0
  },
  "relationships refer to": {
    "the": 1.0
  },
  "refer to the": {
    "number": 1.0
  },
  "to the number": {
    "of": 1.0
  },
  "number of records": {
    "in": 1.0
  },
  "of records in": {
    "one": 0.3333333333333333,
    "the": 0.3333333333333333,
    "some": 0.3333333333333333
  },
  "records in one": {
    "file": 0.75,
    "direction": 0.25
  },
  "in one file": {
    "that": 0.2,
    "may": 0.2,
    "you": 0.2,
    "are": 0.2,
    "and": 0.2
  },
  "one file that": {
    "are": 1.0
  },
  "file that are": {
    "related": 1.0
  },
  "that are related": {
    "to": 1.0
  },
  "are related to": {
    "some": 0.5,
    "multiple": 0.5
  },
  "related to some": {
    "number": 1.0
  },
  "to some number": {
    "of": 1.0
  },
  "some number of": {
    "records": 1.0
  },
  "records in the": {
    "second": 0.2,
    "product": 0.2,
    "file": 0.4,
    "locked": 0.2
  },
  "in the second": {
    "file": 0.5,
    "form": 0.5
  },
  "the second file": {
    "in": 1.0
  },
  "second file in": {
    "the": 1.0
  },
  "file in the": {
    "previous": 0.5,
    "sequence": 0.5
  },
  "in the previous": {
    "example": 0.5,
    "procedure": 0.5
  },
  "previous example the": {
    "relationship": 1.0
  },
  "example the relationship": {
    "between": 1.0
  },
  "the relationship between": {
    "the": 0.3333333333333333,
    "parts": 0.3333333333333333,
    "product": 0.3333333333333333
  },
  "relationship between the": {
    "customer": 1.0
  },
  "between the customer": {
    "file": 1.0
  },
  "customer file and": {
    "the": 1.0
  },
  "and the order": {
    "file": 1.0
  },
  "order file is": {
    "one": 1.0
  },
  "file is one": {
    "to": 1.0
  },
  "is one to": {
    "many": 1.0
  },
  "to many one": {
    "customer": 1.0
  },
  "many one customer": {
    "file": 1.0
  },
  "one customer file": {
    "record": 1.0
  },
  "customer file record": {
    "may": 1.0
  },
  "file record may": {
    "be": 1.0
  },
  "record may be": {
    "related": 1.0
  },
  "may be related": {
    "to": 1.0
  },
  "be related to": {
    "multiple": 0.5,
    "exactly": 0.5
  },
  "related to multiple": {
    "order": 0.5,
    "records": 0.5
  },
  "to multiple order": {
    "file": 1.0
  },
  "multiple order file": {
    "records": 1.0
  },
  "order file records": {
    "the": 1.0
  },
  "file records the": {
    "order": 1.0
  },
  "records the order": {
    "file": 1.0
  },
  "order file and": {
    "the": 1.0
  },
  "item file also": {
    "have": 1.0
  },
  "file also have": {
    "a": 1.0
  },
  "also have a": {
    "one": 1.0
  },
  "have a one": {
    "to": 1.0
  },
  "a one to": {
    "many": 0.25,
    "one": 0.75
  },
  "to many relation": {
    "ship": 1.0
  },
  "many relation ship": {
    "since": 1.0
  },
  "relation ship since": {
    "one": 1.0
  },
  "ship since one": {
    "order": 1.0
  },
  "since one order": {
    "may": 1.0
  },
  "one order may": {
    "have": 1.0
  },
  "order may have": {
    "multiple": 1.0
  },
  "may have multiple": {
    "items": 1.0
  },
  "have multiple items": {
    "in": 1.0
  },
  "multiple items in": {
    "business": 1.0
  },
  "items in business": {
    "database": 1.0
  },
  "in business database": {
    "applications": 1.0
  },
  "business database applications": {
    "one": 0.5,
    "this": 0.5
  },
  "database applications one": {
    "to": 1.0
  },
  "applications one to": {
    "many": 1.0
  },
  "to many parent": {
    "child": 1.0
  },
  "many parent child": {
    "is": 0.5,
    "relationship": 0.5
  },
  "parent child is": {
    "the": 1.0
  },
  "child is the": {
    "most": 1.0
  },
  "is the most": {
    "common": 0.5,
    "difficult": 0.5
  },
  "most common relationship": {
    "between": 1.0
  },
  "common relationship between": {
    "files": 1.0
  },
  "relationship between files": {
    "a": 1.0
  },
  "between files a": {
    "one": 1.0
  },
  "files a one": {
    "to": 1.0
  },
  "to one relationship": {
    "means": 0.25,
    "to": 0.25,
    "with": 0.25,
    "which": 0.25
  },
  "one relationship means": {
    "that": 1.0
  },
  "relationship means that": {
    "exactly": 1.0
  },
  "means that exactly": {
    "one": 1.0
  },
  "that exactly one": {
    "record": 1.0
  },
  "exactly one record": {
    "in": 1.0
  },
  "one record in": {
    "one": 0.3333333333333333,
    "another": 0.3333333333333333,
    "ea": 0.3333333333333333
  },
  "record in one": {
    "file": 1.0
  },
  "one file may": {
    "be": 1.0
  },
  "file may be": {
    "related": 1.0
  },
  "related to exactly": {
    "one": 1.0
  },
  "to exactly one": {
    "record": 1.0
  },
  "record in another": {
    "file": 1.0
  },
  "in another file": {
    "this": 0.3333333333333333,
    "expand": 0.3333333333333333,
    "table": 0.3333333333333333
  },
  "another file this": {
    "is": 1.0
  },
  "file this is": {
    "useful": 0.5,
    "a": 0.5
  },
  "is useful in": {
    "situations": 0.5,
    "files": 0.5
  },
  "useful in situations": {
    "where": 1.0
  },
  "in situations where": {
    "a": 1.0
  },
  "situations where a": {
    "particular": 1.0
  },
  "where a particular": {
    "file": 1.0
  },
  "a particular file": {
    "may": 1.0
  },
  "particular file may": {
    "or": 1.0
  },
  "file may or": {
    "may": 1.0
  },
  "may or may": {
    "not": 1.0
  },
  "or may not": {
    "need": 1.0
  },
  "may not need": {
    "to": 1.0
  },
  "need to have": {
    "data": 0.3333333333333333,
    "a": 0.3333333333333333,
    "clarion": 0.3333333333333333
  },
  "to have data": {
    "in": 1.0
  },
  "have data in": {
    "some": 1.0
  },
  "data in some": {
    "fields": 1.0
  },
  "in some fields": {
    "if": 1.0
  },
  "some fields if": {
    "all": 1.0
  },
  "fields if all": {
    "the": 1.0
  },
  "if all the": {
    "fields": 1.0
  },
  "all the fields": {
    "ar": 1.0
  },
  "the fields ar": {
    "e": 1.0
  },
  "fields ar e": {
    "contained": 1.0
  },
  "ar e contained": {
    "in": 1.0
  },
  "e contained in": {
    "one": 1.0
  },
  "contained in one": {
    "file": 1.0
  },
  "one file you": {
    "can": 1.0
  },
  "file you can": {
    "waste": 1.0
  },
  "you can waste": {
    "a": 1.0
  },
  "can waste a": {
    "lot": 1.0
  },
  "waste a lot": {
    "of": 1.0
  },
  "lot of disk": {
    "space": 1.0
  },
  "of disk space": {
    "with": 1.0
  },
  "disk space with": {
    "empty": 1.0
  },
  "space with empty": {
    "fields": 1.0
  },
  "with empty fields": {
    "in": 1.0
  },
  "empty fields in": {
    "those": 1.0
  },
  "fields in those": {
    "records": 1.0
  },
  "in those records": {
    "that": 1.0
  },
  "those records that": {
    "don": 1.0
  },
  "records that don": {
    "t": 1.0
  },
  "don t n": {
    "eed": 1.0
  },
  "t n eed": {
    "the": 1.0
  },
  "n eed the": {
    "extra": 1.0
  },
  "eed the extra": {
    "information": 1.0
  },
  "the extra information": {
    "therefore": 1.0
  },
  "extra information therefore": {
    "you": 1.0
  },
  "information therefore you": {
    "create": 1.0
  },
  "therefore you create": {
    "a": 1.0
  },
  "you create a": {
    "second": 1.0
  },
  "create a second": {
    "file": 1.0
  },
  "a second file": {
    "with": 1.0
  },
  "second file with": {
    "a": 1.0
  },
  "file with a": {
    "one": 1.0
  },
  "with a one": {
    "to": 1.0
  },
  "one relationship to": {
    "the": 1.0
  },
  "relationship to the": {
    "first": 1.0
  },
  "to the first": {
    "file": 1.0
  },
  "the first file": {
    "to": 1.0
  },
  "first file to": {
    "hold": 1.0
  },
  "file to hold": {
    "the": 1.0
  },
  "to hold the": {
    "possibly": 1.0
  },
  "hold the possibly": {
    "unnecessary": 1.0
  },
  "the possibly unnecessary": {
    "fields": 1.0
  },
  "possibly unnecessary fields": {
    "to": 1.0
  },
  "unnecessary fields to": {
    "expand": 1.0
  },
  "fields to expand": {
    "the": 1.0
  },
  "to expand the": {
    "previous": 1.0
  },
  "expand the previous": {
    "example": 1.0
  },
  "previous example an": {
    "order": 1.0
  },
  "example an order": {
    "may": 1.0
  },
  "an order may": {
    "or": 1.0
  },
  "order may or": {
    "may": 1.0
  },
  "to have a": {
    "separate": 1.0
  },
  "have a separate": {
    "shipto": 1.0
  },
  "a separate shipto": {
    "address": 1.0
  },
  "separate shipto address": {
    "so": 1.0
  },
  "shipto address so": {
    "you": 1.0
  },
  "address so you": {
    "could": 1.0
  },
  "so you could": {
    "add": 1.0
  },
  "you could add": {
    "a": 1.0
  },
  "could add a": {
    "shipto": 1.0
  },
  "add a shipto": {
    "file": 1.0
  },
  "a shipto file": {
    "to": 1.0
  },
  "shipto file to": {
    "the": 1.0
  },
  "to the database": {
    "design": 0.25,
    "the": 0.25,
    "you": 0.25,
    "for": 0.25
  },
  "database design order": {
    "file": 1.0
  },
  "design order file": {
    "order": 1.0
  },
  "foreign key order": {
    "date": 1.0
  },
  "key order date": {
    "shipto": 1.0
  },
  "order date shipto": {
    "file": 1.0
  },
  "date shipto file": {
    "order": 1.0
  },
  "shipto file order": {
    "number": 1.0
  },
  "shipto address 41": {
    "database": 1.0
  },
  "address 41 database": {
    "design": 1.0
  },
  "41 database design": {
    "in": 1.0
  },
  "database design in": {
    "this": 1.0
  },
  "design in this": {
    "example": 1.0
  },
  "this example a": {
    "record": 1.0
  },
  "example a record": {
    "would": 1.0
  },
  "a record would": {
    "be": 1.0
  },
  "record would be": {
    "added": 0.5,
    "held": 0.5
  },
  "would be added": {
    "to": 1.0
  },
  "be added to": {
    "the": 1.0
  },
  "to the shipto": {
    "file": 1.0
  },
  "the shipto file": {
    "only": 0.5,
    "has": 0.5
  },
  "shipto file only": {
    "if": 1.0
  },
  "file only if": {
    "an": 1.0
  },
  "only if an": {
    "order": 1.0
  },
  "if an order": {
    "has": 1.0
  },
  "an order has": {
    "to": 1.0
  },
  "order has to": {
    "be": 1.0
  },
  "has to be": {
    "shipped": 1.0
  },
  "to be shipped": {
    "to": 1.0
  },
  "be shipped to": {
    "some": 1.0
  },
  "shipped to some": {
    "address": 1.0
  },
  "to some address": {
    "other": 1.0
  },
  "some address other": {
    "than": 1.0
  },
  "address other than": {
    "the": 1.0
  },
  "than the address": {
    "in": 1.0
  },
  "the address in": {
    "the": 1.0
  },
  "file the shipto": {
    "file": 1.0
  },
  "shipto file has": {
    "a": 1.0
  },
  "file has a": {
    "one": 0.3333333333333333,
    "multiple": 0.3333333333333333,
    "unique": 0.3333333333333333
  },
  "has a one": {
    "to": 1.0
  },
  "one relationship with": {
    "the": 1.0
  },
  "relationship with the": {
    "order": 1.0
  },
  "with the order": {
    "file": 1.0
  },
  "order file many": {
    "to": 1.0
  },
  "file many to": {
    "many": 1.0
  },
  "to many is": {
    "the": 1.0
  },
  "many is the": {
    "most": 1.0
  },
  "the most difficult": {
    "file": 1.0
  },
  "most difficult file": {
    "relationship": 1.0
  },
  "difficult file relationship": {
    "with": 1.0
  },
  "file relationship with": {
    "which": 1.0
  },
  "relationship with which": {
    "to": 1.0
  },
  "with which to": {
    "deal": 1.0
  },
  "which to deal": {
    "it": 1.0
  },
  "to deal it": {
    "means": 1.0
  },
  "deal it means": {
    "that": 1.0
  },
  "it means that": {
    "multiple": 1.0
  },
  "means that multiple": {
    "records": 1.0
  },
  "that multiple records": {
    "in": 1.0
  },
  "multiple records in": {
    "one": 0.6666666666666666,
    "another": 0.3333333333333333
  },
  "one file are": {
    "related": 1.0
  },
  "file are related": {
    "to": 1.0
  },
  "to multiple records": {
    "in": 1.0
  },
  "records in another": {
    "file": 1.0
  },
  "another file expand": {
    "the": 1.0
  },
  "file expand the": {
    "previous": 1.0
  },
  "previous example to": {
    "fit": 1.0
  },
  "example to fit": {
    "a": 1.0
  },
  "to fit a": {
    "manufacturing": 1.0
  },
  "fit a manufacturing": {
    "concern": 1.0
  },
  "a manufacturing concern": {
    "which": 1.0
  },
  "manufacturing concern which": {
    "buys": 1.0
  },
  "concern which buys": {
    "parts": 1.0
  },
  "which buys parts": {
    "and": 1.0
  },
  "buys parts and": {
    "makes": 1.0
  },
  "parts and makes": {
    "products": 1.0
  },
  "and makes products": {
    "one": 1.0
  },
  "makes products one": {
    "part": 1.0
  },
  "products one part": {
    "may": 1.0
  },
  "one part may": {
    "be": 1.0
  },
  "part may be": {
    "used": 1.0
  },
  "be used in": {
    "ma": 0.5,
    "all": 0.5
  },
  "used in ma": {
    "ny": 1.0
  },
  "in ma ny": {
    "different": 1.0
  },
  "ma ny different": {
    "products": 1.0
  },
  "ny different products": {
    "and": 1.0
  },
  "different products and": {
    "one": 1.0
  },
  "products and one": {
    "product": 1.0
  },
  "and one product": {
    "could": 1.0
  },
  "one product could": {
    "use": 1.0
  },
  "product could use": {
    "many": 1.0
  },
  "could use many": {
    "parts": 1.0
  },
  "use many parts": {
    "parts": 1.0
  },
  "many parts parts": {
    "file": 1.0
  },
  "parts parts file": {
    "part": 1.0
  },
  "parts file part": {
    "number": 1.0
  },
  "file part number": {
    "primary": 0.6666666666666666,
    "1st": 0.3333333333333333
  },
  "part number primary": {
    "key": 1.0
  },
  "primary key part": {
    "description": 1.0
  },
  "key part description": {
    "product": 0.5,
    "parts2prod": 0.5
  },
  "part description product": {
    "file": 1.0
  },
  "description product file": {
    "product": 1.0
  },
  "product file product": {
    "number": 1.0
  },
  "file product number": {
    "primary": 1.0
  },
  "product number primary": {
    "key": 1.0
  },
  "primary key product": {
    "description": 1.0
  },
  "key product description": {
    "without": 0.5,
    "the": 0.5
  },
  "product description without": {
    "going": 1.0
  },
  "description without going": {
    "into": 1.0
  },
  "without going into": {
    "the": 1.0
  },
  "going into the": {
    "theory": 1.0
  },
  "into the theory": {
    "let": 1.0
  },
  "the theory let": {
    "me": 1.0
  },
  "theory let me": {
    "simply": 1.0
  },
  "let me simply": {
    "s": 1.0
  },
  "me simply s": {
    "tate": 1.0
  },
  "simply s tate": {
    "that": 1.0
  },
  "s tate that": {
    "this": 1.0
  },
  "tate that this": {
    "situation": 1.0
  },
  "that this situation": {
    "is": 1.0
  },
  "this situation is": {
    "handled": 1.0
  },
  "situation is handled": {
    "by": 1.0
  },
  "is handled by": {
    "defining": 1.0
  },
  "handled by defining": {
    "a": 1.0
  },
  "by defining a": {
    "third": 1.0
  },
  "defining a third": {
    "file": 1.0
  },
  "a third file": {
    "commonly": 1.0
  },
  "third file commonly": {
    "referred": 1.0
  },
  "file commonly referred": {
    "to": 1.0
  },
  "as a join": {
    "file": 1.0
  },
  "a join file": {
    "this": 0.3333333333333333,
    "is": 0.3333333333333333,
    "which": 0.3333333333333333
  },
  "join file this": {
    "join": 1.0
  },
  "file this join": {
    "file": 1.0
  },
  "this join file": {
    "creates": 1.0
  },
  "join file creates": {
    "two": 1.0
  },
  "file creates two": {
    "one": 1.0
  },
  "creates two one": {
    "to": 1.0
  },
  "two one to": {
    "many": 1.0
  },
  "to many relationships": {
    "as": 0.3333333333333333,
    "require": 0.3333333333333333,
    "between": 0.3333333333333333
  },
  "many relationships as": {
    "in": 1.0
  },
  "relationships as in": {
    "this": 1.0
  },
  "as in this": {
    "example": 1.0
  },
  "this example parts": {
    "file": 1.0
  },
  "example parts file": {
    "part": 1.0
  },
  "part description parts2prod": {
    "file": 1.0
  },
  "description parts2prod file": {
    "part": 1.0
  },
  "parts2prod file part": {
    "number": 1.0
  },
  "part number 1st": {
    "primary": 1.0
  },
  "key product number": {
    "2nd": 1.0
  },
  "product number 2nd": {
    "primary": 1.0
  },
  "number 2nd primary": {
    "key": 1.0
  },
  "foreign key quantity": {
    "used": 0.3333333333333333,
    "short": 0.6666666666666666
  },
  "key quantity used": {
    "product": 1.0
  },
  "quantity used product": {
    "file": 1.0
  },
  "used product file": {
    "product": 1.0
  },
  "product description the": {
    "parts2prod": 1.0
  },
  "description the parts2prod": {
    "file": 1.0
  },
  "the parts2prod file": {
    "has": 0.5,
    "clarion": 0.5
  },
  "parts2prod file has": {
    "a": 1.0
  },
  "has a multiple": {
    "component": 1.0
  },
  "a multiple component": {
    "primary": 0.3333333333333333,
    "index": 0.6666666666666666
  },
  "multiple component primary": {
    "key": 1.0
  },
  "component primary key": {
    "and": 1.0
  },
  "key and two": {
    "foreign": 1.0
  },
  "and two foreign": {
    "keys": 1.0
  },
  "two foreign keys": {
    "the": 1.0
  },
  "foreign keys the": {
    "relationship": 1.0
  },
  "keys the relationship": {
    "between": 1.0
  },
  "relationship between parts": {
    "and": 1.0
  },
  "between parts and": {
    "parts2prod": 1.0
  },
  "parts and parts2prod": {
    "is": 1.0
  },
  "and parts2prod is": {
    "one": 0.5,
    "also": 0.5
  },
  "parts2prod is one": {
    "to": 1.0
  },
  "to many and": {
    "the": 1.0
  },
  "many and the": {
    "relationship": 1.0
  },
  "and the relationship": {
    "between": 1.0
  },
  "relationship between product": {
    "and": 1.0
  },
  "between product and": {
    "parts2prod": 1.0
  },
  "product and parts2prod": {
    "is": 1.0
  },
  "parts2prod is also": {
    "one": 1.0
  },
  "is also one": {
    "to": 1.0
  },
  "also one to": {
    "many": 1.0
  },
  "to many this": {
    "makes": 1.0
  },
  "many this makes": {
    "the": 1.0
  },
  "makes the join": {
    "file": 1.0
  },
  "the join file": {
    "the": 0.5,
    "inserts": 0.5
  },
  "join file the": {
    "middle": 1.0
  },
  "file the middle": {
    "man": 1.0
  },
  "the middle man": {
    "between": 1.0
  },
  "middle man between": {
    "two": 1.0
  },
  "man between two": {
    "files": 1.0
  },
  "between two files": {
    "with": 0.5,
    "tables": 0.5
  },
  "two files with": {
    "a": 1.0
  },
  "files with a": {
    "many": 1.0
  },
  "with a many": {
    "to": 1.0
  },
  "a many to": {
    "many": 0.5,
    "one": 0.5
  },
  "to many relationship": {
    "an": 0.5,
    "only": 0.5
  },
  "many relationship an": {
    "advantage": 1.0
  },
  "relationship an advantage": {
    "of": 1.0
  },
  "an advantage of": {
    "using": 1.0
  },
  "advantage of using": {
    "a": 0.5,
    "prop": 0.5
  },
  "of using a": {
    "join": 1.0
  },
  "using a join": {
    "file": 1.0
  },
  "join file is": {
    "that": 1.0
  },
  "file is that": {
    "there": 1.0
  },
  "is that there": {
    "is": 1.0
  },
  "that there is": {
    "usually": 1.0
  },
  "there is usually": {
    "some": 1.0
  },
  "is usually some": {
    "more": 1.0
  },
  "usually some more": {
    "information": 1.0
  },
  "some more information": {
    "that": 1.0
  },
  "more information that": {
    "logically": 1.0
  },
  "information that logically": {
    "should": 1.0
  },
  "that logically should": {
    "be": 1.0
  },
  "logically should be": {
    "stored": 1.0
  },
  "be stored there": {
    "in": 1.0
  },
  "stored there in": {
    "this": 1.0
  },
  "there in this": {
    "case": 1.0
  },
  "this case the": {
    "quantity": 1.0
  },
  "case the quantity": {
    "used": 1.0
  },
  "the quantity used": {
    "of": 1.0
  },
  "quantity used of": {
    "a": 1.0
  },
  "used of a": {
    "part": 1.0
  },
  "of a part": {
    "in": 1.0
  },
  "a part in": {
    "a": 1.0
  },
  "part in a": {
    "product": 1.0
  },
  "in a product": {
    "logically": 1.0
  },
  "a product logically": {
    "only": 1.0
  },
  "product logically only": {
    "belongs": 1.0
  },
  "logically only belongs": {
    "in": 1.0
  },
  "only belongs in": {
    "the": 1.0
  },
  "belongs in the": {
    "parts2prod": 1.0
  },
  "in the parts2prod": {
    "file": 1.0
  },
  "parts2prod file clarion": {
    "language": 1.0
  },
  "file clarion language": {
    "programming": 1.0
  },
  "programming guide 42": {
    "translating": 1.0
  },
  "guide 42 translating": {
    "the": 1.0
  },
  "42 translating the": {
    "theory": 1.0
  },
  "translating the theory": {
    "to": 1.0
  },
  "to clarion in": {
    "practical": 1.0
  },
  "clarion in practical": {
    "relational": 1.0
  },
  "in practical relational": {
    "database": 1.0
  },
  "practical relational database": {
    "design": 1.0
  },
  "design a clarion": {
    "key": 1.0
  },
  "clarion key may": {
    "not": 1.0
  },
  "key may not": {
    "need": 1.0
  },
  "need to be": {
    "declared": 0.3333333333333333,
    "aware": 0.16666666666666666,
    "very": 0.16666666666666666,
    "dec": 0.16666666666666666,
    "quite": 0.16666666666666666
  },
  "to be declared": {
    "for": 1.0
  },
  "be declared for": {
    "the": 0.5,
    "a": 0.5
  },
  "declared for the": {
    "primary": 1.0
  },
  "for the primary": {
    "key": 1.0
  },
  "primary key on": {
    "some": 1.0
  },
  "key on some": {
    "files": 1.0
  },
  "on some files": {
    "if": 1.0
  },
  "some files if": {
    "there": 1.0
  },
  "files if there": {
    "is": 1.0
  },
  "if there is": {
    "never": 0.5,
    "a": 0.5
  },
  "there is never": {
    "a": 1.0
  },
  "is never a": {
    "need": 1.0
  },
  "never a need": {
    "to": 1.0
  },
  "a need to": {
    "directly": 1.0
  },
  "need to directly": {
    "access": 1.0
  },
  "to directly access": {
    "individual": 1.0
  },
  "directly access individual": {
    "records": 1.0
  },
  "access individual records": {
    "from": 1.0
  },
  "individual records from": {
    "that": 1.0
  },
  "records from that": {
    "file": 1.0
  },
  "from that file": {
    "then": 1.0
  },
  "that file then": {
    "a": 1.0
  },
  "file then a": {
    "key": 1.0
  },
  "then a key": {
    "definition": 1.0
  },
  "a key definition": {
    "based": 1.0
  },
  "key definition based": {
    "on": 1.0
  },
  "definition based on": {
    "the": 1.0
  },
  "key is not": {
    "necessary": 1.0
  },
  "is not necessary": {
    "usually": 1.0
  },
  "not necessary usually": {
    "this": 1.0
  },
  "necessary usually this": {
    "would": 1.0
  },
  "usually this would": {
    "be": 1.0
  },
  "this would be": {
    "the": 1.0
  },
  "would be the": {
    "child": 0.5,
    "field": 0.5
  },
  "be the child": {
    "file": 1.0
  },
  "the child file": {
    "of": 0.5,
    "is": 0.5
  },
  "child file of": {
    "a": 1.0
  },
  "file of a": {
    "parent": 1.0
  },
  "of a parent": {
    "child": 1.0
  },
  "a parent child": {
    "relationship": 1.0
  },
  "parent child relationship": {
    "whose": 0.5,
    "between": 0.5
  },
  "child relationship whose": {
    "records": 1.0
  },
  "relationship whose records": {
    "are": 1.0
  },
  "whose records are": {
    "only": 1.0
  },
  "records are only": {
    "needed": 1.0
  },
  "are only needed": {
    "in": 1.0
  },
  "only needed in": {
    "conjunction": 1.0
  },
  "needed in conjunction": {
    "with": 1.0
  },
  "in conjunction with": {
    "the": 0.5,
    "concurrency": 0.5
  },
  "conjunction with the": {
    "parent": 1.0
  },
  "with the parent": {
    "record": 1.0
  },
  "the parent record": {
    "a": 0.2,
    "is": 0.4,
    "changes": 0.2,
    "from": 0.2
  },
  "parent record a": {
    "clarion": 1.0
  },
  "record a clarion": {
    "key": 1.0
  },
  "clarion key a": {
    "lso": 0.5,
    "number": 0.5
  },
  "key a lso": {
    "may": 1.0
  },
  "a lso may": {
    "not": 1.0
  },
  "lso may not": {
    "need": 1.0
  },
  "declared for a": {
    "foreign": 1.0
  },
  "for a foreign": {
    "key": 1.0
  },
  "foreign key the": {
    "determination": 1.0
  },
  "key the determination": {
    "to": 1.0
  },
  "the determination to": {
    "declare": 1.0
  },
  "determination to declare": {
    "a": 1.0
  },
  "to declare a": {
    "key": 1.0
  },
  "declare a key": {
    "is": 1.0
  },
  "a key is": {
    "dependent": 0.3333333333333333,
    "dynamically": 0.6666666666666666
  },
  "key is dependent": {
    "upon": 1.0
  },
  "is dependent upon": {
    "how": 0.3333333333333333,
    "the": 0.6666666666666666
  },
  "dependent upon how": {
    "you": 1.0
  },
  "upon how you": {
    "are": 1.0
  },
  "how you are": {
    "going": 1.0
  },
  "you are going": {
    "to": 1.0
  },
  "are going to": {
    "access": 1.0
  },
  "going to access": {
    "the": 1.0
  },
  "to access the": {
    "file": 0.3333333333333333,
    "foreign": 0.3333333333333333,
    "database": 0.3333333333333333
  },
  "access the file": {
    "containing": 1.0
  },
  "the file containing": {
    "the": 1.0
  },
  "containing the foreign": {
    "key": 1.0
  },
  "foreign key if": {
    "you": 1.0
  },
  "key if you": {
    "need": 1.0
  },
  "need to access": {
    "the": 0.5,
    "records": 0.5
  },
  "access the foreign": {
    "key": 1.0
  },
  "key records from": {
    "the": 1.0
  },
  "records from the": {
    "primary": 0.5,
    "local": 0.5
  },
  "from the primary": {
    "key": 1.0
  },
  "primary key a": {
    "clarion": 1.0
  },
  "key a clarion": {
    "key": 1.0
  },
  "clarion key is": {
    "necessary": 0.5,
    "needed": 0.5
  },
  "key is necessary": {
    "however": 1.0
  },
  "is necessary however": {
    "if": 1.0
  },
  "necessary however if": {
    "the": 1.0
  },
  "however if the": {
    "only": 1.0
  },
  "if the only": {
    "purpose": 1.0
  },
  "the only purpose": {
    "of": 1.0
  },
  "only purpose of": {
    "the": 1.0
  },
  "of the foreign": {
    "key": 1.0
  },
  "key is to": {
    "ensure": 1.0
  },
  "is to ensure": {
    "that": 1.0
  },
  "to ensure that": {
    "the": 0.16666666666666666,
    "an": 0.16666666666666666,
    "nothing": 0.16666666666666666,
    "it": 0.16666666666666666,
    "user": 0.16666666666666666,
    "no": 0.16666666666666666
  },
  "ensure that the": {
    "value": 0.5,
    "data": 0.5
  },
  "that the value": {
    "in": 1.0
  },
  "the value in": {
    "the": 1.0
  },
  "value in the": {
    "foreign": 0.3333333333333333,
    "parent": 0.6666666666666666
  },
  "in the foreign": {
    "key": 0.5,
    "keys": 0.5
  },
  "foreign key field": {
    "value": 1.0
  },
  "key field value": {
    "is": 1.0
  },
  "field value is": {
    "valid": 1.0
  },
  "value is valid": {
    "no": 1.0
  },
  "is valid no": {
    "clarion": 1.0
  },
  "valid no clarion": {
    "key": 1.0
  },
  "no clarion key": {
    "is": 1.0
  },
  "key is needed": {
    "take": 1.0
  },
  "is needed take": {
    "the": 1.0
  },
  "needed take the": {
    "previous": 1.0
  },
  "take the previous": {
    "theoretical": 1.0
  },
  "the previous theoretical": {
    "examples": 1.0
  },
  "previous theoretical examples": {
    "and": 1.0
  },
  "theoretical examples and": {
    "create": 1.0
  },
  "examples and create": {
    "clarion": 1.0
  },
  "and create clarion": {
    "file": 1.0
  },
  "create clarion file": {
    "definitions": 1.0
  },
  "clarion file definitions": {
    "customer": 1.0
  },
  "file definitions customer": {
    "file": 1.0
  },
  "definitions customer file": {
    "driver": 1.0
  },
  "customer file driver": {
    "clarion": 1.0
  },
  "file driver clarion": {
    "pre": 1.0
  },
  "driver clarion pre": {
    "cus": 0.14285714285714285,
    "ord": 0.14285714285714285,
    "shp": 0.14285714285714285,
    "itm": 0.14285714285714285,
    "pro": 0.14285714285714285,
    "p2p": 0.14285714285714285,
    "par": 0.14285714285714285
  },
  "clarion pre cus": {
    "custkey": 1.0
  },
  "pre cus custkey": {
    "key": 1.0
  },
  "cus custkey key": {
    "cus": 1.0
  },
  "custkey key cus": {
    "custno": 1.0
  },
  "key cus custno": {
    "primary": 1.0
  },
  "cus custno primary": {
    "key": 1.0
  },
  "custno primary key": {
    "record": 1.0
  },
  "key record record": {
    "custno": 0.14285714285714285,
    "orderno": 0.42857142857142855,
    "prodno": 0.14285714285714285,
    "partno": 0.2857142857142857
  },
  "record record custno": {
    "long": 1.0
  },
  "record custno long": {
    "customer": 1.0
  },
  "custno long customer": {
    "number": 1.0
  },
  "long customer number": {
    "primary": 0.5,
    "foreign": 0.5
  },
  "primary key name": {
    "string": 1.0
  },
  "key name string": {
    "30": 1.0
  },
  "name string 30": {
    "customer": 1.0
  },
  "string 30 customer": {
    "name": 0.5,
    "a": 0.5
  },
  "30 customer name": {
    "address": 1.0
  },
  "name address string": {
    "30": 1.0
  },
  "address string 30": {
    "customer": 0.5,
    "shipto": 0.5
  },
  "30 customer a": {
    "ddress": 1.0
  },
  "customer a ddress": {
    "end": 1.0
  },
  "a ddress end": {
    "end": 1.0
  },
  "ddress end end": {
    "order": 1.0
  },
  "end end order": {
    "file": 1.0
  },
  "end order file": {
    "driver": 0.5,
    "loop": 0.5
  },
  "order file driver": {
    "clarion": 1.0
  },
  "clarion pre ord": {
    "orderkey": 1.0
  },
  "pre ord orderkey": {
    "key": 1.0
  },
  "ord orderkey key": {
    "ord": 1.0
  },
  "orderkey key ord": {
    "orderno": 1.0
  },
  "key ord orderno": {
    "primary": 1.0
  },
  "ord orderno primary": {
    "key": 1.0
  },
  "orderno primary key": {
    "custkey": 0.5,
    "record": 0.5
  },
  "primary key custkey": {
    "key": 1.0
  },
  "key custkey key": {
    "ord": 1.0
  },
  "custkey key ord": {
    "custno": 1.0
  },
  "key ord custno": {
    "dup": 1.0
  },
  "ord custno dup": {
    "foreign": 1.0
  },
  "custno dup foreign": {
    "key": 1.0
  },
  "dup foreign key": {
    "record": 1.0
  },
  "foreign key record": {
    "record": 1.0
  },
  "record record orderno": {
    "long": 1.0
  },
  "record orderno long": {
    "order": 1.0
  },
  "orderno long order": {
    "number": 0.6666666666666666,
    "primary": 0.3333333333333333
  },
  "long order number": {
    "primary": 1.0
  },
  "primary key custno": {
    "long": 1.0
  },
  "key custno long": {
    "customer": 1.0
  },
  "foreign key date": {
    "long": 1.0
  },
  "key date long": {
    "order": 1.0
  },
  "date long order": {
    "date": 1.0
  },
  "long order date": {
    "end": 1.0
  },
  "order date end": {
    "end": 1.0
  },
  "date end end": {
    "shipto": 1.0
  },
  "end end shipto": {
    "file": 1.0
  },
  "end shipto file": {
    "driver": 1.0
  },
  "shipto file driver": {
    "clarion": 1.0
  },
  "clarion pre shp": {
    "orderkey": 1.0
  },
  "pre shp orderkey": {
    "key": 1.0
  },
  "shp orderkey key": {
    "shp": 1.0
  },
  "orderkey key shp": {
    "orderno": 1.0
  },
  "key shp orderno": {
    "primary": 1.0
  },
  "shp orderno primary": {
    "key": 1.0
  },
  "foreign key address": {
    "string": 1.0
  },
  "key address string": {
    "30": 1.0
  },
  "string 30 shipto": {
    "address": 1.0
  },
  "30 shipto address": {
    "end": 1.0
  },
  "shipto address end": {
    "end": 1.0
  },
  "address end end": {
    "item": 1.0
  },
  "end end item": {
    "file": 1.0
  },
  "end item file": {
    "driver": 0.5,
    "loop": 0.5
  },
  "item file driver": {
    "clarion": 1.0
  },
  "clarion pre itm": {
    "orderkey": 1.0
  },
  "pre itm orderkey": {
    "key": 1.0
  },
  "itm orderkey key": {
    "itm": 1.0
  },
  "orderkey key itm": {
    "orderno": 1.0
  },
  "key itm orderno": {
    "itm": 1.0
  },
  "itm orderno itm": {
    "prodno": 1.0
  },
  "orderno itm prodno": {
    "primary": 1.0
  },
  "itm prodno primary": {
    "key": 1.0
  },
  "prodno primary key": {
    "record": 1.0
  },
  "long order primary": {
    "component": 1.0
  },
  "order primary component": {
    "and": 1.0
  },
  "primary component and": {
    "foreign": 1.0
  },
  "foreign key prodno": {
    "long": 1.0
  },
  "key prodno long": {
    "prod": 1.0
  },
  "prodno long prod": {
    "primary": 1.0
  },
  "long prod primary": {
    "component": 1.0
  },
  "prod primary component": {
    "and": 1.0
  },
  "key quantity short": {
    "quantity": 0.5,
    "end": 0.5
  },
  "quantity short quantity": {
    "orde": 1.0
  },
  "short quantity orde": {
    "red": 1.0
  },
  "quantity orde red": {
    "price": 1.0
  },
  "orde red price": {
    "decimal": 1.0
  },
  "red price decimal": {
    "7": 1.0
  },
  "price decimal 7": {
    "2": 1.0
  },
  "7 2 unit": {
    "price": 1.0
  },
  "2 unit price": {
    "end": 1.0
  },
  "unit price end": {
    "end": 1.0
  },
  "price end end": {
    "product": 1.0
  },
  "end end product": {
    "file": 1.0
  },
  "end product file": {
    "driver": 1.0
  },
  "product file driver": {
    "clarion": 1.0
  },
  "clarion pre pro": {
    "prodkey": 1.0
  },
  "pre pro prodkey": {
    "key": 1.0
  },
  "pro prodkey key": {
    "pro": 1.0
  },
  "prodkey key pro": {
    "prodno": 1.0
  },
  "key pro prodno": {
    "primary": 1.0
  },
  "pro prodno primary": {
    "key": 1.0
  },
  "record record prodno": {
    "long": 1.0
  },
  "record prodno long": {
    "product": 1.0
  },
  "prodno long product": {
    "numb": 1.0
  },
  "long product numb": {
    "er": 1.0
  },
  "product numb er": {
    "primary": 1.0
  },
  "numb er primary": {
    "key": 1.0
  },
  "er primary key": {
    "description": 1.0
  },
  "primary key description": {
    "string": 1.0
  },
  "key description string": {
    "30": 1.0
  },
  "description string 30": {
    "product": 0.5,
    "part": 0.5
  },
  "string 30 product": {
    "description": 1.0
  },
  "30 product description": {
    "end": 1.0
  },
  "product description end": {
    "end": 1.0
  },
  "description end end": {
    "parts2prod": 0.5,
    "notice": 0.5
  },
  "end end parts2prod": {
    "file": 1.0
  },
  "end parts2prod file": {
    "driver": 1.0
  },
  "parts2prod file driver": {
    "clarion": 1.0
  },
  "clarion pre p2p": {
    "prodpartkey": 1.0
  },
  "pre p2p prodpartkey": {
    "key": 1.0
  },
  "p2p prodpartkey key": {
    "p2p": 1.0
  },
  "prodpartkey key p2p": {
    "prodno": 1.0
  },
  "key p2p prodno": {
    "p2p": 1.0
  },
  "p2p prodno p2p": {
    "partno": 1.0
  },
  "prodno p2p partno": {
    "primary": 1.0
  },
  "p2p partno primary": {
    "key": 1.0
  },
  "partno primary key": {
    "partprodkey": 0.5,
    "record": 0.5
  },
  "primary key partprodkey": {
    "key": 1.0
  },
  "key partprodkey key": {
    "p2p": 1.0
  },
  "partprodkey key p2p": {
    "partno": 1.0
  },
  "key p2p partno": {
    "p2p": 1.0
  },
  "p2p partno p2p": {
    "prodno": 1.0
  },
  "partno p2p prodno": {
    "alternate": 1.0
  },
  "p2p prodno alternate": {
    "key": 1.0
  },
  "prodno alternate key": {
    "record": 1.0
  },
  "alternate key record": {
    "record": 1.0
  },
  "record record partno": {
    "long": 1.0
  },
  "record partno long": {
    "part": 1.0
  },
  "partno long part": {
    "primary": 0.5,
    "number": 0.5
  },
  "long part primary": {
    "component": 1.0
  },
  "part primary component": {
    "and": 1.0
  },
  "quantity short end": {
    "end": 1.0
  },
  "short end end": {
    "43": 1.0
  },
  "end end 43": {
    "database": 1.0
  },
  "end 43 database": {
    "design": 1.0
  },
  "43 database design": {
    "parts": 1.0
  },
  "database design parts": {
    "file": 1.0
  },
  "design parts file": {
    "driver": 1.0
  },
  "parts file driver": {
    "clarion": 1.0
  },
  "clarion pre par": {
    "partkey": 1.0
  },
  "pre par partkey": {
    "key": 1.0
  },
  "par partkey key": {
    "par": 1.0
  },
  "partkey key par": {
    "partno": 1.0
  },
  "key par partno": {
    "primary": 1.0
  },
  "par partno primary": {
    "key": 1.0
  },
  "long part number": {
    "primary": 1.0
  },
  "string 30 part": {
    "description": 1.0
  },
  "30 part description": {
    "end": 1.0
  },
  "part description end": {
    "end": 1.0
  },
  "end end notice": {
    "that": 1.0
  },
  "end notice that": {
    "only": 1.0
  },
  "notice that only": {
    "one": 1.0
  },
  "that only one": {
    "foreign": 1.0
  },
  "only one foreign": {
    "key": 1.0
  },
  "one foreign key": {
    "in": 1.0
  },
  "foreign key in": {
    "the": 1.0
  },
  "key in the": {
    "order": 0.3333333333333333,
    "database": 0.3333333333333333,
    "child": 0.3333333333333333
  },
  "order file was": {
    "explicitly": 1.0
  },
  "file was explicitly": {
    "declared": 1.0
  },
  "was explicitly declared": {
    "as": 1.0
  },
  "explicitly declared as": {
    "a": 1.0
  },
  "declared as a": {
    "clarion": 1.0
  },
  "as a clarion": {
    "key": 1.0
  },
  "key a number": {
    "of": 1.0
  },
  "number of foreign": {
    "keys": 1.0
  },
  "of foreign keys": {
    "were": 1.0
  },
  "foreign keys were": {
    "included": 1.0
  },
  "keys were included": {
    "as": 1.0
  },
  "were included as": {
    "part": 1.0
  },
  "included as part": {
    "of": 1.0
  },
  "part of primary": {
    "key": 1.0
  },
  "primary key declarations": {
    "but": 1.0
  },
  "key declarations but": {
    "this": 1.0
  },
  "declarations but this": {
    "was": 1.0
  },
  "but this was": {
    "simply": 1.0
  },
  "this was simply": {
    "good": 1.0
  },
  "was simply good": {
    "fortune": 1.0
  },
  "simply good fortune": {
    "the": 1.0
  },
  "good fortune the": {
    "primary": 1.0
  },
  "fortune the primary": {
    "key": 1.0
  },
  "primary key itm": {
    "orderkey": 1.0
  },
  "key itm orderkey": {
    "defined": 1.0
  },
  "itm orderkey defined": {
    "on": 1.0
  },
  "orderkey defined on": {
    "the": 1.0
  },
  "defined on the": {
    "item": 1.0
  },
  "on the item": {
    "file": 1.0
  },
  "item file is": {
    "there": 1.0
  },
  "file is there": {
    "to": 1.0
  },
  "is there to": {
    "ensure": 1.0
  },
  "there to ensure": {
    "that": 1.0
  },
  "ensure that an": {
    "order": 1.0
  },
  "that an order": {
    "does": 1.0
  },
  "an order does": {
    "not": 1.0
  },
  "order does not": {
    "contain": 0.5,
    "necessarily": 0.5
  },
  "does not contain": {
    "duplicate": 1.0
  },
  "not contain duplicate": {
    "products": 1.0
  },
  "contain duplicate products": {
    "ordered": 1.0
  },
  "duplicate products ordered": {
    "if": 1.0
  },
  "products ordered if": {
    "this": 1.0
  },
  "ordered if this": {
    "were": 1.0
  },
  "if this were": {
    "not": 1.0
  },
  "this were not": {
    "a": 1.0
  },
  "were not a": {
    "consideration": 1.0
  },
  "not a consideration": {
    "itm": 1.0
  },
  "a consideration itm": {
    "orderkey": 1.0
  },
  "consideration itm orderkey": {
    "would": 1.0
  },
  "itm orderkey would": {
    "only": 1.0
  },
  "orderkey would only": {
    "contain": 1.0
  },
  "would only contain": {
    "itm": 1.0
  },
  "only contain itm": {
    "orderno": 1.0
  },
  "contain itm orderno": {
    "and": 1.0
  },
  "itm orderno and": {
    "would": 1.0
  },
  "orderno and would": {
    "have": 1.0
  },
  "and would have": {
    "the": 1.0
  },
  "would have the": {
    "dup": 1.0
  },
  "have the dup": {
    "attribute": 1.0
  },
  "the dup attribute": {
    "to": 1.0
  },
  "dup attribute to": {
    "allow": 1.0
  },
  "attribute to allow": {
    "duplicate": 1.0
  },
  "to allow duplicate": {
    "ke": 1.0
  },
  "allow duplicate ke": {
    "y": 1.0
  },
  "duplicate ke y": {
    "values": 1.0
  },
  "ke y values": {
    "this": 1.0
  },
  "y values this": {
    "would": 1.0
  },
  "values this would": {
    "make": 1.0
  },
  "this would make": {
    "it": 1.0
  },
  "would make it": {
    "a": 1.0
  },
  "make it a": {
    "foreign": 1.0
  },
  "it a foreign": {
    "key": 1.0
  },
  "foreign key instead": {
    "of": 1.0
  },
  "key instead of": {
    "a": 1.0
  },
  "of a primary": {
    "key": 1.0
  },
  "key and the": {
    "file": 1.0
  },
  "and the file": {
    "would": 0.25,
    "should": 0.25,
    "declaration": 0.25,
    "driver": 0.25
  },
  "the file would": {
    "not": 1.0
  },
  "file would not": {
    "have": 1.0
  },
  "would not have": {
    "a": 1.0
  },
  "not have a": {
    "key": 1.0
  },
  "have a key": {
    "defined": 1.0
  },
  "a key defined": {
    "for": 1.0
  },
  "key defined for": {
    "the": 1.0
  },
  "defined for the": {
    "primary": 1.0
  },
  "key the item": {
    "file": 1.0
  },
  "item file and": {
    "the": 1.0
  },
  "and the product": {
    "file": 1.0
  },
  "the product file": {
    "have": 0.5,
    "referentia": 0.5
  },
  "product file have": {
    "a": 1.0
  },
  "file have a": {
    "many": 1.0
  },
  "have a many": {
    "to": 1.0
  },
  "one relationship which": {
    "is": 1.0
  },
  "relationship which is": {
    "one": 1.0
  },
  "which is one": {
    "to": 1.0
  },
  "to many looked": {
    "at": 1.0
  },
  "many looked at": {
    "from": 1.0
  },
  "looked at from": {
    "the": 1.0
  },
  "at from the": {
    "reverse": 1.0
  },
  "from the reverse": {
    "perspec": 1.0
  },
  "the reverse perspec": {
    "tive": 1.0
  },
  "reverse perspec tive": {
    "this": 1.0
  },
  "perspec tive this": {
    "reverse": 1.0
  },
  "tive this reverse": {
    "view": 1.0
  },
  "this reverse view": {
    "is": 1.0
  },
  "reverse view is": {
    "most": 1.0
  },
  "view is most": {
    "often": 1.0
  },
  "is most often": {
    "used": 1.0
  },
  "most often used": {
    "for": 1.0
  },
  "often used for": {
    "data": 1.0
  },
  "used for data": {
    "entry": 1.0
  },
  "data entry verification": {
    "look": 1.0
  },
  "entry verification look": {
    "up": 1.0
  },
  "verification look up": {
    "this": 1.0
  },
  "look up this": {
    "means": 1.0
  },
  "up this means": {
    "the": 1.0
  },
  "means the product": {
    "number": 1.0
  },
  "the product number": {
    "entered": 0.5,
    "against": 0.5
  },
  "product number entered": {
    "into": 1.0
  },
  "number entered into": {
    "the": 1.0
  },
  "entered into the": {
    "item": 1.0
  },
  "into the item": {
    "file": 1.0
  },
  "item file s": {
    "data": 1.0
  },
  "file s data": {
    "entry": 1.0
  },
  "s data entry": {
    "procedure": 1.0
  },
  "data entry procedure": {
    "can": 1.0
  },
  "entry procedure can": {
    "look": 1.0
  },
  "procedure can look": {
    "up": 1.0
  },
  "can look up": {
    "and": 1.0
  },
  "look up and": {
    "verify": 1.0
  },
  "up and verify": {
    "the": 1.0
  },
  "and verify the": {
    "product": 1.0
  },
  "verify the product": {
    "number": 1.0
  },
  "product number against": {
    "the": 1.0
  },
  "number against the": {
    "records": 1.0
  },
  "against the records": {
    "in": 1.0
  },
  "the records in": {
    "the": 0.75,
    "ascending": 0.25
  },
  "in the product": {
    "file": 1.0
  },
  "product file referentia": {
    "l": 1.0
  },
  "file referentia l": {
    "integrity": 1.0
  },
  "referentia l integrity": {
    "there": 1.0
  },
  "l integrity there": {
    "is": 1.0
  },
  "integrity there is": {
    "one": 1.0
  },
  "there is one": {
    "more": 0.5,
    "consideration": 0.5
  },
  "is one more": {
    "fundamental": 1.0
  },
  "one more fundamental": {
    "issue": 1.0
  },
  "more fundamental issue": {
    "in": 1.0
  },
  "fundamental issue in": {
    "the": 1.0
  },
  "issue in the": {
    "relational": 1.0
  },
  "in the relational": {
    "model": 1.0
  },
  "relational model which": {
    "should": 1.0
  },
  "model which should": {
    "be": 1.0
  },
  "which should be": {
    "addressed": 0.5,
    "implemented": 0.5
  },
  "should be addressed": {
    "referential": 1.0
  },
  "be addressed referential": {
    "integrity": 1.0
  },
  "addressed referential integrity": {
    "this": 1.0
  },
  "referential integrity this": {
    "is": 1.0
  },
  "integrity this is": {
    "an": 1.0
  },
  "is an issue": {
    "which": 1.0
  },
  "an issue which": {
    "must": 1.0
  },
  "issue which must": {
    "be": 1.0
  },
  "must be resolved": {
    "in": 0.5,
    "what": 0.5
  },
  "be resolved in": {
    "the": 0.5,
    "one": 0.5
  },
  "resolved in the": {
    "executable": 1.0
  },
  "the executable source": {
    "code": 1.0
  },
  "code for an": {
    "application": 1.0
  },
  "for an application": {
    "because": 1.0
  },
  "an application because": {
    "it": 1.0
  },
  "application because it": {
    "involves": 1.0
  },
  "because it involves": {
    "the": 1.0
  },
  "it involves the": {
    "active": 1.0
  },
  "involves the active": {
    "run": 1.0
  },
  "the active run": {
    "time": 1.0
  },
  "active run time": {
    "inter": 1.0
  },
  "run time inter": {
    "relationship": 1.0
  },
  "time inter relationship": {
    "of": 1.0
  },
  "inter relationship of": {
    "the": 1.0
  },
  "relationship of the": {
    "data": 1.0
  },
  "the data within": {
    "the": 1.0
  },
  "data within the": {
    "database": 1.0
  },
  "within the database": {
    "referential": 1.0
  },
  "the database referential": {
    "integrity": 1.0
  },
  "database referential integrity": {
    "means": 1.0
  },
  "referential integrity means": {
    "that": 1.0
  },
  "integrity means that": {
    "no": 0.3333333333333333,
    "all": 0.3333333333333333,
    "for": 0.3333333333333333
  },
  "means that no": {
    "foreign": 1.0
  },
  "that no foreign": {
    "key": 1.0
  },
  "no foreign key": {
    "can": 1.0
  },
  "foreign key can": {
    "contain": 1.0
  },
  "key can contain": {
    "a": 1.0
  },
  "can contain a": {
    "value": 1.0
  },
  "contain a value": {
    "that": 1.0
  },
  "a value that": {
    "is": 1.0
  },
  "value that is": {
    "not": 1.0
  },
  "that is not": {
    "matched": 0.3333333333333333,
    "always": 0.3333333333333333,
    "even": 0.3333333333333333
  },
  "is not matched": {
    "by": 1.0
  },
  "not matched by": {
    "some": 1.0
  },
  "matched by some": {
    "primary": 1.0
  },
  "by some primary": {
    "key": 1.0
  },
  "some primary key": {
    "value": 1.0
  },
  "primary key value": {
    "maintaining": 0.05263157894736842,
    "the": 0.2631578947368421,
    "changerec": 0.10526315789473684,
    "open": 0.15789473684210525,
    "cus": 0.05263157894736842,
    "do": 0.10526315789473684,
    "for": 0.05263157894736842,
    "which": 0.05263157894736842,
    "in": 0.15789473684210525
  },
  "key value maintaining": {
    "referential": 1.0
  },
  "value maintaining referential": {
    "integrity": 1.0
  },
  "maintaining referential integrity": {
    "in": 0.3333333333333333,
    "requ": 0.3333333333333333,
    "are": 0.3333333333333333
  },
  "referential integrity in": {
    "your": 1.0
  },
  "integrity in your": {
    "database": 1.0
  },
  "in your database": {
    "begets": 1.0
  },
  "your database begets": {
    "two": 1.0
  },
  "database begets two": {
    "questions": 1.0
  },
  "begets two questions": {
    "which": 1.0
  },
  "two questions which": {
    "must": 1.0
  },
  "questions which must": {
    "be": 1.0
  },
  "be resolved what": {
    "do": 1.0
  },
  "resolved what do": {
    "you": 1.0
  },
  "what do you": {
    "do": 1.0
  },
  "do you do": {
    "when": 1.0
  },
  "you do when": {
    "the": 1.0
  },
  "do when the": {
    "user": 1.0
  },
  "when the user": {
    "wants": 0.3333333333333333,
    "attempts": 0.5,
    "has": 0.16666666666666666
  },
  "the user wants": {
    "to": 1.0
  },
  "user wants to": {
    "delete": 0.5,
    "change": 0.5
  },
  "wants to delete": {
    "the": 1.0
  },
  "to delete the": {
    "primary": 0.8,
    "par": 0.2
  },
  "delete the primary": {
    "key": 1.0
  },
  "key record what": {
    "do": 1.0
  },
  "record what do": {
    "you": 1.0
  },
  "wants to change": {
    "the": 1.0
  },
  "to change the": {
    "primary": 0.5,
    "pattern": 0.5
  },
  "change the primary": {
    "key": 1.0
  },
  "key value the": {
    "three": 0.2,
    "action": 0.4,
    "foreign": 0.2,
    "most": 0.2
  },
  "value the three": {
    "most": 1.0
  },
  "three most common": {
    "answers": 1.0
  },
  "most common answers": {
    "to": 1.0
  },
  "common answers to": {
    "each": 1.0
  },
  "answers to each": {
    "of": 1.0
  },
  "to each of": {
    "these": 1.0
  },
  "of these questions": {
    "are": 1.0
  },
  "these questions are": {
    "restrict": 1.0
  },
  "questions are restrict": {
    "the": 1.0
  },
  "are restrict the": {
    "a": 1.0
  },
  "restrict the a": {
    "ction": 1.0
  },
  "the a ction": {
    "cascade": 1.0
  },
  "a ction cascade": {
    "the": 1.0
  },
  "ction cascade the": {
    "action": 1.0
  },
  "cascade the action": {
    "or": 0.25,
    "cascade": 0.25,
    "means": 0.25,
    "what": 0.25
  },
  "action or less": {
    "commonly": 1.0
  },
  "or less commonly": {
    "nullify": 1.0
  },
  "less commonly nullify": {
    "the": 1.0
  },
  "commonly nullify the": {
    "foreign": 1.0
  },
  "foreign key values": {
    "of": 0.3333333333333333,
    "to": 0.6666666666666666
  },
  "key values of": {
    "course": 1.0
  },
  "values of course": {
    "there": 1.0
  },
  "of course there": {
    "may": 1.0
  },
  "course there may": {
    "also": 1.0
  },
  "there may also": {
    "be": 1.0
  },
  "also be application": {
    "specific": 1.0
  },
  "be application specific": {
    "answers": 1.0
  },
  "application specific answers": {
    "such": 1.0
  },
  "specific answers such": {
    "as": 1.0
  },
  "answers such as": {
    "copying": 1.0
  },
  "such as copying": {
    "all": 1.0
  },
  "as copying all": {
    "information": 1.0
  },
  "copying all information": {
    "to": 1.0
  },
  "all information to": {
    "history": 1.0
  },
  "information to history": {
    "files": 1.0
  },
  "to history files": {
    "before": 1.0
  },
  "history files before": {
    "performing": 1.0
  },
  "files before performing": {
    "the": 1.0
  },
  "before performing the": {
    "action": 1.0
  },
  "performing the action": {
    "which": 1.0
  },
  "the action which": {
    "should": 1.0
  },
  "action which should": {
    "be": 1.0
  },
  "should be implemented": {
    "as": 1.0
  },
  "be implemented as": {
    "required": 1.0
  },
  "implemented as required": {
    "in": 1.0
  },
  "as required in": {
    "individual": 1.0
  },
  "required in individual": {
    "programs": 1.0
  },
  "in individual programs": {
    "clarion": 1.0
  },
  "individual programs clarion": {
    "language": 1.0
  },
  "programs clarion language": {
    "programming": 1.0
  },
  "programming guide 44": {
    "restrict": 1.0
  },
  "guide 44 restrict": {
    "the": 1.0
  },
  "44 restrict the": {
    "action": 1.0
  },
  "restrict the action": {
    "restrict": 0.5,
    "means": 0.5
  },
  "the action restrict": {
    "the": 1.0
  },
  "action restrict the": {
    "action": 1.0
  },
  "the action means": {
    "that": 1.0
  },
  "action means that": {
    "when": 1.0
  },
  "means that when": {
    "the": 1.0
  },
  "that when the": {
    "user": 1.0
  },
  "the user attempts": {
    "to": 1.0
  },
  "user attempts to": {
    "delete": 1.0
  },
  "attempts to delete": {
    "the": 0.8,
    "that": 0.2
  },
  "key record or": {
    "change": 1.0
  },
  "record or change": {
    "the": 1.0
  },
  "or change the": {
    "primary": 1.0
  },
  "value the action": {
    "is": 0.5,
    "cascades": 0.5
  },
  "the action is": {
    "only": 0.5,
    "not": 0.5
  },
  "action is only": {
    "allowed": 1.0
  },
  "is only allowed": {
    "if": 0.5,
    "after": 0.5
  },
  "only allowed if": {
    "there": 1.0
  },
  "allowed if there": {
    "are": 1.0
  },
  "if there are": {
    "no": 1.0
  },
  "are no foreign": {
    "keys": 1.0
  },
  "no foreign keys": {
    "that": 1.0
  },
  "foreign keys that": {
    "reference": 1.0
  },
  "keys that reference": {
    "that": 0.8,
    "the": 0.2
  },
  "that reference that": {
    "primary": 1.0
  },
  "reference that primary": {
    "key": 1.0
  },
  "that primary key": {
    "if": 0.5,
    "there": 0.25,
    "are": 0.25
  },
  "primary key if": {
    "related": 1.0
  },
  "key if related": {
    "foreign": 1.0
  },
  "if related foreign": {
    "keys": 1.0
  },
  "related foreign keys": {
    "do": 1.0
  },
  "foreign keys do": {
    "exist": 1.0
  },
  "keys do exist": {
    "the": 1.0
  },
  "do exist the": {
    "action": 0.5,
    "delete": 0.5
  },
  "exist the action": {
    "is": 1.0
  },
  "action is not": {
    "allowed": 1.0
  },
  "is not allowed": {
    "using": 1.0
  },
  "not allowed using": {
    "the": 1.0
  },
  "allowed using the": {
    "files": 1.0
  },
  "using the files": {
    "defined": 1.0
  },
  "the files defined": {
    "previously": 1.0
  },
  "files defined previously": {
    "here": 1.0
  },
  "defined previously here": {
    "is": 1.0
  },
  "previously here is": {
    "an": 1.0
  },
  "here is an": {
    "example": 1.0
  },
  "is an example": {
    "of": 1.0
  },
  "an example of": {
    "how": 0.75,
    "a": 0.25
  },
  "example of how": {
    "the": 1.0
  },
  "of how the": {
    "executable": 1.0
  },
  "how the executable": {
    "code": 1.0
  },
  "executable code might": {
    "look": 1.0
  },
  "code might look": {
    "to": 1.0
  },
  "might look to": {
    "restrict": 0.5,
    "cascade": 0.5
  },
  "look to restrict": {
    "deletes": 1.0
  },
  "to restrict deletes": {
    "or": 1.0
  },
  "restrict deletes or": {
    "a": 1.0
  },
  "deletes or a": {
    "change": 1.0
  },
  "or a change": {
    "of": 1.0
  },
  "a change of": {
    "the": 1.0
  },
  "change of the": {
    "primary": 0.6666666666666666,
    "prima": 0.3333333333333333
  },
  "of the primary": {
    "key": 1.0
  },
  "key value changerec": {
    "equate": 1.0
  },
  "value changerec equate": {
    "2": 1.0
  },
  "changerec equate 2": {
    "equate": 0.75,
    "57": 0.25
  },
  "equate 2 equate": {
    "change": 1.0
  },
  "2 equate change": {
    "action": 1.0
  },
  "equate change action": {
    "deleterec": 1.0
  },
  "change action deleterec": {
    "equate": 1.0
  },
  "action deleterec equate": {
    "3": 1.0
  },
  "deleterec equate 3": {
    "equate": 1.0
  },
  "equate 3 equate": {
    "delete": 1.0
  },
  "3 equate delete": {
    "action": 1.0
  },
  "equate delete action": {
    "value": 1.0
  },
  "delete action value": {
    "for": 1.0
  },
  "action value for": {
    "readability": 1.0
  },
  "value for readability": {
    "savekey": 1.0
  },
  "for readability savekey": {
    "long": 1.0
  },
  "readability savekey long": {
    "primary": 1.0
  },
  "savekey long primary": {
    "key": 1.0
  },
  "long primary key": {
    "save": 1.0
  },
  "primary key save": {
    "variable": 1.0
  },
  "key save variable": {
    "code": 1.0
  },
  "save variable code": {
    "savekey": 0.6,
    "open": 0.4
  },
  "variable code savekey": {
    "cus": 1.0
  },
  "code savekey cus": {
    "custno": 1.0
  },
  "savekey cus custno": {
    "save": 1.0
  },
  "cus custno save": {
    "primary": 1.0
  },
  "custno save primary": {
    "key": 1.0
  },
  "save primary key": {
    "value": 1.0
  },
  "key value open": {
    "window": 1.0
  },
  "value open window": {
    "accept": 1.0
  },
  "open window accept": {
    "case": 1.0
  },
  "window accept case": {
    "accepted": 1.0
  },
  "accept case accepted": {
    "process": 1.0
  },
  "case accepted process": {
    "entry": 1.0
  },
  "accepted process entry": {
    "individual": 1.0
  },
  "process entry individual": {
    "control": 1.0
  },
  "entry individual control": {
    "processing": 1.0
  },
  "individual control processing": {
    "of": 1.0
  },
  "control processing of": {
    "okbutton": 1.0
  },
  "processing of okbutton": {
    "screen": 1.0
  },
  "of okbutton screen": {
    "completion": 1.0
  },
  "okbutton screen completion": {
    "button": 0.5,
    "field": 0.5
  },
  "screen completion button": {
    "if": 1.0
  },
  "completion button if": {
    "action": 1.0
  },
  "button if action": {
    "changerec": 1.0
  },
  "if action changerec": {
    "and": 0.6,
    "if": 0.4
  },
  "action changerec and": {
    "cus": 1.0
  },
  "changerec and cus": {
    "custno": 1.0
  },
  "and cus custno": {
    "savekey": 1.0
  },
  "cus custno savekey": {
    "check": 0.75,
    "change": 0.25
  },
  "custno savekey check": {
    "for": 1.0
  },
  "savekey check for": {
    "changed": 1.0
  },
  "check for changed": {
    "primary": 1.0
  },
  "for changed primary": {
    "key": 1.0
  },
  "changed primary key": {
    "value": 1.0
  },
  "key value cus": {
    "custno": 1.0
  },
  "value cus custno": {
    "savekey": 1.0
  },
  "custno savekey change": {
    "it": 1.0
  },
  "savekey change it": {
    "back": 1.0
  },
  "change it back": {
    "message": 1.0
  },
  "it back message": {
    "key": 1.0
  },
  "back message key": {
    "field": 1.0
  },
  "message key field": {
    "changes": 1.0
  },
  "key field changes": {
    "not": 1.0
  },
  "field changes not": {
    "allowed": 1.0
  },
  "changes not allowed": {
    "tell": 1.0
  },
  "not allowed tell": {
    "the": 0.5,
    "user": 0.5
  },
  "allowed tell the": {
    "user": 1.0
  },
  "tell the user": {
    "select": 1.0
  },
  "the user select": {
    "1": 1.0
  },
  "user select 1": {
    "to": 1.0
  },
  "select 1 to": {
    "start": 1.0
  },
  "1 to start": {
    "over": 1.0
  },
  "to start over": {
    "cycle": 1.0
  },
  "start over cycle": {
    "elsif": 0.16666666666666666,
    "else": 0.16666666666666666,
    "at": 0.6666666666666666
  },
  "over cycle elsif": {
    "action": 1.0
  },
  "cycle elsif action": {
    "delet": 1.0
  },
  "elsif action delet": {
    "erec": 1.0
  },
  "action delet erec": {
    "check": 1.0
  },
  "delet erec check": {
    "for": 1.0
  },
  "erec check for": {
    "delete": 1.0
  },
  "check for delete": {
    "action": 1.0
  },
  "for delete action": {
    "ord": 0.3333333333333333,
    "do": 0.6666666666666666
  },
  "delete action ord": {
    "custno": 1.0
  },
  "action ord custno": {
    "cus": 1.0
  },
  "ord custno cus": {
    "custno": 1.0
  },
  "custno cus custno": {
    "initialize": 0.5,
    "change": 0.5
  },
  "cus custno initialize": {
    "key": 1.0
  },
  "custno initialize key": {
    "field": 1.0
  },
  "initialize key field": {
    "get": 1.0
  },
  "key field get": {
    "order": 1.0
  },
  "field get order": {
    "ord": 1.0
  },
  "get order ord": {
    "custkey": 1.0
  },
  "order ord custkey": {
    "and": 1.0
  },
  "ord custkey and": {
    "try": 0.2,
    "set": 0.8
  },
  "custkey and try": {
    "to": 1.0
  },
  "and try to": {
    "get": 1.0
  },
  "try to get": {
    "a": 1.0
  },
  "get a related": {
    "record": 1.0
  },
  "a related record": {
    "if": 1.0
  },
  "related record if": {
    "not": 1.0
  },
  "record if not": {
    "errorcode": 1.0
  },
  "if not errorcode": {
    "if": 1.0
  },
  "not errorcode if": {
    "the": 0.5,
    "get": 0.5
  },
  "errorcode if the": {
    "get": 1.0
  },
  "if the get": {
    "was": 1.0
  },
  "the get was": {
    "successful": 1.0
  },
  "get was successful": {
    "message": 0.5,
    "delete": 0.5
  },
  "was successful message": {
    "delete": 1.0
  },
  "successful message delete": {
    "not": 1.0
  },
  "message delete not": {
    "allowed": 1.0
  },
  "delete not allowed": {
    "tell": 0.5,
    "cascading": 0.5
  },
  "allowed tell user": {
    "select": 1.0
  },
  "tell user select": {
    "1": 1.0
  },
  "over cycle else": {
    "if": 1.0
  },
  "cycle else if": {
    "get": 0.5,
    "no": 0.5
  },
  "else if get": {
    "was": 1.0
  },
  "if get was": {
    "unsuccessful": 0.5,
    "successful": 0.5
  },
  "get was unsuccessful": {
    "delete": 1.0
  },
  "was unsuccessful delete": {
    "customer": 1.0
  },
  "unsuccessful delete customer": {
    "go": 1.0
  },
  "delete customer go": {
    "ahead": 1.0
  },
  "customer go ahead": {
    "and": 1.0
  },
  "go ahead and": {
    "delete": 1.0
  },
  "ahead and delete": {
    "it": 1.0
  },
  "and delete it": {
    "break": 1.0
  },
  "delete it break": {
    "and": 1.0
  },
  "it break and": {
    "get": 1.0
  },
  "break and get": {
    "out": 1.0
  },
  "and get out": {
    "end": 0.3333333333333333,
    "ord": 0.3333333333333333,
    "clear": 0.16666666666666666,
    "of": 0.16666666666666666
  },
  "get out end": {
    "other": 0.5,
    "build": 0.5
  },
  "out end other": {
    "executable": 1.0
  },
  "end other executable": {
    "processing": 1.0
  },
  "other executable processing": {
    "statements": 0.6666666666666666,
    "statem": 0.3333333333333333
  },
  "executable processing statements": {
    "end": 1.0
  },
  "processing statements end": {
    "end": 0.75,
    "this": 0.25
  },
  "statements end end": {
    "end": 0.3333333333333333,
    "changenullify": 0.3333333333333333,
    "process": 0.3333333333333333
  },
  "end end end": {
    "45": 1.0
  },
  "end end 45": {
    "database": 1.0
  },
  "end 45 database": {
    "design": 1.0
  },
  "45 database design": {
    "cascade": 1.0
  },
  "database design cascade": {
    "the": 1.0
  },
  "design cascade the": {
    "action": 1.0
  },
  "the action cascade": {
    "the": 1.0
  },
  "action cascade the": {
    "action": 1.0
  },
  "the action cascades": {
    "to": 1.0
  },
  "action cascades to": {
    "include": 1.0
  },
  "cascades to include": {
    "any": 1.0
  },
  "to include any": {
    "foreign": 1.0
  },
  "include any foreign": {
    "keys": 1.0
  },
  "any foreign keys": {
    "that": 1.0
  },
  "exist the delete": {
    "action": 1.0
  },
  "the delete action": {
    "also": 1.0
  },
  "delete action also": {
    "dele": 1.0
  },
  "action also dele": {
    "tes": 1.0
  },
  "also dele tes": {
    "those": 1.0
  },
  "dele tes those": {
    "records": 1.0
  },
  "tes those records": {
    "and": 1.0
  },
  "those records and": {
    "the": 1.0
  },
  "records and the": {
    "change": 1.0
  },
  "and the change": {
    "action": 1.0
  },
  "the change action": {
    "also": 1.0
  },
  "change action also": {
    "changes": 1.0
  },
  "action also changes": {
    "the": 1.0
  },
  "also changes the": {
    "values": 1.0
  },
  "changes the values": {
    "in": 1.0
  },
  "the values in": {
    "the": 1.0
  },
  "values in the": {
    "foreign": 0.5,
    "index": 0.5
  },
  "the foreign keys": {
    "that": 0.6666666666666666,
    "on": 0.3333333333333333
  },
  "primary key there": {
    "is": 1.0
  },
  "key there is": {
    "one": 1.0
  },
  "is one consideration": {
    "that": 1.0
  },
  "one consideration that": {
    "should": 1.0
  },
  "consideration that should": {
    "be": 1.0
  },
  "that should be": {
    "noted": 1.0
  },
  "should be noted": {
    "when": 1.0
  },
  "be noted when": {
    "you": 1.0
  },
  "noted when you": {
    "cascade": 1.0
  },
  "when you cascade": {
    "the": 1.0
  },
  "you cascade the": {
    "action": 1.0
  },
  "the action what": {
    "if": 1.0
  },
  "action what if": {
    "the": 1.0
  },
  "what if the": {
    "file": 1.0
  },
  "if the file": {
    "you": 0.5,
    "has": 0.5
  },
  "the file you": {
    "cascade": 1.0
  },
  "file you cascade": {
    "to": 1.0
  },
  "you cascade to": {
    "the": 1.0
  },
  "cascade to the": {
    "child": 1.0
  },
  "to the child": {
    "file": 1.0
  },
  "child file is": {
    "also": 1.0
  },
  "file is also": {
    "the": 1.0
  },
  "is also the": {
    "parent": 1.0
  },
  "also the parent": {
    "of": 1.0
  },
  "the parent of": {
    "another": 1.0
  },
  "parent of another": {
    "child": 1.0
  },
  "of another child": {
    "file": 1.0
  },
  "another child file": {
    "this": 1.0
  },
  "child file this": {
    "is": 1.0
  },
  "is a situation": {
    "which": 1.0
  },
  "a situation which": {
    "you": 1.0
  },
  "situation which you": {
    "must": 1.0
  },
  "you must detect": {
    "and": 1.0
  },
  "must detect and": {
    "handle": 1.0
  },
  "detect and handle": {
    "because": 1.0
  },
  "and handle because": {
    "the": 1.0
  },
  "handle because the": {
    "cascade": 1.0
  },
  "because the cascade": {
    "action": 0.5,
    "has": 0.5
  },
  "the cascade action": {
    "should": 1.0
  },
  "cascade action should": {
    "affect": 1.0
  },
  "action should affect": {
    "all": 1.0
  },
  "should affect all": {
    "the": 1.0
  },
  "affect all the": {
    "dependent": 1.0
  },
  "all the dependent": {
    "file": 1.0
  },
  "the dependent file": {
    "records": 1.0
  },
  "dependent file records": {
    "when": 1.0
  },
  "file records when": {
    "you": 1.0
  },
  "records when you": {
    "are": 1.0
  },
  "when you are": {
    "writing": 1.0
  },
  "you are writing": {
    "source": 1.0
  },
  "are writing source": {
    "code": 1.0
  },
  "writing source code": {
    "to": 1.0
  },
  "source code to": {
    "handle": 1.0
  },
  "code to handle": {
    "this": 0.5,
    "other": 0.5
  },
  "to handle this": {
    "situation": 0.5,
    "eventuality": 0.5
  },
  "handle this situation": {
    "you": 1.0
  },
  "this situation you": {
    "need": 1.0
  },
  "situation you need": {
    "to": 1.0
  },
  "to be aware": {
    "of": 1.0
  },
  "be aware of": {
    "the": 1.0
  },
  "aware of the": {
    "file": 1.0
  },
  "of the file": {
    "rela": 0.08333333333333333,
    "in": 0.16666666666666666,
    "the": 0.25,
    "if": 0.08333333333333333,
    "once": 0.08333333333333333,
    "without": 0.08333333333333333,
    "these": 0.08333333333333333,
    "s": 0.08333333333333333,
    "driver": 0.08333333333333333
  },
  "the file rela": {
    "tionships": 1.0
  },
  "file rela tionships": {
    "and": 1.0
  },
  "rela tionships and": {
    "write": 1.0
  },
  "tionships and write": {
    "code": 1.0
  },
  "and write code": {
    "that": 1.0
  },
  "write code that": {
    "cascades": 1.0
  },
  "code that cascades": {
    "the": 1.0
  },
  "that cascades the": {
    "action": 1.0
  },
  "cascades the action": {
    "as": 1.0
  },
  "the action as": {
    "far": 1.0
  },
  "action as far": {
    "it": 1.0
  },
  "as far it": {
    "needs": 1.0
  },
  "far it needs": {
    "to": 1.0
  },
  "it needs to": {
    "go": 1.0
  },
  "needs to go": {
    "to": 1.0
  },
  "to go to": {
    "ensure": 1.0
  },
  "go to ensure": {
    "that": 1.0
  },
  "ensure that nothing": {
    "is": 1.0
  },
  "that nothing is": {
    "left": 1.0
  },
  "nothing is left": {
    "hanging": 1.0
  },
  "is left hanging": {
    "again": 1.0
  },
  "left hanging again": {
    "using": 1.0
  },
  "hanging again using": {
    "the": 1.0
  },
  "look to cascade": {
    "deletes": 1.0
  },
  "to cascade deletes": {
    "or": 1.0
  },
  "cascade deletes or": {
    "a": 1.0
  },
  "of the prima": {
    "ry": 1.0
  },
  "the prima ry": {
    "key": 1.0
  },
  "prima ry key": {
    "value": 1.0
  },
  "ry key value": {
    "changerec": 1.0
  },
  "key value do": {
    "changecascade": 0.5,
    "changenullify": 0.5
  },
  "value do changecascade": {
    "and": 1.0
  },
  "do changecascade and": {
    "cascade": 1.0
  },
  "changecascade and cascade": {
    "the": 1.0
  },
  "and cascade the": {
    "change": 0.5,
    "delete": 0.5
  },
  "cascade the change": {
    "elsif": 1.0
  },
  "the change elsif": {
    "action": 1.0
  },
  "change elsif action": {
    "deleterec": 1.0
  },
  "elsif action deleterec": {
    "check": 1.0
  },
  "action deleterec check": {
    "for": 1.0
  },
  "deleterec check for": {
    "delete": 1.0
  },
  "delete action do": {
    "deletecascade": 0.5,
    "deletenullify": 0.5
  },
  "action do deletecascade": {
    "and": 1.0
  },
  "do deletecascade and": {
    "cascade": 1.0
  },
  "deletecascade and cascade": {
    "the": 1.0
  },
  "cascade the delete": {
    "end": 1.0
  },
  "the delete end": {
    "other": 1.0
  },
  "delete end other": {
    "executable": 1.0
  },
  "executable processing statem": {
    "ents": 1.0
  },
  "processing statem ents": {
    "end": 1.0
  },
  "statem ents end": {
    "end": 1.0
  },
  "ents end end": {
    "changecascade": 1.0
  },
  "end end changecascade": {
    "routine": 1.0
  },
  "end changecascade routine": {
    "ord": 1.0
  },
  "changecascade routine ord": {
    "custno": 1.0
  },
  "routine ord custno": {
    "savekey": 1.0
  },
  "ord custno savekey": {
    "initialize": 0.5,
    "or": 0.5
  },
  "custno savekey initialize": {
    "the": 1.0
  },
  "savekey initialize the": {
    "key": 1.0
  },
  "initialize the key": {
    "field": 1.0
  },
  "the key field": {
    "set": 1.0
  },
  "key field set": {
    "ord": 0.8,
    "itm": 0.2
  },
  "field set ord": {
    "custkey": 1.0
  },
  "set ord custkey": {
    "ord": 1.0
  },
  "ord custkey ord": {
    "custkey": 1.0
  },
  "custkey ord custkey": {
    "and": 1.0
  },
  "custkey and set": {
    "to": 0.75,
    "t": 0.25
  },
  "and set to": {
    "process": 1.0
  },
  "set to process": {
    "all": 1.0
  },
  "to process all": {
    "of": 1.0
  },
  "process all of": {
    "one": 1.0
  },
  "all of one": {
    "loop": 1.0
  },
  "of one loop": {
    "customer": 0.8,
    "until": 0.2
  },
  "one loop customer": {
    "s": 1.0
  },
  "loop customer s": {
    "orders": 1.0
  },
  "customer s orders": {
    "next": 1.0
  },
  "s orders next": {
    "order": 1.0
  },
  "orders next order": {
    "one": 1.0
  },
  "next order one": {
    "at": 1.0
  },
  "order one at": {
    "a": 1.0
  },
  "one at a": {
    "time": 1.0
  },
  "at a time": {
    "if": 0.75,
    "also": 0.125,
    "and": 0.125
  },
  "a time if": {
    "ord": 0.6666666666666666,
    "itm": 0.16666666666666666,
    "errorcode": 0.16666666666666666
  },
  "time if ord": {
    "custno": 1.0
  },
  "if ord custno": {
    "savekey": 1.0
  },
  "custno savekey or": {
    "errorcode": 1.0
  },
  "savekey or errorcode": {
    "then": 1.0
  },
  "or errorcode then": {
    "break": 1.0
  },
  "errorcode then break": {
    "check": 0.5555555555555556,
    "break": 0.3333333333333333,
    "report": 0.1111111111111111
  },
  "then break check": {
    "for": 1.0
  },
  "break check for": {
    "end": 1.0
  },
  "check for end": {
    "of": 1.0
  },
  "for end of": {
    "cust": 0.6666666666666666,
    "order": 0.16666666666666666,
    "group": 0.16666666666666666
  },
  "end of cust": {
    "and": 0.75,
    "an": 0.25
  },
  "of cust and": {
    "get": 1.0
  },
  "cust and get": {
    "out": 1.0
  },
  "get out ord": {
    "custno": 1.0
  },
  "out ord custno": {
    "cus": 0.3333333333333333,
    "0": 0.6666666666666666
  },
  "cus custno change": {
    "to": 1.0
  },
  "custno change to": {
    "new": 1.0
  },
  "change to new": {
    "value": 1.0
  },
  "to new value": {
    "put": 1.0
  },
  "new value put": {
    "order": 1.0
  },
  "value put order": {
    "and": 1.0
  },
  "put order and": {
    "put": 1.0
  },
  "order and put": {
    "the": 1.0
  },
  "and put the": {
    "record": 1.0
  },
  "put the record": {
    "back": 1.0
  },
  "the record back": {
    "if": 0.75,
    "or": 0.25
  },
  "record back if": {
    "errorcode": 1.0
  },
  "back if errorcode": {
    "then": 1.0
  },
  "stop error end": {
    "deletecascade": 0.16666666666666666,
    "end": 0.3333333333333333,
    "delete": 0.16666666666666666,
    "deletenullify": 0.16666666666666666,
    "the": 0.16666666666666666
  },
  "error end deletecascade": {
    "routine": 1.0
  },
  "end deletecascade routine": {
    "ord": 1.0
  },
  "deletecascade routine ord": {
    "custno": 1.0
  },
  "get out clear": {
    "itm": 1.0
  },
  "out clear itm": {
    "record": 1.0
  },
  "clear itm record": {
    "clear": 1.0
  },
  "itm record clear": {
    "the": 1.0
  },
  "record clear the": {
    "record": 1.0
  },
  "clear the record": {
    "buffer": 1.0
  },
  "the record buffer": {
    "itm": 0.14285714285714285,
    "sam": 0.14285714285714285,
    "assigning": 0.14285714285714285,
    "for": 0.14285714285714285,
    "the": 0.14285714285714285,
    "could": 0.14285714285714285,
    "without": 0.14285714285714285
  },
  "record buffer itm": {
    "orderno": 1.0
  },
  "buffer itm orderno": {
    "ord": 1.0
  },
  "itm orderno ord": {
    "orderno": 1.0
  },
  "orderno ord orderno": {
    "initialize": 0.3333333333333333,
    "or": 0.3333333333333333,
    "check": 0.3333333333333333
  },
  "ord orderno initialize": {
    "the": 1.0
  },
  "orderno initialize the": {
    "key": 1.0
  },
  "field set itm": {
    "orderkey": 1.0
  },
  "set itm orderkey": {
    "itm": 1.0
  },
  "itm orderkey itm": {
    "orderkey": 1.0
  },
  "orderkey itm orderkey": {
    "and": 1.0
  },
  "itm orderkey and": {
    "set": 1.0
  },
  "orderkey and set": {
    "to": 1.0
  },
  "one loop until": {
    "eof": 1.0
  },
  "loop until eof": {
    "item": 1.0
  },
  "until eof item": {
    "order": 1.0
  },
  "eof item order": {
    "s": 1.0
  },
  "item order s": {
    "items": 1.0
  },
  "order s items": {
    "next": 1.0
  },
  "s items next": {
    "item": 1.0
  },
  "items next item": {
    "one": 1.0
  },
  "next item one": {
    "at": 1.0
  },
  "item one at": {
    "a": 1.0
  },
  "time if itm": {
    "orderno": 1.0
  },
  "if itm orderno": {
    "ord": 1.0
  },
  "ord orderno or": {
    "errorcode": 1.0
  },
  "orderno or errorcode": {
    "then": 1.0
  },
  "end of order": {
    "and": 1.0
  },
  "of order and": {
    "get": 1.0
  },
  "order and get": {
    "out": 1.0
  },
  "get out of": {
    "item": 0.5,
    "process": 0.5
  },
  "out of item": {
    "loop": 1.0
  },
  "of item loop": {
    "delete": 1.0
  },
  "item loop delete": {
    "item": 1.0
  },
  "loop delete item": {
    "and": 1.0
  },
  "delete item and": {
    "delete": 1.0
  },
  "item and delete": {
    "the": 1.0
  },
  "and delete the": {
    "item": 0.5,
    "order": 0.5
  },
  "delete the item": {
    "record": 1.0
  },
  "the item record": {
    "if": 1.0
  },
  "item record if": {
    "errorcode": 1.0
  },
  "record if errorcode": {
    "then": 1.0
  },
  "error end end": {
    "item": 0.5,
    "order": 0.5
  },
  "item file loop": {
    "shp": 1.0
  },
  "file loop shp": {
    "orderno": 1.0
  },
  "loop shp orderno": {
    "ord": 1.0
  },
  "shp orderno ord": {
    "orderno": 1.0
  },
  "ord orderno check": {
    "for": 1.0
  },
  "orderno check for": {
    "shipto": 1.0
  },
  "check for shipto": {
    "record": 1.0
  },
  "for shipto record": {
    "clarion": 1.0
  },
  "shipto record clarion": {
    "language": 1.0
  },
  "record clarion language": {
    "programming": 1.0
  },
  "programming guide 46": {
    "get": 1.0
  },
  "guide 46 get": {
    "shipto": 1.0
  },
  "46 get shipto": {
    "shp": 1.0
  },
  "get shipto shp": {
    "orderkey": 1.0
  },
  "shipto shp orderkey": {
    "if": 1.0
  },
  "shp orderkey if": {
    "not": 1.0
  },
  "orderkey if not": {
    "errorcode": 1.0
  },
  "errorcode if get": {
    "was": 1.0
  },
  "was successful delete": {
    "shipto": 1.0
  },
  "successful delete shipto": {
    "delete": 1.0
  },
  "delete shipto delete": {
    "the": 1.0
  },
  "shipto delete the": {
    "shipto": 1.0
  },
  "delete the shipto": {
    "record": 1.0
  },
  "the shipto record": {
    "if": 1.0
  },
  "shipto record if": {
    "errorcode": 1.0
  },
  "error end delete": {
    "order": 1.0
  },
  "end delete order": {
    "and": 1.0
  },
  "delete order and": {
    "delete": 1.0
  },
  "order and delete": {
    "the": 1.0
  },
  "delete the order": {
    "record": 1.0
  },
  "the order record": {
    "if": 1.0
  },
  "order record if": {
    "errorcode": 1.0
  },
  "order file loop": {
    "nullify": 1.0
  },
  "file loop nullify": {
    "the": 1.0
  },
  "loop nullify the": {
    "foreign": 1.0
  },
  "foreign key nullify": {
    "the": 1.0
  },
  "key nullify the": {
    "foreign": 1.0
  },
  "foreign key means": {
    "that": 1.0
  },
  "key means that": {
    "when": 1.0
  },
  "value the foreign": {
    "keys": 1.0
  },
  "primary key are": {
    "changed": 1.0
  },
  "key are changed": {
    "to": 1.0
  },
  "are changed to": {
    "null": 1.0
  },
  "changed to null": {
    "values": 1.0
  },
  "to null values": {
    "if": 1.0
  },
  "null values if": {
    "the": 1.0
  },
  "values if the": {
    "foreign": 1.0
  },
  "if the foreign": {
    "key": 1.0
  },
  "foreign key fields": {
    "allow": 1.0
  },
  "key fields allow": {
    "null": 1.0
  },
  "fields allow null": {
    "values": 1.0
  },
  "allow null values": {
    "again": 1.0
  },
  "null values again": {
    "using": 1.0
  },
  "values again using": {
    "the": 1.0
  },
  "executable code would": {
    "look": 1.0
  },
  "code would look": {
    "to": 1.0
  },
  "would look to": {
    "nullify": 1.0
  },
  "look to nullify": {
    "the": 1.0
  },
  "to nullify the": {
    "foreign": 1.0
  },
  "foreign keys on": {
    "delete": 1.0
  },
  "keys on delete": {
    "or": 1.0
  },
  "on delete or": {
    "a": 1.0
  },
  "delete or a": {
    "change": 1.0
  },
  "value do changenullify": {
    "and": 1.0
  },
  "do changenullify and": {
    "nullify": 1.0
  },
  "changenullify and nullify": {
    "the": 1.0
  },
  "and nullify the": {
    "child": 1.0
  },
  "nullify the child": {
    "records": 1.0
  },
  "the child records": {
    "elsif": 0.5,
    "end": 0.5
  },
  "child records elsif": {
    "action": 1.0
  },
  "records elsif action": {
    "deleterec": 1.0
  },
  "action do deletenullify": {
    "and": 1.0
  },
  "do deletenullify and": {
    "nullify": 1.0
  },
  "deletenullify and nullify": {
    "the": 1.0
  },
  "child records end": {
    "other": 1.0
  },
  "records end other": {
    "executable": 1.0
  },
  "end end changenullify": {
    "routine": 1.0
  },
  "end changenullify routine": {
    "ord": 1.0
  },
  "changenullify routine ord": {
    "custno": 1.0
  },
  "ord custno 0": {
    "change": 1.0
  },
  "custno 0 change": {
    "to": 1.0
  },
  "0 change to": {
    "null": 1.0
  },
  "change to null": {
    "value": 1.0
  },
  "to null value": {
    "put": 1.0
  },
  "null value put": {
    "order": 1.0
  },
  "error end deletenullify": {
    "routine": 1.0
  },
  "end deletenullify routine": {
    "ord": 1.0
  },
  "deletenullify routine ord": {
    "custno": 1.0
  },
  "and set t": {
    "o": 1.0
  },
  "set t o": {
    "process": 1.0
  },
  "t o process": {
    "all": 1.0
  },
  "o process all": {
    "of": 1.0
  },
  "of cust an": {
    "d": 1.0
  },
  "cust an d": {
    "get": 1.0
  },
  "an d get": {
    "out": 1.0
  },
  "d get out": {
    "ord": 1.0
  },
  "error end the": {
    "nullify": 1.0
  },
  "end the nullify": {
    "option": 1.0
  },
  "the nullify option": {
    "does": 1.0
  },
  "nullify option does": {
    "not": 1.0
  },
  "option does not": {
    "require": 1.0
  },
  "does not require": {
    "as": 1.0
  },
  "not require as": {
    "many": 1.0
  },
  "require as many": {
    "changes": 1.0
  },
  "as many changes": {
    "as": 1.0
  },
  "many changes as": {
    "the": 1.0
  },
  "changes as the": {
    "cascade": 1.0
  },
  "as the cascade": {
    "option": 1.0
  },
  "the cascade option": {
    "th": 1.0
  },
  "cascade option th": {
    "is": 1.0
  },
  "option th is": {
    "is": 1.0
  },
  "th is is": {
    "because": 1.0
  },
  "is is because": {
    "the": 1.0
  },
  "is because the": {
    "cascade": 1.0
  },
  "the cascade has": {
    "to": 1.0
  },
  "cascade has to": {
    "delete": 1.0
  },
  "has to delete": {
    "all": 1.0
  },
  "to delete all": {
    "the": 1.0
  },
  "delete all the": {
    "related": 1.0
  },
  "all the related": {
    "records": 1.0
  },
  "related records in": {
    "as": 1.0
  },
  "records in as": {
    "many": 1.0
  },
  "as many files": {
    "as": 1.0
  },
  "many files as": {
    "are": 1.0
  },
  "files as are": {
    "related": 1.0
  },
  "as are related": {
    "nullify": 1.0
  },
  "are related nullify": {
    "only": 1.0
  },
  "related nullify only": {
    "needs": 1.0
  },
  "nullify only needs": {
    "to": 1.0
  },
  "only needs to": {
    "null": 1.0
  },
  "needs to null": {
    "out": 1.0
  },
  "to null out": {
    "the": 1.0
  },
  "null out the": {
    "individual": 1.0
  },
  "out the individual": {
    "foreign": 1.0
  },
  "the individual foreign": {
    "keys": 1.0
  },
  "individual foreign keys": {
    "that": 1.0
  },
  "that reference the": {
    "primary": 1.0
  },
  "reference the primary": {
    "key": 1.0
  },
  "primary key being": {
    "changed": 1.0
  },
  "key being changed": {
    "or": 1.0
  },
  "being changed or": {
    "deleted": 1.0
  },
  "changed or deleted": {
    "47": 0.5,
    "the": 0.5
  },
  "or deleted 47": {
    "database": 1.0
  },
  "deleted 47 database": {
    "design": 1.0
  },
  "47 database design": {
    "summary": 1.0
  },
  "database design summary": {
    "each": 1.0
  },
  "design summary each": {
    "data": 1.0
  },
  "summary each data": {
    "item": 1.0
  },
  "each data item": {
    "should": 1.0
  },
  "stored once separate": {
    "files": 1.0
  },
  "once separate files": {
    "are": 1.0
  },
  "separate files are": {
    "used": 1.0
  },
  "files are used": {
    "to": 1.0
  },
  "are used to": {
    "eliminate": 0.5,
    "enhance": 0.5
  },
  "used to eliminate": {
    "data": 1.0
  },
  "to eliminate data": {
    "duplication": 1.0
  },
  "eliminate data duplication": {
    "files": 1.0
  },
  "data duplication files": {
    "are": 1.0
  },
  "duplication files are": {
    "related": 1.0
  },
  "files are related": {
    "by": 1.0
  },
  "are related by": {
    "primary": 1.0
  },
  "related by primary": {
    "and": 1.0
  },
  "by primary and": {
    "foreign": 1.0
  },
  "foreign keys a": {
    "primary": 1.0
  },
  "keys a primary": {
    "key": 1.0
  },
  "key is a": {
    "unique": 1.0
  },
  "is a unique": {
    "and": 1.0
  },
  "a unique and": {
    "non": 1.0
  },
  "unique and non": {
    "null": 1.0
  },
  "and non null": {
    "index": 1.0
  },
  "non null index": {
    "into": 1.0
  },
  "null index into": {
    "a": 1.0
  },
  "a file which": {
    "provides": 0.5,
    "is": 0.5
  },
  "file which provides": {
    "for": 1.0
  },
  "which provides for": {
    "individual": 1.0
  },
  "provides for individual": {
    "record": 1.0
  },
  "for individual record": {
    "access": 1.0
  },
  "individual record access": {
    "a": 1.0
  },
  "record access a": {
    "foreign": 1.0
  },
  "access a foreign": {
    "key": 1.0
  },
  "to the pr": {
    "imary": 1.0
  },
  "the pr imary": {
    "key": 1.0
  },
  "pr imary key": {
    "of": 1.0
  },
  "imary key of": {
    "some": 1.0
  },
  "key of some": {
    "other": 1.0
  },
  "of some other": {
    "file": 1.0
  },
  "some other file": {
    "one": 1.0
  },
  "other file one": {
    "to": 1.0
  },
  "file one to": {
    "many": 1.0
  },
  "to many file": {
    "relationships": 1.0
  },
  "many file relationships": {
    "are": 1.0
  },
  "file relationships are": {
    "the": 0.5,
    "most": 0.5
  },
  "relationships are the": {
    "most": 1.0
  },
  "are the most": {
    "common": 1.0
  },
  "most common they": {
    "are": 1.0
  },
  "common they are": {
    "also": 1.0
  },
  "they are also": {
    "referred": 1.0
  },
  "are also referred": {
    "to": 1.0
  },
  "also referred to": {
    "as": 1.0
  },
  "to as parent": {
    "child": 1.0
  },
  "as parent child": {
    "and": 1.0
  },
  "child and many": {
    "to": 1.0
  },
  "to one same": {
    "relationship": 1.0
  },
  "one same relationship": {
    "reverse": 1.0
  },
  "same relationship reverse": {
    "view": 1.0
  },
  "relationship reverse view": {
    "one": 1.0
  },
  "reverse view one": {
    "to": 1.0
  },
  "view one to": {
    "one": 1.0
  },
  "to one file": {
    "relationships": 1.0
  },
  "one file relationships": {
    "are": 1.0
  },
  "relationships are most": {
    "commonly": 1.0
  },
  "are most commonly": {
    "created": 1.0
  },
  "most commonly created": {
    "to": 1.0
  },
  "commonly created to": {
    "hold": 1.0
  },
  "created to hold": {
    "data": 1.0
  },
  "to hold data": {
    "that": 1.0
  },
  "hold data that": {
    "is": 1.0
  },
  "data that is": {
    "not": 1.0
  },
  "is not always": {
    "needed": 0.5,
    "true": 0.5
  },
  "not always needed": {
    "in": 1.0
  },
  "always needed in": {
    "every": 1.0
  },
  "needed in every": {
    "record": 1.0
  },
  "in every record": {
    "many": 1.0
  },
  "every record many": {
    "to": 1.0
  },
  "record many to": {
    "many": 1.0
  },
  "many relationships require": {
    "a": 1.0
  },
  "relationships require a": {
    "join": 1.0
  },
  "require a join": {
    "file": 1.0
  },
  "join file which": {
    "acts": 1.0
  },
  "file which acts": {
    "as": 1.0
  },
  "which acts as": {
    "a": 1.0
  },
  "acts as a": {
    "broker": 1.0
  },
  "as a broker": {
    "between": 1.0
  },
  "a broker between": {
    "the": 1.0
  },
  "broker between the": {
    "two": 1.0
  },
  "between the two": {
    "files": 0.3333333333333333,
    "the": 0.3333333333333333,
    "is": 0.3333333333333333
  },
  "the two files": {
    "the": 1.0
  },
  "two files the": {
    "join": 1.0
  },
  "files the join": {
    "file": 1.0
  },
  "join file inserts": {
    "two": 1.0
  },
  "file inserts two": {
    "one": 1.0
  },
  "inserts two one": {
    "to": 1.0
  },
  "many relationships between": {
    "the": 1.0
  },
  "relationships between the": {
    "many": 1.0
  },
  "between the many": {
    "to": 1.0
  },
  "the many to": {
    "many": 1.0
  },
  "many relationship only": {
    "those": 1.0
  },
  "relationship only those": {
    "primary": 1.0
  },
  "only those primary": {
    "and": 1.0
  },
  "those primary and": {
    "foreign": 1.0
  },
  "foreign keys t": {
    "hat": 1.0
  },
  "keys t hat": {
    "the": 1.0
  },
  "t hat the": {
    "application": 1.0
  },
  "hat the application": {
    "needs": 1.0
  },
  "the application needs": {
    "as": 1.0
  },
  "application needs as": {
    "a": 1.0
  },
  "needs as a": {
    "practical": 1.0
  },
  "as a practical": {
    "consideration": 1.0
  },
  "a practical consideration": {
    "for": 1.0
  },
  "practical consideration for": {
    "specific": 1.0
  },
  "consideration for specific": {
    "access": 1.0
  },
  "for specific access": {
    "to": 1.0
  },
  "specific access to": {
    "the": 1.0
  },
  "the files need": {
    "to": 1.0
  },
  "files need to": {
    "have": 1.0
  },
  "to have clarion": {
    "keys": 1.0
  },
  "keys declared referential": {
    "integrity": 1.0
  },
  "declared referential integrity": {
    "means": 1.0
  },
  "that all foreign": {
    "keys": 1.0
  },
  "all foreign keys": {
    "contain": 1.0
  },
  "foreign keys contain": {
    "valid": 1.0
  },
  "keys contain valid": {
    "references": 1.0
  },
  "contain valid references": {
    "to": 1.0
  },
  "valid references to": {
    "primary": 1.0
  },
  "references to primary": {
    "keys": 1.0
  },
  "to primary keys": {
    "maintaining": 1.0
  },
  "primary keys maintaining": {
    "referential": 1.0
  },
  "keys maintaining referential": {
    "integrity": 1.0
  },
  "referential integrity requ": {
    "ires": 1.0
  },
  "integrity requ ires": {
    "executable": 1.0
  },
  "requ ires executable": {
    "code": 1.0
  },
  "ires executable code": {
    "that": 1.0
  },
  "code that tests": {
    "for": 1.0
  },
  "that tests for": {
    "update": 1.0
  },
  "tests for update": {
    "or": 1.0
  },
  "for update or": {
    "delete": 1.0
  },
  "update or delete": {
    "of": 1.0
  },
  "or delete of": {
    "the": 0.5,
    "that": 0.5
  },
  "delete of the": {
    "primary": 1.0
  },
  "primary key values": {
    "the": 1.0
  },
  "key values the": {
    "three": 1.0
  },
  "values the three": {
    "common": 1.0
  },
  "the three common": {
    "solutions": 1.0
  },
  "three common solutions": {
    "to": 1.0
  },
  "common solutions to": {
    "maintaining": 1.0
  },
  "solutions to maintaining": {
    "referential": 1.0
  },
  "to maintaining referential": {
    "integrity": 1.0
  },
  "referential integrity are": {
    "restricting": 1.0
  },
  "integrity are restricting": {
    "update": 1.0
  },
  "are restricting update": {
    "delete": 1.0
  },
  "restricting update delete": {
    "not": 1.0
  },
  "update delete not": {
    "allowed": 1.0
  },
  "not allowed cascading": {
    "also": 1.0
  },
  "allowed cascading also": {
    "update": 1.0
  },
  "cascading also update": {
    "delete": 1.0
  },
  "also update delete": {
    "the": 1.0
  },
  "update delete the": {
    "foreign": 1.0
  },
  "delete the foreign": {
    "key": 1.0
  },
  "foreign key or": {
    "nullifying": 1.0
  },
  "key or nullifying": {
    "the": 1.0
  },
  "or nullifying the": {
    "foreign": 1.0
  },
  "nullifying the foreign": {
    "key": 1.0
  },
  "foreign key assign": {
    "null": 1.0
  },
  "key assign null": {
    "values": 1.0
  },
  "assign null values": {
    "to": 1.0
  },
  "foreign key clarion": {
    "language": 1.0
  },
  "key clarion language": {
    "programming": 1.0
  },
  "programming guide 48": {
    "49": 1.0
  },
  "guide 48 49": {
    "data": 1.0
  },
  "48 49 data": {
    "file": 1.0
  },
  "file processing 5": {
    "data": 1.0
  },
  "processing 5 data": {
    "file": 1.0
  },
  "file processing data": {
    "file": 1.0
  },
  "processing data file": {
    "processing": 1.0
  },
  "file processing custom": {
    "database": 1.0
  },
  "processing custom database": {
    "applications": 1.0
  },
  "custom database applications": {
    "by": 1.0
  },
  "database applications by": {
    "definition": 1.0
  },
  "applications by definition": {
    "store": 1.0
  },
  "by definition store": {
    "data": 1.0
  },
  "definition store data": {
    "in": 1.0
  },
  "store data in": {
    "files": 1.0
  },
  "data in files": {
    "getting": 1.0
  },
  "in files getting": {
    "data": 1.0
  },
  "files getting data": {
    "into": 1.0
  },
  "getting data into": {
    "those": 1.0
  },
  "data into those": {
    "files": 1.0
  },
  "into those files": {
    "and": 1.0
  },
  "those files and": {
    "proces": 1.0
  },
  "files and proces": {
    "sing": 1.0
  },
  "and proces sing": {
    "it": 1.0
  },
  "proces sing it": {
    "for": 1.0
  },
  "sing it for": {
    "some": 1.0
  },
  "for some kind": {
    "of": 1.0
  },
  "some kind of": {
    "meaningful": 0.3333333333333333,
    "scr": 0.3333333333333333,
    "service": 0.3333333333333333
  },
  "kind of meaningful": {
    "output": 1.0
  },
  "of meaningful output": {
    "is": 1.0
  },
  "meaningful output is": {
    "the": 1.0
  },
  "output is the": {
    "primary": 1.0
  },
  "is the primary": {
    "purpose": 1.0
  },
  "the primary purpose": {
    "of": 1.0
  },
  "primary purpose of": {
    "any": 1.0
  },
  "purpose of any": {
    "database": 1.0
  },
  "of any database": {
    "application": 1.0
  },
  "any database application": {
    "this": 1.0
  },
  "database application this": {
    "essay": 1.0
  },
  "application this essay": {
    "is": 1.0
  },
  "is a discussion": {
    "of": 1.0
  },
  "a discussion of": {
    "the": 1.0
  },
  "language tools that": {
    "allow": 1.0
  },
  "tools that allow": {
    "the": 1.0
  },
  "that allow the": {
    "programmer": 1.0
  },
  "allow the programmer": {
    "to": 1.0
  },
  "the programmer to": {
    "access": 1.0
  },
  "programmer to access": {
    "and": 1.0
  },
  "to access and": {
    "process": 1.0
  },
  "access and process": {
    "data": 1.0
  },
  "and process data": {
    "files": 1.0
  },
  "process data files": {
    "file": 1.0
  },
  "data files file": {
    "access": 1.0
  },
  "files file access": {
    "methods": 1.0
  },
  "access methods generally": {
    "speaking": 1.0
  },
  "methods generally speaking": {
    "records": 1.0
  },
  "generally speaking records": {
    "are": 1.0
  },
  "speaking records are": {
    "put": 1.0
  },
  "records are put": {
    "into": 1.0
  },
  "are put into": {
    "data": 1.0
  },
  "put into data": {
    "files": 1.0
  },
  "into data files": {
    "at": 1.0
  },
  "data files at": {
    "the": 1.0
  },
  "files at the": {
    "end": 1.0
  },
  "at the end": {
    "of": 1.0
  },
  "the file in": {
    "the": 0.14285714285714285,
    "physical": 0.14285714285714285,
    "index": 0.14285714285714285,
    "which": 0.14285714285714285,
    "any": 0.14285714285714285,
    "most": 0.14285714285714285,
    "access": 0.14285714285714285
  },
  "in the sequence": {
    "in": 1.0
  },
  "the sequence in": {
    "which": 1.0
  },
  "sequence in which": {
    "they": 0.5,
    "the": 0.5
  },
  "they are added": {
    "this": 1.0
  },
  "are added this": {
    "is": 1.0
  },
  "added this is": {
    "not": 1.0
  },
  "this is not": {
    "always": 1.0
  },
  "not always true": {
    "but": 1.0
  },
  "always true but": {
    "is": 1.0
  },
  "true but is": {
    "usually": 1.0
  },
  "but is usually": {
    "true": 1.0
  },
  "is usually true": {
    "this": 1.0
  },
  "usually true this": {
    "creates": 1.0
  },
  "true this creates": {
    "the": 1.0
  },
  "this creates the": {
    "physical": 1.0
  },
  "creates the physical": {
    "record": 1.0
  },
  "the physical record": {
    "number": 1.0
  },
  "physical record number": {
    "order": 0.4,
    "index": 0.1,
    "set": 0.1,
    "and": 0.1,
    "is": 0.1,
    "specified": 0.1,
    "or": 0.1
  },
  "record number order": {
    "of": 0.2,
    "nothing": 0.2,
    "the": 0.2,
    "access": 0.2,
    "get": 0.2
  },
  "number order of": {
    "the": 1.0
  },
  "order of the": {
    "file": 0.3333333333333333,
    "index": 0.3333333333333333,
    "result": 0.3333333333333333
  },
  "the file the": {
    "physical": 0.14285714285714285,
    "build": 0.14285714285714285,
    "next": 0.14285714285714285,
    "record": 0.14285714285714285,
    "access": 0.14285714285714285,
    "share": 0.14285714285714285,
    "problem": 0.14285714285714285
  },
  "file the physical": {
    "order": 1.0
  },
  "the physical order": {
    "in": 1.0
  },
  "physical order in": {
    "which": 1.0
  },
  "which the records": {
    "appear": 0.5,
    "will": 0.5
  },
  "the records appear": {
    "within": 1.0
  },
  "records appear within": {
    "the": 1.0
  },
  "appear within the": {
    "file": 1.0
  },
  "within the file": {
    "this": 1.0
  },
  "the file this": {
    "physical": 1.0
  },
  "file this physical": {
    "order": 1.0
  },
  "this physical order": {
    "does": 1.0
  },
  "physical order does": {
    "not": 1.0
  },
  "does not necessarily": {
    "correspond": 1.0
  },
  "not necessarily correspond": {
    "to": 1.0
  },
  "necessarily correspond to": {
    "any": 1.0
  },
  "correspond to any": {
    "meaningful": 1.0
  },
  "to any meaningful": {
    "or": 1.0
  },
  "any meaningful or": {
    "useful": 1.0
  },
  "meaningful or useful": {
    "sequence": 1.0
  },
  "or useful sequence": {
    "there": 1.0
  },
  "useful sequence there": {
    "are": 1.0
  },
  "sequence there are": {
    "two": 1.0
  },
  "ways to access": {
    "records": 1.0
  },
  "to access records": {
    "within": 0.5,
    "sequentially": 0.5
  },
  "access records within": {
    "a": 1.0
  },
  "records within a": {
    "file": 1.0
  },
  "within a file": {
    "sequential": 0.3333333333333333,
    "the": 0.3333333333333333,
    "get": 0.3333333333333333
  },
  "a file sequential": {
    "access": 1.0
  },
  "file sequential access": {
    "and": 1.0
  },
  "sequential access and": {
    "random": 0.5,
    "rando": 0.5
  },
  "access and random": {
    "access": 1.0
  },
  "and random access": {
    "sequential": 1.0
  },
  "random access sequential": {
    "access": 1.0
  },
  "access sequential access": {
    "means": 1.0
  },
  "sequential access means": {
    "you": 1.0
  },
  "access means you": {
    "retrieve": 1.0
  },
  "means you retrieve": {
    "a": 0.5,
    "and": 0.5
  },
  "you retrieve a": {
    "number": 1.0
  },
  "retrieve a number": {
    "of": 1.0
  },
  "records in some": {
    "specified": 1.0
  },
  "in some specified": {
    "sequence": 1.0
  },
  "some specified sequence": {
    "processing": 1.0
  },
  "specified sequence processing": {
    "each": 1.0
  },
  "sequence processing each": {
    "record": 1.0
  },
  "processing each record": {
    "in": 1.0
  },
  "each record in": {
    "order": 0.3333333333333333,
    "turn": 0.3333333333333333,
    "index": 0.3333333333333333
  },
  "record in order": {
    "random": 1.0
  },
  "in order random": {
    "access": 1.0
  },
  "order random access": {
    "means": 0.5,
    "record": 0.5
  },
  "random access means": {
    "you": 1.0
  },
  "you retrieve and": {
    "process": 1.0
  },
  "retrieve and process": {
    "one": 1.0
  },
  "and process one": {
    "specific": 1.0
  },
  "process one specific": {
    "record": 1.0
  },
  "one specific record": {
    "both": 0.5,
    "within": 0.5
  },
  "specific record both": {
    "of": 1.0
  },
  "record both of": {
    "these": 1.0
  },
  "both of these": {
    "access": 0.5,
    "examples": 0.5
  },
  "of these access": {
    "methods": 1.0
  },
  "these access methods": {
    "are": 1.0
  },
  "access methods are": {
    "used": 1.0
  },
  "methods are used": {
    "in": 1.0
  },
  "are used in": {
    "almost": 1.0
  },
  "used in almost": {
    "every": 1.0
  },
  "in almost every": {
    "business": 1.0
  },
  "almost every business": {
    "database": 1.0
  },
  "every business database": {
    "application": 1.0
  },
  "business database application": {
    "if": 1.0
  },
  "database application if": {
    "you": 1.0
  },
  "application if you": {
    "only": 1.0
  },
  "if you only": {
    "need": 1.0
  },
  "access records sequentially": {
    "in": 1.0
  },
  "records sequentially in": {
    "their": 1.0
  },
  "sequentially in their": {
    "physical": 1.0
  },
  "in their physical": {
    "record": 1.0
  },
  "their physical record": {
    "number": 1.0
  },
  "number order nothing": {
    "more": 1.0
  },
  "order nothing more": {
    "than": 1.0
  },
  "nothing more than": {
    "the": 1.0
  },
  "more than the": {
    "data": 1.0
  },
  "than the data": {
    "file": 1.0
  },
  "the data file": {
    "is": 0.2,
    "as": 0.2,
    "sample": 0.2,
    "from": 0.2,
    "again": 0.2
  },
  "data file is": {
    "needed": 1.0
  },
  "file is needed": {
    "if": 1.0
  },
  "is needed if": {
    "you": 1.0
  },
  "needed if you": {
    "need": 1.0
  },
  "need to randomly": {
    "access": 1.0
  },
  "to randomly access": {
    "a": 1.0
  },
  "randomly access a": {
    "record": 1.0
  },
  "access a record": {
    "and": 1.0
  },
  "a record and": {
    "you": 1.0
  },
  "record and you": {
    "know": 1.0
  },
  "and you know": {
    "exactly": 1.0
  },
  "you know exactly": {
    "which": 1.0
  },
  "exactly which position": {
    "it": 1.0
  },
  "which position it": {
    "occupies": 1.0
  },
  "position it occupies": {
    "in": 1.0
  },
  "it occupies in": {
    "the": 1.0
  },
  "occupies in the": {
    "file": 1.0
  },
  "in the file": {
    "its": 0.125,
    "these": 0.125,
    "definition": 0.125,
    "the": 0.125,
    "in": 0.25,
    "someone": 0.125,
    "system": 0.125
  },
  "the file its": {
    "record": 1.0
  },
  "file its record": {
    "number": 1.0
  },
  "its record number": {
    "the": 1.0
  },
  "record number the": {
    "same": 0.5,
    "physical": 0.5
  },
  "number the same": {
    "thing": 1.0
  },
  "is true howev": {
    "er": 1.0
  },
  "true howev er": {
    "for": 1.0
  },
  "howev er for": {
    "most": 1.0
  },
  "er for most": {
    "applications": 1.0
  },
  "for most applications": {
    "these": 1.0
  },
  "most applications these": {
    "constraints": 1.0
  },
  "applications these constraints": {
    "would": 1.0
  },
  "these constraints would": {
    "be": 1.0
  },
  "constraints would be": {
    "too": 1.0
  },
  "would be too": {
    "limiting": 1.0
  },
  "be too limiting": {
    "key": 1.0
  },
  "too limiting key": {
    "and": 1.0
  },
  "limiting key and": {
    "index": 1.0
  },
  "and index the": {
    "clarion": 1.0
  },
  "index the clarion": {
    "key": 1.0
  },
  "the clarion key": {
    "and": 1.0
  },
  "clarion key and": {
    "index": 1.0
  },
  "and index declarations": {
    "create": 0.5,
    "define": 0.5
  },
  "index declarations create": {
    "alternate": 1.0
  },
  "declarations create alternate": {
    "sort": 1.0
  },
  "create alternate sort": {
    "orders": 1.0
  },
  "alternate sort orders": {
    "for": 0.5,
    "of": 0.5
  },
  "sort orders for": {
    "the": 1.0
  },
  "orders for the": {
    "records": 1.0
  },
  "for the records": {
    "in": 1.0
  },
  "the file these": {
    "allow": 0.5,
    "two": 0.5
  },
  "file these allow": {
    "sequential": 1.0
  },
  "these allow sequential": {
    "or": 1.0
  },
  "allow sequential or": {
    "random": 1.0
  },
  "sequential or random": {
    "access": 1.0
  },
  "or random access": {
    "to": 1.0
  },
  "random access to": {
    "a": 0.5,
    "individual": 0.5
  },
  "access to a": {
    "data": 1.0
  },
  "to a data": {
    "file": 1.0
  },
  "a data file": {
    "in": 0.3333333333333333,
    "declaration": 0.6666666666666666
  },
  "data file in": {
    "some": 1.0
  },
  "file in some": {
    "order": 1.0
  },
  "in some order": {
    "other": 1.0
  },
  "some order other": {
    "than": 1.0
  },
  "order other than": {
    "the": 1.0
  },
  "than the physical": {
    "record": 1.0
  },
  "number order the": {
    "order": 1.0
  },
  "order the order": {
    "is": 0.5,
    "attribute": 0.5
  },
  "the order is": {
    "determined": 1.0
  },
  "order is determined": {
    "by": 1.0
  },
  "determined by the": {
    "component": 1.0
  },
  "by the component": {
    "fields": 1.0
  },
  "the component fields": {
    "that": 0.5,
    "of": 0.5
  },
  "component fields that": {
    "make": 1.0
  },
  "fields that make": {
    "up": 1.0
  },
  "that make up": {
    "the": 1.0
  },
  "make up the": {
    "key": 1.0
  },
  "up the key": {
    "or": 1.0
  },
  "the key or": {
    "index": 1.0
  },
  "key or index": {
    "each": 0.3333333333333333,
    "component": 0.3333333333333333,
    "parameter": 0.3333333333333333
  },
  "or index each": {
    "key": 1.0
  },
  "index each key": {
    "or": 1.0
  },
  "each key or": {
    "index": 1.0
  },
  "or index component": {
    "may": 1.0
  },
  "index component may": {
    "be": 1.0
  },
  "component may be": {
    "in": 1.0
  },
  "be in ascending": {
    "or": 1.0
  },
  "in ascending or": {
    "descending": 1.0
  },
  "ascending or descending": {
    "order": 1.0
  },
  "or descending order": {
    "the": 1.0
  },
  "descending order the": {
    "main": 1.0
  },
  "order the main": {
    "difference": 1.0
  },
  "the main difference": {
    "between": 1.0
  },
  "main difference between": {
    "key": 1.0
  },
  "difference between key": {
    "and": 1.0
  },
  "between key and": {
    "index": 1.0
  },
  "and index lies": {
    "in": 1.0
  },
  "index lies in": {
    "the": 1.0
  },
  "fact that a": {
    "key": 0.5,
    "clarion": 0.5
  },
  "that a key": {
    "is": 1.0
  },
  "key is dynamically": {
    "maintained": 1.0
  },
  "is dynamically maintained": {
    "every": 0.5,
    "and": 0.5
  },
  "dynamically maintained every": {
    "time": 1.0
  },
  "maintained every time": {
    "a": 1.0
  },
  "every time a": {
    "record": 1.0
  },
  "time a record": {
    "is": 1.0
  },
  "a record is": {
    "added": 0.25,
    "being": 0.5,
    "get": 0.25
  },
  "record is added": {
    "changed": 0.5,
    "to": 0.5
  },
  "is added changed": {
    "or": 1.0
  },
  "added changed or": {
    "deleted": 1.0
  },
  "or deleted the": {
    "key": 1.0
  },
  "deleted the key": {
    "is": 1.0
  },
  "the key is": {
    "also": 1.0
  },
  "key is also": {
    "updated": 1.0
  },
  "is also updated": {
    "sinc": 1.0
  },
  "also updated sinc": {
    "e": 1.0
  },
  "updated sinc e": {
    "it": 1.0
  },
  "sinc e it": {
    "is": 1.0
  },
  "e it is": {
    "always": 1.0
  },
  "it is always": {
    "kept": 1.0
  },
  "is always kept": {
    "current": 1.0
  },
  "always kept current": {
    "a": 1.0
  },
  "kept current a": {
    "key": 1.0
  },
  "current a key": {
    "should": 1.0
  },
  "a key should": {
    "be": 1.0
  },
  "key should be": {
    "used": 1.0
  },
  "should be used": {
    "for": 1.0
  },
  "be used for": {
    "sort": 1.0
  },
  "used for sort": {
    "orders": 1.0
  },
  "for sort orders": {
    "that": 1.0
  },
  "sort orders that": {
    "are": 1.0
  },
  "orders that are": {
    "frequently": 0.5,
    "infrequently": 0.5
  },
  "that are frequently": {
    "used": 1.0
  },
  "are frequently used": {
    "in": 1.0
  },
  "frequently used in": {
    "the": 1.0
  },
  "the application an": {
    "index": 1.0
  },
  "application an index": {
    "is": 1.0
  },
  "an index is": {
    "not": 1.0
  },
  "index is not": {
    "maintained": 0.5,
    "main": 0.5
  },
  "is not maintained": {
    "and": 1.0
  },
  "not maintained and": {
    "must": 1.0
  },
  "maintained and must": {
    "be": 1.0
  },
  "and must be": {
    "rebuilt": 0.5,
    "built": 0.5
  },
  "must be rebuilt": {
    "immediately": 1.0
  },
  "be rebuilt immediately": {
    "before": 1.0
  },
  "rebuilt immediately before": {
    "it": 1.0
  },
  "immediately before it": {
    "is": 1.0
  },
  "before it is": {
    "used": 1.0
  },
  "it is used": {
    "to": 1.0
  },
  "is used to": {
    "ensure": 0.25,
    "rebuild": 0.25,
    "get": 0.25,
    "update": 0.25
  },
  "used to ensure": {
    "that": 1.0
  },
  "ensure that it": {
    "accurately": 1.0
  },
  "that it accurately": {
    "reflects": 1.0
  },
  "it accurately reflects": {
    "the": 1.0
  },
  "accurately reflects the": {
    "current": 1.0
  },
  "reflects the current": {
    "state": 1.0
  },
  "the current state": {
    "of": 1.0
  },
  "current state of": {
    "the": 1.0
  },
  "state of the": {
    "file": 0.5,
    "company": 0.5
  },
  "file the build": {
    "statement": 1.0
  },
  "the build statement": {
    "is": 0.5,
    "unlike": 0.5
  },
  "build statement is": {
    "used": 1.0
  },
  "statement is used": {
    "to": 1.0
  },
  "used to rebuild": {
    "an": 1.0
  },
  "to rebuild an": {
    "index": 1.0
  },
  "rebuild an index": {
    "because": 1.0
  },
  "an index because": {
    "of": 1.0
  },
  "index because of": {
    "the": 1.0
  },
  "of the time": {
    "factor": 1.0
  },
  "the time factor": {
    "in": 1.0
  },
  "time factor in": {
    "rebuilding": 1.0
  },
  "factor in rebuilding": {
    "and": 1.0
  },
  "in rebuilding and": {
    "the": 1.0
  },
  "rebuilding and the": {
    "fact": 1.0
  },
  "and the fact": {
    "that": 1.0
  },
  "fact that exclusive": {
    "file": 1.0
  },
  "that exclusive file": {
    "access": 1.0
  },
  "exclusive file access": {
    "is": 1.0
  },
  "file access is": {
    "required": 1.0
  },
  "access is required": {
    "for": 0.5,
    "the": 0.5
  },
  "required for the": {
    "build": 1.0
  },
  "for the build": {
    "an": 1.0
  },
  "the build an": {
    "index": 1.0
  },
  "build an index": {
    "should": 0.25,
    "prior": 0.25,
    "a": 0.25,
    "the": 0.25
  },
  "an index should": {
    "be": 1.0
  },
  "index should be": {
    "used": 1.0
  },
  "that are infrequently": {
    "used": 1.0
  },
  "are infrequently used": {
    "one": 1.0
  },
  "infrequently used one": {
    "special": 1.0
  },
  "used one special": {
    "form": 1.0
  },
  "one special form": {
    "of": 1.0
  },
  "special form of": {
    "index": 1.0
  },
  "form of index": {
    "is": 1.0
  },
  "of index is": {
    "the": 1.0
  },
  "index is the": {
    "dynamic": 1.0
  },
  "is the dynamic": {
    "index": 1.0
  },
  "the dynamic index": {
    "this": 0.3333333333333333,
    "clarion": 0.3333333333333333,
    "is": 0.3333333333333333
  },
  "dynamic index this": {
    "is": 1.0
  },
  "index this is": {
    "an": 1.0
  },
  "an index whose": {
    "component": 1.0
  },
  "index whose component": {
    "fields": 1.0
  },
  "whose component fields": {
    "are": 1.0
  },
  "component fields are": {
    "not": 1.0
  },
  "fields are not": {
    "declared": 1.0
  },
  "are not declared": {
    "in": 1.0
  },
  "the file definition": {
    "the": 1.0
  },
  "file definition the": {
    "component": 1.0
  },
  "definition the component": {
    "fields": 1.0
  },
  "component fields of": {
    "a": 1.0
  },
  "fields of a": {
    "dynamic": 0.5,
    "multiple": 0.5
  },
  "a dynamic index": {
    "are": 0.25,
    "with": 0.25,
    "allows": 0.25,
    "the": 0.25
  },
  "dynamic index are": {
    "declared": 1.0
  },
  "index are declared": {
    "at": 1.0
  },
  "are declared at": {
    "run": 1.0
  },
  "declared at run": {
    "time": 1.0
  },
  "run time in": {
    "the": 1.0
  },
  "time in the": {
    "build": 1.0
  },
  "in the build": {
    "statement": 1.0
  },
  "build statement unlike": {
    "a": 1.0
  },
  "statement unlike a": {
    "static": 1.0
  },
  "unlike a static": {
    "index": 1.0
  },
  "a static index": {
    "you": 1.0
  },
  "static index you": {
    "may": 1.0
  },
  "index you may": {
    "bui": 1.0
  },
  "you may bui": {
    "ld": 1.0
  },
  "may bui ld": {
    "a": 1.0
  },
  "bui ld a": {
    "dynamic": 1.0
  },
  "ld a dynamic": {
    "index": 1.0
  },
  "dynamic index with": {
    "the": 1.0
  },
  "index with the": {
    "file": 1.0
  },
  "with the file": {
    "open": 1.0
  },
  "the file open": {
    "in": 0.5,
    "report": 0.5
  },
  "file open in": {
    "any": 1.0
  },
  "open in any": {
    "access": 1.0
  },
  "in any access": {
    "mode": 1.0
  },
  "any access mode": {
    "the": 1.0
  },
  "access mode the": {
    "advantage": 1.0
  },
  "mode the advantage": {
    "should": 1.0
  },
  "the advantage should": {
    "be": 1.0
  },
  "advantage should be": {
    "immediately": 1.0
  },
  "should be immediately": {
    "obvious": 1.0
  },
  "be immediately obvious": {
    "end": 1.0
  },
  "immediately obvious end": {
    "user": 1.0
  },
  "obvious end user": {
    "definable": 1.0
  },
  "end user definable": {
    "sort": 1.0
  },
  "user definable sort": {
    "orders": 1.0
  },
  "definable sort orders": {
    "sample": 1.0
  },
  "sort orders sample": {
    "file": 1.0
  },
  "orders sample file": {
    "driver": 1.0
  },
  "sample file driver": {
    "topspeed": 1.0
  },
  "file driver topspeed": {
    "pre": 1.0
  },
  "driver topspeed pre": {
    "sam": 1.0
  },
  "topspeed pre sam": {
    "field1key": 0.25,
    "fieldskey": 0.25,
    "a": 0.5
  },
  "pre sam field1key": {
    "key": 1.0
  },
  "sam field1key key": {
    "sam": 1.0
  },
  "field1key key sam": {
    "field1": 1.0
  },
  "key sam field1": {
    "key": 0.25,
    "sam": 0.25,
    "record": 0.25,
    "field2ndx": 0.25
  },
  "sam field1 key": {
    "on": 1.0
  },
  "field1 key on": {
    "field": 1.0
  },
  "key on field": {
    "1": 1.0
  },
  "on field 1": {
    "field2ndx": 0.5,
    "and": 0.5
  },
  "field 1 field2ndx": {
    "index": 1.0
  },
  "1 field2ndx index": {
    "sam": 1.0
  },
  "field2ndx index sam": {
    "field2": 1.0
  },
  "index sam field2": {
    "static": 0.5,
    "an": 0.5
  },
  "sam field2 static": {
    "index": 1.0
  },
  "field2 static index": {
    "on": 1.0
  },
  "static index on": {
    "field2": 1.0
  },
  "index on field2": {
    "dynndx": 1.0
  },
  "on field2 dynndx": {
    "index": 1.0
  },
  "field2 dynndx index": {
    "dynamic": 1.0
  },
  "dynndx index dynamic": {
    "index": 1.0
  },
  "index dynamic index": {
    "record": 0.5,
    "49": 0.5
  },
  "dynamic index record": {
    "record": 1.0
  },
  "index record record": {
    "field1": 1.0
  },
  "record record field1": {
    "long": 1.0
  },
  "record field1 long": {
    "field2": 1.0
  },
  "field2 string 10": {
    "field3": 0.5,
    "action": 0.25,
    "report": 0.25
  },
  "string 10 field3": {
    "decimal": 1.0
  },
  "10 field3 decimal": {
    "7": 1.0
  },
  "field3 decimal 7": {
    "2": 1.0
  },
  "7 2 code": {
    "open": 1.0
  },
  "2 code open": {
    "sample": 1.0
  },
  "code open sample": {
    "42h": 1.0
  },
  "open sample 42h": {
    "open": 1.0
  },
  "sample 42h open": {
    "read": 1.0
  },
  "42h open read": {
    "write": 1.0
  },
  "open read write": {
    "deny": 1.0
  },
  "read write deny": {
    "none": 0.6923076923076923,
    "write": 0.3076923076923077
  },
  "write deny none": {
    "lock": 0.2222222222222222,
    "clear": 0.1111111111111111,
    "42h": 0.2222222222222222,
    "share": 0.1111111111111111,
    "open": 0.2222222222222222,
    "for": 0.1111111111111111
  },
  "deny none lock": {
    "sample": 1.0
  },
  "none lock sample": {
    "lock": 0.5,
    "1": 0.5
  },
  "lock sample lock": {
    "for": 1.0
  },
  "sample lock for": {
    "exclusive": 1.0
  },
  "lock for exclusive": {
    "access": 1.0
  },
  "for exclusive access": {
    "build": 1.0
  },
  "exclusive access build": {
    "sam": 1.0
  },
  "access build sam": {
    "field2": 1.0
  },
  "build sam field2": {
    "to": 1.0
  },
  "sam field2 to": {
    "build": 1.0
  },
  "field2 to build": {
    "the": 1.0
  },
  "to build the": {
    "index": 1.0
  },
  "build the index": {
    "unlock": 1.0
  },
  "the index unlock": {
    "sample": 1.0
  },
  "index unlock sample": {
    "then": 0.5,
    "unlock": 0.5
  },
  "unlock sample then": {
    "unlock": 1.0
  },
  "sample then unlock": {
    "the": 1.0
  },
  "then unlock the": {
    "file": 1.0
  },
  "unlock the file": {
    "build": 0.5,
    "open": 0.5
  },
  "the file build": {
    "sam": 1.0
  },
  "file build sam": {
    "dy": 1.0
  },
  "build sam dy": {
    "nndx": 1.0
  },
  "sam dy nndx": {
    "sam": 1.0
  },
  "dy nndx sam": {
    "field1": 1.0
  },
  "nndx sam field1": {
    "sam": 1.0
  },
  "sam field1 sam": {
    "field2": 1.0
  },
  "field1 sam field2": {
    "build": 0.5,
    "dup": 0.5
  },
  "sam field2 build": {
    "the": 1.0
  },
  "field2 build the": {
    "dynamic": 1.0
  },
  "build the dynamic": {
    "index": 1.0
  },
  "dynamic index clarion": {
    "language": 1.0
  },
  "index clarion language": {
    "programming": 1.0
  },
  "programming guide 50": {
    "in": 1.0
  },
  "guide 50 in": {
    "this": 1.0
  },
  "50 in this": {
    "example": 1.0
  },
  "example the key": {
    "on": 1.0
  },
  "the key on": {
    "sam": 1.0
  },
  "key on sam": {
    "field1": 1.0
  },
  "on sam field1": {
    "will": 1.0
  },
  "sam field1 will": {
    "always": 1.0
  },
  "field1 will always": {
    "be": 1.0
  },
  "will always be": {
    "current": 1.0
  },
  "always be current": {
    "the": 1.0
  },
  "be current the": {
    "index": 1.0
  },
  "current the index": {
    "on": 1.0
  },
  "the index on": {
    "sam": 1.0
  },
  "index on sam": {
    "field2": 1.0
  },
  "on sam field2": {
    "is": 1.0
  },
  "sam field2 is": {
    "built": 1.0
  },
  "field2 is built": {
    "when": 1.0
  },
  "is built when": {
    "the": 1.0
  },
  "built when the": {
    "file": 1.0
  },
  "when the file": {
    "is": 0.3333333333333333,
    "system": 0.3333333333333333,
    "driver": 0.3333333333333333
  },
  "the file is": {
    "opened": 0.5,
    "locked": 0.5
  },
  "file is opened": {
    "and": 1.0
  },
  "is opened and": {
    "locked": 1.0
  },
  "opened and locked": {
    "exclusive": 1.0
  },
  "and locked exclusive": {
    "access": 1.0
  },
  "locked exclusive access": {
    "is": 1.0
  },
  "exclusive access is": {
    "required": 1.0
  },
  "is required the": {
    "dynamic": 1.0
  },
  "required the dynamic": {
    "index": 1.0
  },
  "dynamic index is": {
    "built": 1.0
  },
  "index is built": {
    "at": 1.0
  },
  "is built at": {
    "ru": 1.0
  },
  "built at ru": {
    "n": 1.0
  },
  "at ru n": {
    "time": 1.0
  },
  "ru n time": {
    "in": 1.0
  },
  "n time in": {
    "descending": 1.0
  },
  "time in descending": {
    "sam": 1.0
  },
  "in descending sam": {
    "field1": 1.0
  },
  "descending sam field1": {
    "and": 1.0
  },
  "sam field1 and": {
    "ascending": 0.3333333333333333,
    "sam": 0.3333333333333333,
    "blanks": 0.3333333333333333
  },
  "field1 and ascending": {
    "sam": 1.0
  },
  "and ascending sam": {
    "field2": 1.0
  },
  "ascending sam field2": {
    "sort": 1.0
  },
  "sam field2 sort": {
    "order": 1.0
  },
  "field2 sort order": {
    "of": 1.0
  },
  "sort order of": {
    "course": 0.3333333333333333,
    "the": 0.6666666666666666
  },
  "order of course": {
    "it": 1.0
  },
  "of course it": {
    "could": 1.0
  },
  "course it could": {
    "be": 1.0
  },
  "it could be": {
    "built": 1.0
  },
  "could be built": {
    "in": 1.0
  },
  "be built in": {
    "any": 1.0
  },
  "built in any": {
    "sort": 1.0
  },
  "in any sort": {
    "order": 1.0
  },
  "any sort order": {
    "possible": 1.0
  },
  "sort order possible": {
    "for": 1.0
  },
  "order possible for": {
    "the": 1.0
  },
  "possible for the": {
    "file": 1.0
  },
  "the file other": {
    "than": 1.0
  },
  "other than their": {
    "maintenance": 1.0
  },
  "than their maintenance": {
    "key": 1.0
  },
  "their maintenance key": {
    "and": 1.0
  },
  "maintenance key and": {
    "index": 1.0
  },
  "and index are": {
    "functionally": 1.0
  },
  "index are functionally": {
    "equivalent": 1.0
  },
  "are functionally equivalent": {
    "they": 0.5,
    "the": 0.5
  },
  "functionally equivalent they": {
    "share": 1.0
  },
  "equivalent they share": {
    "the": 1.0
  },
  "same type of": {
    "file": 1.0
  },
  "type of file": {
    "format": 1.0
  },
  "of file format": {
    "and": 1.0
  },
  "file format and": {
    "may": 1.0
  },
  "format and may": {
    "be": 1.0
  },
  "and may be": {
    "used": 1.0
  },
  "be used interchangeably": {
    "in": 1.0
  },
  "used interchangeably in": {
    "all": 1.0
  },
  "interchangeably in all": {
    "executable": 1.0
  },
  "in all executable": {
    "file": 1.0
  },
  "all executable file": {
    "access": 1.0
  },
  "executable file access": {
    "statements": 1.0
  },
  "file access statements": {
    "which": 1.0
  },
  "access statements which": {
    "require": 1.0
  },
  "statements which require": {
    "a": 1.0
  },
  "which require a": {
    "key": 1.0
  },
  "require a key": {
    "or": 1.0
  },
  "a key or": {
    "index": 1.0
  },
  "or index parameter": {
    "to": 1.0
  },
  "index parameter to": {
    "simplify": 1.0
  },
  "parameter to simplify": {
    "this": 1.0
  },
  "to simplify this": {
    "discussion": 1.0
  },
  "simplify this discussion": {
    "wherever": 1.0
  },
  "this discussion wherever": {
    "the": 1.0
  },
  "discussion wherever the": {
    "phrase": 1.0
  },
  "wherever the phrase": {
    "key": 1.0
  },
  "the phrase key": {
    "and": 1.0
  },
  "phrase key and": {
    "or": 1.0
  },
  "key and or": {
    "index": 1.0
  },
  "and or index": {
    "would": 1.0
  },
  "or index would": {
    "be": 1.0
  },
  "index would be": {
    "appropriate": 1.0
  },
  "would be appropriate": {
    "it": 1.0
  },
  "be appropriate it": {
    "is": 1.0
  },
  "appropriate it is": {
    "replaced": 1.0
  },
  "it is replaced": {
    "with": 1.0
  },
  "is replaced with": {
    "the": 1.0
  },
  "replaced with the": {
    "generic": 1.0
  },
  "with the generic": {
    "term": 1.0
  },
  "the generic term": {
    "index": 1.0
  },
  "generic term index": {
    "all": 1.0
  },
  "term index all": {
    "reference": 1.0
  },
  "index all reference": {
    "s": 1.0
  },
  "all reference s": {
    "to": 1.0
  },
  "reference s to": {
    "index": 1.0
  },
  "s to index": {
    "apply": 1.0
  },
  "to index apply": {
    "equally": 1.0
  },
  "index apply equally": {
    "to": 1.0
  },
  "apply equally to": {
    "both": 1.0
  },
  "equally to both": {
    "keys": 1.0
  },
  "to both keys": {
    "and": 1.0
  },
  "both keys and": {
    "indexes": 1.0
  },
  "keys and indexes": {
    "unless": 1.0
  },
  "and indexes unless": {
    "otherwise": 1.0
  },
  "indexes unless otherwise": {
    "noted": 1.0
  },
  "unless otherwise noted": {
    "sequential": 1.0
  },
  "otherwise noted sequential": {
    "file": 1.0
  },
  "noted sequential file": {
    "access": 1.0
  },
  "file access there": {
    "are": 0.5,
    "is": 0.5
  },
  "access there are": {
    "three": 1.0
  },
  "are three clarion": {
    "statements": 1.0
  },
  "three clarion statements": {
    "which": 1.0
  },
  "clarion statements which": {
    "perform": 1.0
  },
  "statements which perform": {
    "sequential": 1.0
  },
  "which perform sequential": {
    "file": 1.0
  },
  "perform sequential file": {
    "access": 1.0
  },
  "file access set": {
    "next": 1.0
  },
  "access set next": {
    "and": 1.0
  },
  "set next and": {
    "previous": 0.5,
    "set": 0.5
  },
  "next and previous": {
    "the": 0.3333333333333333,
    "statements": 0.3333333333333333,
    "would": 0.3333333333333333
  },
  "and previous the": {
    "set": 1.0
  },
  "previous the set": {
    "statement": 1.0
  },
  "the set statement": {
    "initializ": 0.16666666666666666,
    "is": 0.3333333333333333,
    "listed": 0.16666666666666666,
    "sets": 0.16666666666666666,
    "initializes": 0.16666666666666666
  },
  "set statement initializ": {
    "es": 1.0
  },
  "statement initializ es": {
    "the": 1.0
  },
  "initializ es the": {
    "sequential": 1.0
  },
  "es the sequential": {
    "processing": 1.0
  },
  "the sequential processing": {
    "it": 0.5,
    "record": 0.5
  },
  "sequential processing it": {
    "does": 1.0
  },
  "processing it does": {
    "not": 1.0
  },
  "does not read": {
    "a": 1.0
  },
  "not read a": {
    "record": 1.0
  },
  "read a record": {
    "the": 1.0
  },
  "a record the": {
    "next": 0.5,
    "process": 0.5
  },
  "record the next": {
    "and": 1.0
  },
  "the next and": {
    "previous": 1.0
  },
  "and previous statements": {
    "read": 1.0
  },
  "previous statements read": {
    "the": 1.0
  },
  "statements read the": {
    "records": 1.0
  },
  "read the records": {
    "in": 1.0
  },
  "records in ascending": {
    "next": 1.0
  },
  "in ascending next": {
    "or": 1.0
  },
  "ascending next or": {
    "descending": 1.0
  },
  "next or descending": {
    "previous": 1.0
  },
  "or descending previous": {
    "order": 1.0
  },
  "descending previous order": {
    "within": 1.0
  },
  "previous order within": {
    "the": 1.0
  },
  "order within the": {
    "sequence": 1.0
  },
  "within the sequence": {
    "established": 1.0
  },
  "the sequence established": {
    "by": 1.0
  },
  "sequence established by": {
    "set": 1.0
  },
  "established by set": {
    "the": 1.0
  },
  "by set the": {
    "set": 1.0
  },
  "set the set": {
    "statement": 1.0
  },
  "set statement is": {
    "the": 1.0
  },
  "statement is the": {
    "ruling": 0.5,
    "last": 0.5
  },
  "is the ruling": {
    "element": 1.0
  },
  "the ruling element": {
    "in": 1.0
  },
  "ruling element in": {
    "sequential": 1.0
  },
  "element in sequential": {
    "file": 1.0
  },
  "in sequential file": {
    "processing": 1.0
  },
  "sequential file processing": {
    "a": 1.0
  },
  "file processing a": {
    "set": 1.0
  },
  "processing a set": {
    "statement": 0.5,
    "is": 0.5
  },
  "a set statement": {
    "must": 1.0
  },
  "set statement must": {
    "come": 1.0
  },
  "statement must come": {
    "before": 1.0
  },
  "must come before": {
    "next": 1.0
  },
  "come before next": {
    "or": 1.0
  },
  "before next or": {
    "previous": 1.0
  },
  "next or previous": {
    "to": 0.4,
    "is": 0.2,
    "set": 0.2,
    "statement": 0.2
  },
  "or previous to": {
    "initialize": 0.5,
    "begin": 0.5
  },
  "previous to initialize": {
    "the": 1.0
  },
  "to initialize the": {
    "starting": 1.0
  },
  "initialize the starting": {
    "point": 1.0
  },
  "the starting point": {
    "and": 0.25,
    "look": 0.25,
    "it": 0.25,
    "parameters": 0.25
  },
  "starting point and": {
    "sequence": 1.0
  },
  "point and sequence": {
    "in": 1.0
  },
  "and sequence in": {
    "which": 1.0
  },
  "the records will": {
    "be": 1.0
  },
  "records will be": {
    "read": 1.0
  },
  "will be read": {
    "usually": 1.0
  },
  "be read usually": {
    "the": 1.0
  },
  "read usually the": {
    "set": 1.0
  },
  "usually the set": {
    "statement": 1.0
  },
  "is the last": {
    "executable": 1.0
  },
  "the last executable": {
    "stat": 1.0
  },
  "last executable stat": {
    "ement": 1.0
  },
  "executable stat ement": {
    "before": 1.0
  },
  "stat ement before": {
    "the": 1.0
  },
  "ement before the": {
    "loop": 1.0
  },
  "before the loop": {
    "structure": 1.0
  },
  "the loop structure": {
    "which": 1.0
  },
  "loop structure which": {
    "sequentially": 1.0
  },
  "structure which sequentially": {
    "processes": 1.0
  },
  "which sequentially processes": {
    "the": 1.0
  },
  "sequentially processes the": {
    "records": 1.0
  },
  "processes the records": {
    "in": 1.0
  },
  "file the next": {
    "or": 1.0
  },
  "the next or": {
    "previous": 1.0
  },
  "or previous is": {
    "then": 1.0
  },
  "previous is then": {
    "the": 1.0
  },
  "is then the": {
    "first": 1.0
  },
  "then the first": {
    "statement": 1.0
  },
  "first statement within": {
    "the": 1.0
  },
  "statement within the": {
    "loop": 1.0
  },
  "within the loop": {
    "as": 1.0
  },
  "the loop as": {
    "in": 1.0
  },
  "loop as in": {
    "this": 1.0
  },
  "this example code": {
    "using": 0.3333333333333333,
    "processes": 0.3333333333333333,
    "demonstrates": 0.3333333333333333
  },
  "example code using": {
    "the": 1.0
  },
  "code using the": {
    "previous": 1.0
  },
  "previous example file": {
    "definition": 1.0
  },
  "example file definition": {
    "set": 1.0
  },
  "file definition set": {
    "sam": 1.0
  },
  "definition set sam": {
    "field1key": 1.0
  },
  "set sam field1key": {
    "set": 1.0
  },
  "sam field1key set": {
    "to": 1.0
  },
  "field1key set to": {
    "top": 1.0
  },
  "set to top": {
    "of": 1.0
  },
  "to top of": {
    "file": 1.0
  },
  "top of file": {
    "in": 0.5,
    "loop": 0.5
  },
  "of file in": {
    "key": 1.0
  },
  "file in key": {
    "order": 1.0
  },
  "in key order": {
    "loop": 1.0
  },
  "key order loop": {
    "loop": 1.0
  },
  "order loop loop": {
    "until": 1.0
  },
  "loop loop until": {
    "end": 1.0
  },
  "loop until end": {
    "of": 1.0
  },
  "until end of": {
    "the": 1.0
  },
  "of the sample": {
    "file": 1.0
  },
  "the sample file": {
    "next": 1.0
  },
  "sample file next": {
    "sample": 1.0
  },
  "file next sample": {
    "read": 1.0
  },
  "next sample read": {
    "each": 1.0
  },
  "sample read each": {
    "record": 1.0
  },
  "read each record": {
    "in": 1.0
  },
  "record in turn": {
    "if": 1.0
  },
  "in turn if": {
    "errorcode": 1.0
  },
  "turn if errorcode": {
    "then": 1.0
  },
  "then break break": {
    "at": 1.0
  },
  "break break at": {
    "end": 1.0
  },
  "break at end": {
    "of": 1.0
  },
  "at end of": {
    "file": 1.0
  },
  "end of file": {
    "record": 0.3333333333333333,
    "if": 0.3333333333333333,
    "sequential": 0.3333333333333333
  },
  "of file record": {
    "processing": 1.0
  },
  "file record processing": {
    "s": 1.0
  },
  "record processing s": {
    "tatements": 1.0
  },
  "processing s tatements": {
    "end": 1.0
  },
  "s tatements end": {
    "end": 1.0
  },
  "tatements end end": {
    "loop": 1.0
  },
  "end end loop": {
    "there": 1.0
  },
  "end loop there": {
    "are": 1.0
  },
  "loop there are": {
    "seven": 1.0
  },
  "there are seven": {
    "forms": 1.0
  },
  "are seven forms": {
    "of": 1.0
  },
  "seven forms of": {
    "the": 1.0
  },
  "forms of the": {
    "set": 0.5,
    "get": 0.5
  },
  "of the set": {
    "statement": 0.5,
    "next": 0.5
  },
  "set statement listed": {
    "in": 1.0
  },
  "statement listed in": {
    "the": 1.0
  },
  "listed in the": {
    "language": 1.0
  },
  "language reference manual": {
    "these": 1.0
  },
  "reference manual these": {
    "essentially": 1.0
  },
  "manual these essentially": {
    "break": 1.0
  },
  "these essentially break": {
    "down": 1.0
  },
  "essentially break down": {
    "into": 1.0
  },
  "break down into": {
    "two": 1.0
  },
  "down into two": {
    "categories": 1.0
  },
  "into two categories": {
    "three": 1.0
  },
  "two categories three": {
    "starting": 1.0
  },
  "categories three starting": {
    "points": 1.0
  },
  "three starting points": {
    "for": 1.0
  },
  "starting points for": {
    "physical": 0.5,
    "indexed": 0.5
  },
  "points for physical": {
    "record": 1.0
  },
  "for physical record": {
    "number": 1.0
  },
  "number order access": {
    "and": 1.0
  },
  "order access and": {
    "four": 1.0
  },
  "access and four": {
    "starting": 1.0
  },
  "and four starting": {
    "points": 1.0
  },
  "four starting points": {
    "for": 1.0
  },
  "points for indexed": {
    "order": 1.0
  },
  "for indexed order": {
    "access": 1.0
  },
  "indexed order access": {
    "physical": 1.0
  },
  "order access physical": {
    "order": 1.0
  },
  "access physical order": {
    "indexed": 1.0
  },
  "physical order indexed": {
    "order": 1.0
  },
  "order indexed order": {
    "top": 1.0
  },
  "indexed order top": {
    "bottom": 1.0
  },
  "order top bottom": {
    "of": 1.0
  },
  "top bottom of": {
    "file": 0.5,
    "the": 0.5
  },
  "bottom of file": {
    "top": 0.5,
    "physical": 0.5
  },
  "of file top": {
    "bottom": 1.0
  },
  "file top bottom": {
    "of": 1.0
  },
  "of file physical": {
    "record": 1.0
  },
  "file physical record": {
    "number": 0.5,
    "index": 0.5
  },
  "record number index": {
    "record": 0.5,
    "value": 0.5
  },
  "number index record": {
    "number": 1.0
  },
  "index record number": {
    "index": 0.2,
    "the": 0.2,
    "is": 0.2,
    "sam": 0.2,
    "order": 0.2
  },
  "number index value": {
    "index": 1.0
  },
  "index value index": {
    "value": 0.5,
    "va": 0.5
  },
  "value index value": {
    "index": 1.0
  },
  "value index va": {
    "lue": 1.0
  },
  "index va lue": {
    "and": 1.0
  },
  "va lue and": {
    "physical": 1.0
  },
  "lue and physical": {
    "record": 1.0
  },
  "and physical record": {
    "number": 1.0
  },
  "record number set": {
    "initializes": 1.0
  },
  "number set initializes": {
    "the": 1.0
  },
  "set initializes the": {
    "sequential": 1.0
  },
  "initializes the sequential": {
    "processing": 1.0
  },
  "sequential processing record": {
    "pointer": 1.0
  },
  "processing record pointer": {
    "and": 1.0
  },
  "record pointer and": {
    "it": 1.0
  },
  "pointer and it": {
    "employs": 1.0
  },
  "and it employs": {
    "a": 1.0
  },
  "it employs a": {
    "type": 1.0
  },
  "employs a type": {
    "of": 1.0
  },
  "type of fuzzy": {
    "logic": 1.0
  },
  "of fuzzy logic": {
    "when": 1.0
  },
  "fuzzy logic when": {
    "you": 1.0
  },
  "logic when you": {
    "set": 1.0
  },
  "when you set": {
    "to": 1.0
  },
  "you set to": {
    "the": 0.5,
    "an": 0.5
  },
  "set to the": {
    "top": 1.0
  },
  "to the top": {
    "bottom": 1.0
  },
  "the top bottom": {
    "of": 1.0
  },
  "bottom of the": {
    "file": 1.0
  },
  "file the record": {
    "pointer": 1.0
  },
  "the record pointer": {
    "is": 0.5,
    "positioned": 0.25,
    "for": 0.25
  },
  "record pointer is": {
    "not": 0.5,
    "left": 0.5
  },
  "pointer is not": {
    "actually": 1.0
  },
  "is not actually": {
    "pointing": 1.0
  },
  "not actually pointing": {
    "at": 1.0
  },
  "actually pointing at": {
    "either": 1.0
  },
  "pointing at either": {
    "if": 1.0
  },
  "at either if": {
    "you": 1.0
  },
  "either if you": {
    "issue": 1.0
  },
  "if you issue": {
    "a": 1.0
  },
  "you issue a": {
    "next": 0.5,
    "previous": 0.5
  },
  "issue a next": {
    "after": 1.0
  },
  "a next after": {
    "the": 1.0
  },
  "next after the": {
    "set": 1.0
  },
  "after the set": {
    "you": 1.0
  },
  "the set you": {
    "read": 1.0
  },
  "set you read": {
    "records": 1.0
  },
  "you read records": {
    "forward": 0.5,
    "backwards": 0.5
  },
  "read records forward": {
    "from": 1.0
  },
  "records forward from": {
    "the": 1.0
  },
  "forward from the": {
    "beginning": 1.0
  },
  "from the beginning": {
    "of": 1.0
  },
  "the file if": {
    "you": 0.25,
    "the": 0.25,
    "error": 0.5
  },
  "file if you": {
    "issue": 0.5,
    "need": 0.5
  },
  "issue a previous": {
    "instead": 1.0
  },
  "a previous instead": {
    "you": 1.0
  },
  "previous instead you": {
    "read": 1.0
  },
  "instead you read": {
    "records": 1.0
  },
  "read records backwards": {
    "from": 1.0
  },
  "records backwards from": {
    "the": 1.0
  },
  "backwards from the": {
    "end": 1.0
  },
  "from the end": {
    "of": 1.0
  },
  "the file once": {
    "you": 1.0
  },
  "file once you": {
    "have": 1.0
  },
  "once you have": {
    "issued": 1.0
  },
  "you have issued": {
    "the": 1.0
  },
  "have issued the": {
    "next": 1.0
  },
  "issued the next": {
    "or": 1.0
  },
  "previous to begin": {
    "reading": 1.0
  },
  "to begin reading": {
    "records": 1.0
  },
  "begin reading records": {
    "in": 1.0
  },
  "reading records in": {
    "one": 1.0
  },
  "in one direction": {
    "you": 1.0
  },
  "one direction you": {
    "cannot": 1.0
  },
  "direction you cannot": {
    "go": 1.0
  },
  "you cannot go": {
    "back": 1.0
  },
  "cannot go back": {
    "across": 1.0
  },
  "go back across": {
    "the": 1.0
  },
  "back across the": {
    "top": 0.5,
    "n": 0.5
  },
  "across the top": {
    "bottom": 1.0
  },
  "the file without": {
    "another": 1.0
  },
  "file without another": {
    "set": 1.0
  },
  "without another set": {
    "the": 1.0
  },
  "another set the": {
    "same": 1.0
  },
  "set the same": {
    "fuzzy": 1.0
  },
  "the same fuzzy": {
    "logic": 1.0
  },
  "same fuzzy logic": {
    "is": 1.0
  },
  "fuzzy logic is": {
    "active": 1.0
  },
  "logic is active": {
    "when": 1.0
  },
  "is active when": {
    "you": 1.0
  },
  "active when you": {
    "set": 1.0
  },
  "set to an": {
    "index": 1.0
  },
  "to an index": {
    "value": 1.0
  },
  "an index value": {
    "if": 0.5,
    "physical": 0.5
  },
  "index value if": {
    "set": 1.0
  },
  "value if set": {
    "finds": 1.0
  },
  "if set finds": {
    "a": 1.0
  },
  "set finds a": {
    "record": 1.0
  },
  "finds a record": {
    "containing": 1.0
  },
  "a record containing": {
    "an": 1.0
  },
  "record containing an": {
    "exact": 1.0
  },
  "containing an exact": {
    "match": 1.0
  },
  "an exact match": {
    "to": 1.0
  },
  "exact match to": {
    "that": 0.3333333333333333,
    "the": 0.6666666666666666
  },
  "match to that": {
    "index": 1.0
  },
  "to that index": {
    "value": 1.0
  },
  "that index value": {
    "it": 1.0
  },
  "index value it": {
    "points": 1.0
  },
  "value it points": {
    "to": 1.0
  },
  "it points to": {
    "that": 1.0
  },
  "points to that": {
    "specific": 1.0
  },
  "to that specific": {
    "record": 1.0
  },
  "that specific record": {
    "in": 1.0
  },
  "specific record in": {
    "this": 1.0
  },
  "record in this": {
    "case": 1.0
  },
  "this case either": {
    "next": 1.0
  },
  "case either next": {
    "or": 1.0
  },
  "either next or": {
    "pre": 1.0
  },
  "next or pre": {
    "vious": 1.0
  },
  "or pre vious": {
    "would": 1.0
  },
  "pre vious would": {
    "read": 1.0
  },
  "vious would read": {
    "the": 1.0
  },
  "would read the": {
    "same": 0.3333333333333333,
    "following": 0.3333333333333333,
    "prior": 0.3333333333333333
  },
  "read the same": {
    "record": 1.0
  },
  "the same record": {
    "if": 0.125,
    "next": 0.125,
    "at": 0.25,
    "concurrency": 0.125,
    "twice": 0.125,
    "make": 0.125,
    "the": 0.125
  },
  "same record if": {
    "however": 1.0
  },
  "record if however": {
    "there": 1.0
  },
  "if however there": {
    "is": 1.0
  },
  "however there is": {
    "no": 1.0
  },
  "is no exact": {
    "match": 1.0
  },
  "no exact match": {
    "to": 0.5,
    "record": 0.5
  },
  "match to the": {
    "index": 1.0
  },
  "to the index": {
    "value": 1.0
  },
  "the index value": {
    "set": 0.2,
    "and": 0.4,
    "in": 0.4
  },
  "index value set": {
    "points": 1.0
  },
  "value set points": {
    "between": 1.0
  },
  "set points between": {
    "the": 1.0
  },
  "points between the": {
    "last": 1.0
  },
  "between the last": {
    "record": 1.0
  },
  "the last record": {
    "in": 1.0
  },
  "last record in": {
    "sequence": 1.0
  },
  "record in sequence": {
    "containing": 1.0
  },
  "in sequence containing": {
    "a": 1.0
  },
  "sequence containing a": {
    "value": 1.0
  },
  "containing a value": {
    "less": 0.5,
    "greater": 0.5
  },
  "a value less": {
    "than": 1.0
  },
  "value less than": {
    "or": 1.0
  },
  "less than or": {
    "greater": 1.0
  },
  "than or greater": {
    "than": 1.0
  },
  "or greater than": {
    "in": 1.0
  },
  "greater than in": {
    "a": 1.0
  },
  "than in a": {
    "descending": 1.0
  },
  "in a descending": {
    "index": 1.0
  },
  "a descending index": {
    "the": 1.0
  },
  "descending index the": {
    "index": 1.0
  },
  "index the index": {
    "value": 1.0
  },
  "index value and": {
    "the": 0.5,
    "returns": 0.5
  },
  "value and the": {
    "next": 1.0
  },
  "and the next": {
    "record": 1.0
  },
  "the next record": {
    "in": 1.0
  },
  "next record in": {
    "sequen": 1.0
  },
  "record in sequen": {
    "ce": 1.0
  },
  "in sequen ce": {
    "containing": 1.0
  },
  "sequen ce containing": {
    "a": 1.0
  },
  "ce containing a": {
    "value": 1.0
  },
  "a value greater": {
    "than": 1.0
  },
  "value greater than": {
    "or": 1.0
  },
  "greater than or": {
    "less": 1.0
  },
  "than or less": {
    "than": 1.0
  },
  "or less than": {
    "in": 1.0
  },
  "less than in": {
    "a": 1.0
  },
  "index value in": {
    "this": 1.0
  },
  "value in this": {
    "case": 1.0
  },
  "this case next": {
    "and": 1.0
  },
  "case next and": {
    "previous": 1.0
  },
  "and previous would": {
    "not": 1.0
  },
  "previous would not": {
    "read": 1.0
  },
  "would not read": {
    "the": 1.0
  },
  "not read the": {
    "same": 1.0
  },
  "same record next": {
    "would": 1.0
  },
  "record next would": {
    "read": 1.0
  },
  "next would read": {
    "the": 1.0
  },
  "read the following": {
    "record": 1.0
  },
  "the following record": {
    "in": 1.0
  },
  "following record in": {
    "the": 1.0
  },
  "record in the": {
    "index": 0.5,
    "file": 0.5
  },
  "in the index": {
    "sequence": 0.3333333333333333,
    "order": 0.3333333333333333,
    "component": 0.3333333333333333
  },
  "the index sequence": {
    "previous": 0.5,
    "as": 0.5
  },
  "index sequence previous": {
    "would": 1.0
  },
  "sequence previous would": {
    "read": 1.0
  },
  "previous would read": {
    "the": 1.0
  },
  "read the prior": {
    "record": 1.0
  },
  "the prior record": {
    "in": 1.0
  },
  "prior record in": {
    "th": 1.0
  },
  "record in th": {
    "e": 1.0
  },
  "in th e": {
    "index": 1.0
  },
  "th e index": {
    "sequence": 1.0
  },
  "e index sequence": {
    "51": 1.0
  },
  "index sequence 51": {
    "data": 1.0
  },
  "sequence 51 data": {
    "file": 1.0
  },
  "51 data file": {
    "processing": 1.0
  },
  "file processing the": {
    "advantage": 1.0
  },
  "processing the advantage": {
    "of": 1.0
  },
  "advantage of this": {
    "fuzzy": 1.0
  },
  "of this fuzzy": {
    "logic": 1.0
  },
  "this fuzzy logic": {
    "lies": 1.0
  },
  "fuzzy logic lies": {
    "in": 1.0
  },
  "logic lies in": {
    "its": 1.0
  },
  "lies in its": {
    "use": 1.0
  },
  "in its use": {
    "with": 1.0
  },
  "its use with": {
    "a": 1.0
  },
  "use with a": {
    "multiple": 1.0
  },
  "with a multiple": {
    "component": 1.0
  },
  "multiple component index": {
    "as": 0.5,
    "mus": 0.5
  },
  "component index as": {
    "in": 1.0
  },
  "index as in": {
    "this": 1.0
  },
  "this example sample": {
    "file": 1.0
  },
  "example sample file": {
    "driver": 1.0
  },
  "pre sam fieldskey": {
    "key": 1.0
  },
  "sam fieldskey key": {
    "sam": 0.5,
    "sequence": 0.5
  },
  "fieldskey key sam": {
    "field1": 1.0
  },
  "sam field2 dup": {
    "key": 1.0
  },
  "field2 dup key": {
    "on": 1.0
  },
  "dup key on": {
    "field": 1.0
  },
  "field 1 and": {
    "field": 1.0
  },
  "1 and field": {
    "2": 1.0
  },
  "and field 2": {
    "record": 1.0
  },
  "field 2 record": {
    "re": 1.0
  },
  "2 record re": {
    "cord": 1.0
  },
  "record re cord": {
    "field1": 1.0
  },
  "re cord field1": {
    "long": 1.0
  },
  "cord field1 long": {
    "field2": 1.0
  },
  "deny none clear": {
    "sam": 1.0
  },
  "none clear sam": {
    "record": 1.0
  },
  "clear sam record": {
    "clear": 1.0
  },
  "sam record clear": {
    "the": 1.0
  },
  "record buffer sam": {
    "field1": 1.0
  },
  "buffer sam field1": {
    "10": 1.0
  },
  "sam field1 10": {
    "initialize": 0.3333333333333333,
    "check": 0.3333333333333333,
    "sam": 0.3333333333333333
  },
  "field1 10 initialize": {
    "first": 1.0
  },
  "10 initialize first": {
    "key": 1.0
  },
  "initialize first key": {
    "component": 1.0
  },
  "first key component": {
    "set": 1.0
  },
  "key component set": {
    "sam": 1.0
  },
  "component set sam": {
    "fieldskey": 1.0
  },
  "set sam fieldskey": {
    "sam": 0.5,
    "1": 0.25,
    "set": 0.25
  },
  "sam fieldskey sam": {
    "fieldskey": 1.0
  },
  "fieldskey sam fieldskey": {
    "key": 0.5,
    "5": 0.5
  },
  "fieldskey key sequence": {
    "start": 1.0
  },
  "key sequence start": {
    "at": 1.0
  },
  "sequence start at": {
    "10": 1.0
  },
  "start at 10": {
    "blank": 1.0
  },
  "at 10 blank": {
    "loop": 1.0
  },
  "10 blank loop": {
    "process": 1.0
  },
  "blank loop process": {
    "each": 1.0
  },
  "loop process each": {
    "record": 1.0
  },
  "process each record": {
    "next": 0.5,
    "in": 0.5
  },
  "each record next": {
    "sample": 1.0
  },
  "record next sample": {
    "one": 1.0
  },
  "next sample one": {
    "at": 1.0
  },
  "sample one at": {
    "a": 1.0
  },
  "time if errorcode": {
    "then": 1.0
  },
  "of file if": {
    "sam": 1.0
  },
  "file if sam": {
    "field1": 1.0
  },
  "if sam field1": {
    "10": 1.0
  },
  "field1 10 check": {
    "for": 1.0
  },
  "10 check for": {
    "end": 1.0
  },
  "end of group": {
    "break": 1.0
  },
  "of group break": {
    "if": 1.0
  },
  "group break if": {
    "so": 1.0
  },
  "break if so": {
    "get": 1.0
  },
  "if so get": {
    "out": 1.0
  },
  "so get out": {
    "of": 1.0
  },
  "out of process": {
    "loop": 1.0
  },
  "of process loop": {
    "end": 0.8,
    "61": 0.2
  },
  "process loop end": {
    "record": 0.25,
    "loop": 0.75
  },
  "loop end record": {
    "processing": 1.0
  },
  "end record processing": {
    "statements": 1.0
  },
  "record processing statements": {
    "end": 0.6666666666666666,
    "get": 0.3333333333333333
  },
  "end end process": {
    "loop": 1.0
  },
  "end process loop": {
    "this": 1.0
  },
  "process loop this": {
    "code": 1.0
  },
  "loop this code": {
    "first": 1.0
  },
  "this code first": {
    "clears": 1.0
  },
  "code first clears": {
    "the": 1.0
  },
  "first clears the": {
    "record": 1.0
  },
  "clears the record": {
    "buffer": 1.0
  },
  "record buffer assigning": {
    "zeroes": 1.0
  },
  "buffer assigning zeroes": {
    "to": 1.0
  },
  "assigning zeroes to": {
    "sam": 1.0
  },
  "zeroes to sam": {
    "field1": 1.0
  },
  "to sam field1": {
    "and": 1.0
  },
  "field1 and sam": {
    "field3": 1.0
  },
  "and sam field3": {
    "and": 1.0
  },
  "sam field3 and": {
    "blanks": 1.0
  },
  "field3 and blanks": {
    "to": 1.0
  },
  "and blanks to": {
    "sam": 1.0
  },
  "blanks to sam": {
    "field2": 1.0
  },
  "to sam field2": {
    "the": 1.0
  },
  "sam field2 the": {
    "first": 1.0
  },
  "field2 the first": {
    "component": 1.0
  },
  "first component field": {
    "of": 1.0
  },
  "component field of": {
    "sam": 1.0
  },
  "field of sam": {
    "fieldskey": 1.0
  },
  "of sam fieldskey": {
    "is": 1.0
  },
  "sam fieldskey is": {
    "initialized": 1.0
  },
  "fieldskey is initialized": {
    "to": 1.0
  },
  "is initialized to": {
    "the": 1.0
  },
  "initialized to the": {
    "value": 1.0
  },
  "to the value": {
    "that": 1.0
  },
  "the value that": {
    "must": 1.0
  },
  "value that must": {
    "be": 1.0
  },
  "that must be": {
    "in": 1.0
  },
  "must be in": {
    "the": 1.0
  },
  "in the records": {
    "you": 1.0
  },
  "the records you": {
    "need": 1.0
  },
  "records you need": {
    "to": 1.0
  },
  "need to process": {
    "the": 1.0
  },
  "to process the": {
    "set": 1.0
  },
  "process the set": {
    "statement": 1.0
  },
  "set statement sets": {
    "up": 1.0
  },
  "statement sets up": {
    "sequential": 1.0
  },
  "sets up sequential": {
    "processing": 1.0
  },
  "up sequential processing": {
    "in": 1.0
  },
  "sequential processing in": {
    "indexed": 1.0
  },
  "processing in indexed": {
    "order": 1.0
  },
  "in indexed order": {
    "starting": 1.0
  },
  "indexed order starting": {
    "at": 1.0
  },
  "order starting at": {
    "the": 1.0
  },
  "starting at the": {
    "index": 1.0
  },
  "at the index": {
    "value": 1.0
  },
  "this case a": {
    "value": 1.0
  },
  "case a value": {
    "of": 1.0
  },
  "a value of": {
    "10": 1.0
  },
  "value of 10": {
    "in": 1.0
  },
  "of 10 in": {
    "sam": 1.0
  },
  "10 in sam": {
    "field1": 1.0
  },
  "in sam field1": {
    "and": 1.0
  },
  "field1 and blanks": {
    "in": 1.0
  },
  "and blanks in": {
    "sam": 1.0
  },
  "blanks in sam": {
    "field2": 1.0
  },
  "in sam field2": {
    "sample": 1.0
  },
  "sam field2 sample": {
    "file": 1.0
  },
  "field2 sample file": {
    "records": 1.0
  },
  "sample file records": {
    "index": 1.0
  },
  "file records index": {
    "record": 1.0
  },
  "records index record": {
    "field1": 1.0
  },
  "index record field1": {
    "field2": 1.0
  },
  "record field1 field2": {
    "field3": 1.0
  },
  "field1 field2 field3": {
    "1": 1.0
  },
  "field2 field3 1": {
    "5": 0.5,
    "3": 0.5
  },
  "field3 1 5": {
    "abc": 1.0
  },
  "1 5 abc": {
    "14": 1.0
  },
  "5 abc 14": {
    "52": 1.0
  },
  "abc 14 52": {
    "2": 0.3333333333333333,
    "4": 0.16666666666666666,
    "7": 0.16666666666666666,
    "3": 0.16666666666666666,
    "clarion": 0.16666666666666666
  },
  "14 52 2": {
    "5": 0.5,
    "6": 0.5
  },
  "52 2 5": {
    "def": 1.0
  },
  "2 5 def": {
    "14": 1.0
  },
  "5 def 14": {
    "52": 1.0
  },
  "def 14 52": {
    "record": 0.16666666666666666,
    "6": 0.16666666666666666,
    "set": 0.16666666666666666,
    "4": 0.16666666666666666,
    "5": 0.16666666666666666,
    "7": 0.16666666666666666
  },
  "14 52 record": {
    "pointer": 1.0
  },
  "52 record pointer": {
    "after": 1.0
  },
  "record pointer after": {
    "set": 1.0
  },
  "pointer after set": {
    "3": 1.0
  },
  "after set 3": {
    "10": 1.0
  },
  "set 3 10": {
    "abc": 1.0
  },
  "3 10 abc": {
    "14": 1.0
  },
  "10 abc 14": {
    "52": 1.0
  },
  "14 52 4": {
    "10": 0.5,
    "2": 0.5
  },
  "52 4 10": {
    "ab": 1.0
  },
  "4 10 ab": {
    "c": 1.0
  },
  "10 ab c": {
    "29": 1.0
  },
  "ab c 29": {
    "04": 1.0
  },
  "c 29 04": {
    "5": 1.0
  },
  "29 04 5": {
    "10": 1.0
  },
  "04 5 10": {
    "def": 1.0
  },
  "5 10 def": {
    "14": 1.0
  },
  "10 def 14": {
    "52": 1.0
  },
  "14 52 6": {
    "15": 1.0
  },
  "52 6 15": {
    "abc": 1.0
  },
  "6 15 abc": {
    "14": 1.0
  },
  "15 abc 14": {
    "52": 1.0
  },
  "14 52 7": {
    "15": 0.5,
    "1": 0.5
  },
  "52 7 15": {
    "def": 1.0
  },
  "7 15 def": {
    "14": 1.0
  },
  "15 def 14": {
    "52": 1.0
  },
  "14 52 set": {
    "leaves": 1.0
  },
  "52 set leaves": {
    "the": 1.0
  },
  "set leaves the": {
    "record": 1.0
  },
  "leaves the record": {
    "pointer": 1.0
  },
  "record pointer positioned": {
    "as": 1.0
  },
  "pointer positioned as": {
    "shown": 1.0
  },
  "positioned as shown": {
    "above": 1.0
  },
  "as shown above": {
    "bec": 1.0
  },
  "shown above bec": {
    "ause": 1.0
  },
  "above bec ause": {
    "there": 1.0
  },
  "bec ause there": {
    "is": 1.0
  },
  "ause there is": {
    "no": 1.0
  },
  "exact match record": {
    "2": 1.0
  },
  "match record 2": {
    "s": 1.0
  },
  "record 2 s": {
    "value": 1.0
  },
  "2 s value": {
    "5": 1.0
  },
  "s value 5": {
    "def": 1.0
  },
  "value 5 def": {
    "is": 1.0
  },
  "5 def is": {
    "less": 1.0
  },
  "def is less": {
    "than": 1.0
  },
  "is less than": {
    "10": 1.0
  },
  "less than 10": {
    "blank": 1.0
  },
  "than 10 blank": {
    "and": 0.5,
    "therefore": 0.5
  },
  "10 blank and": {
    "record": 1.0
  },
  "blank and record": {
    "3": 1.0
  },
  "and record 3": {
    "s": 1.0
  },
  "record 3 s": {
    "value": 1.0
  },
  "3 s value": {
    "10": 1.0
  },
  "s value 10": {
    "abc": 1.0
  },
  "value 10 abc": {
    "is": 1.0
  },
  "10 abc is": {
    "greater": 1.0
  },
  "abc is greater": {
    "than": 1.0
  },
  "is greater than": {
    "10": 1.0
  },
  "greater than 10": {
    "blank": 1.0
  },
  "10 blank therefore": {
    "the": 1.0
  },
  "blank therefore the": {
    "record": 1.0
  },
  "therefore the record": {
    "pointer": 1.0
  },
  "pointer is left": {
    "between": 1.0
  },
  "is left between": {
    "the": 1.0
  },
  "left between the": {
    "two": 1.0
  },
  "the two the": {
    "first": 1.0
  },
  "two the first": {
    "time": 1.0
  },
  "the first time": {
    "through": 1.0
  },
  "first time through": {
    "the": 1.0
  },
  "time through the": {
    "loop": 1.0
  },
  "through the loop": {
    "next": 0.5,
    "53": 0.5
  },
  "the loop next": {
    "reads": 1.0
  },
  "loop next reads": {
    "record": 1.0
  },
  "next reads record": {
    "number": 0.5,
    "6": 0.5
  },
  "reads record number": {
    "3": 1.0
  },
  "record number 3": {
    "the": 1.0
  },
  "number 3 the": {
    "if": 1.0
  },
  "3 the if": {
    "st": 1.0
  },
  "the if st": {
    "atement": 1.0
  },
  "if st atement": {
    "terminates": 1.0
  },
  "st atement terminates": {
    "the": 1.0
  },
  "atement terminates the": {
    "processing": 1.0
  },
  "terminates the processing": {
    "loop": 1.0
  },
  "the processing loop": {
    "after": 1.0
  },
  "processing loop after": {
    "next": 1.0
  },
  "loop after next": {
    "reads": 1.0
  },
  "after next reads": {
    "record": 1.0
  },
  "reads record 6": {
    "there": 1.0
  },
  "record 6 there": {
    "is": 1.0
  },
  "6 there is": {
    "a": 1.0
  },
  "is a distinct": {
    "difference": 1.0
  },
  "a distinct difference": {
    "between": 1.0
  },
  "distinct difference between": {
    "the": 1.0
  },
  "difference between the": {
    "physical": 0.5,
    "two": 0.5
  },
  "between the physical": {
    "record": 1.0
  },
  "record number and": {
    "the": 1.0
  },
  "number and the": {
    "index": 1.0
  },
  "and the index": {
    "record": 1.0
  },
  "the index record": {
    "number": 1.0
  },
  "number the physical": {
    "record": 1.0
  },
  "record number is": {
    "the": 1.0
  },
  "number is the": {
    "relative": 1.0
  },
  "is the relative": {
    "physical": 0.5,
    "record": 0.5
  },
  "the relative physical": {
    "position": 1.0
  },
  "relative physical position": {
    "within": 1.0
  },
  "physical position within": {
    "the": 1.0
  },
  "position within the": {
    "data": 0.5,
    "index": 0.5
  },
  "within the data": {
    "file": 1.0
  },
  "data file as": {
    "returned": 1.0
  },
  "file as returned": {
    "b": 1.0
  },
  "as returned b": {
    "y": 1.0
  },
  "returned b y": {
    "the": 1.0
  },
  "b y the": {
    "pointer": 1.0
  },
  "y the pointer": {
    "label": 1.0
  },
  "the pointer label": {
    "of": 1.0
  },
  "pointer label of": {
    "a": 0.5,
    "an": 0.5
  },
  "a file procedure": {
    "the": 1.0
  },
  "file procedure the": {
    "index": 1.0
  },
  "procedure the index": {
    "record": 1.0
  },
  "the relative record": {
    "position": 1.0
  },
  "relative record position": {
    "within": 1.0
  },
  "record position within": {
    "the": 1.0
  },
  "within the index": {
    "sequence": 1.0
  },
  "index sequence as": {
    "returned": 1.0
  },
  "sequence as returned": {
    "by": 1.0
  },
  "as returned by": {
    "the": 1.0
  },
  "returned by the": {
    "pointer": 0.3333333333333333,
    "database": 0.3333333333333333,
    "back": 0.3333333333333333
  },
  "by the pointer": {
    "label": 1.0
  },
  "label of an": {
    "index": 1.0
  },
  "of an index": {
    "procedure": 1.0
  },
  "an index procedure": {
    "in": 1.0
  },
  "index procedure in": {
    "physical": 1.0
  },
  "procedure in physical": {
    "order": 1.0
  },
  "in physical order": {
    "the": 1.0
  },
  "physical order the": {
    "same": 1.0
  },
  "order the same": {
    "file": 1.0
  },
  "the same file": {
    "might": 0.3333333333333333,
    "the": 0.3333333333333333,
    "this": 0.3333333333333333
  },
  "same file might": {
    "look": 1.0
  },
  "file might look": {
    "like": 1.0
  },
  "might look like": {
    "this": 1.0
  },
  "look like this": {
    "of": 1.0
  },
  "like this of": {
    "course": 1.0
  },
  "this of course": {
    "the": 1.0
  },
  "of course the": {
    "physi": 1.0
  },
  "course the physi": {
    "cal": 1.0
  },
  "the physi cal": {
    "and": 1.0
  },
  "physi cal and": {
    "index": 1.0
  },
  "cal and index": {
    "record": 1.0
  },
  "and index record": {
    "numbers": 1.0
  },
  "index record numbers": {
    "are": 1.0
  },
  "record numbers are": {
    "not": 0.5,
    "very": 0.5
  },
  "numbers are not": {
    "stored": 1.0
  },
  "are not stored": {
    "in": 1.0
  },
  "not stored in": {
    "the": 1.0
  },
  "stored in the": {
    "data": 1.0
  },
  "data file sample": {
    "file": 1.0
  },
  "file sample file": {
    "physical": 1.0
  },
  "sample file physical": {
    "record": 1.0
  },
  "physical record index": {
    "record": 1.0
  },
  "record index record": {
    "field1": 1.0
  },
  "field3 1 3": {
    "10": 1.0
  },
  "1 3 10": {
    "abc": 1.0
  },
  "52 2 6": {
    "15": 1.0
  },
  "2 6 15": {
    "abc": 1.0
  },
  "14 52 3": {
    "5": 1.0
  },
  "52 3 5": {
    "10": 1.0
  },
  "3 5 10": {
    "def": 1.0
  },
  "52 4 2": {
    "5": 1.0
  },
  "4 2 5": {
    "def": 1.0
  },
  "14 52 5": {
    "4": 1.0
  },
  "52 5 4": {
    "10": 1.0
  },
  "5 4 10": {
    "abc": 1.0
  },
  "4 10 abc": {
    "29": 1.0
  },
  "10 abc 29": {
    "04": 1.0
  },
  "abc 29 04": {
    "6": 1.0
  },
  "29 04 6": {
    "7": 1.0
  },
  "04 6 7": {
    "15": 1.0
  },
  "6 7 15": {
    "def": 1.0
  },
  "52 7 1": {
    "5": 1.0
  },
  "7 1 5": {
    "abc": 1.0
  },
  "14 52 clarion": {
    "language": 1.0
  },
  "52 clarion language": {
    "programming": 1.0
  },
  "programming guide 52": {
    "the": 1.0
  },
  "guide 52 the": {
    "forms": 1.0
  },
  "52 the forms": {
    "of": 1.0
  },
  "the forms of": {
    "set": 1.0
  },
  "forms of set": {
    "that": 1.0
  },
  "of set that": {
    "use": 1.0
  },
  "set that use": {
    "record": 1.0
  },
  "that use record": {
    "nu": 1.0
  },
  "use record nu": {
    "mbers": 1.0
  },
  "record nu mbers": {
    "as": 1.0
  },
  "nu mbers as": {
    "the": 1.0
  },
  "mbers as the": {
    "starting": 1.0
  },
  "as the starting": {
    "point": 1.0
  },
  "starting point look": {
    "very": 1.0
  },
  "point look very": {
    "similar": 1.0
  },
  "look very similar": {
    "therefore": 1.0
  },
  "very similar therefore": {
    "you": 1.0
  },
  "similar therefore you": {
    "need": 1.0
  },
  "therefore you need": {
    "to": 1.0
  },
  "to be very": {
    "clear": 1.0
  },
  "be very clear": {
    "about": 1.0
  },
  "very clear about": {
    "which": 1.0
  },
  "clear about which": {
    "you": 1.0
  },
  "about which you": {
    "are": 1.0
  },
  "which you are": {
    "using": 1.0
  },
  "you are using": {
    "physical": 1.0
  },
  "are using physical": {
    "vs": 1.0
  },
  "using physical vs": {
    "index": 1.0
  },
  "physical vs index": {
    "set": 1.0
  },
  "vs index set": {
    "sample": 1.0
  },
  "index set sample": {
    "1": 1.0
  },
  "set sample 1": {
    "physical": 1.0
  },
  "sample 1 physical": {
    "order": 1.0
  },
  "1 physical order": {
    "sets": 1.0
  },
  "physical order sets": {
    "to": 1.0
  },
  "order sets to": {
    "physical": 0.3333333333333333,
    "index": 0.6666666666666666
  },
  "sets to physical": {
    "rec": 1.0
  },
  "to physical rec": {
    "1": 1.0
  },
  "physical rec 1": {
    "index": 1.0
  },
  "rec 1 index": {
    "rec": 1.0
  },
  "1 index rec": {
    "3": 1.0
  },
  "index rec 3": {
    "set": 0.5,
    "get": 0.5
  },
  "rec 3 set": {
    "sam": 1.0
  },
  "3 set sam": {
    "fieldskey": 1.0
  },
  "sam fieldskey 1": {
    "index": 0.3333333333333333,
    "gets": 0.6666666666666666
  },
  "fieldskey 1 index": {
    "order": 1.0
  },
  "1 index order": {
    "sets": 1.0
  },
  "index order sets": {
    "to": 1.0
  },
  "sets to index": {
    "rec": 1.0
  },
  "to index rec": {
    "1": 0.5,
    "4": 0.5
  },
  "index rec 1": {
    "physical": 1.0
  },
  "rec 1 physical": {
    "rec": 1.0
  },
  "1 physical rec": {
    "7": 1.0
  },
  "physical rec 7": {
    "sam": 0.5,
    "the": 0.5
  },
  "rec 7 sam": {
    "field1": 1.0
  },
  "7 sam field1": {
    "10": 1.0
  },
  "field1 10 sam": {
    "field2": 1.0
  },
  "10 sam field2": {
    "abc": 1.0
  },
  "sam field2 abc": {
    "set": 0.5,
    "get": 0.5
  },
  "field2 abc set": {
    "sam": 1.0
  },
  "abc set sam": {
    "fieldskey": 1.0
  },
  "sam fieldskey 5": {
    "index": 1.0
  },
  "fieldskey 5 index": {
    "order": 1.0
  },
  "5 index order": {
    "sets": 1.0
  },
  "index rec 4": {
    "physical": 1.0
  },
  "rec 4 physical": {
    "rec": 1.0
  },
  "4 physical rec": {
    "5": 1.0
  },
  "physical rec 5": {
    "this": 1.0
  },
  "rec 5 this": {
    "last": 1.0
  },
  "5 this last": {
    "form": 1.0
  },
  "this last form": {
    "of": 1.0
  },
  "last form of": {
    "set": 1.0
  },
  "form of set": {
    "allows": 1.0
  },
  "of set allows": {
    "you": 1.0
  },
  "set allows you": {
    "to": 1.0
  },
  "you to set": {
    "to": 1.0
  },
  "to set to": {
    "a": 1.0
  },
  "set to a": {
    "specific": 1.0
  },
  "a specific record": {
    "within": 0.5,
    "or": 0.5
  },
  "specific record within": {
    "a": 0.5,
    "those": 0.5
  },
  "record within a": {
    "sequence": 1.0
  },
  "within a sequence": {
    "of": 1.0
  },
  "a sequence of": {
    "records": 1.0
  },
  "sequence of records": {
    "which": 1.0
  },
  "of records which": {
    "contain": 1.0
  },
  "records which contain": {
    "duplicate": 1.0
  },
  "which contain duplicate": {
    "index": 1.0
  },
  "contain duplicate index": {
    "field": 1.0
  },
  "duplicate index field": {
    "values": 1.0
  },
  "index field values": {
    "it": 1.0
  },
  "field values it": {
    "searches": 1.0
  },
  "values it searches": {
    "the": 1.0
  },
  "it searches the": {
    "duplicate": 1.0
  },
  "searches the duplicate": {
    "index": 1.0
  },
  "the duplicate index": {
    "entries": 1.0
  },
  "duplicate index entries": {
    "for": 1.0
  },
  "index entries for": {
    "an": 1.0
  },
  "entries for an": {
    "index": 1.0
  },
  "for an index": {
    "entry": 1.0
  },
  "an index entry": {
    "which": 1.0
  },
  "index entry which": {
    "points": 1.0
  },
  "entry which points": {
    "to": 1.0
  },
  "to the physical": {
    "record": 1.0
  },
  "record number specified": {
    "as": 1.0
  },
  "number specified as": {
    "the": 1.0
  },
  "specified as the": {
    "third": 1.0
  },
  "as the third": {
    "parameter": 1.0
  },
  "the third parameter": {
    "this": 1.0
  },
  "third parameter this": {
    "is": 1.0
  },
  "parameter this is": {
    "useful": 1.0
  },
  "useful in files": {
    "where": 1.0
  },
  "in files where": {
    "there": 1.0
  },
  "files where there": {
    "are": 1.0
  },
  "where there are": {
    "multiple": 0.5,
    "related": 0.5
  },
  "there are multiple": {
    "records": 1.0
  },
  "are multiple records": {
    "with": 1.0
  },
  "multiple records with": {
    "duplicate": 1.0
  },
  "records with duplicate": {
    "index": 1.0
  },
  "with duplicate index": {
    "values": 1.0
  },
  "duplicate index values": {
    "and": 1.0
  },
  "index values and": {
    "you": 1.0
  },
  "values and you": {
    "need": 1.0
  },
  "and you need": {
    "to": 1.0
  },
  "need to begin": {
    "processing": 1.0
  },
  "to begin processing": {
    "at": 1.0
  },
  "begin processing at": {
    "one": 1.0
  },
  "processing at one": {
    "specific": 1.0
  },
  "at one specific": {
    "record": 1.0
  },
  "record within those": {
    "duplicates": 1.0
  },
  "within those duplicates": {
    "random": 1.0
  },
  "those duplicates random": {
    "file": 1.0
  },
  "duplicates random file": {
    "access": 1.0
  },
  "access there is": {
    "only": 1.0
  },
  "there is only": {
    "one": 1.0
  },
  "is only one": {
    "clarion": 1.0
  },
  "only one clarion": {
    "statement": 1.0
  },
  "one clarion statement": {
    "which": 1.0
  },
  "clarion statement which": {
    "performs": 1.0
  },
  "statement which performs": {
    "random": 1.0
  },
  "which performs random": {
    "access": 1.0
  },
  "performs random access": {
    "to": 1.0
  },
  "access to individual": {
    "records": 1.0
  },
  "to individual records": {
    "within": 1.0
  },
  "individual records within": {
    "a": 1.0
  },
  "a file the": {
    "get": 0.5,
    "clarion": 0.5
  },
  "file the get": {
    "statement": 1.0
  },
  "the get statement": {
    "unlike": 0.3333333333333333,
    "they": 0.3333333333333333,
    "performs": 0.3333333333333333
  },
  "get statement unlike": {
    "set": 1.0
  },
  "statement unlike set": {
    "get": 1.0
  },
  "unlike set get": {
    "either": 1.0
  },
  "set get either": {
    "reads": 1.0
  },
  "get either reads": {
    "the": 1.0
  },
  "either reads the": {
    "record": 1.0
  },
  "reads the record": {
    "you": 1.0
  },
  "the record you": {
    "attempt": 1.0
  },
  "record you attempt": {
    "to": 1.0
  },
  "you attempt to": {
    "retrieve": 1.0
  },
  "attempt to retrieve": {
    "or": 1.0
  },
  "to retrieve or": {
    "returns": 1.0
  },
  "retrieve or returns": {
    "an": 1.0
  },
  "or returns an": {
    "error": 1.0
  },
  "returns an error": {
    "there": 0.5,
    "if": 0.5
  },
  "an error there": {
    "is": 1.0
  },
  "error there is": {
    "no": 1.0
  },
  "is no fuzzy": {
    "logic": 1.0
  },
  "no fuzzy logic": {
    "with": 1.0
  },
  "fuzzy logic with": {
    "get": 1.0
  },
  "logic with get": {
    "there": 1.0
  },
  "with get there": {
    "are": 1.0
  },
  "get there are": {
    "three": 1.0
  },
  "are three forms": {
    "of": 1.0
  },
  "three forms of": {
    "the": 1.0
  },
  "of the get": {
    "statement": 1.0
  },
  "get statement they": {
    "allow": 1.0
  },
  "statement they allow": {
    "you": 1.0
  },
  "they allow you": {
    "to": 1.0
  },
  "you to retrieve": {
    "a": 1.0
  },
  "to retrieve a": {
    "record": 1.0
  },
  "retrieve a record": {
    "based": 1.0
  },
  "a record based": {
    "on": 1.0
  },
  "record based on": {
    "an": 1.0
  },
  "based on an": {
    "index": 1.0
  },
  "on an index": {
    "value": 1.0
  },
  "index value physical": {
    "record": 1.0
  },
  "value physical record": {
    "number": 1.0
  },
  "record number or": {
    "index": 1.0
  },
  "number or index": {
    "record": 1.0
  },
  "or index record": {
    "number": 1.0
  },
  "record number sam": {
    "field1": 1.0
  },
  "number sam field1": {
    "15": 1.0
  },
  "sam field1 15": {
    "sam": 1.0
  },
  "field1 15 sam": {
    "field2": 1.0
  },
  "15 sam field2": {
    "abc": 1.0
  },
  "field2 abc get": {
    "sample": 1.0
  },
  "abc get sample": {
    "sam": 1.0
  },
  "get sample sam": {
    "fieldskey": 1.0
  },
  "sample sam fieldskey": {
    "gets": 1.0
  },
  "sam fieldskey gets": {
    "index": 1.0
  },
  "fieldskey gets index": {
    "rec": 1.0
  },
  "gets index rec": {
    "6": 0.5,
    "1": 0.5
  },
  "index rec 6": {
    "physical": 1.0
  },
  "rec 6 physical": {
    "rec": 1.0
  },
  "6 physical rec": {
    "2": 1.0
  },
  "physical rec 2": {
    "get": 1.0
  },
  "rec 2 get": {
    "sample": 1.0
  },
  "2 get sample": {
    "1": 1.0
  },
  "get sample 1": {
    "gets": 1.0
  },
  "sample 1 gets": {
    "physical": 1.0
  },
  "1 gets physical": {
    "rec": 1.0
  },
  "gets physical rec": {
    "1": 1.0
  },
  "rec 3 get": {
    "sam": 1.0
  },
  "3 get sam": {
    "fieldskey": 1.0
  },
  "get sam fieldskey": {
    "1": 1.0
  },
  "fieldskey 1 gets": {
    "index": 0.5,
    "the": 0.5
  },
  "1 gets index": {
    "rec": 1.0
  },
  "rec 7 the": {
    "first": 1.0
  },
  "7 the first": {
    "get": 1.0
  },
  "the first get": {
    "example": 1.0
  },
  "first get example": {
    "retrieves": 1.0
  },
  "get example retrieves": {
    "the": 1.0
  },
  "example retrieves the": {
    "first": 1.0
  },
  "retrieves the first": {
    "record": 1.0
  },
  "the first record": {
    "in": 0.8333333333333334,
    "every": 0.16666666666666666
  },
  "first record in": {
    "the": 0.6,
    "index": 0.4
  },
  "the index order": {
    "that": 1.0
  },
  "index order that": {
    "contains": 1.0
  },
  "order that contains": {
    "the": 1.0
  },
  "contains the values": {
    "in": 1.0
  },
  "the index component": {
    "fields": 1.0
  },
  "index component fields": {
    "at": 1.0
  },
  "component fields at": {
    "the": 1.0
  },
  "fields at the": {
    "time": 1.0
  },
  "time the get": {
    "is": 1.0
  },
  "the get is": {
    "issued": 1.0
  },
  "get is issued": {
    "the": 1.0
  },
  "is issued the": {
    "second": 1.0
  },
  "issued the second": {
    "example": 1.0
  },
  "the second example": {
    "retrieves": 1.0
  },
  "second example retrieves": {
    "the": 1.0
  },
  "file in physical": {
    "record": 1.0
  },
  "in physical record": {
    "num": 1.0
  },
  "physical record num": {
    "ber": 1.0
  },
  "record num ber": {
    "order": 1.0
  },
  "num ber order": {
    "the": 1.0
  },
  "ber order the": {
    "third": 1.0
  },
  "order the third": {
    "retrieves": 1.0
  },
  "the third retrieves": {
    "the": 1.0
  },
  "third retrieves the": {
    "first": 1.0
  },
  "file in index": {
    "record": 0.5,
    "order": 0.5
  },
  "in index record": {
    "number": 1.0
  },
  "number order get": {
    "always": 1.0
  },
  "order get always": {
    "looks": 1.0
  },
  "get always looks": {
    "for": 1.0
  },
  "always looks for": {
    "an": 1.0
  },
  "looks for an": {
    "exact": 1.0
  },
  "for an exact": {
    "match": 1.0
  },
  "value and returns": {
    "an": 1.0
  },
  "and returns an": {
    "error": 1.0
  },
  "an error if": {
    "it": 1.0
  },
  "error if it": {
    "does": 1.0
  },
  "if it does": {
    "not": 1.0
  },
  "does not find": {
    "one": 1.0
  },
  "not find one": {
    "therefore": 1.0
  },
  "find one therefore": {
    "all": 1.0
  },
  "one therefore all": {
    "component": 1.0
  },
  "therefore all component": {
    "fields": 1.0
  },
  "all component fields": {
    "of": 1.0
  },
  "of a multiple": {
    "component": 1.0
  },
  "component index mus": {
    "t": 1.0
  },
  "index mus t": {
    "be": 1.0
  },
  "mus t be": {
    "initialized": 1.0
  },
  "t be initialized": {
    "before": 1.0
  },
  "be initialized before": {
    "issuing": 1.0
  },
  "initialized before issuing": {
    "a": 1.0
  },
  "before issuing a": {
    "get": 1.0
  },
  "issuing a get": {
    "get": 1.0
  },
  "a get get": {
    "is": 1.0
  },
  "get get is": {
    "completely": 1.0
  },
  "get is completely": {
    "independent": 1.0
  },
  "is completely independent": {
    "of": 1.0
  },
  "completely independent of": {
    "set": 0.5,
    "the": 0.5
  },
  "independent of set": {
    "next": 1.0
  },
  "of set next": {
    "or": 1.0
  },
  "set next or": {
    "set": 1.0
  },
  "next or set": {
    "previous": 1.0
  },
  "or set previous": {
    "sequential": 1.0
  },
  "set previous sequential": {
    "processing": 0.5,
    "record": 0.5
  },
  "previous sequential processing": {
    "this": 1.0
  },
  "sequential processing this": {
    "means": 1.0
  },
  "processing this means": {
    "that": 1.0
  },
  "that a get": {
    "into": 1.0
  },
  "a get into": {
    "a": 1.0
  },
  "get into a": {
    "file": 1.0
  },
  "file which is": {
    "being": 1.0
  },
  "which is being": {
    "sequentially": 1.0
  },
  "is being sequentially": {
    "processed": 1.0
  },
  "being sequentially processed": {
    "does": 1.0
  },
  "sequentially processed does": {
    "not": 1.0
  },
  "processed does not": {
    "change": 1.0
  },
  "does not change": {
    "the": 1.0
  },
  "not change the": {
    "record": 1.0
  },
  "change the record": {
    "pointer": 1.0
  },
  "record pointer for": {
    "sequential": 1.0
  },
  "pointer for sequential": {
    "processing": 1.0
  },
  "for sequential processing": {
    "set": 1.0
  },
  "sequential processing set": {
    "sam": 1.0
  },
  "processing set sam": {
    "fieldskey": 1.0
  },
  "sam fieldskey set": {
    "to": 1.0
  },
  "fieldskey set to": {
    "top": 1.0
  },
  "of file loop": {
    "process": 1.0
  },
  "file loop process": {
    "each": 1.0
  },
  "record in index": {
    "order": 1.0
  },
  "in index order": {
    "next": 0.25,
    "random": 0.25,
    "after": 0.25,
    "is": 0.25
  },
  "index order next": {
    "sample": 1.0
  },
  "order next sample": {
    "gets": 1.0
  },
  "next sample gets": {
    "each": 1.0
  },
  "sample gets each": {
    "sequential": 1.0
  },
  "gets each sequential": {
    "record": 1.0
  },
  "each sequential record": {
    "if": 1.0
  },
  "sequential record if": {
    "errorcode": 1.0
  },
  "of file sequential": {
    "record": 1.0
  },
  "file sequential record": {
    "processing": 1.0
  },
  "sequential record processing": {
    "statements": 0.5,
    "clarion": 0.5
  },
  "processing statements get": {
    "sam": 1.0
  },
  "statements get sam": {
    "fieldskey": 1.0
  },
  "1 gets the": {
    "first": 1.0
  },
  "gets the first": {
    "record": 1.0
  },
  "index order random": {
    "access": 1.0
  },
  "random access record": {
    "processing": 1.0
  },
  "access record processing": {
    "statements": 1.0
  },
  "statements end this": {
    "example": 1.0
  },
  "end this example": {
    "code": 1.0
  },
  "example code processes": {
    "through": 1.0
  },
  "code processes through": {
    "the": 1.0
  },
  "processes through the": {
    "entire": 1.0
  },
  "through the entire": {
    "file": 1.0
  },
  "the entire file": {
    "in": 1.0
  },
  "entire file in": {
    "index": 1.0
  },
  "index order after": {
    "each": 1.0
  },
  "order after each": {
    "record": 1.0
  },
  "after each record": {
    "i": 1.0
  },
  "each record i": {
    "s": 1.0
  },
  "record i s": {
    "processed": 1.0
  },
  "i s processed": {
    "the": 1.0
  },
  "s processed the": {
    "first": 1.0
  },
  "processed the first": {
    "record": 1.0
  },
  "index order is": {
    "retrieved": 1.0
  },
  "order is retrieved": {
    "and": 1.0
  },
  "is retrieved and": {
    "processed": 0.5,
    "release": 0.5
  },
  "retrieved and processed": {
    "this": 1.0
  },
  "and processed this": {
    "does": 1.0
  },
  "processed this does": {
    "not": 1.0
  },
  "this does not": {
    "affect": 0.5,
    "mean": 0.5
  },
  "does not affect": {
    "the": 1.0
  },
  "not affect the": {
    "sequence": 1.0
  },
  "affect the sequence": {
    "therefore": 1.0
  },
  "the sequence therefore": {
    "next": 1.0
  },
  "sequence therefore next": {
    "will": 1.0
  },
  "therefore next will": {
    "progress": 1.0
  },
  "next will progress": {
    "through": 1.0
  },
  "will progress through": {
    "the": 1.0
  },
  "progress through the": {
    "file": 1.0
  },
  "through the file": {
    "despite": 1.0
  },
  "the file despite": {
    "the": 1.0
  },
  "file despite the": {
    "get": 1.0
  },
  "despite the get": {
    "of": 1.0
  },
  "the get of": {
    "the": 1.0
  },
  "get of the": {
    "first": 1.0
  },
  "of the first": {
    "record": 1.0
  },
  "first record every": {
    "time": 1.0
  },
  "record every time": {
    "through": 1.0
  },
  "every time through": {
    "the": 1.0
  },
  "the loop 53": {
    "data": 1.0
  },
  "loop 53 data": {
    "file": 1.0
  },
  "53 data file": {
    "processing": 1.0
  },
  "file processing summary": {
    "sequential": 1.0
  },
  "processing summary sequential": {
    "access": 1.0
  },
  "summary sequential access": {
    "and": 1.0
  },
  "access and rando": {
    "m": 1.0
  },
  "and rando m": {
    "access": 1.0
  },
  "rando m access": {
    "are": 1.0
  },
  "m access are": {
    "the": 1.0
  },
  "access are the": {
    "two": 1.0
  },
  "are the two": {
    "methods": 1.0
  },
  "the two methods": {
    "used": 1.0
  },
  "two methods used": {
    "to": 1.0
  },
  "methods used to": {
    "retrieve": 1.0
  },
  "used to retrieve": {
    "records": 1.0
  },
  "to retrieve records": {
    "from": 1.0
  },
  "retrieve records from": {
    "a": 1.0
  },
  "records from a": {
    "file": 1.0
  },
  "from a file": {
    "the": 0.5,
    "or": 0.5
  },
  "file the clarion": {
    "key": 0.5,
    "language": 0.5
  },
  "index declarations define": {
    "alternate": 1.0
  },
  "declarations define alternate": {
    "sort": 1.0
  },
  "define alternate sort": {
    "orders": 1.0
  },
  "sort orders of": {
    "the": 1.0
  },
  "orders of the": {
    "file": 1.0
  },
  "file in which": {
    "they": 1.0
  },
  "are declared a": {
    "key": 1.0
  },
  "declared a key": {
    "is": 1.0
  },
  "dynamically maintained and": {
    "is": 1.0
  },
  "maintained and is": {
    "always": 1.0
  },
  "and is always": {
    "ready": 1.0
  },
  "is always ready": {
    "for": 1.0
  },
  "always ready for": {
    "use": 1.0
  },
  "ready for use": {
    "an": 1.0
  },
  "for use an": {
    "index": 1.0
  },
  "use an index": {
    "is": 1.0
  },
  "is not main": {
    "tained": 1.0
  },
  "not main tained": {
    "and": 1.0
  },
  "main tained and": {
    "must": 1.0
  },
  "tained and must": {
    "be": 1.0
  },
  "must be built": {
    "before": 1.0
  },
  "be built before": {
    "use": 1.0
  },
  "built before use": {
    "a": 1.0
  },
  "before use a": {
    "dynamic": 1.0
  },
  "use a dynamic": {
    "index": 1.0
  },
  "dynamic index allows": {
    "sort": 1.0
  },
  "index allows sort": {
    "orders": 1.0
  },
  "allows sort orders": {
    "to": 1.0
  },
  "sort orders to": {
    "be": 1.0
  },
  "orders to be": {
    "defined": 1.0
  },
  "to be defined": {
    "at": 1.0
  },
  "be defined at": {
    "run": 1.0
  },
  "defined at run": {
    "time": 1.0
  },
  "run time the": {
    "set": 1.0
  },
  "time the set": {
    "statement": 1.0
  },
  "set statement initializes": {
    "the": 1.0
  },
  "statement initializes the": {
    "order": 1.0
  },
  "initializes the order": {
    "and": 1.0
  },
  "the order and": {
    "starting": 1.0
  },
  "order and starting": {
    "point": 1.0
  },
  "and starting point": {
    "of": 1.0
  },
  "point of sequential": {
    "processing": 1.0
  },
  "of sequential processing": {
    "a": 1.0
  },
  "sequential processing a": {
    "set": 1.0
  },
  "a set is": {
    "required": 1.0
  },
  "set is required": {
    "before": 1.0
  },
  "is required before": {
    "the": 1.0
  },
  "required before the": {
    "first": 1.0
  },
  "before the first": {
    "next": 1.0
  },
  "the first next": {
    "or": 1.0
  },
  "first next or": {
    "previous": 1.0
  },
  "or previous set": {
    "employs": 1.0
  },
  "previous set employs": {
    "fuzz": 1.0
  },
  "set employs fuzz": {
    "y": 1.0
  },
  "employs fuzz y": {
    "logic": 1.0
  },
  "fuzz y logic": {
    "to": 1.0
  },
  "y logic to": {
    "determine": 1.0
  },
  "logic to determine": {
    "the": 1.0
  },
  "to determine the": {
    "starting": 0.5,
    "exact": 0.5
  },
  "determine the starting": {
    "point": 1.0
  },
  "starting point it": {
    "either": 1.0
  },
  "point it either": {
    "points": 1.0
  },
  "it either points": {
    "to": 1.0
  },
  "either points to": {
    "a": 1.0
  },
  "specific record or": {
    "between": 1.0
  },
  "record or between": {
    "records": 1.0
  },
  "or between records": {
    "at": 1.0
  },
  "between records at": {
    "the": 1.0
  },
  "records at the": {
    "position": 1.0
  },
  "at the position": {
    "where": 1.0
  },
  "the position where": {
    "it": 1.0
  },
  "position where it": {
    "determined": 1.0
  },
  "where it determined": {
    "no": 1.0
  },
  "it determined no": {
    "record": 1.0
  },
  "determined no record": {
    "fit": 1.0
  },
  "no record fit": {
    "the": 1.0
  },
  "record fit the": {
    "starting": 1.0
  },
  "fit the starting": {
    "point": 1.0
  },
  "starting point parameters": {
    "it": 1.0
  },
  "point parameters it": {
    "was": 1.0
  },
  "parameters it was": {
    "given": 1.0
  },
  "it was given": {
    "physical": 1.0
  },
  "was given physical": {
    "and": 1.0
  },
  "given physical and": {
    "index": 1.0
  },
  "physical and index": {
    "record": 1.0
  },
  "numbers are very": {
    "different": 1.0
  },
  "are very different": {
    "and": 1.0
  },
  "very different and": {
    "mus": 1.0
  },
  "different and mus": {
    "t": 1.0
  },
  "and mus t": {
    "not": 1.0
  },
  "mus t not": {
    "be": 1.0
  },
  "t not be": {
    "confused": 1.0
  },
  "not be confused": {
    "with": 1.0
  },
  "be confused with": {
    "each": 1.0
  },
  "confused with each": {
    "other": 1.0
  },
  "with each other": {
    "the": 1.0
  },
  "each other the": {
    "get": 1.0
  },
  "other the get": {
    "statement": 1.0
  },
  "get statement performs": {
    "random": 1.0
  },
  "statement performs random": {
    "record": 1.0
  },
  "performs random record": {
    "access": 1.0
  },
  "random record access": {
    "within": 1.0
  },
  "record access within": {
    "a": 1.0
  },
  "access within a": {
    "file": 1.0
  },
  "a file get": {
    "is": 1.0
  },
  "file get is": {
    "completely": 1.0
  },
  "independent of the": {
    "set": 1.0
  },
  "the set next": {
    "and": 1.0
  },
  "next and set": {
    "previous": 1.0
  },
  "and set previous": {
    "sequential": 1.0
  },
  "previous sequential record": {
    "processing": 1.0
  },
  "record processing clarion": {
    "language": 1.0
  },
  "processing clarion language": {
    "programming": 1.0
  },
  "programming guide 54": {
    "55": 1.0
  },
  "guide 54 55": {
    "developing": 1.0
  },
  "54 55 developing": {
    "client": 1.0
  },
  "55 developing client": {
    "server": 1.0
  },
  "server applications 6": {
    "multi": 1.0
  },
  "applications 6 multi": {
    "user": 1.0
  },
  "user considerations multi": {
    "user": 1.0
  },
  "considerations multi user": {
    "considerations": 1.0
  },
  "user considerations the": {
    "world": 1.0
  },
  "considerations the world": {
    "of": 1.0
  },
  "the world of": {
    "database": 1.0
  },
  "world of database": {
    "applications": 1.0
  },
  "of database applications": {
    "programming": 1.0
  },
  "database applications programming": {
    "is": 1.0
  },
  "applications programming is": {
    "rapidly": 1.0
  },
  "programming is rapidly": {
    "heading": 1.0
  },
  "is rapidly heading": {
    "towards": 1.0
  },
  "rapidly heading towards": {
    "networking": 1.0
  },
  "heading towards networking": {
    "stand": 1.0
  },
  "towards networking stand": {
    "alone": 1.0
  },
  "networking stand alone": {
    "applications": 1.0
  },
  "stand alone applications": {
    "are": 1.0
  },
  "alone applications are": {
    "expanding": 1.0
  },
  "applications are expanding": {
    "into": 1.0
  },
  "are expanding into": {
    "multi": 1.0
  },
  "expanding into multi": {
    "user": 1.0
  },
  "into multi user": {
    "environments": 1.0
  },
  "multi user environments": {
    "as": 0.5,
    "opening": 0.5
  },
  "user environments as": {
    "more": 1.0
  },
  "environments as more": {
    "companie": 1.0
  },
  "as more companie": {
    "s": 1.0
  },
  "more companie s": {
    "connect": 1.0
  },
  "companie s connect": {
    "their": 1.0
  },
  "s connect their": {
    "pcs": 1.0
  },
  "connect their pcs": {
    "to": 1.0
  },
  "their pcs to": {
    "local": 1.0
  },
  "pcs to local": {
    "area": 1.0
  },
  "to local area": {
    "networks": 1.0
  },
  "local area networks": {
    "lans": 1.0
  },
  "area networks lans": {
    "mainframe": 1.0
  },
  "networks lans mainframe": {
    "applications": 1.0
  },
  "lans mainframe applications": {
    "in": 1.0
  },
  "mainframe applications in": {
    "large": 1.0
  },
  "applications in large": {
    "companies": 1.0
  },
  "in large companies": {
    "are": 1.0
  },
  "large companies are": {
    "being": 1.0
  },
  "companies are being": {
    "right": 1.0
  },
  "are being right": {
    "sized": 1.0
  },
  "being right sized": {
    "and": 1.0
  },
  "right sized and": {
    "re": 1.0
  },
  "sized and re": {
    "written": 1.0
  },
  "and re written": {
    "for": 1.0
  },
  "written for lan": {
    "operation": 1.0
  },
  "for lan operation": {
    "with": 1.0
  },
  "lan operation with": {
    "the": 1.0
  },
  "operation with the": {
    "emergence": 1.0
  },
  "with the emergence": {
    "of": 1.0
  },
  "the emergence of": {
    "multi": 1.0
  },
  "emergence of multi": {
    "threading": 1.0
  },
  "of multi threading": {
    "multi": 1.0
  },
  "multi threading multi": {
    "tasking": 1.0
  },
  "threading multi tasking": {
    "operating": 1.0
  },
  "multi tasking operating": {
    "systems": 1.0
  },
  "tasking operating systems": {
    "for": 1.0
  },
  "operating systems for": {
    "pcs": 1.0
  },
  "systems for pcs": {
    "even": 1.0
  },
  "for pcs even": {
    "standalone": 1.0
  },
  "pcs even standalone": {
    "computers": 1.0
  },
  "even standalone computers": {
    "need": 1.0
  },
  "standalone computers need": {
    "applications": 1.0
  },
  "computers need applications": {
    "that": 1.0
  },
  "need applications that": {
    "are": 1.0
  },
  "applications that are": {
    "written": 1.0
  },
  "that are written": {
    "with": 1.0
  },
  "are written with": {
    "multi": 1.0
  },
  "written with multi": {
    "user": 1.0
  },
  "with multi user": {
    "shared": 1.0
  },
  "multi user shared": {
    "access": 1.0
  },
  "user shared access": {
    "considerations": 1.0
  },
  "shared access considerations": {
    "in": 1.0
  },
  "access considerations in": {
    "mind": 1.0
  },
  "considerations in mind": {
    "this": 1.0
  },
  "in mind this": {
    "essay": 1.0
  },
  "mind this essay": {
    "is": 1.0
  },
  "language tools provided": {
    "to": 1.0
  },
  "tools provided to": {
    "write": 1.0
  },
  "provided to write": {
    "applications": 1.0
  },
  "to write applications": {
    "specifically": 0.5,
    "that": 0.5
  },
  "write applications specifically": {
    "designed": 1.0
  },
  "applications specifically designed": {
    "for": 1.0
  },
  "specifically designed for": {
    "use": 1.0
  },
  "designed for use": {
    "in": 1.0
  },
  "use in multi": {
    "user": 1.0
  },
  "in multi user": {
    "environments": 0.5,
    "situations": 0.5
  },
  "user environments opening": {
    "files": 1.0
  },
  "environments opening files": {
    "before": 1.0
  },
  "opening files before": {
    "any": 1.0
  },
  "files before any": {
    "data": 1.0
  },
  "before any data": {
    "file": 1.0
  },
  "any data file": {
    "can": 1.0
  },
  "data file can": {
    "be": 1.0
  },
  "file can be": {
    "processed": 1.0
  },
  "can be processed": {
    "it": 1.0
  },
  "be processed it": {
    "must": 1.0
  },
  "processed it must": {
    "first": 1.0
  },
  "it must first": {
    "be": 1.0
  },
  "must first be": {
    "opened": 1.0
  },
  "first be opened": {
    "the": 1.0
  },
  "be opened the": {
    "open": 1.0
  },
  "opened the open": {
    "and": 1.0
  },
  "the open and": {
    "share": 1.0
  },
  "open and share": {
    "statements": 0.5,
    "are": 0.5
  },
  "and share statements": {
    "provide": 1.0
  },
  "share statements provide": {
    "this": 1.0
  },
  "statements provide this": {
    "function": 1.0
  },
  "provide this function": {
    "open": 1.0
  },
  "this function open": {
    "and": 1.0
  },
  "function open and": {
    "share": 1.0
  },
  "and share are": {
    "functionally": 1.0
  },
  "share are functionally": {
    "equivalent": 1.0
  },
  "functionally equivalent the": {
    "only": 1.0
  },
  "equivalent the only": {
    "difference": 1.0
  },
  "the only difference": {
    "between": 1.0
  },
  "only difference between": {
    "the": 1.0
  },
  "the two is": {
    "the": 1.0
  },
  "two is the": {
    "default": 1.0
  },
  "is the default": {
    "value": 1.0
  },
  "the default value": {
    "of": 1.0
  },
  "default value of": {
    "the": 1.0
  },
  "value of the": {
    "second": 1.0
  },
  "the second access": {
    "mode": 1.0
  },
  "second access mode": {
    "parameter": 1.0
  },
  "access mode parameter": {
    "of": 1.0
  },
  "mode parameter of": {
    "each": 1.0
  },
  "parameter of each": {
    "the": 1.0
  },
  "of each the": {
    "access": 1.0
  },
  "each the access": {
    "mode": 1.0
  },
  "the access mode": {
    "specifies": 0.3333333333333333,
    "values": 0.3333333333333333,
    "determines": 0.3333333333333333
  },
  "access mode specifies": {
    "the": 1.0
  },
  "mode specifies the": {
    "type": 1.0
  },
  "specifies the type": {
    "of": 1.0
  },
  "type of access": {
    "the": 0.3333333333333333,
    "allowed": 0.3333333333333333,
    "dos": 0.3333333333333333
  },
  "of access the": {
    "user": 1.0
  },
  "access the user": {
    "opening": 1.0
  },
  "the user opening": {
    "the": 1.0
  },
  "user opening the": {
    "file": 1.0
  },
  "opening the file": {
    "receives": 0.3333333333333333,
    "the": 0.3333333333333333,
    "and": 0.3333333333333333
  },
  "the file receives": {
    "and": 1.0
  },
  "file receives and": {
    "the": 1.0
  },
  "receives and the": {
    "type": 1.0
  },
  "and the type": {
    "of": 1.0
  },
  "of access allowed": {
    "to": 1.0
  },
  "access allowed to": {
    "other": 1.0
  },
  "allowed to other": {
    "users": 1.0
  },
  "to other users": {
    "of": 1.0
  },
  "other users of": {
    "the": 1.0
  },
  "users of the": {
    "file": 1.0
  },
  "file these two": {
    "values": 1.0
  },
  "these two values": {
    "are": 1.0
  },
  "two values are": {
    "added": 0.5,
    "not": 0.5
  },
  "values are added": {
    "together": 1.0
  },
  "are added together": {
    "to": 1.0
  },
  "added together to": {
    "create": 1.0
  },
  "together to create": {
    "the": 1.0
  },
  "to create the": {
    "dos": 1.0
  },
  "create the dos": {
    "access": 1.0
  },
  "the dos access": {
    "code": 1.0
  },
  "dos access code": {
    "for": 1.0
  },
  "access code for": {
    "the": 1.0
  },
  "code for the": {
    "file": 1.0
  },
  "file the access": {
    "mode": 1.0
  },
  "access mode values": {
    "are": 1.0
  },
  "mode values are": {
    "access": 1.0
  },
  "values are access": {
    "dec": 1.0
  },
  "are access dec": {
    "hex": 1.0
  },
  "access dec hex": {
    "user": 1.0
  },
  "dec hex user": {
    "s": 1.0
  },
  "hex user s": {
    "access": 1.0
  },
  "user s access": {
    "read": 1.0
  },
  "s access read": {
    "only": 1.0
  },
  "access read only": {
    "0": 1.0
  },
  "read only 0": {
    "0h": 1.0
  },
  "only 0 0h": {
    "write": 1.0
  },
  "0 0h write": {
    "only": 1.0
  },
  "0h write only": {
    "1": 1.0
  },
  "write only 1": {
    "1h": 1.0
  },
  "only 1 1h": {
    "read": 1.0
  },
  "1 1h read": {
    "write": 1.0
  },
  "1h read write": {
    "2": 1.0
  },
  "read write 2": {
    "2h": 1.0
  },
  "write 2 2h": {
    "other": 1.0
  },
  "2 2h other": {
    "s": 1.0
  },
  "2h other s": {
    "access": 1.0
  },
  "other s access": {
    "deny": 1.0
  },
  "s access deny": {
    "all": 1.0
  },
  "access deny all": {
    "16": 1.0
  },
  "deny all 16": {
    "10h": 1.0
  },
  "all 16 10h": {
    "deny": 1.0
  },
  "16 10h deny": {
    "write": 1.0
  },
  "10h deny write": {
    "32": 1.0
  },
  "deny write 32": {
    "20h": 1.0
  },
  "write 32 20h": {
    "deny": 1.0
  },
  "32 20h deny": {
    "read": 1.0
  },
  "20h deny read": {
    "48": 1.0
  },
  "deny read 48": {
    "30h": 1.0
  },
  "read 48 30h": {
    "deny": 1.0
  },
  "48 30h deny": {
    "none": 1.0
  },
  "30h deny none": {
    "64": 1.0
  },
  "deny none 64": {
    "40h": 1.0
  },
  "none 64 40h": {
    "the": 1.0
  },
  "64 40h the": {
    "open": 1.0
  },
  "40h the open": {
    "statement": 1.0
  },
  "the open statement": {
    "s": 1.0
  },
  "open statement s": {
    "default": 1.0
  },
  "statement s default": {
    "access": 1.0
  },
  "s default access": {
    "mode": 1.0
  },
  "default access mode": {
    "is": 1.0
  },
  "access mode is": {
    "read": 1.0
  },
  "mode is read": {
    "write": 1.0
  },
  "is read write": {
    "deny": 1.0
  },
  "write deny write": {
    "22h": 0.25,
    "open": 0.25,
    "share": 0.5
  },
  "deny write 22h": {
    "which": 1.0
  },
  "write 22h which": {
    "only": 1.0
  },
  "22h which only": {
    "allows": 1.0
  },
  "which only allows": {
    "exclusive": 1.0
  },
  "only allows exclusive": {
    "single": 1.0
  },
  "allows exclusive single": {
    "user": 1.0
  },
  "exclusive single user": {
    "disk": 1.0
  },
  "single user disk": {
    "write": 1.0
  },
  "user disk write": {
    "access": 1.0
  },
  "disk write access": {
    "to": 1.0
  },
  "write access to": {
    "the": 1.0
  },
  "to the user": {
    "opening": 1.0
  },
  "file the share": {
    "statement": 1.0
  },
  "the share statement": {
    "s": 1.0
  },
  "share statement s": {
    "default": 1.0
  },
  "deny none 42h": {
    "allowing": 0.5,
    "which": 0.5
  },
  "none 42h allowing": {
    "non": 1.0
  },
  "42h allowing non": {
    "exclusive": 1.0
  },
  "allowing non exclusive": {
    "multi": 1.0
  },
  "non exclusive multi": {
    "user": 1.0
  },
  "exclusive multi user": {
    "access": 1.0
  },
  "multi user access": {
    "to": 1.0
  },
  "user access to": {
    "anybody": 0.5,
    "files": 0.5
  },
  "access to anybody": {
    "who": 1.0
  },
  "to anybody who": {
    "opens": 1.0
  },
  "anybody who opens": {
    "the": 1.0
  },
  "who opens the": {
    "file": 1.0
  },
  "opens the file": {
    "either": 0.5,
    "in": 0.5
  },
  "the file either": {
    "open": 1.0
  },
  "file either open": {
    "or": 1.0
  },
  "either open or": {
    "share": 1.0
  },
  "open or share": {
    "may": 1.0
  },
  "or share may": {
    "open": 1.0
  },
  "share may open": {
    "the": 1.0
  },
  "may open the": {
    "file": 1.0
  },
  "open the file": {
    "in": 1.0
  },
  "file in any": {
    "of": 1.0
  },
  "any of the": {
    "possib": 1.0
  },
  "of the possib": {
    "le": 1.0
  },
  "the possib le": {
    "access": 1.0
  },
  "possib le access": {
    "modes": 1.0
  },
  "le access modes": {
    "open": 1.0
  },
  "access modes open": {
    "file": 1.0
  },
  "modes open file": {
    "open": 1.0
  },
  "open file open": {
    "read": 1.0
  },
  "file open read": {
    "write": 1.0
  },
  "deny write open": {
    "file": 1.0
  },
  "write open file": {
    "22h": 1.0
  },
  "open file 22h": {
    "open": 1.0
  },
  "file 22h open": {
    "read": 1.0
  },
  "22h open read": {
    "write": 1.0
  },
  "deny write share": {
    "file": 1.0
  },
  "write share file": {
    "22h": 0.5,
    "open": 0.5
  },
  "share file 22h": {
    "open": 1.0
  },
  "share file open": {
    "read": 1.0
  },
  "deny none share": {
    "file": 1.0
  },
  "none share file": {
    "42h": 0.5,
    "40h": 0.5
  },
  "share file 42h": {
    "op": 1.0
  },
  "file 42h op": {
    "en": 1.0
  },
  "42h op en": {
    "read": 1.0
  },
  "op en read": {
    "write": 1.0
  },
  "en read write": {
    "deny": 1.0
  },
  "deny none open": {
    "file": 1.0
  },
  "none open file": {
    "42h": 0.5,
    "40h": 0.5
  },
  "open file 42h": {
    "open": 1.0
  },
  "file 42h open": {
    "read": 1.0
  },
  "open file 40h": {
    "open": 1.0
  },
  "file 40h open": {
    "read": 1.0
  },
  "40h open read": {
    "only": 1.0
  },
  "open read only": {
    "deny": 1.0
  },
  "read only deny": {
    "none": 1.0
  },
  "only deny none": {
    "share": 0.3333333333333333,
    "these": 0.3333333333333333,
    "40h": 0.3333333333333333
  },
  "share file 40h": {
    "open": 1.0
  },
  "deny none these": {
    "examples": 1.0
  },
  "none these examples": {
    "demonstrate": 1.0
  },
  "these examples demonstrate": {
    "the": 1.0
  },
  "examples demonstrate the": {
    "three": 1.0
  },
  "demonstrate the three": {
    "most": 1.0
  },
  "three most commonly": {
    "used": 1.0
  },
  "most commonly used": {
    "access": 0.3333333333333333,
    "in": 0.3333333333333333,
    "to": 0.3333333333333333
  },
  "commonly used access": {
    "modes": 1.0
  },
  "used access modes": {
    "for": 1.0
  },
  "access modes for": {
    "mult": 1.0
  },
  "modes for mult": {
    "i": 1.0
  },
  "for mult i": {
    "user": 1.0
  },
  "mult i user": {
    "applications": 1.0
  },
  "i user applications": {
    "the": 1.0
  },
  "user applications the": {
    "most": 1.0
  },
  "applications the most": {
    "common": 1.0
  },
  "most common access": {
    "mode": 1.0
  },
  "common access mode": {
    "is": 1.0
  },
  "none 42h which": {
    "permits": 1.0
  },
  "42h which permits": {
    "all": 1.0
  },
  "which permits all": {
    "users": 1.0
  },
  "permits all users": {
    "complete": 1.0
  },
  "all users complete": {
    "access": 1.0
  },
  "users complete access": {
    "to": 1.0
  },
  "complete access to": {
    "the": 1.0
  },
  "to the file": {
    "read": 0.2,
    "the": 0.2,
    "system": 0.6
  },
  "the file read": {
    "only": 1.0
  },
  "file read only": {
    "deny": 1.0
  },
  "deny none 40h": {
    "is": 1.0
  },
  "none 40h is": {
    "usually": 1.0
  },
  "40h is usually": {
    "used": 1.0
  },
  "is usually used": {
    "in": 1.0
  },
  "usually used in": {
    "multi": 1.0
  },
  "used in multi": {
    "user": 1.0
  },
  "multi user situations": {
    "where": 1.0
  },
  "user situations where": {
    "the": 1.0
  },
  "situations where the": {
    "user": 1.0
  },
  "where the user": {
    "will": 1.0
  },
  "the user will": {
    "not": 1.0
  },
  "user will not": {
    "update": 1.0
  },
  "will not update": {
    "the": 1.0
  },
  "not update the": {
    "file": 1.0
  },
  "update the file": {
    "a": 1.0
  },
  "the file a": {
    "lookup": 1.0
  },
  "file a lookup": {
    "only": 1.0
  },
  "a lookup only": {
    "f": 1.0
  },
  "lookup only f": {
    "ile": 1.0
  },
  "only f ile": {
    "but": 1.0
  },
  "f ile but": {
    "there": 1.0
  },
  "ile but there": {
    "may": 1.0
  },
  "but there may": {
    "be": 1.0
  },
  "there may be": {
    "some": 1.0
  },
  "may be some": {
    "other": 1.0
  },
  "be some other": {
    "user": 1.0
  },
  "some other user": {
    "who": 1.0
  },
  "other user who": {
    "may": 1.0
  },
  "user who may": {
    "need": 1.0
  },
  "who may need": {
    "to": 1.0
  },
  "need to write": {
    "to": 1.0
  },
  "to write to": {
    "that": 0.5,
    "it": 0.5
  },
  "write to that": {
    "file": 0.5,
    "held": 0.5
  },
  "to that file": {
    "clarion": 1.0
  },
  "that file clarion": {
    "language": 1.0
  },
  "programming guide 56": {
    "concurrency": 1.0
  },
  "guide 56 concurrency": {
    "checking": 1.0
  },
  "56 concurrency checking": {
    "the": 1.0
  },
  "concurrency checking the": {
    "biggest": 1.0
  },
  "checking the biggest": {
    "consideration": 1.0
  },
  "the biggest consideration": {
    "to": 1.0
  },
  "biggest consideration to": {
    "keep": 1.0
  },
  "consideration to keep": {
    "in": 1.0
  },
  "to keep in": {
    "mind": 1.0
  },
  "keep in mind": {
    "about": 1.0
  },
  "in mind about": {
    "multi": 1.0
  },
  "mind about multi": {
    "user": 1.0
  },
  "about multi user": {
    "access": 1.0
  },
  "access to files": {
    "is": 1.0
  },
  "to files is": {
    "the": 1.0
  },
  "files is the": {
    "possibility": 1.0
  },
  "is the possibility": {
    "that": 0.3333333333333333,
    "a": 0.3333333333333333,
    "of": 0.3333333333333333
  },
  "the possibility that": {
    "several": 1.0
  },
  "possibility that several": {
    "users": 1.0
  },
  "that several users": {
    "could": 1.0
  },
  "several users could": {
    "be": 1.0
  },
  "users could be": {
    "updating": 1.0
  },
  "could be updating": {
    "the": 1.0
  },
  "be updating the": {
    "same": 1.0
  },
  "updating the same": {
    "record": 1.0
  },
  "same record at": {
    "the": 1.0
  },
  "record at the": {
    "same": 1.0
  },
  "same time a": {
    "process": 1.0
  },
  "time a process": {
    "known": 1.0
  },
  "a process known": {
    "as": 1.0
  },
  "process known as": {
    "concurrency": 1.0
  },
  "known as concurrency": {
    "checking": 1.0
  },
  "as concurrency checking": {
    "prevents": 1.0
  },
  "concurrency checking prevents": {
    "the": 1.0
  },
  "checking prevents the": {
    "data": 1.0
  },
  "prevents the data": {
    "file": 1.0
  },
  "data file from": {
    "being": 1.0
  },
  "file from being": {
    "corrupted": 1.0
  },
  "from being corrupted": {
    "by": 1.0
  },
  "being corrupted by": {
    "multiple": 1.0
  },
  "corrupted by multiple": {
    "user": 1.0
  },
  "by multiple user": {
    "updates": 1.0
  },
  "multiple user updates": {
    "to": 1.0
  },
  "user updates to": {
    "the": 1.0
  },
  "updates to the": {
    "same": 1.0
  },
  "to the same": {
    "record": 0.5,
    "memory": 0.5
  },
  "same record concurrency": {
    "checking": 1.0
  },
  "record concurrency checking": {
    "means": 1.0
  },
  "concurrency checking means": {
    "determining": 1.0
  },
  "checking means determining": {
    "that": 1.0
  },
  "means determining that": {
    "the": 1.0
  },
  "determining that the": {
    "record": 1.0
  },
  "that the record": {
    "on": 1.0
  },
  "the record on": {
    "disk": 0.5,
    "screen": 0.5
  },
  "record on disk": {
    "which": 0.5,
    "is": 0.5
  },
  "on disk which": {
    "is": 1.0
  },
  "disk which is": {
    "about": 1.0
  },
  "which is about": {
    "to": 1.0
  },
  "is about to": {
    "be": 1.0
  },
  "about to be": {
    "overwr": 1.0
  },
  "to be overwr": {
    "itten": 1.0
  },
  "be overwr itten": {
    "still": 1.0
  },
  "overwr itten still": {
    "contains": 1.0
  },
  "itten still contains": {
    "the": 1.0
  },
  "still contains the": {
    "same": 1.0
  },
  "contains the same": {
    "values": 1.0
  },
  "the same values": {
    "it": 1.0
  },
  "same values it": {
    "did": 1.0
  },
  "values it did": {
    "when": 1.0
  },
  "it did when": {
    "it": 1.0
  },
  "did when it": {
    "was": 1.0
  },
  "when it was": {
    "retrieved": 1.0
  },
  "it was retrieved": {
    "for": 1.0
  },
  "was retrieved for": {
    "update": 1.0
  },
  "retrieved for update": {
    "obviously": 1.0
  },
  "for update obviously": {
    "there": 1.0
  },
  "update obviously there": {
    "is": 1.0
  },
  "obviously there is": {
    "no": 1.0
  },
  "no need for": {
    "any": 0.5,
    "concurrency": 0.5
  },
  "need for any": {
    "kind": 1.0
  },
  "for any kind": {
    "of": 1.0
  },
  "any kind of": {
    "concurrency": 1.0
  },
  "kind of concurrency": {
    "checking": 1.0
  },
  "of concurrency checking": {
    "when": 0.25,
    "you": 0.25,
    "does": 0.25,
    "previously": 0.25
  },
  "concurrency checking when": {
    "a": 1.0
  },
  "checking when a": {
    "record": 1.0
  },
  "when a record": {
    "is": 1.0
  },
  "record is being": {
    "added": 0.5,
    "deleted": 0.5
  },
  "is being added": {
    "if": 1.0
  },
  "being added if": {
    "the": 1.0
  },
  "added if the": {
    "file": 1.0
  },
  "the file has": {
    "a": 1.0
  },
  "has a unique": {
    "key": 1.0
  },
  "unique key two": {
    "users": 1.0
  },
  "key two users": {
    "adding": 1.0
  },
  "two users adding": {
    "the": 1.0
  },
  "users adding the": {
    "same": 1.0
  },
  "adding the same": {
    "record": 1.0
  },
  "same record twice": {
    "is": 1.0
  },
  "record twice is": {
    "impossible": 1.0
  },
  "twice is impossible": {
    "because": 1.0
  },
  "is impossible because": {
    "the": 1.0
  },
  "impossible because the": {
    "second": 1.0
  },
  "because the second": {
    "add": 1.0
  },
  "the second add": {
    "returns": 1.0
  },
  "second add returns": {
    "a": 1.0
  },
  "add returns a": {
    "creates": 1.0
  },
  "returns a creates": {
    "duplicate": 1.0
  },
  "a creates duplicate": {
    "key": 1.0
  },
  "creates duplicate key": {
    "error": 1.0
  },
  "duplicate key error": {
    "without": 1.0
  },
  "key error without": {
    "adding": 1.0
  },
  "error without adding": {
    "the": 1.0
  },
  "without adding the": {
    "record": 1.0
  },
  "adding the record": {
    "if": 1.0
  },
  "the record if": {
    "duplicate": 1.0
  },
  "record if duplicate": {
    "keys": 1.0
  },
  "if duplicate keys": {
    "are": 1.0
  },
  "duplicate keys are": {
    "allowed": 1.0
  },
  "keys are allowed": {
    "there": 1.0
  },
  "are allowed there": {
    "is": 1.0
  },
  "allowed there is": {
    "no": 1.0
  },
  "is no generic": {
    "way": 1.0
  },
  "no generic way": {
    "for": 1.0
  },
  "generic way for": {
    "the": 1.0
  },
  "way for the": {
    "program": 1.0
  },
  "for the program": {
    "code": 1.0
  },
  "the program code": {
    "to": 1.0
  },
  "program code to": {
    "check": 1.0
  },
  "code to check": {
    "for": 1.0
  },
  "to check for": {
    "inadvertent": 0.3333333333333333,
    "other": 0.6666666666666666
  },
  "check for inadvertent": {
    "incorrect": 1.0
  },
  "for inadvertent incorrect": {
    "duplicates": 1.0
  },
  "inadvertent incorrect duplicates": {
    "as": 1.0
  },
  "incorrect duplicates as": {
    "opposed": 1.0
  },
  "duplicates as opposed": {
    "to": 1.0
  },
  "as opposed to": {
    "deliberate": 1.0
  },
  "opposed to deliberate": {
    "correct": 1.0
  },
  "to deliberate correct": {
    "duplic": 1.0
  },
  "deliberate correct duplic": {
    "ate": 1.0
  },
  "correct duplic ate": {
    "records": 1.0
  },
  "duplic ate records": {
    "there": 1.0
  },
  "ate records there": {
    "is": 1.0
  },
  "records there is": {
    "also": 1.0
  },
  "there is also": {
    "no": 1.0
  },
  "is also no": {
    "need": 1.0
  },
  "also no need": {
    "for": 1.0
  },
  "need for concurrency": {
    "checking": 1.0
  },
  "for concurrency checking": {
    "when": 0.5,
    "and": 0.5
  },
  "is being deleted": {
    "once": 1.0
  },
  "being deleted once": {
    "the": 1.0
  },
  "deleted once the": {
    "first": 1.0
  },
  "once the first": {
    "user": 1.0
  },
  "the first user": {
    "has": 0.2,
    "to": 0.4,
    "simply": 0.2,
    "needs": 0.2
  },
  "first user has": {
    "deleted": 1.0
  },
  "user has deleted": {
    "the": 1.0
  },
  "has deleted the": {
    "record": 1.0
  },
  "deleted the record": {
    "it": 1.0
  },
  "the record it": {
    "is": 1.0
  },
  "record it is": {
    "gone": 1.0
  },
  "it is gone": {
    "any": 1.0
  },
  "is gone any": {
    "subsequent": 1.0
  },
  "gone any subsequent": {
    "user": 1.0
  },
  "any subsequent user": {
    "that": 1.0
  },
  "subsequent user that": {
    "attempts": 1.0
  },
  "user that attempts": {
    "to": 1.0
  },
  "that attempts to": {
    "delete": 1.0
  },
  "to delete that": {
    "record": 1.0
  },
  "delete that record": {
    "will": 1.0
  },
  "that record will": {
    "not": 1.0
  },
  "record will not": {
    "be": 1.0
  },
  "will not be": {
    "able": 1.0
  },
  "not be able": {
    "to": 1.0
  },
  "able to get": {
    "it": 1.0
  },
  "to get it": {
    "in": 1.0
  },
  "get it in": {
    "the": 1.0
  },
  "it in the": {
    "first": 1.0
  },
  "in the first": {
    "place": 1.0
  },
  "the first place": {
    "concu": 1.0
  },
  "first place concu": {
    "rrency": 1.0
  },
  "place concu rrency": {
    "checking": 1.0
  },
  "concu rrency checking": {
    "is": 1.0
  },
  "rrency checking is": {
    "necessary": 1.0
  },
  "checking is necessary": {
    "when": 1.0
  },
  "is necessary when": {
    "a": 1.0
  },
  "necessary when a": {
    "user": 1.0
  },
  "when a user": {
    "is": 1.0
  },
  "a user is": {
    "making": 1.0
  },
  "user is making": {
    "a": 1.0
  },
  "is making a": {
    "change": 1.0
  },
  "making a change": {
    "to": 1.0
  },
  "a change to": {
    "a": 1.0
  },
  "change to a": {
    "record": 1.0
  },
  "to a record": {
    "the": 0.5,
    "while": 0.5
  },
  "record the process": {
    "of": 1.0
  },
  "the process of": {
    "changing": 1.0
  },
  "process of changing": {
    "a": 1.0
  },
  "of changing a": {
    "record": 1.0
  },
  "changing a record": {
    "is": 1.0
  },
  "record is get": {
    "the": 1.0
  },
  "is get the": {
    "record": 1.0
  },
  "get the record": {
    "make": 0.25,
    "from": 0.5,
    "and": 0.25
  },
  "the record make": {
    "the": 1.0
  },
  "record make the": {
    "changes": 1.0
  },
  "make the changes": {
    "and": 0.5,
    "to": 0.5
  },
  "the changes and": {
    "write": 1.0
  },
  "changes and write": {
    "the": 1.0
  },
  "and write the": {
    "changes": 0.6666666666666666,
    "changed": 0.3333333333333333
  },
  "write the changes": {
    "back": 0.5,
    "to": 0.5
  },
  "the changes back": {
    "to": 1.0
  },
  "changes back to": {
    "the": 1.0
  },
  "file the problem": {
    "is": 1.0
  },
  "the problem is": {
    "during": 1.0
  },
  "problem is during": {
    "the": 1.0
  },
  "is during the": {
    "time": 1.0
  },
  "during the time": {
    "it": 1.0
  },
  "the time it": {
    "takes": 1.0
  },
  "time it takes": {
    "the": 1.0
  },
  "it takes the": {
    "first": 0.5,
    "ultimate": 0.5
  },
  "takes the first": {
    "user": 1.0
  },
  "first user to": {
    "make": 0.5,
    "write": 0.5
  },
  "user to make": {
    "changes": 1.0
  },
  "to make changes": {
    "to": 1.0
  },
  "make changes to": {
    "the": 1.0
  },
  "changes to the": {
    "record": 0.3333333333333333,
    "screen": 0.3333333333333333,
    "records": 0.3333333333333333
  },
  "to the record": {
    "a": 0.3333333333333333,
    "some": 0.3333333333333333,
    "or": 0.3333333333333333
  },
  "the record a": {
    "second": 1.0
  },
  "record a second": {
    "user": 1.0
  },
  "a second user": {
    "a": 1.0
  },
  "second user a": {
    "faster": 1.0
  },
  "user a faster": {
    "typist": 1.0
  },
  "a faster typist": {
    "could": 1.0
  },
  "faster typist could": {
    "get": 1.0
  },
  "typist could get": {
    "the": 1.0
  },
  "could get the": {
    "same": 1.0
  },
  "get the same": {
    "record": 1.0
  },
  "same record make": {
    "some": 1.0
  },
  "record make some": {
    "change": 1.0
  },
  "make some change": {
    "and": 1.0
  },
  "some change and": {
    "write": 1.0
  },
  "change and write": {
    "the": 1.0
  },
  "write the changed": {
    "record": 1.0
  },
  "the changed record": {
    "back": 0.6666666666666666,
    "is": 0.3333333333333333
  },
  "changed record back": {
    "to": 0.5,
    "into": 0.5
  },
  "record back to": {
    "disk": 1.0
  },
  "back to disk": {
    "when": 1.0
  },
  "to disk when": {
    "the": 1.0
  },
  "disk when the": {
    "time": 1.0
  },
  "when the time": {
    "comes": 1.0
  },
  "the time comes": {
    "for": 1.0
  },
  "time comes for": {
    "the": 1.0
  },
  "comes for the": {
    "first": 1.0
  },
  "for the first": {
    "user": 1.0
  },
  "user to write": {
    "his": 1.0
  },
  "to write his": {
    "her": 1.0
  },
  "write his her": {
    "changes": 1.0
  },
  "his her changes": {
    "to": 1.0
  },
  "her changes to": {
    "disk": 1.0
  },
  "changes to disk": {
    "the": 0.25,
    "and": 0.25,
    "using": 0.25,
    "if": 0.25
  },
  "to disk the": {
    "record": 1.0
  },
  "disk the record": {
    "on": 1.0
  },
  "on disk is": {
    "no": 1.0
  },
  "disk is no": {
    "longer": 1.0
  },
  "is no longer": {
    "the": 1.0
  },
  "no longer the": {
    "same": 1.0
  },
  "longer the same": {
    "as": 1.0
  },
  "same as whe": {
    "n": 1.0
  },
  "as whe n": {
    "it": 1.0
  },
  "whe n it": {
    "was": 1.0
  },
  "n it was": {
    "first": 1.0
  },
  "it was first": {
    "retrieved": 1.0
  },
  "was first retrieved": {
    "does": 1.0
  },
  "first retrieved does": {
    "the": 1.0
  },
  "retrieved does the": {
    "first": 1.0
  },
  "does the first": {
    "user": 1.0
  },
  "first user simply": {
    "overwrite": 1.0
  },
  "user simply overwrite": {
    "the": 1.0
  },
  "simply overwrite the": {
    "second": 1.0
  },
  "overwrite the second": {
    "faster": 1.0
  },
  "the second faster": {
    "user": 1.0
  },
  "second faster user": {
    "s": 1.0
  },
  "faster user s": {
    "changes": 1.0
  },
  "user s changes": {
    "if": 0.07142857142857142,
    "cannot": 0.07142857142857142,
    "to": 0.2857142857142857,
    "sam": 0.14285714285714285,
    "is": 0.07142857142857142,
    "the": 0.07142857142857142,
    "are": 0.07142857142857142,
    "because": 0.07142857142857142,
    "would": 0.07142857142857142,
    "while": 0.07142857142857142
  },
  "s changes if": {
    "both": 1.0
  },
  "changes if both": {
    "users": 1.0
  },
  "if both users": {
    "are": 1.0
  },
  "both users are": {
    "changing": 1.0
  },
  "users are changing": {
    "different": 1.0
  },
  "are changing different": {
    "data": 1.0
  },
  "changing different data": {
    "elements": 1.0
  },
  "different data elements": {
    "within": 1.0
  },
  "data elements within": {
    "that": 1.0
  },
  "elements within that": {
    "record": 1.0
  },
  "within that record": {
    "and": 1.0
  },
  "that record and": {
    "both": 1.0
  },
  "record and both": {
    "changes": 1.0
  },
  "and both changes": {
    "are": 1.0
  },
  "both changes are": {
    "valid": 1.0
  },
  "changes are valid": {
    "overwriting": 1.0
  },
  "are valid overwriting": {
    "the": 1.0
  },
  "valid overwriting the": {
    "second": 1.0
  },
  "overwriting the second": {
    "user": 1.0
  },
  "the second user": {
    "s": 1.0
  },
  "second user s": {
    "changes": 1.0
  },
  "s changes cannot": {
    "be": 1.0
  },
  "changes cannot be": {
    "allowed": 1.0
  },
  "cannot be allowed": {
    "e": 1.0
  },
  "be allowed e": {
    "ven": 1.0
  },
  "allowed e ven": {
    "if": 1.0
  },
  "e ven if": {
    "they": 1.0
  },
  "ven if they": {
    "are": 1.0
  },
  "if they are": {
    "both": 0.5,
    "not": 0.5
  },
  "they are both": {
    "making": 1.0
  },
  "are both making": {
    "the": 1.0
  },
  "both making the": {
    "same": 1.0
  },
  "making the same": {
    "change": 1.0
  },
  "the same change": {
    "the": 1.0
  },
  "same change the": {
    "first": 1.0
  },
  "change the first": {
    "user": 1.0
  },
  "first user needs": {
    "to": 1.0
  },
  "user needs to": {
    "know": 1.0
  },
  "needs to know": {
    "that": 1.0
  },
  "to know that": {
    "someone": 1.0
  },
  "know that someone": {
    "else": 1.0
  },
  "that someone else": {
    "has": 1.0
  },
  "someone else has": {
    "already": 0.3333333333333333,
    "deleted": 0.3333333333333333,
    "a": 0.3333333333333333
  },
  "else has already": {
    "made": 1.0
  },
  "has already made": {
    "that": 1.0
  },
  "already made that": {
    "change": 1.0
  },
  "made that change": {
    "the": 1.0
  },
  "that change the": {
    "simplest": 1.0
  },
  "change the simplest": {
    "concurrency": 1.0
  },
  "the simplest concurrency": {
    "checking": 1.0
  },
  "simplest concurrency checking": {
    "method": 1.0
  },
  "concurrency checking method": {
    "is": 0.5,
    "without": 0.5
  },
  "checking method is": {
    "to": 1.0
  },
  "method is to": {
    "execute": 1.0
  },
  "is to execute": {
    "the": 1.0
  },
  "to execute the": {
    "watch": 1.0
  },
  "execute the watch": {
    "statement": 1.0
  },
  "the watch statement": {
    "just": 1.0
  },
  "watch statement just": {
    "before": 1.0
  },
  "statement just before": {
    "getting": 1.0
  },
  "just before getting": {
    "the": 1.0
  },
  "before getting the": {
    "record": 1.0
  },
  "getting the record": {
    "from": 1.0
  },
  "the record from": {
    "disk": 0.25,
    "the": 0.75
  },
  "record from disk": {
    "this": 1.0
  },
  "from disk this": {
    "tells": 1.0
  },
  "disk this tells": {
    "the": 1.0
  },
  "this tells the": {
    "fi": 1.0
  },
  "tells the fi": {
    "le": 1.0
  },
  "the fi le": {
    "driver": 1.0
  },
  "fi le driver": {
    "to": 1.0
  },
  "le driver to": {
    "automatically": 1.0
  },
  "driver to automatically": {
    "perform": 1.0
  },
  "to automatically perform": {
    "concurrency": 1.0
  },
  "automatically perform concurrency": {
    "checking": 1.0
  },
  "perform concurrency checking": {
    "and": 1.0
  },
  "concurrency checking and": {
    "report": 0.5,
    "the": 0.5
  },
  "checking and report": {
    "an": 1.0
  },
  "and report an": {
    "error": 1.0
  },
  "report an error": {
    "on": 1.0
  },
  "an error on": {
    "the": 1.0
  },
  "error on the": {
    "put": 1.0
  },
  "on the put": {
    "statement": 1.0
  },
  "the put statement": {
    "if": 1.0
  },
  "put statement if": {
    "there": 1.0
  },
  "statement if there": {
    "is": 1.0
  },
  "is a conflict": {
    "unfortunately": 1.0
  },
  "a conflict unfortunately": {
    "not": 1.0
  },
  "conflict unfortunately not": {
    "all": 1.0
  },
  "unfortunately not all": {
    "file": 1.0
  },
  "not all file": {
    "drivers": 1.0
  },
  "all file drivers": {
    "support": 1.0
  },
  "file drivers support": {
    "this": 1.0
  },
  "drivers support this": {
    "for": 1.0
  },
  "support this for": {
    "the": 1.0
  },
  "this for the": {
    "simplest": 1.0
  },
  "for the simplest": {
    "concurrency": 1.0
  },
  "checking method without": {
    "using": 1.0
  },
  "method without using": {
    "watch": 1.0
  },
  "without using watch": {
    "your": 0.5,
    "it": 0.5
  },
  "using watch your": {
    "program": 1.0
  },
  "watch your program": {
    "code": 1.0
  },
  "program code s": {
    "hould": 1.0
  },
  "code s hould": {
    "1": 1.0
  },
  "s hould 1": {
    "save": 1.0
  },
  "hould 1 save": {
    "a": 1.0
  },
  "1 save a": {
    "copy": 1.0
  },
  "save a copy": {
    "of": 1.0
  },
  "a copy of": {
    "the": 1.0
  },
  "copy of the": {
    "record": 1.0
  },
  "of the record": {
    "before": 0.3333333333333333,
    "buffer": 0.3333333333333333,
    "during": 0.3333333333333333
  },
  "the record before": {
    "any": 0.5,
    "changes": 0.5
  },
  "record before any": {
    "changes": 1.0
  },
  "before any changes": {
    "are": 1.0
  },
  "any changes are": {
    "made": 1.0
  },
  "changes are made": {
    "2": 0.5,
    "then": 0.5
  },
  "are made 2": {
    "re": 1.0
  },
  "made 2 re": {
    "read": 1.0
  },
  "2 re read": {
    "the": 1.0
  },
  "re read the": {
    "record": 1.0
  },
  "read the record": {
    "immediately": 0.5,
    "but": 0.5
  },
  "the record immediately": {
    "before": 1.0
  },
  "record immediately before": {
    "writing": 1.0
  },
  "immediately before writing": {
    "the": 1.0
  },
  "before writing the": {
    "changes": 0.5,
    "data": 0.5
  },
  "writing the changes": {
    "to": 1.0
  },
  "the changes to": {
    "disk": 0.6666666666666666,
    "the": 0.3333333333333333
  },
  "to disk and": {
    "compare": 1.0
  },
  "disk and compare": {
    "it": 1.0
  },
  "and compare it": {
    "with": 1.0
  },
  "compare it with": {
    "the": 1.0
  },
  "it with the": {
    "saved": 1.0
  },
  "with the saved": {
    "original": 1.0
  },
  "the saved original": {
    "3": 0.5,
    "record": 0.5
  },
  "saved original 3": {
    "if": 1.0
  },
  "original 3 if": {
    "the": 1.0
  },
  "3 if the": {
    "two": 1.0
  },
  "if the two": {
    "are": 0.5,
    "values": 0.5
  },
  "the two are": {
    "the": 1.0
  },
  "two are the": {
    "same": 1.0
  },
  "the same allow": {
    "the": 1.0
  },
  "same allow the": {
    "user": 1.0
  },
  "allow the user": {
    "s": 1.0
  },
  "the user s": {
    "changes": 0.8571428571428571,
    "request": 0.14285714285714285
  },
  "s changes to": {
    "be": 0.25,
    "a": 0.25,
    "disk": 0.25,
    "the": 0.25
  },
  "changes to be": {
    "written": 1.0
  },
  "to be written": {
    "to": 1.0
  },
  "be written to": {
    "disk": 0.5,
    "handle": 0.5
  },
  "written to disk": {
    "if": 1.0
  },
  "to disk if": {
    "not": 0.5,
    "someone": 0.5
  },
  "disk if not": {
    "alert": 1.0
  },
  "if not alert": {
    "the": 1.0
  },
  "not alert the": {
    "user": 1.0
  },
  "alert the user": {
    "and": 0.14285714285714285,
    "message": 0.2857142857142857,
    "if": 0.42857142857142855,
    "show": 0.14285714285714285
  },
  "the user and": {
    "display": 1.0
  },
  "user and display": {
    "the": 1.0
  },
  "and display the": {
    "record": 1.0
  },
  "display the record": {
    "as": 0.3333333333333333,
    "on": 0.6666666666666666
  },
  "the record as": {
    "changed": 1.0
  },
  "record as changed": {
    "by": 1.0
  },
  "as changed by": {
    "the": 1.0
  },
  "changed by the": {
    "other": 1.0
  },
  "by the other": {
    "user": 1.0
  },
  "the other user": {
    "assume": 0.5,
    "a": 0.5
  },
  "other user assume": {
    "the": 1.0
  },
  "user assume the": {
    "following": 1.0
  },
  "assume the following": {
    "global": 1.0
  },
  "the following global": {
    "declarations": 1.0
  },
  "following global declarations": {
    "and": 1.0
  },
  "global declarations and": {
    "compiler": 1.0
  },
  "declarations and compiler": {
    "equates": 1.0
  },
  "and compiler equates": {
    "sample": 1.0
  },
  "compiler equates sample": {
    "file": 1.0
  },
  "equates sample file": {
    "driver": 1.0
  },
  "pre sam a": {
    "data": 1.0
  },
  "sam a data": {
    "file": 1.0
  },
  "data file declaration": {
    "field1key": 1.0
  },
  "file declaration field1key": {
    "key": 1.0
  },
  "declaration field1key key": {
    "sam": 1.0
  },
  "sam field1 record": {
    "record": 1.0
  },
  "field1 record record": {
    "field1": 1.0
  },
  "string 10 action": {
    "long": 1.0
  },
  "10 action long": {
    "record": 1.0
  },
  "action long record": {
    "update": 1.0
  },
  "long record update": {
    "action": 1.0
  },
  "record update action": {
    "variable": 1.0
  },
  "update action variable": {
    "addrec": 1.0
  },
  "action variable addrec": {
    "equate": 1.0
  },
  "variable addrec equate": {
    "1": 1.0
  },
  "addrec equate 1": {
    "changerec": 1.0
  },
  "equate 1 changerec": {
    "equate": 1.0
  },
  "1 changerec equate": {
    "2": 1.0
  },
  "equate 2 57": {
    "developing": 1.0
  },
  "2 57 developing": {
    "client": 1.0
  },
  "57 developing client": {
    "server": 1.0
  },
  "server applications assume": {
    "that": 1.0
  },
  "applications assume that": {
    "some": 1.0
  },
  "assume that some": {
    "procedure": 1.0
  },
  "that some procedure": {
    "allows": 1.0
  },
  "some procedure allows": {
    "the": 1.0
  },
  "procedure allows the": {
    "user": 1.0
  },
  "allows the user": {
    "to": 1.0
  },
  "the user to": {
    "select": 1.0
  },
  "user to select": {
    "a": 1.0
  },
  "to select a": {
    "record": 1.0
  },
  "select a record": {
    "from": 1.0
  },
  "a record from": {
    "the": 1.0
  },
  "record from the": {
    "file": 0.42857142857142855,
    "queue": 0.14285714285714285,
    "data": 0.14285714285714285,
    "same": 0.14285714285714285,
    "database": 0.14285714285714285
  },
  "from the file": {
    "define": 0.3333333333333333,
    "in": 0.3333333333333333,
    "if": 0.3333333333333333
  },
  "the file define": {
    "s": 1.0
  },
  "file define s": {
    "the": 1.0
  },
  "define s the": {
    "expected": 1.0
  },
  "s the expected": {
    "file": 1.0
  },
  "the expected file": {
    "action": 1.0
  },
  "expected file action": {
    "add": 1.0
  },
  "file action add": {
    "change": 1.0
  },
  "action add change": {
    "or": 1.0
  },
  "add change or": {
    "delete": 1.0
  },
  "change or delete": {
    "the": 1.0
  },
  "or delete the": {
    "record": 1.0
  },
  "delete the record": {
    "then": 1.0
  },
  "the record then": {
    "calls": 1.0
  },
  "record then calls": {
    "an": 1.0
  },
  "then calls an": {
    "update": 1.0
  },
  "calls an update": {
    "procedure": 1.0
  },
  "an update procedure": {
    "the": 0.25,
    "screen": 0.75
  },
  "update procedure the": {
    "update": 1.0
  },
  "procedure the update": {
    "procedure": 1.0
  },
  "the update procedure": {
    "operates": 0.2,
    "s": 0.2,
    "code": 0.4,
    "end": 0.2
  },
  "update procedure operates": {
    "only": 1.0
  },
  "procedure operates only": {
    "on": 1.0
  },
  "operates only on": {
    "that": 1.0
  },
  "only on that": {
    "selected": 1.0
  },
  "on that selected": {
    "record": 1.0
  },
  "that selected record": {
    "and": 1.0
  },
  "selected record and": {
    "accomplishes": 1.0
  },
  "record and accomplishes": {
    "the": 1.0
  },
  "and accomplishes the": {
    "action": 1.0
  },
  "accomplishes the action": {
    "the": 1.0
  },
  "the action the": {
    "user": 1.0
  },
  "action the user": {
    "set": 1.0
  },
  "the user set": {
    "in": 1.0
  },
  "user set in": {
    "the": 1.0
  },
  "set in the": {
    "previous": 1.0
  },
  "the previous procedure": {
    "the": 1.0
  },
  "previous procedure the": {
    "update": 1.0
  },
  "update procedure s": {
    "logic": 1.0
  },
  "procedure s logic": {
    "woul": 1.0
  },
  "s logic woul": {
    "d": 1.0
  },
  "logic woul d": {
    "be": 1.0
  },
  "woul d be": {
    "something": 1.0
  },
  "d be something": {
    "like": 1.0
  },
  "be something like": {
    "this": 1.0
  },
  "something like this": {
    "update": 1.0
  },
  "like this update": {
    "procedure": 1.0
  },
  "this update procedure": {
    "an": 1.0
  },
  "update procedure an": {
    "update": 1.0
  },
  "procedure an update": {
    "procedure": 1.0
  },
  "update procedure screen": {
    "window": 1.0
  },
  "procedure screen window": {
    "data": 1.0
  },
  "screen window data": {
    "entry": 1.0
  },
  "window data entry": {
    "screen": 0.6666666666666666,
    "controls": 0.3333333333333333
  },
  "data entry screen": {
    "declarations": 1.0
  },
  "entry screen declarations": {
    "go": 1.0
  },
  "screen declarations go": {
    "here": 1.0
  },
  "declarations go here": {
    "end": 1.0
  },
  "go here end": {
    "saveque": 0.25,
    "sav": 0.25,
    "code": 0.5
  },
  "here end saveque": {
    "queue": 1.0
  },
  "end saveque queue": {
    "pre": 1.0
  },
  "saveque queue pre": {
    "sav": 1.0
  },
  "queue pre sav": {
    "record": 1.0
  },
  "pre sav record": {
    "save": 1.0
  },
  "sav record save": {
    "queue": 1.0
  },
  "record save queue": {
    "is": 1.0
  },
  "save queue is": {
    "a": 1.0
  },
  "queue is a": {
    "copy": 1.0
  },
  "is a copy": {
    "saverecord": 1.0
  },
  "a copy saverecord": {
    "like": 1.0
  },
  "copy saverecord like": {
    "sam": 1.0
  },
  "saverecord like sam": {
    "record": 1.0
  },
  "like sam record": {
    "pre": 1.0
  },
  "sam record pre": {
    "sav": 1.0
  },
  "record pre sav": {
    "of": 0.5,
    "static": 0.5
  },
  "pre sav of": {
    "the": 1.0
  },
  "sav of the": {
    "file": 1.0
  },
  "the file s": {
    "record": 1.0
  },
  "file s record": {
    "buffer": 1.0
  },
  "s record buffer": {
    "end": 0.5,
    "the": 0.5
  },
  "record buffer end": {
    "with": 1.0
  },
  "buffer end with": {
    "a": 1.0
  },
  "end with a": {
    "different": 1.0
  },
  "with a different": {
    "prefix": 1.0
  },
  "a different prefix": {
    "savrecpos": 0.5,
    "passarray": 0.5
  },
  "different prefix savrecpos": {
    "string": 1.0
  },
  "prefix savrecpos string": {
    "512": 1.0
  },
  "savrecpos string 512": {
    "record": 1.0
  },
  "string 512 record": {
    "position": 1.0
  },
  "512 record position": {
    "save": 1.0
  },
  "record position save": {
    "variable": 1.0
  },
  "position save variable": {
    "code": 0.5,
    "savcrc": 0.5
  },
  "variable code open": {
    "screen": 1.0
  },
  "code open screen": {
    "sav": 0.3333333333333333,
    "savcrc": 0.3333333333333333,
    "display": 0.3333333333333333
  },
  "open screen sav": {
    "saverecord": 1.0
  },
  "screen sav saverecord": {
    "sam": 1.0
  },
  "sav saverecord sam": {
    "record": 1.0
  },
  "saverecord sam record": {
    "save": 0.8333333333333334,
    "compare": 0.16666666666666666
  },
  "sam record save": {
    "copy": 0.2,
    "changes": 0.6,
    "new": 0.2
  },
  "record save copy": {
    "of": 1.0
  },
  "save copy of": {
    "record": 1.0
  },
  "copy of record": {
    "add": 1.0
  },
  "of record add": {
    "saveque": 1.0
  },
  "record add saveque": {
    "1": 1.0
  },
  "add saveque 1": {
    "to": 1.0
  },
  "saveque 1 to": {
    "queue": 1.0
  },
  "1 to queue": {
    "entry": 1.0
  },
  "to queue entry": {
    "1": 0.6666666666666666,
    "2": 0.3333333333333333
  },
  "queue entry 1": {
    "savrecpos": 0.5,
    "display": 0.5
  },
  "entry 1 savrecpos": {
    "position": 1.0
  },
  "1 savrecpos position": {
    "sample": 1.0
  },
  "savrecpos position sample": {
    "save": 1.0
  },
  "position sample save": {
    "record": 1.0
  },
  "sample save record": {
    "position": 1.0
  },
  "save record position": {
    "display": 1.0
  },
  "record position display": {
    "display": 1.0
  },
  "position display display": {
    "the": 1.0
  },
  "display display the": {
    "reco": 0.3333333333333333,
    "record": 0.6666666666666666
  },
  "display the reco": {
    "rd": 1.0
  },
  "the reco rd": {
    "on": 1.0
  },
  "reco rd on": {
    "screen": 1.0
  },
  "rd on screen": {
    "accept": 1.0
  },
  "on screen accept": {
    "screen": 1.0
  },
  "screen accept screen": {
    "field": 1.0
  },
  "accept screen field": {
    "process": 1.0
  },
  "screen field process": {
    "loop": 1.0
  },
  "field process loop": {
    "case": 1.0
  },
  "process loop case": {
    "accepted": 0.6666666666666666,
    "field": 0.3333333333333333
  },
  "loop case accepted": {
    "individual": 1.0
  },
  "case accepted individual": {
    "screen": 1.0
  },
  "accepted individual screen": {
    "field": 1.0
  },
  "individual screen field": {
    "edit": 1.0
  },
  "screen field edit": {
    "code": 1.0
  },
  "field edit code": {
    "goes": 1.0
  },
  "edit code goes": {
    "here": 1.0
  },
  "code goes here": {
    "of": 0.75,
    "end": 0.25
  },
  "goes here of": {
    "okbutton": 1.0
  },
  "here of okbutton": {
    "screen": 0.6666666666666666,
    "scree": 0.3333333333333333
  },
  "screen completion field": {
    "if": 0.6666666666666666,
    "case": 0.3333333333333333
  },
  "completion field if": {
    "action": 1.0
  },
  "field if action": {
    "ch": 0.3333333333333333,
    "changerec": 0.6666666666666666
  },
  "if action ch": {
    "angerec": 1.0
  },
  "action ch angerec": {
    "if": 1.0
  },
  "ch angerec if": {
    "changing": 1.0
  },
  "angerec if changing": {
    "an": 1.0
  },
  "if changing an": {
    "existing": 1.0
  },
  "changing an existing": {
    "record": 1.0
  },
  "an existing record": {
    "sav": 0.5,
    "59": 0.25,
    "was": 0.25
  },
  "existing record sav": {
    "saverecord": 1.0
  },
  "record sav saverecord": {
    "sam": 0.25,
    "put": 0.75
  },
  "record save changes": {
    "made": 1.0
  },
  "save changes made": {
    "add": 0.3333333333333333,
    "reget": 0.3333333333333333,
    "hold": 0.3333333333333333
  },
  "changes made add": {
    "saveque": 1.0
  },
  "made add saveque": {
    "2": 1.0
  },
  "add saveque 2": {
    "to": 1.0
  },
  "saveque 2 to": {
    "queue": 1.0
  },
  "2 to queue": {
    "entry": 1.0
  },
  "queue entry 2": {
    "get": 1.0
  },
  "entry 2 get": {
    "saveque": 1.0
  },
  "2 get saveque": {
    "1": 1.0
  },
  "get saveque 1": {
    "get": 1.0
  },
  "saveque 1 get": {
    "original": 1.0
  },
  "1 get original": {
    "record": 1.0
  },
  "get original record": {
    "from": 1.0
  },
  "original record from": {
    "queue": 0.5,
    "the": 0.5
  },
  "record from queue": {
    "reget": 1.0
  },
  "from queue reget": {
    "sample": 1.0
  },
  "queue reget sample": {
    "savrecpos": 1.0
  },
  "reget sample savrecpos": {
    "get": 1.0
  },
  "sample savrecpos get": {
    "record": 1.0
  },
  "savrecpos get record": {
    "from": 1.0
  },
  "get record from": {
    "file": 1.0
  },
  "record from file": {
    "again": 1.0
  },
  "from file again": {
    "if": 1.0
  },
  "file again if": {
    "errorcode": 0.75,
    "the": 0.25
  },
  "again if errorcode": {
    "if": 1.0
  },
  "if errorcode if": {
    "error": 1.0
  },
  "errorcode if error": {
    "record": 1.0
  },
  "if error record": {
    "not": 0.5,
    "already": 0.5
  },
  "error record not": {
    "found": 1.0
  },
  "record not found": {
    "did": 1.0
  },
  "not found did": {
    "someone": 1.0
  },
  "found did someone": {
    "else": 1.0
  },
  "did someone else": {
    "delete": 1.0
  },
  "someone else delete": {
    "it": 1.0
  },
  "else delete it": {
    "action": 1.0
  },
  "delete it action": {
    "addrec": 1.0
  },
  "it action addrec": {
    "change": 1.0
  },
  "action addrec change": {
    "action": 1.0
  },
  "addrec change action": {
    "to": 1.0
  },
  "change action to": {
    "add": 1.0
  },
  "action to add": {
    "it": 1.0
  },
  "to add it": {
    "back": 1.0
  },
  "add it back": {
    "get": 0.3333333333333333,
    "sam": 0.6666666666666666
  },
  "it back get": {
    "saveque": 1.0
  },
  "back get saveque": {
    "2": 1.0
  },
  "get saveque 2": {
    "get": 1.0
  },
  "saveque 2 get": {
    "this": 1.0
  },
  "2 get this": {
    "user": 1.0
  },
  "get this user": {
    "s": 1.0
  },
  "this user s": {
    "changes": 1.0
  },
  "s changes sam": {
    "record": 1.0
  },
  "changes sam record": {
    "sav": 1.0
  },
  "sam record sav": {
    "saverecord": 1.0
  },
  "sav saverecord put": {
    "them": 0.6666666666666666,
    "changes": 0.16666666666666666,
    "these": 0.16666666666666666
  },
  "saverecord put them": {
    "in": 0.5,
    "back": 0.5
  },
  "put them in": {
    "record": 1.0
  },
  "them in record": {
    "buffer": 1.0
  },
  "in record buffer": {
    "else": 1.0
  },
  "record buffer else": {
    "stop": 1.0
  },
  "buffer else stop": {
    "error": 1.0
  },
  "else stop error": {
    "stop": 1.0
  },
  "stop error stop": {
    "on": 1.0
  },
  "error stop on": {
    "any": 1.0
  },
  "stop on any": {
    "other": 1.0
  },
  "on any other": {
    "error": 1.0
  },
  "any other error": {
    "end": 1.0
  },
  "other error end": {
    "elsif": 1.0
  },
  "error end elsif": {
    "sav": 0.3333333333333333,
    "savcrc": 0.6666666666666666
  },
  "end elsif sav": {
    "saverecord": 1.0
  },
  "elsif sav saverecord": {
    "sam": 1.0
  },
  "sam record compare": {
    "for": 1.0
  },
  "record compare for": {
    "other": 1.0
  },
  "compare for other": {
    "s": 1.0
  },
  "for other s": {
    "changes": 1.0
  },
  "other s changes": {
    "sav": 0.25,
    "beep": 0.75
  },
  "s changes sav": {
    "saverecord": 1.0
  },
  "changes sav saverecord": {
    "sam": 1.0
  },
  "record save new": {
    "disk": 1.0
  },
  "save new disk": {
    "record": 1.0
  },
  "new disk record": {
    "add": 1.0
  },
  "disk record add": {
    "saveque": 1.0
  },
  "entry 1 display": {
    "display": 1.0
  },
  "1 display display": {
    "other": 1.0
  },
  "display display other": {
    "s": 1.0
  },
  "display other s": {
    "changes": 1.0
  },
  "s changes beep": {
    "alert": 1.0
  },
  "changes beep alert": {
    "the": 1.0
  },
  "beep alert the": {
    "user": 1.0
  },
  "the user message": {
    "changed": 0.5,
    "locked": 0.5
  },
  "user message changed": {
    "by": 1.0
  },
  "message changed by": {
    "another": 1.0
  },
  "changed by another": {
    "station": 1.0
  },
  "by another station": {
    "select": 0.6666666666666666,
    "then": 0.16666666666666666,
    "return": 0.16666666666666666
  },
  "another station select": {
    "1": 0.8,
    "list": 0.2
  },
  "station select 1": {
    "and": 1.0
  },
  "select 1 and": {
    "start": 1.0
  },
  "1 and start": {
    "over": 1.0
  },
  "and start over": {
    "cycle": 1.0
  },
  "over cycle at": {
    "first": 1.0
  },
  "cycle at first": {
    "field": 1.0
  },
  "at first field": {
    "else": 0.75,
    "elsif": 0.25
  },
  "first field else": {
    "if": 1.0
  },
  "field else if": {
    "nobody": 1.0
  },
  "else if nobody": {
    "changed": 1.0
  },
  "if nobody changed": {
    "it": 1.0
  },
  "nobody changed it": {
    "get": 0.3333333333333333,
    "sam": 0.6666666666666666
  },
  "changed it get": {
    "saveque": 1.0
  },
  "it get saveque": {
    "2": 1.0
  },
  "put them back": {
    "in": 1.0
  },
  "them back in": {
    "r": 0.5,
    "record": 0.5
  },
  "back in r": {
    "ecord": 1.0
  },
  "in r ecord": {
    "buffer": 1.0
  },
  "r ecord buffer": {
    "execute": 1.0
  },
  "ecord buffer execute": {
    "action": 1.0
  },
  "buffer execute action": {
    "execute": 1.0
  },
  "execute action execute": {
    "disk": 1.0
  },
  "action execute disk": {
    "write": 1.0
  },
  "execute disk write": {
    "add": 1.0
  },
  "disk write add": {
    "sample": 1.0
  },
  "write add sample": {
    "if": 1.0
  },
  "add sample if": {
    "action": 1.0
  },
  "sample if action": {
    "1": 0.36363636363636365,
    "2": 0.36363636363636365,
    "3": 0.2727272727272727
  },
  "if action 1": {
    "addrec": 1.0
  },
  "action 1 addrec": {
    "put": 1.0
  },
  "1 addrec put": {
    "sample": 1.0
  },
  "addrec put sample": {
    "if": 1.0
  },
  "put sample if": {
    "action": 1.0
  },
  "if action 2": {
    "changerec": 1.0
  },
  "action 2 changerec": {
    "delete": 1.0
  },
  "2 changerec delete": {
    "sam": 0.25,
    "sample": 0.75
  },
  "changerec delete sam": {
    "ple": 1.0
  },
  "delete sam ple": {
    "if": 1.0
  },
  "sam ple if": {
    "action": 1.0
  },
  "ple if action": {
    "3": 1.0
  },
  "if action 3": {
    "deleterec": 1.0
  },
  "action 3 deleterec": {
    "end": 1.0
  },
  "3 deleterec end": {
    "errorcheck": 1.0
  },
  "deleterec end errorcheck": {
    "a": 1.0
  },
  "end errorcheck a": {
    "generic": 1.0
  },
  "errorcheck a generic": {
    "error": 1.0
  },
  "a generic error": {
    "checking": 1.0
  },
  "generic error checking": {
    "procedure": 1.0
  },
  "error checking procedure": {
    "free": 0.25,
    "break": 0.75
  },
  "checking procedure free": {
    "saveque": 1.0
  },
  "procedure free saveque": {
    "free": 1.0
  },
  "free saveque free": {
    "memory": 1.0
  },
  "saveque free memory": {
    "used": 1.0
  },
  "free memory used": {
    "by": 1.0
  },
  "used by queue": {
    "entries": 1.0
  },
  "by queue entries": {
    "break": 1.0
  },
  "queue entries break": {
    "and": 1.0
  },
  "entries break and": {
    "break": 1.0
  },
  "break and break": {
    "out": 1.0
  },
  "and break out": {
    "of": 1.0
  },
  "break out of": {
    "process": 1.0
  },
  "loop end loop": {
    "and": 1.0
  },
  "end loop and": {
    "case": 1.0
  },
  "loop and case": {
    "this": 0.3333333333333333,
    "you": 0.3333333333333333,
    "clarion": 0.3333333333333333
  },
  "and case this": {
    "example": 1.0
  },
  "case this example": {
    "code": 1.0
  },
  "example code demonstrates": {
    "the": 0.5,
    "this": 0.5
  },
  "code demonstrates the": {
    "simplest": 1.0
  },
  "demonstrates the simplest": {
    "type": 1.0
  },
  "the simplest type": {
    "of": 1.0
  },
  "simplest type of": {
    "concurrency": 1.0
  },
  "type of concurrency": {
    "checking": 1.0
  },
  "concurrency checking you": {
    "can": 1.0
  },
  "checking you can": {
    "do": 1.0
  },
  "can do without": {
    "using": 1.0
  },
  "do without using": {
    "watch": 1.0
  },
  "using watch it": {
    "saves": 1.0
  },
  "watch it saves": {
    "the": 1.0
  },
  "it saves the": {
    "original": 1.0
  },
  "saves the original": {
    "record": 1.0
  },
  "the original record": {
    "in": 0.3333333333333333,
    "then": 0.3333333333333333,
    "but": 0.3333333333333333
  },
  "original record in": {
    "memory": 1.0
  },
  "record in memory": {
    "queue": 1.0
  },
  "in memory queue": {
    "entry": 1.0
  },
  "memory queue entry": {
    "one": 0.5,
    "then": 0.25,
    "and": 0.25
  },
  "queue entry one": {
    "and": 0.5,
    "which": 0.5
  },
  "entry one and": {
    "the": 1.0
  },
  "one and the": {
    "position": 1.0
  },
  "and the position": {
    "of": 1.0
  },
  "the position of": {
    "that": 1.0
  },
  "position of that": {
    "record": 1.0
  },
  "of that record": {
    "in": 0.5,
    "or": 0.5
  },
  "that record in": {
    "a": 1.0
  },
  "record in a": {
    "string": 0.5,
    "file": 0.5
  },
  "in a string": {
    "variable": 1.0
  },
  "a string variable": {
    "after": 1.0
  },
  "string variable after": {
    "that": 1.0
  },
  "variable after that": {
    "the": 1.0
  },
  "after that the": {
    "user": 1.0
  },
  "that the user": {
    "is": 0.5,
    "has": 0.5
  },
  "the user is": {
    "allowed": 0.2,
    "alerted": 0.6,
    "still": 0.2
  },
  "user is allowed": {
    "to": 1.0
  },
  "is allowed to": {
    "make": 1.0
  },
  "allowed to make": {
    "the": 1.0
  },
  "to make the": {
    "changes": 0.5,
    "most": 0.5
  },
  "to the screen": {
    "data": 1.0
  },
  "the screen data": {
    "the": 1.0
  },
  "screen data the": {
    "code": 1.0
  },
  "data the code": {
    "to": 1.0
  },
  "the code to": {
    "check": 1.0
  },
  "check for other": {
    "user": 0.6666666666666666,
    "locks": 0.3333333333333333
  },
  "for other user": {
    "s": 1.0
  },
  "other user s": {
    "changes": 0.75,
    "use": 0.25
  },
  "s changes is": {
    "contained": 1.0
  },
  "changes is contained": {
    "in": 1.0
  },
  "is contained in": {
    "the": 1.0
  },
  "in the case": {
    "field": 0.5,
    "accepted": 0.5
  },
  "the case field": {
    "of": 1.0
  },
  "case field of": {
    "okbutton": 1.0
  },
  "field of okbutton": {
    "this": 1.0
  },
  "of okbutton this": {
    "would": 1.0
  },
  "okbutton this would": {
    "be": 1.0
  },
  "be the field": {
    "which": 1.0
  },
  "the field which": {
    "the": 1.0
  },
  "field which the": {
    "user": 1.0
  },
  "which the user": {
    "completes": 1.0
  },
  "the user completes": {
    "when": 1.0
  },
  "user completes when": {
    "he": 1.0
  },
  "completes when he": {
    "she": 1.0
  },
  "when he she": {
    "is": 1.0
  },
  "he she is": {
    "done": 1.0
  },
  "she is done": {
    "making": 1.0
  },
  "is done making": {
    "changes": 1.0
  },
  "done making changes": {
    "and": 1.0
  },
  "making changes and": {
    "is": 1.0
  },
  "changes and is": {
    "ready": 1.0
  },
  "and is ready": {
    "to": 1.0
  },
  "is ready to": {
    "write": 1.0
  },
  "ready to write": {
    "the": 1.0
  },
  "to write the": {
    "record": 1.0
  },
  "write the record": {
    "to": 0.5,
    "back": 0.5
  },
  "the record to": {
    "disk": 1.0
  },
  "record to disk": {
    "clarion": 1.0
  },
  "to disk clarion": {
    "language": 1.0
  },
  "disk clarion language": {
    "programming": 1.0
  },
  "programming guide 58": {
    "to": 1.0
  },
  "guide 58 to": {
    "check": 1.0
  },
  "58 to check": {
    "for": 1.0
  },
  "s changes the": {
    "code": 1.0
  },
  "changes the code": {
    "first": 0.5,
    "in": 0.5
  },
  "the code first": {
    "saves": 1.0
  },
  "code first saves": {
    "this": 1.0
  },
  "first saves this": {
    "user": 1.0
  },
  "saves this user": {
    "s": 1.0
  },
  "changes to a": {
    "second": 0.5,
    "record": 0.5
  },
  "to a second": {
    "memory": 1.0
  },
  "a second memory": {
    "queue": 1.0
  },
  "second memory queue": {
    "entry": 1.0
  },
  "queue entry then": {
    "gets": 1.0
  },
  "entry then gets": {
    "the": 1.0
  },
  "then gets the": {
    "saved": 1.0
  },
  "gets the saved": {
    "original": 1.0
  },
  "saved original record": {
    "from": 1.0
  },
  "from the queue": {
    "the": 0.5,
    "hold": 0.5
  },
  "the queue the": {
    "saved": 1.0
  },
  "queue the saved": {
    "record": 1.0
  },
  "the saved record": {
    "position": 1.0
  },
  "saved record position": {
    "is": 1.0
  },
  "record position is": {
    "used": 1.0
  },
  "position is used": {
    "to": 1.0
  },
  "used to get": {
    "the": 1.0
  },
  "to get the": {
    "record": 1.0
  },
  "from the data": {
    "file": 1.0
  },
  "data file again": {
    "if": 1.0
  },
  "again if the": {
    "record": 0.6666666666666666,
    "two": 0.3333333333333333
  },
  "if the record": {
    "is": 0.5,
    "w": 0.25,
    "continually": 0.25
  },
  "the record is": {
    "not": 0.3333333333333333,
    "still": 0.3333333333333333,
    "retrieved": 0.3333333333333333
  },
  "record is not": {
    "found": 1.0
  },
  "is not found": {
    "in": 1.0
  },
  "not found in": {
    "the": 1.0
  },
  "found in the": {
    "file": 1.0
  },
  "the file someone": {
    "else": 1.0
  },
  "file someone else": {
    "has": 1.0
  },
  "else has deleted": {
    "it": 1.0
  },
  "has deleted it": {
    "therefore": 1.0
  },
  "deleted it therefore": {
    "since": 1.0
  },
  "it therefore since": {
    "this": 1.0
  },
  "therefore since this": {
    "user": 1.0
  },
  "since this user": {
    "is": 1.0
  },
  "this user is": {
    "changing": 1.0
  },
  "user is changing": {
    "it": 1.0
  },
  "is changing it": {
    "simply": 1.0
  },
  "changing it simply": {
    "add": 1.0
  },
  "it simply add": {
    "the": 1.0
  },
  "simply add the": {
    "changed": 1.0
  },
  "add the changed": {
    "record": 1.0
  },
  "record back into": {
    "the": 1.0
  },
  "back into the": {
    "file": 1.0
  },
  "into the file": {
    "if": 1.0
  },
  "file if the": {
    "record": 1.0
  },
  "the record w": {
    "as": 1.0
  },
  "record w as": {
    "not": 1.0
  },
  "w as not": {
    "deleted": 1.0
  },
  "as not deleted": {
    "it": 1.0
  },
  "not deleted it": {
    "is": 1.0
  },
  "deleted it is": {
    "compared": 1.0
  },
  "it is compared": {
    "against": 1.0
  },
  "is compared against": {
    "the": 1.0
  },
  "compared against the": {
    "original": 1.0
  },
  "against the original": {
    "saved": 1.0
  },
  "the original saved": {
    "copy": 1.0
  },
  "original saved copy": {
    "if": 1.0
  },
  "saved copy if": {
    "they": 1.0
  },
  "copy if they": {
    "are": 1.0
  },
  "they are not": {
    "the": 1.0
  },
  "are not the": {
    "same": 1.0
  },
  "not the same": {
    "the": 1.0
  },
  "the same the": {
    "changed": 0.3333333333333333,
    "user": 0.3333333333333333,
    "record": 0.3333333333333333
  },
  "same the changed": {
    "record": 1.0
  },
  "changed record is": {
    "saved": 1.0
  },
  "record is saved": {
    "to": 1.0
  },
  "is saved to": {
    "the": 1.0
  },
  "saved to the": {
    "same": 1.0
  },
  "the same memory": {
    "queue": 1.0
  },
  "same memory queue": {
    "entry": 1.0
  },
  "entry one which": {
    "contained": 1.0
  },
  "one which contained": {
    "the": 1.0
  },
  "which contained the": {
    "original": 1.0
  },
  "contained the original": {
    "record": 1.0
  },
  "original record then": {
    "the": 1.0
  },
  "record then the": {
    "user": 1.0
  },
  "then the user": {
    "is": 1.0
  },
  "user is alerted": {
    "to": 0.6666666666666666,
    "and": 0.3333333333333333
  },
  "is alerted to": {
    "the": 0.5,
    "that": 0.5
  },
  "alerted to the": {
    "problem": 1.0
  },
  "to the problem": {
    "and": 1.0
  },
  "the problem and": {
    "sent": 1.0
  },
  "problem and sent": {
    "back": 1.0
  },
  "and sent back": {
    "to": 1.0
  },
  "sent back to": {
    "the": 1.0
  },
  "to the fir": {
    "st": 1.0
  },
  "the fir st": {
    "field": 1.0
  },
  "fir st field": {
    "on": 1.0
  },
  "st field on": {
    "the": 1.0
  },
  "field on the": {
    "screen": 1.0
  },
  "on the screen": {
    "to": 1.0
  },
  "the screen to": {
    "re": 1.0
  },
  "screen to re": {
    "enter": 1.0
  },
  "to re enter": {
    "the": 1.0
  },
  "re enter the": {
    "changes": 1.0
  },
  "enter the changes": {
    "if": 1.0
  },
  "the changes if": {
    "necessary": 1.0
  },
  "changes if necessary": {
    "if": 1.0
  },
  "if necessary if": {
    "the": 1.0
  },
  "necessary if the": {
    "record": 1.0
  },
  "record is still": {
    "the": 1.0
  },
  "is still the": {
    "same": 1.0
  },
  "still the same": {
    "the": 1.0
  },
  "same the user": {
    "s": 1.0
  },
  "s changes are": {
    "retrieved": 1.0
  },
  "changes are retrieved": {
    "from": 1.0
  },
  "are retrieved from": {
    "the": 1.0
  },
  "retrieved from the": {
    "second": 1.0
  },
  "from the second": {
    "memory": 1.0
  },
  "the second memory": {
    "queue": 1.0
  },
  "queue entry and": {
    "put": 1.0
  },
  "entry and put": {
    "into": 1.0
  },
  "and put into": {
    "the": 1.0
  },
  "put into the": {
    "record": 1.0
  },
  "into the record": {
    "buffer": 1.0
  },
  "record buffer for": {
    "the": 1.0
  },
  "buffer for the": {
    "disk": 1.0
  },
  "for the disk": {
    "write": 1.0
  },
  "the disk write": {
    "this": 1.0
  },
  "disk write this": {
    "method": 1.0
  },
  "write this method": {
    "is": 1.0
  },
  "this method is": {
    "fairly": 0.5,
    "a": 0.5
  },
  "method is fairly": {
    "straight": 1.0
  },
  "is fairly straight": {
    "forward": 1.0
  },
  "fairly straight forward": {
    "an": 1.0
  },
  "straight forward an": {
    "d": 1.0
  },
  "forward an d": {
    "logical": 1.0
  },
  "an d logical": {
    "however": 1.0
  },
  "d logical however": {
    "it": 1.0
  },
  "logical however it": {
    "uses": 1.0
  },
  "however it uses": {
    "three": 1.0
  },
  "it uses three": {
    "extra": 1.0
  },
  "uses three extra": {
    "chunks": 1.0
  },
  "three extra chunks": {
    "of": 1.0
  },
  "extra chunks of": {
    "memory": 1.0
  },
  "chunks of memory": {
    "the": 1.0
  },
  "of memory the": {
    "size": 1.0
  },
  "memory the size": {
    "of": 1.0
  },
  "size of the": {
    "record": 1.0
  },
  "record buffer the": {
    "memory": 0.5,
    "passarray": 0.5
  },
  "buffer the memory": {
    "queue": 1.0
  },
  "the memory queue": {
    "s": 1.0
  },
  "memory queue s": {
    "buffer": 1.0
  },
  "queue s buffer": {
    "and": 1.0
  },
  "s buffer and": {
    "the": 1.0
  },
  "buffer and the": {
    "two": 1.0
  },
  "and the two": {
    "entries": 1.0
  },
  "the two entries": {
    "in": 1.0
  },
  "two entries in": {
    "that": 1.0
  },
  "entries in that": {
    "queue": 1.0
  },
  "in that queue": {
    "plus": 1.0
  },
  "that queue plus": {
    "each": 1.0
  },
  "queue plus each": {
    "queue": 1.0
  },
  "plus each queue": {
    "entry": 1.0
  },
  "each queue entry": {
    "s": 1.0
  },
  "queue entry s": {
    "28": 1.0
  },
  "entry s 28": {
    "byte": 1.0
  },
  "s 28 byte": {
    "overhead": 1.0
  },
  "28 byte overhead": {
    "if": 1.0
  },
  "byte overhead if": {
    "you": 1.0
  },
  "overhead if you": {
    "are": 1.0
  },
  "if you are": {
    "dealing": 1.0
  },
  "you are dealing": {
    "with": 1.0
  },
  "are dealing with": {
    "a": 1.0
  },
  "dealing with a": {
    "file": 1.0
  },
  "with a file": {
    "that": 1.0
  },
  "a file that": {
    "has": 1.0
  },
  "file that has": {
    "many": 1.0
  },
  "that has many": {
    "fields": 1.0
  },
  "has many fields": {
    "the": 1.0
  },
  "many fields the": {
    "record": 1.0
  },
  "fields the record": {
    "buffer": 1.0
  },
  "record buffer could": {
    "be": 0.5,
    "easily": 0.5
  },
  "buffer could be": {
    "very": 1.0
  },
  "could be very": {
    "large": 1.0
  },
  "be very large": {
    "and": 1.0
  },
  "very large and": {
    "this": 1.0
  },
  "large and this": {
    "could": 1.0
  },
  "and this could": {
    "use": 1.0
  },
  "this could use": {
    "a": 1.0
  },
  "could use a": {
    "significant": 1.0
  },
  "use a significant": {
    "amount": 1.0
  },
  "a significant amount": {
    "of": 1.0
  },
  "significant amount of": {
    "memory": 1.0
  },
  "amount of memory": {
    "another": 1.0
  },
  "of memory another": {
    "method": 1.0
  },
  "memory another method": {
    "of": 1.0
  },
  "another method of": {
    "concurrency": 1.0
  },
  "method of concurrency": {
    "checking": 1.0
  },
  "concurrency checking does": {
    "not": 1.0
  },
  "checking does not": {
    "copy": 1.0
  },
  "does not copy": {
    "and": 1.0
  },
  "not copy and": {
    "save": 1.0
  },
  "copy and save": {
    "the": 1.0
  },
  "and save the": {
    "original": 1.0
  },
  "save the original": {
    "record": 0.5,
    "crc": 0.5
  },
  "original record but": {
    "instead": 1.0
  },
  "record but instead": {
    "calculates": 1.0
  },
  "but instead calculates": {
    "a": 1.0
  },
  "instead calculates a": {
    "checksum": 1.0
  },
  "calculates a checksum": {
    "or": 1.0
  },
  "a checksum or": {
    "cyclical": 1.0
  },
  "checksum or cyclical": {
    "redundancy": 1.0
  },
  "or cyclical redundancy": {
    "check": 1.0
  },
  "cyclical redundancy check": {
    "crc": 1.0
  },
  "redundancy check crc": {
    "value": 1.0
  },
  "check crc value": {
    "the": 1.0
  },
  "crc value the": {
    "calculation": 1.0
  },
  "value the calculation": {
    "is": 1.0
  },
  "the calculation is": {
    "performed": 1.0
  },
  "calculation is performed": {
    "on": 0.5,
    "again": 0.5
  },
  "is performed on": {
    "the": 1.0
  },
  "performed on the": {
    "record": 1.0
  },
  "on the record": {
    "before": 0.3333333333333333,
    "only": 0.3333333333333333,
    "the": 0.3333333333333333
  },
  "record before changes": {
    "are": 1.0
  },
  "before changes are": {
    "made": 1.0
  },
  "are made then": {
    "the": 1.0
  },
  "made then the": {
    "record": 1.0
  },
  "then the record": {
    "is": 1.0
  },
  "record is retrieved": {
    "from": 1.0
  },
  "is retrieved from": {
    "disk": 1.0
  },
  "retrieved from disk": {
    "and": 1.0
  },
  "from disk and": {
    "the": 1.0
  },
  "disk and the": {
    "calculation": 1.0
  },
  "and the calculation": {
    "is": 1.0
  },
  "is performed again": {
    "if": 1.0
  },
  "performed again if": {
    "the": 1.0
  },
  "the two values": {
    "are": 1.0
  },
  "values are not": {
    "the": 1.0
  },
  "same the record": {
    "has": 1.0
  },
  "the record has": {
    "been": 1.0
  },
  "record has been": {
    "changed": 1.0
  },
  "has been changed": {
    "this": 1.0
  },
  "been changed this": {
    "method": 1.0
  },
  "changed this method": {
    "still": 1.0
  },
  "this method still": {
    "requires": 1.0
  },
  "method still requires": {
    "a": 1.0
  },
  "still requires a": {
    "save": 1.0
  },
  "requires a save": {
    "area": 1.0
  },
  "a save area": {
    "for": 0.3333333333333333,
    "the": 0.3333333333333333,
    "is": 0.3333333333333333
  },
  "save area for": {
    "the": 1.0
  },
  "area for the": {
    "user": 1.0
  },
  "for the user": {
    "s": 1.0
  },
  "s changes because": {
    "the": 1.0
  },
  "changes because the": {
    "record": 1.0
  },
  "because the record": {
    "must": 1.0
  },
  "the record must": {
    "be": 1.0
  },
  "record must be": {
    "read": 1.0
  },
  "must be read": {
    "again": 1.0
  },
  "be read again": {
    "for": 1.0
  },
  "read again for": {
    "the": 1.0
  },
  "again for the": {
    "second": 1.0
  },
  "for the second": {
    "calculation": 1.0
  },
  "the second calculation": {
    "and": 1.0
  },
  "second calculation and": {
    "all": 1.0
  },
  "calculation and all": {
    "disk": 1.0
  },
  "and all disk": {
    "reads": 1.0
  },
  "all disk reads": {
    "are": 1.0
  },
  "disk reads are": {
    "placed": 1.0
  },
  "reads are placed": {
    "in": 1.0
  },
  "are placed in": {
    "the": 1.0
  },
  "placed in the": {
    "record": 1.0
  },
  "in the record": {
    "buffer": 1.0
  },
  "record buffer without": {
    "a": 1.0
  },
  "buffer without a": {
    "save": 1.0
  },
  "without a save": {
    "area": 1.0
  },
  "save area the": {
    "user": 1.0
  },
  "area the user": {
    "s": 1.0
  },
  "s changes would": {
    "be": 1.0
  },
  "changes would be": {
    "overwritten": 1.0
  },
  "would be overwritten": {
    "here": 1.0
  },
  "be overwritten here": {
    "is": 1.0
  },
  "overwritten here is": {
    "an": 1.0
  },
  "example of a": {
    "16": 1.0
  },
  "of a 16": {
    "bit": 1.0
  },
  "a 16 bit": {
    "crc": 1.0
  },
  "16 bit crc": {
    "procedure": 0.3333333333333333,
    "value": 0.3333333333333333,
    "check": 0.3333333333333333
  },
  "bit crc procedure": {
    "and": 1.0
  },
  "crc procedure and": {
    "its": 1.0
  },
  "procedure and its": {
    "prototype": 1.0
  },
  "and its prototype": {
    "for": 1.0
  },
  "its prototype for": {
    "the": 1.0
  },
  "prototype for the": {
    "map": 1.0
  },
  "for the map": {
    "structure": 0.5,
    "crc16": 0.5
  },
  "structure this is": {
    "similar": 1.0
  },
  "this is similar": {
    "to": 1.0
  },
  "is similar to": {
    "the": 1.0
  },
  "to the crc": {
    "calculations": 1.0
  },
  "the crc calculations": {
    "used": 1.0
  },
  "crc calculations used": {
    "in": 1.0
  },
  "calculations used in": {
    "some": 1.0
  },
  "used in some": {
    "serial": 1.0
  },
  "in some serial": {
    "communications": 1.0
  },
  "some serial communications": {
    "protocols": 1.0
  },
  "serial communications protocols": {
    "an": 1.0
  },
  "communications protocols an": {
    "array": 1.0
  },
  "protocols an array": {
    "of": 1.0
  },
  "an array of": {
    "byte": 0.3333333333333333,
    "bytes": 0.6666666666666666
  },
  "array of byte": {
    "fields": 1.0
  },
  "of byte fields": {
    "is": 1.0
  },
  "byte fields is": {
    "passed": 1.0
  },
  "fields is passed": {
    "to": 1.0
  },
  "the procedure it": {
    "calculates": 1.0
  },
  "procedure it calculates": {
    "a": 1.0
  },
  "it calculates a": {
    "16": 1.0
  },
  "calculates a 16": {
    "bit": 1.0
  },
  "bit crc value": {
    "for": 1.0
  },
  "crc value for": {
    "that": 1.0
  },
  "value for that": {
    "array": 1.0
  },
  "for that array": {
    "and": 1.0
  },
  "that array and": {
    "returns": 1.0
  },
  "array and returns": {
    "it": 1.0
  },
  "and returns it": {
    "to": 1.0
  },
  "returns it to": {
    "a": 1.0
  },
  "it to a": {
    "ushort": 1.0
  },
  "to a ushort": {
    "16": 1.0
  },
  "a ushort 16": {
    "bit": 1.0
  },
  "ushort 16 bit": {
    "unsigned": 1.0
  },
  "16 bit unsigned": {
    "variable": 1.0
  },
  "bit unsigned variable": {
    "map": 1.0
  },
  "unsigned variable map": {
    "the": 1.0
  },
  "variable map the": {
    "procedure": 1.0
  },
  "the map crc16": {
    "byte": 1.0
  },
  "map crc16 byte": {
    "ushort": 1.0
  },
  "crc16 byte ushort": {
    "crc16": 1.0
  },
  "byte ushort crc16": {
    "expects": 1.0
  },
  "ushort crc16 expects": {
    "an": 1.0
  },
  "crc16 expects an": {
    "array": 1.0
  },
  "expects an array": {
    "of": 1.0
  },
  "array of bytes": {
    "to": 0.5,
    "it": 0.5
  },
  "of bytes to": {
    "be": 1.0
  },
  "bytes to be": {
    "end": 1.0
  },
  "to be end": {
    "passed": 1.0
  },
  "be end passed": {
    "to": 1.0
  },
  "end passed to": {
    "it": 1.0
  },
  "passed to it": {
    "returns": 1.0
  },
  "to it returns": {
    "a": 1.0
  },
  "it returns a": {
    "ushort": 1.0
  },
  "returns a ushort": {
    "value": 1.0
  },
  "a ushort value": {
    "crc16": 1.0
  },
  "ushort value crc16": {
    "procedure": 1.0
  },
  "value crc16 procedure": {
    "array": 1.0
  },
  "crc16 procedure array": {
    "16": 1.0
  },
  "procedure array 16": {
    "bit": 1.0
  },
  "array 16 bit": {
    "crc": 1.0
  },
  "bit crc check": {
    "crc": 1.0
  },
  "crc check crc": {
    "ulong": 1.0
  },
  "check crc ulong": {
    "work": 1.0
  },
  "crc ulong work": {
    "variable": 1.0
  },
  "ulong work variable": {
    "code": 1.0
  },
  "work variable code": {
    "loop": 1.0
  },
  "variable code loop": {
    "x": 1.0
  },
  "1 to maximum": {
    "array": 1.0
  },
  "to maximum array": {
    "1": 1.0
  },
  "maximum array 1": {
    "loop": 1.0
  },
  "array 1 loop": {
    "through": 1.0
  },
  "1 loop through": {
    "whole": 1.0
  },
  "loop through whole": {
    "array": 1.0
  },
  "through whole array": {
    "crc": 1.0
  },
  "whole array crc": {
    "bor": 1.0
  },
  "array crc bor": {
    "crc": 1.0
  },
  "crc bor crc": {
    "array": 1.0
  },
  "bor crc array": {
    "x": 1.0
  },
  "crc array x": {
    "concatenate": 1.0
  },
  "array x concatenate": {
    "an": 1.0
  },
  "x concatenate an": {
    "array": 1.0
  },
  "concatenate an array": {
    "byte": 1.0
  },
  "an array byte": {
    "to": 1.0
  },
  "array byte to": {
    "crc": 1.0
  },
  "byte to crc": {
    "loop": 1.0
  },
  "to crc loop": {
    "8": 1.0
  },
  "crc loop 8": {
    "times": 1.0
  },
  "loop 8 times": {
    "loop": 1.0
  },
  "8 times loop": {
    "through": 1.0
  },
  "times loop through": {
    "each": 1.0
  },
  "loop through each": {
    "bit": 1.0
  },
  "through each bit": {
    "crc": 1.0
  },
  "each bit crc": {
    "bshift": 1.0
  },
  "bit crc bshift": {
    "crc": 1.0
  },
  "crc bshift crc": {
    "1": 1.0
  },
  "bshift crc 1": {
    "shift": 1.0
  },
  "crc 1 shift": {
    "crc": 1.0
  },
  "1 shift crc": {
    "left": 1.0
  },
  "shift crc left": {
    "one": 1.0
  },
  "crc left one": {
    "bit": 1.0
  },
  "left one bit": {
    "if": 1.0
  },
  "one bit if": {
    "band": 1.0
  },
  "bit if band": {
    "crc": 1.0
  },
  "if band crc": {
    "1000000h": 1.0
  },
  "band crc 1000000h": {
    "was": 1.0
  },
  "crc 1000000h was": {
    "crc": 1.0
  },
  "1000000h was crc": {
    "24th": 1.0
  },
  "was crc 24th": {
    "bit": 1.0
  },
  "crc 24th bit": {
    "on": 1.0
  },
  "24th bit on": {
    "before": 1.0
  },
  "bit on before": {
    "shift": 1.0
  },
  "on before shift": {
    "crc": 1.0
  },
  "before shift crc": {
    "bx": 1.0
  },
  "shift crc bx": {
    "or": 1.0
  },
  "crc bx or": {
    "crc": 1.0
  },
  "bx or crc": {
    "102100h": 1.0
  },
  "or crc 102100h": {
    "xor": 1.0
  },
  "crc 102100h xor": {
    "shifted": 1.0
  },
  "102100h xor shifted": {
    "value": 1.0
  },
  "xor shifted value": {
    "with": 1.0
  },
  "shifted value with": {
    "crc": 1.0
  },
  "value with crc": {
    "mask": 1.0
  },
  "with crc mask": {
    "end": 1.0
  },
  "crc mask end": {
    "both": 1.0
  },
  "mask end both": {
    "loops": 1.0
  },
  "end both loops": {
    "return": 1.0
  },
  "both loops return": {
    "band": 1.0
  },
  "loops return band": {
    "bshift": 1.0
  },
  "return band bshift": {
    "crc": 1.0
  },
  "band bshift crc": {
    "8": 1.0
  },
  "bshift crc 8": {
    "0000ffffh": 1.0
  },
  "crc 8 0000ffffh": {
    "shift": 1.0
  },
  "8 0000ffffh shift": {
    "and": 1.0
  },
  "0000ffffh shift and": {
    "mask": 1.0
  },
  "shift and mask": {
    "return": 1.0
  },
  "and mask return": {
    "value": 1.0
  },
  "mask return value": {
    "using": 1.0
  },
  "return value using": {
    "this": 1.0
  },
  "value using this": {
    "crc": 1.0
  },
  "using this crc": {
    "check": 1.0
  },
  "this crc check": {
    "procedure": 1.0
  },
  "crc check procedure": {
    "the": 1.0
  },
  "check procedure the": {
    "previous": 1.0
  },
  "procedure the previous": {
    "example": 1.0
  },
  "previous example code": {
    "would": 1.0
  },
  "example code would": {
    "be": 1.0
  },
  "code would be": {
    "changed": 1.0
  },
  "would be changed": {
    "to": 1.0
  },
  "be changed to": {
    "look": 1.0
  },
  "changed to look": {
    "like": 1.0
  },
  "to look like": {
    "update": 1.0
  },
  "look like update": {
    "procedure": 1.0
  },
  "like update procedure": {
    "an": 1.0
  },
  "here end sav": {
    "saverecord": 1.0
  },
  "end sav saverecord": {
    "like": 1.0
  },
  "sav saverecord like": {
    "sam": 1.0
  },
  "pre sav static": {
    "record": 1.0
  },
  "sav static record": {
    "buffer": 1.0
  },
  "static record buffer": {
    "sa": 1.0
  },
  "record buffer sa": {
    "ve": 1.0
  },
  "buffer sa ve": {
    "area": 1.0
  },
  "sa ve area": {
    "with": 0.5,
    "for": 0.5
  },
  "ve area with": {
    "a": 1.0
  },
  "area with a": {
    "different": 1.0
  },
  "different prefix passarray": {
    "byte": 1.0
  },
  "prefix passarray byte": {
    "dim": 1.0
  },
  "passarray byte dim": {
    "size": 1.0
  },
  "byte dim size": {
    "sam": 1.0
  },
  "dim size sam": {
    "record": 1.0
  },
  "size sam record": {
    "over": 1.0
  },
  "sam record over": {
    "sam": 1.0
  },
  "record over sam": {
    "record": 1.0
  },
  "over sam record": {
    "declare": 0.5,
    "savrecpos": 0.5
  },
  "sam record declare": {
    "array": 1.0
  },
  "record declare array": {
    "over": 1.0
  },
  "declare array over": {
    "sam": 1.0
  },
  "array over sam": {
    "record": 1.0
  },
  "sam record savrecpos": {
    "string": 1.0
  },
  "record savrecpos string": {
    "512": 1.0
  },
  "save variable savcrc": {
    "ushort": 1.0
  },
  "variable savcrc ushort": {
    "crc": 1.0
  },
  "savcrc ushort crc": {
    "value": 1.0
  },
  "ushort crc value": {
    "save": 1.0
  },
  "crc value save": {
    "variable": 1.0
  },
  "value save variable": {
    "code": 1.0
  },
  "open screen savcrc": {
    "crc16": 1.0
  },
  "screen savcrc crc16": {
    "passarray": 1.0
  },
  "savcrc crc16 passarray": {
    "save": 0.6,
    "compare": 0.4
  },
  "crc16 passarray save": {
    "original": 0.3333333333333333,
    "new": 0.6666666666666666
  },
  "passarray save original": {
    "crc": 1.0
  },
  "save original crc": {
    "value": 1.0
  },
  "original crc value": {
    "savrecpos": 1.0
  },
  "crc value savrecpos": {
    "position": 1.0
  },
  "value savrecpos position": {
    "sample": 1.0
  },
  "record on screen": {
    "accept": 1.0
  },
  "of okbutton scree": {
    "n": 1.0
  },
  "okbutton scree n": {
    "completion": 1.0
  },
  "scree n completion": {
    "field": 1.0
  },
  "n completion field": {
    "if": 1.0
  },
  "action changerec if": {
    "changing": 1.0
  },
  "changerec if changing": {
    "an": 1.0
  },
  "existing record 59": {
    "developing": 1.0
  },
  "record 59 developing": {
    "client": 1.0
  },
  "59 developing client": {
    "server": 1.0
  },
  "server applications sav": {
    "saverecord": 1.0
  },
  "applications sav saverecord": {
    "sam": 1.0
  },
  "changes made reget": {
    "sample": 1.0
  },
  "made reget sample": {
    "savrecpos": 1.0
  },
  "it back sam": {
    "record": 1.0
  },
  "back sam record": {
    "sav": 1.0
  },
  "end elsif savcrc": {
    "crc16": 1.0
  },
  "elsif savcrc crc16": {
    "passarray": 1.0
  },
  "crc16 passarray compare": {
    "crcs": 0.5,
    "crc": 0.5
  },
  "passarray compare crcs": {
    "for": 1.0
  },
  "compare crcs for": {
    "changes": 1.0
  },
  "crcs for changes": {
    "savcrc": 1.0
  },
  "for changes savcrc": {
    "crc16": 1.0
  },
  "changes savcrc crc16": {
    "passarray": 1.0
  },
  "passarray save new": {
    "crc": 1.0
  },
  "save new crc": {
    "value": 1.0
  },
  "new crc value": {
    "display": 1.0
  },
  "crc value display": {
    "display": 1.0
  },
  "value display display": {
    "other": 1.0
  },
  "the user if": {
    "message": 1.0
  },
  "user if message": {
    "changed": 0.6666666666666666,
    "held": 0.3333333333333333
  },
  "if message changed": {
    "by": 0.5,
    "b": 0.5
  },
  "changed it sam": {
    "record": 1.0
  },
  "it sam record": {
    "sav": 1.0
  },
  "saverecord put changes": {
    "back": 1.0
  },
  "put changes back": {
    "in": 1.0
  },
  "changes back in": {
    "buffer": 1.0
  },
  "back in buffer": {
    "execute": 1.0
  },
  "in buffer execute": {
    "action": 1.0
  },
  "changerec delete sample": {
    "if": 1.0
  },
  "delete sample if": {
    "action": 1.0
  },
  "checking procedure break": {
    "and": 1.0
  },
  "procedure break and": {
    "break": 1.0
  },
  "and case you": {
    "can": 1.0
  },
  "case you can": {
    "see": 1.0
  },
  "you can see": {
    "that": 1.0
  },
  "can see that": {
    "the": 1.0
  },
  "see that the": {
    "update": 1.0
  },
  "that the update": {
    "procedure": 1.0
  },
  "update procedure code": {
    "using": 0.5,
    "as": 0.5
  },
  "procedure code using": {
    "this": 1.0
  },
  "code using this": {
    "method": 1.0
  },
  "using this method": {
    "is": 1.0
  },
  "is a bit": {
    "smaller": 1.0
  },
  "a bit smaller": {
    "and": 1.0
  },
  "bit smaller and": {
    "easier": 1.0
  },
  "smaller and easier": {
    "to": 1.0
  },
  "and easier to": {
    "follow": 1.0
  },
  "to follow logically": {
    "there": 1.0
  },
  "follow logically there": {
    "are": 1.0
  },
  "logically there are": {
    "two": 1.0
  },
  "are two new": {
    "data": 1.0
  },
  "two new data": {
    "declarations": 1.0
  },
  "new data declarations": {
    "savcrc": 1.0
  },
  "data declarations savcrc": {
    "is": 1.0
  },
  "declarations savcrc is": {
    "declared": 1.0
  },
  "savcrc is declared": {
    "to": 1.0
  },
  "is declared to": {
    "save": 1.0
  },
  "declared to save": {
    "the": 1.0
  },
  "to save the": {
    "original": 1.0
  },
  "the original crc": {
    "calculation": 1.0
  },
  "original crc calculation": {
    "and": 1.0
  },
  "crc calculation and": {
    "passarray": 1.0
  },
  "calculation and passarray": {
    "is": 1.0
  },
  "and passarray is": {
    "an": 1.0
  },
  "passarray is an": {
    "array": 1.0
  },
  "is an array": {
    "declared": 1.0
  },
  "an array declared": {
    "over": 1.0
  },
  "array declared over": {
    "the": 1.0
  },
  "declared over the": {
    "file": 1.0
  },
  "over the file": {
    "s": 1.0
  },
  "buffer the passarray": {
    "declarati": 1.0
  },
  "the passarray declarati": {
    "on": 1.0
  },
  "passarray declarati on": {
    "simply": 1.0
  },
  "declarati on simply": {
    "provides": 1.0
  },
  "on simply provides": {
    "a": 1.0
  },
  "simply provides a": {
    "way": 1.0
  },
  "provides a way": {
    "to": 1.0
  },
  "a way to": {
    "pass": 1.0
  },
  "way to pass": {
    "the": 1.0
  },
  "to pass the": {
    "crc16": 1.0
  },
  "pass the crc16": {
    "procedure": 1.0
  },
  "the crc16 procedure": {
    "the": 1.0
  },
  "crc16 procedure the": {
    "entire": 1.0
  },
  "procedure the entire": {
    "record": 1.0
  },
  "the entire record": {
    "as": 1.0
  },
  "entire record as": {
    "an": 1.0
  },
  "record as an": {
    "array": 1.0
  },
  "as an array": {
    "of": 1.0
  },
  "of bytes it": {
    "does": 1.0
  },
  "bytes it does": {
    "not": 1.0
  },
  "does not allocate": {
    "any": 1.0
  },
  "not allocate any": {
    "memory": 1.0
  },
  "allocate any memory": {
    "a": 1.0
  },
  "any memory a": {
    "valid": 1.0
  },
  "memory a valid": {
    "question": 1.0
  },
  "a valid question": {
    "at": 1.0
  },
  "valid question at": {
    "this": 1.0
  },
  "question at this": {
    "point": 1.0
  },
  "this point would": {
    "be": 1.0
  },
  "point would be": {
    "why": 1.0
  },
  "would be why": {
    "is": 1.0
  },
  "be why is": {
    "the": 1.0
  },
  "why is the": {
    "sav": 1.0
  },
  "is the sav": {
    "saverecord": 1.0
  },
  "the sav saverecord": {
    "declared": 1.0
  },
  "sav saverecord declared": {
    "in": 1.0
  },
  "saverecord declared in": {
    "this": 1.0
  },
  "declared in this": {
    "code": 1.0
  },
  "in this code": {
    "with": 1.0
  },
  "this code with": {
    "a": 1.0
  },
  "code with a": {
    "static": 1.0
  },
  "with a static": {
    "attribute": 1.0
  },
  "a static attribute": {
    "there": 1.0
  },
  "static attribute there": {
    "are": 1.0
  },
  "attribute there are": {
    "fou": 1.0
  },
  "there are fou": {
    "r": 1.0
  },
  "are fou r": {
    "reasons": 1.0
  },
  "fou r reasons": {
    "a": 1.0
  },
  "r reasons a": {
    "save": 1.0
  },
  "reasons a save": {
    "area": 1.0
  },
  "save area is": {
    "still": 1.0
  },
  "area is still": {
    "needed": 1.0
  },
  "is still needed": {
    "to": 1.0
  },
  "still needed to": {
    "temporarily": 1.0
  },
  "needed to temporarily": {
    "keep": 1.0
  },
  "to temporarily keep": {
    "the": 1.0
  },
  "temporarily keep the": {
    "user": 1.0
  },
  "keep the user": {
    "s": 1.0
  },
  "s changes while": {
    "concurrency": 1.0
  },
  "changes while concurrency": {
    "checking": 1.0
  },
  "while concurrency checking": {
    "calculations": 1.0
  },
  "concurrency checking calculations": {
    "are": 1.0
  },
  "checking calculations are": {
    "being": 1.0
  },
  "calculations are being": {
    "performed": 1.0
  },
  "are being performed": {
    "variables": 1.0
  },
  "being performed variables": {
    "declared": 1.0
  },
  "performed variables declared": {
    "locally": 1.0
  },
  "procedure are assigned": {
    "memory": 1.0
  },
  "are assigned memory": {
    "on": 1.0
  },
  "assigned memory on": {
    "the": 1.0
  },
  "called the sa": {
    "ve": 1.0
  },
  "the sa ve": {
    "area": 1.0
  },
  "ve area for": {
    "a": 1.0
  },
  "area for a": {
    "large": 1.0
  },
  "for a large": {
    "record": 1.0
  },
  "a large record": {
    "buffer": 1.0
  },
  "large record buffer": {
    "could": 1.0
  },
  "buffer could easily": {
    "take": 1.0
  },
  "could easily take": {
    "more": 1.0
  },
  "easily take more": {
    "memory": 1.0
  },
  "take more memory": {
    "than": 1.0
  },
  "more memory than": {
    "is": 1.0
  },
  "memory than is": {
    "available": 1.0
  },
  "than is available": {
    "on": 1.0
  },
  "is available on": {
    "the": 1.0
  },
  "available on the": {
    "stack": 1.0
  },
  "the stack therefore": {
    "the": 1.0
  },
  "stack therefore the": {
    "save": 1.0
  },
  "therefore the save": {
    "area": 1.0
  },
  "the save area": {
    "should": 0.5,
    "were": 0.5
  },
  "save area should": {
    "be": 1.0
  },
  "area should be": {
    "in": 1.0
  },
  "should be in": {
    "static": 1.0
  },
  "be in static": {
    "memory": 1.0
  },
  "in static memory": {
    "in": 1.0
  },
  "static memory in": {
    "a": 1.0
  },
  "memory in a": {
    "procedure": 1.0
  },
  "a procedure only": {
    "data": 1.0
  },
  "procedure only data": {
    "structures": 1.0
  },
  "only data structures": {
    "window": 1.0
  },
  "data structures window": {
    "report": 1.0
  },
  "structures window report": {
    "file": 1.0
  },
  "window report file": {
    "view": 1.0
  },
  "report file view": {
    "and": 1.0
  },
  "file view and": {
    "queue": 1.0
  },
  "view and queue": {
    "and": 1.0
  },
  "and queue and": {
    "variables": 1.0
  },
  "queue and variables": {
    "with": 1.0
  },
  "and variables with": {
    "the": 1.0
  },
  "variables with the": {
    "stati": 1.0
  },
  "with the stati": {
    "c": 1.0
  },
  "the stati c": {
    "attribute": 1.0
  },
  "stati c attribute": {
    "are": 1.0
  },
  "c attribute are": {
    "assigned": 1.0
  },
  "attribute are assigned": {
    "static": 1.0
  },
  "are assigned static": {
    "memory": 1.0
  },
  "assigned static memory": {
    "of": 0.5,
    "clarion": 0.5
  },
  "static memory of": {
    "course": 1.0
  },
  "memory of course": {
    "if": 1.0
  },
  "of course if": {
    "the": 1.0
  },
  "course if the": {
    "save": 1.0
  },
  "if the save": {
    "area": 1.0
  },
  "save area were": {
    "declared": 1.0
  },
  "area were declared": {
    "in": 1.0
  },
  "were declared in": {
    "the": 1.0
  },
  "data section between": {
    "the": 1.0
  },
  "and code or": {
    "a": 1.0
  },
  "code or a": {
    "member": 1.0
  },
  "the keywords member": {
    "and": 1.0
  },
  "keywords member and": {
    "procedure": 1.0
  },
  "member and procedure": {
    "it": 1.0
  },
  "and procedure it": {
    "would": 1.0
  },
  "procedure it would": {
    "not": 1.0
  },
  "it would not": {
    "need": 1.0
  },
  "would not need": {
    "to": 1.0
  },
  "to be dec": {
    "lared": 1.0
  },
  "be dec lared": {
    "with": 1.0
  },
  "dec lared with": {
    "the": 1.0
  },
  "lared with the": {
    "static": 1.0
  },
  "with the static": {
    "attribute": 1.0
  },
  "static attribute it": {
    "would": 1.0
  },
  "attribute it would": {
    "automatically": 1.0
  },
  "it would automatically": {
    "be": 1.0
  },
  "would automatically be": {
    "assigned": 1.0
  },
  "automatically be assigned": {
    "static": 1.0
  },
  "be assigned static": {
    "memory": 1.0
  },
  "static memory clarion": {
    "language": 1.0
  },
  "memory clarion language": {
    "programming": 1.0
  },
  "programming guide 60": {
    "hold": 1.0
  },
  "guide 60 hold": {
    "and": 1.0
  },
  "60 hold and": {
    "release": 1.0
  },
  "and release a": {
    "tool": 1.0
  },
  "release a tool": {
    "to": 1.0
  },
  "a tool to": {
    "prevent": 1.0
  },
  "tool to prevent": {
    "other": 1.0
  },
  "to prevent other": {
    "users": 1.0
  },
  "prevent other users": {
    "from": 1.0
  },
  "other users from": {
    "making": 0.25,
    "any": 0.25,
    "all": 0.25,
    "accessing": 0.25
  },
  "users from making": {
    "changes": 1.0
  },
  "from making changes": {
    "to": 1.0
  },
  "making changes to": {
    "a": 1.0
  },
  "a record while": {
    "it": 1.0
  },
  "record while it": {
    "is": 1.0
  },
  "while it is": {
    "being": 1.0
  },
  "it is being": {
    "updated": 0.5,
    "compared": 0.5
  },
  "is being updated": {
    "is": 1.0
  },
  "being updated is": {
    "the": 1.0
  },
  "updated is the": {
    "hold": 1.0
  },
  "is the hold": {
    "statement": 1.0
  },
  "the hold statement": {
    "hold": 0.5,
    "only": 0.5
  },
  "hold statement hold": {
    "tells": 1.0
  },
  "statement hold tells": {
    "the": 1.0
  },
  "hold tells the": {
    "f": 1.0
  },
  "tells the f": {
    "ollowing": 1.0
  },
  "the f ollowing": {
    "get": 1.0
  },
  "f ollowing get": {
    "next": 1.0
  },
  "ollowing get next": {
    "or": 1.0
  },
  "get next or": {
    "previous": 1.0
  },
  "or previous statement": {
    "to": 1.0
  },
  "previous statement to": {
    "get": 1.0
  },
  "statement to get": {
    "the": 1.0
  },
  "the record and": {
    "set": 1.0
  },
  "record and set": {
    "a": 1.0
  },
  "and set a": {
    "flag": 1.0
  },
  "set a flag": {
    "that": 1.0
  },
  "a flag that": {
    "tells": 1.0
  },
  "flag that tells": {
    "any": 1.0
  },
  "that tells any": {
    "other": 1.0
  },
  "tells any other": {
    "user": 1.0
  },
  "any other user": {
    "attempting": 1.0
  },
  "other user attempting": {
    "to": 1.0
  },
  "user attempting to": {
    "get": 1.0
  },
  "attempting to get": {
    "that": 1.0
  },
  "to get that": {
    "record": 1.0
  },
  "get that record": {
    "that": 1.0
  },
  "that record that": {
    "it": 1.0
  },
  "record that it": {
    "is": 1.0
  },
  "that it is": {
    "in": 1.0
  },
  "it is in": {
    "use": 1.0
  },
  "is in use": {
    "a": 1.0
  },
  "in use a": {
    "record": 1.0
  },
  "use a record": {
    "lock": 1.0
  },
  "a record lock": {
    "the": 1.0
  },
  "record lock the": {
    "record": 1.0
  },
  "lock the record": {
    "remains": 1.0
  },
  "the record remains": {
    "held": 1.0
  },
  "record remains held": {
    "until": 1.0
  },
  "remains held until": {
    "it": 1.0
  },
  "held until it": {
    "is": 1.0
  },
  "until it is": {
    "explicitly": 1.0
  },
  "it is explicitly": {
    "released": 1.0
  },
  "is explicitly released": {
    "with": 1.0
  },
  "explicitly released with": {
    "a": 1.0
  },
  "released with a": {
    "release": 1.0
  },
  "with a release": {
    "statement": 1.0
  },
  "a release statement": {
    "implic": 1.0
  },
  "release statement implic": {
    "itly": 1.0
  },
  "statement implic itly": {
    "released": 1.0
  },
  "implic itly released": {
    "by": 1.0
  },
  "itly released by": {
    "a": 1.0
  },
  "released by a": {
    "put": 1.0
  },
  "by a put": {
    "or": 1.0
  },
  "a put or": {
    "delete": 1.0
  },
  "put or delete": {
    "of": 1.0
  },
  "delete of that": {
    "record": 1.0
  },
  "that record or": {
    "implicitly": 1.0
  },
  "record or implicitly": {
    "released": 1.0
  },
  "or implicitly released": {
    "by": 1.0
  },
  "implicitly released by": {
    "retrieving": 1.0
  },
  "released by retrieving": {
    "another": 1.0
  },
  "by retrieving another": {
    "record": 1.0
  },
  "retrieving another record": {
    "from": 1.0
  },
  "another record from": {
    "the": 1.0
  },
  "same file the": {
    "clarion": 0.5,
    "user": 0.5
  },
  "clarion language supports": {
    "multiple": 0.5,
    "null": 0.5
  },
  "language supports multiple": {
    "file": 1.0
  },
  "supports multiple file": {
    "systems": 1.0
  },
  "multiple file systems": {
    "through": 1.0
  },
  "file systems through": {
    "its": 1.0
  },
  "systems through its": {
    "file": 1.0
  },
  "through its file": {
    "driver": 1.0
  },
  "its file driver": {
    "technology": 1.0
  },
  "file driver technology": {
    "each": 0.3333333333333333,
    "allows": 0.3333333333333333,
    "lets": 0.3333333333333333
  },
  "driver technology each": {
    "file": 1.0
  },
  "technology each file": {
    "system": 1.0
  },
  "each file system": {
    "may": 1.0
  },
  "file system may": {
    "implement": 1.0
  },
  "system may implement": {
    "record": 1.0
  },
  "may implement record": {
    "lockin": 1.0
  },
  "implement record lockin": {
    "g": 1.0
  },
  "record lockin g": {
    "in": 1.0
  },
  "lockin g in": {
    "a": 1.0
  },
  "g in a": {
    "different": 1.0
  },
  "in a different": {
    "manner": 1.0
  },
  "a different manner": {
    "therefore": 1.0
  },
  "different manner therefore": {
    "the": 1.0
  },
  "manner therefore the": {
    "actual": 1.0
  },
  "therefore the actual": {
    "effect": 1.0
  },
  "the actual effect": {
    "of": 1.0
  },
  "actual effect of": {
    "hold": 1.0
  },
  "effect of hold": {
    "is": 1.0
  },
  "of hold is": {
    "dependent": 0.3333333333333333,
    "described": 0.3333333333333333,
    "the": 0.3333333333333333
  },
  "hold is dependent": {
    "upon": 1.0
  },
  "dependent upon the": {
    "file": 1.0
  },
  "upon the file": {
    "driver": 1.0
  },
  "the file driver": {
    "which": 0.1111111111111111,
    "does": 0.05555555555555555,
    "some": 0.05555555555555555,
    "places": 0.05555555555555555,
    "to": 0.1111111111111111,
    "knows": 0.05555555555555555,
    "automatically": 0.05555555555555555,
    "itsel": 0.05555555555555555,
    "can": 0.1111111111111111,
    "or": 0.05555555555555555,
    "would": 0.05555555555555555,
    "itself": 0.05555555555555555,
    "will": 0.1111111111111111,
    "most": 0.05555555555555555
  },
  "file driver which": {
    "takes": 1.0
  },
  "driver which takes": {
    "whatever": 1.0
  },
  "which takes whatever": {
    "action": 1.0
  },
  "takes whatever action": {
    "is": 1.0
  },
  "whatever action is": {
    "appropriate": 1.0
  },
  "action is appropriate": {
    "to": 0.6666666666666666,
    "for": 0.3333333333333333
  },
  "is appropriate to": {
    "the": 1.0
  },
  "the file system": {
    "in": 0.2857142857142857,
    "being": 0.42857142857142855,
    "an": 0.14285714285714285,
    "requires": 0.14285714285714285
  },
  "file system in": {
    "some": 1.0
  },
  "system in some": {
    "file": 1.0
  },
  "in some file": {
    "systems": 1.0
  },
  "some file systems": {
    "a": 0.5,
    "release": 0.25,
    "lock": 0.25
  },
  "file systems a": {
    "hold": 0.5,
    "system": 0.5
  },
  "systems a hold": {
    "on": 1.0
  },
  "a hold on": {
    "a": 0.3333333333333333,
    "the": 0.6666666666666666
  },
  "hold on a": {
    "record": 1.0
  },
  "on a record": {
    "allows": 1.0
  },
  "a record allows": {
    "other": 1.0
  },
  "record allows other": {
    "users": 1.0
  },
  "allows other users": {
    "to": 0.5,
    "access": 0.5
  },
  "other users to": {
    "read": 1.0
  },
  "users to read": {
    "the": 1.0
  },
  "to read the": {
    "record": 0.5,
    "held": 0.5
  },
  "the record but": {
    "not": 1.0
  },
  "record but not": {
    "to": 1.0
  },
  "but not to": {
    "write": 1.0
  },
  "not to write": {
    "to": 1.0
  },
  "write to it": {
    "in": 1.0
  },
  "to it in": {
    "others": 1.0
  },
  "it in others": {
    "hold": 1.0
  },
  "in others hold": {
    "blocks": 1.0
  },
  "others hold blocks": {
    "other": 1.0
  },
  "hold blocks other": {
    "users": 1.0
  },
  "blocks other users": {
    "from": 1.0
  },
  "users from any": {
    "access": 1.0
  },
  "from any access": {
    "to": 1.0
  },
  "any access to": {
    "the": 1.0
  },
  "the record some": {
    "file": 1.0
  },
  "record some file": {
    "systems": 1.0
  },
  "file systems release": {
    "the": 1.0
  },
  "systems release the": {
    "hold": 1.0
  },
  "release the hold": {
    "automatically": 0.5,
    "savcrc": 0.5
  },
  "the hold automatically": {
    "if": 1.0
  },
  "hold automatically if": {
    "the": 1.0
  },
  "automatically if the": {
    "system": 1.0
  },
  "if the system": {
    "crashes": 1.0
  },
  "the system crashes": {
    "others": 1.0
  },
  "system crashes others": {
    "don": 1.0
  },
  "crashes others don": {
    "t": 1.0
  },
  "others don t": {
    "and": 1.0
  },
  "don t and": {
    "leave": 1.0
  },
  "t and leave": {
    "it": 1.0
  },
  "and leave it": {
    "flagged": 1.0
  },
  "leave it flagged": {
    "as": 1.0
  },
  "it flagged as": {
    "held": 1.0
  },
  "flagged as held": {
    "the": 1.0
  },
  "as held the": {
    "specific": 1.0
  },
  "held the specific": {
    "action": 1.0
  },
  "the specific action": {
    "of": 0.5,
    "lock": 0.5
  },
  "specific action of": {
    "hold": 1.0
  },
  "action of hold": {
    "is": 1.0
  },
  "hold is described": {
    "in": 1.0
  },
  "is described in": {
    "each": 1.0
  },
  "described in each": {
    "file": 1.0
  },
  "in each file": {
    "driver": 1.0
  },
  "each file driver": {
    "s": 1.0
  },
  "file driver s": {
    "docu": 0.5,
    "documentation": 0.5
  },
  "driver s docu": {
    "mentation": 1.0
  },
  "s docu mentation": {
    "if": 1.0
  },
  "docu mentation if": {
    "you": 1.0
  },
  "mentation if you": {
    "hold": 1.0
  },
  "if you hold": {
    "a": 1.0
  },
  "you hold a": {
    "record": 1.0
  },
  "hold a record": {
    "when": 0.5,
    "in": 0.5
  },
  "a record when": {
    "it": 1.0
  },
  "record when it": {
    "is": 1.0
  },
  "when it is": {
    "retrieved": 0.5,
    "detected": 0.5
  },
  "it is retrieved": {
    "and": 1.0
  },
  "retrieved and release": {
    "it": 1.0
  },
  "and release it": {
    "when": 1.0
  },
  "release it when": {
    "you": 1.0
  },
  "it when you": {
    "write": 1.0
  },
  "when you write": {
    "it": 1.0
  },
  "you write it": {
    "back": 1.0
  },
  "write it back": {
    "you": 1.0
  },
  "it back you": {
    "can": 1.0
  },
  "back you can": {
    "eliminate": 1.0
  },
  "can eliminate the": {
    "need": 1.0
  },
  "eliminate the need": {
    "for": 1.0
  },
  "the need for": {
    "the": 1.0
  },
  "need for the": {
    "type": 1.0
  },
  "for the type": {
    "of": 1.0
  },
  "concurrency checking previously": {
    "described": 1.0
  },
  "checking previously described": {
    "is": 1.0
  },
  "previously described is": {
    "this": 1.0
  },
  "described is this": {
    "a": 1.0
  },
  "is this a": {
    "good": 1.0
  },
  "this a good": {
    "idea": 1.0
  },
  "a good idea": {
    "though": 1.0
  },
  "good idea though": {
    "depending": 1.0
  },
  "idea though depending": {
    "upon": 1.0
  },
  "though depending upon": {
    "the": 1.0
  },
  "depending upon the": {
    "actual": 1.0
  },
  "upon the actual": {
    "implementation": 1.0
  },
  "the actual implementation": {
    "of": 1.0
  },
  "actual implementation of": {
    "hold": 1.0
  },
  "implementation of hold": {
    "in": 1.0
  },
  "of hold in": {
    "the": 1.0
  },
  "hold in the": {
    "file": 1.0
  },
  "file system being": {
    "used": 0.6666666666666666,
    "us": 0.3333333333333333
  },
  "system being used": {
    "the": 0.5,
    "does": 0.5
  },
  "being used the": {
    "answer": 1.0
  },
  "used the answer": {
    "may": 1.0
  },
  "the answer may": {
    "be": 1.0
  },
  "answer may be": {
    "either": 1.0
  },
  "may be either": {
    "yes": 1.0
  },
  "be either yes": {
    "or": 1.0
  },
  "either yes or": {
    "no": 1.0
  },
  "yes or no": {
    "if": 1.0
  },
  "or no if": {
    "your": 1.0
  },
  "no if your": {
    "file": 1.0
  },
  "if your file": {
    "system": 1.0
  },
  "your file system": {
    "blocks": 1.0
  },
  "file system blocks": {
    "other": 1.0
  },
  "system blocks other": {
    "users": 1.0
  },
  "users from all": {
    "access": 1.0
  },
  "from all access": {
    "to": 1.0
  },
  "all access to": {
    "the": 1.0
  },
  "the record or": {
    "there": 1.0
  },
  "record or there": {
    "is": 1.0
  },
  "or there is": {
    "the": 1.0
  },
  "there is the": {
    "possibility": 1.0
  },
  "the possibility a": {
    "system": 1.0
  },
  "possibility a system": {
    "crash": 1.0
  },
  "a system crash": {
    "could": 0.3333333333333333,
    "in": 0.3333333333333333,
    "automatic": 0.3333333333333333
  },
  "system crash could": {
    "leav": 1.0
  },
  "crash could leav": {
    "e": 1.0
  },
  "could leav e": {
    "it": 1.0
  },
  "leav e it": {
    "in": 1.0
  },
  "e it in": {
    "a": 1.0
  },
  "in a hold": {
    "state": 1.0
  },
  "a hold state": {
    "the": 0.5,
    "by": 0.5
  },
  "hold state the": {
    "answer": 1.0
  },
  "state the answer": {
    "is": 1.0
  },
  "answer is probably": {
    "no": 1.0
  },
  "is probably no": {
    "this": 1.0
  },
  "probably no this": {
    "does": 1.0
  },
  "no this does": {
    "not": 1.0
  },
  "does not mean": {
    "that": 1.0
  },
  "not mean that": {
    "you": 1.0
  },
  "mean that you": {
    "should": 1.0
  },
  "that you should": {
    "not": 1.0
  },
  "you should not": {
    "use": 1.0
  },
  "should not use": {
    "hold": 1.0
  },
  "not use hold": {
    "at": 0.5,
    "where": 0.5
  },
  "use hold at": {
    "all": 1.0
  },
  "hold at all": {
    "it": 1.0
  },
  "at all it": {
    "does": 1.0
  },
  "all it does": {
    "mean": 1.0
  },
  "it does mean": {
    "that": 1.0
  },
  "does mean that": {
    "you": 1.0
  },
  "use hold where": {
    "a": 1.0
  },
  "hold where a": {
    "record": 1.0
  },
  "where a record": {
    "would": 1.0
  },
  "would be held": {
    "during": 1.0
  },
  "be held during": {
    "user": 1.0
  },
  "held during user": {
    "input": 1.0
  },
  "during user input": {
    "an": 1.0
  },
  "user input an": {
    "indeterminate": 1.0
  },
  "input an indeterminate": {
    "amount": 1.0
  },
  "an indeterminate amount": {
    "of": 1.0
  },
  "indeterminate amount of": {
    "time": 1.0
  },
  "amount of time": {
    "more": 1.0
  },
  "of time more": {
    "likely": 1.0
  },
  "time more likely": {
    "you": 1.0
  },
  "more likely you": {
    "would": 1.0
  },
  "likely you would": {
    "use": 1.0
  },
  "you would use": {
    "hold": 1.0
  },
  "would use hold": {
    "during": 1.0
  },
  "use hold during": {
    "the": 1.0
  },
  "hold during the": {
    "concurrency": 1.0
  },
  "during the concurrency": {
    "check": 1.0
  },
  "the concurrency check": {
    "described": 1.0
  },
  "concurrency check described": {
    "above": 1.0
  },
  "check described above": {
    "this": 1.0
  },
  "described above this": {
    "is": 1.0
  },
  "above this is": {
    "to": 1.0
  },
  "this is to": {
    "make": 0.3333333333333333,
    "reduce": 0.3333333333333333,
    "change": 0.3333333333333333
  },
  "is to make": {
    "sure": 0.5,
    "the": 0.5
  },
  "to make sure": {
    "that": 1.0
  },
  "make sure that": {
    "nobody": 1.0
  },
  "sure that nobody": {
    "changes": 1.0
  },
  "that nobody changes": {
    "the": 1.0
  },
  "nobody changes the": {
    "record": 1.0
  },
  "changes the record": {
    "between": 1.0
  },
  "the record between": {
    "the": 1.0
  },
  "record between the": {
    "second": 1.0
  },
  "between the second": {
    "get": 1.0
  },
  "the second get": {
    "for": 1.0
  },
  "second get for": {
    "concurrency": 1.0
  },
  "get for concurrency": {
    "checking": 1.0
  },
  "checking and the": {
    "put": 1.0
  },
  "and the put": {
    "that": 1.0
  },
  "the put that": {
    "writes": 1.0
  },
  "put that writes": {
    "the": 1.0
  },
  "that writes the": {
    "user": 1.0
  },
  "writes the user": {
    "s": 1.0
  },
  "to disk using": {
    "hold": 1.0
  },
  "disk using hold": {
    "in": 1.0
  },
  "using hold in": {
    "this": 1.0
  },
  "hold in this": {
    "manner": 1.0
  },
  "in this manner": {
    "only": 1.0
  },
  "this manner only": {
    "changes": 1.0
  },
  "manner only changes": {
    "the": 1.0
  },
  "only changes the": {
    "code": 1.0
  },
  "the case accepted": {
    "of": 1.0
  },
  "case accepted of": {
    "okbutton": 1.0
  },
  "accepted of okbutton": {
    "of": 1.0
  },
  "of okbutton of": {
    "okbutton": 1.0
  },
  "okbutton of okbutton": {
    "screen": 1.0
  },
  "changes made hold": {
    "sample": 1.0
  },
  "made hold sample": {
    "1": 1.0
  },
  "hold sample 1": {
    "hold": 0.5,
    "arm": 0.5
  },
  "sample 1 hold": {
    "while": 1.0
  },
  "1 hold while": {
    "checking": 1.0
  },
  "hold while checking": {
    "for": 1.0
  },
  "while checking for": {
    "changes": 1.0
  },
  "checking for changes": {
    "reget": 1.0
  },
  "for changes reget": {
    "sample": 1.0
  },
  "changes reget sample": {
    "savrecpos": 1.0
  },
  "error record already": {
    "held": 1.0
  },
  "record already held": {
    "has": 1.0
  },
  "already held has": {
    "someone": 1.0
  },
  "held has someone": {
    "else": 1.0
  },
  "has someone else": {
    "got": 1.0
  },
  "someone else got": {
    "it": 1.0
  },
  "else got it": {
    "beep": 1.0
  },
  "got it beep": {
    "alert": 1.0
  },
  "it beep alert": {
    "the": 1.0
  },
  "the user show": {
    "25": 1.0
  },
  "user show 25": {
    "1": 1.0
  },
  "show 25 1": {
    "held": 1.0
  },
  "25 1 held": {
    "by": 1.0
  },
  "1 held by": {
    "another": 1.0
  },
  "held by another": {
    "station": 1.0
  },
  "first field elsif": {
    "error": 1.0
  },
  "field elsif error": {
    "record": 1.0
  },
  "elsif error record": {
    "not": 1.0
  },
  "back in record": {
    "buffer": 1.0
  },
  "passarray compare crc": {
    "values": 1.0
  },
  "compare crc values": {
    "for": 1.0
  },
  "crc values for": {
    "changes": 1.0
  },
  "values for changes": {
    "release": 1.0
  },
  "for changes release": {
    "sample": 1.0
  },
  "changes release sample": {
    "release": 1.0
  },
  "release sample release": {
    "the": 1.0
  },
  "sample release the": {
    "hold": 1.0
  },
  "the hold savcrc": {
    "crc16": 1.0
  },
  "hold savcrc crc16": {
    "passarray": 1.0
  },
  "message changed b": {
    "y": 1.0
  },
  "changed b y": {
    "another": 1.0
  },
  "b y another": {
    "station": 1.0
  },
  "y another station": {
    "select": 1.0
  },
  "saverecord put these": {
    "ch": 1.0
  },
  "put these ch": {
    "anges": 1.0
  },
  "these ch anges": {
    "back": 1.0
  },
  "ch anges back": {
    "in": 1.0
  },
  "anges back in": {
    "buffer": 1.0
  },
  "process loop 61": {
    "developing": 1.0
  },
  "loop 61 developing": {
    "client": 1.0
  },
  "61 developing client": {
    "server": 1.0
  },
  "server applications this": {
    "change": 1.0
  },
  "applications this change": {
    "puts": 1.0
  },
  "this change puts": {
    "a": 1.0
  },
  "change puts a": {
    "hold": 1.0
  },
  "puts a hold": {
    "on": 1.0
  },
  "hold on the": {
    "record": 1.0
  },
  "the record only": {
    "long": 1.0
  },
  "record only long": {
    "enough": 1.0
  },
  "only long enough": {
    "to": 1.0
  },
  "long enough to": {
    "determine": 1.0
  },
  "enough to determine": {
    "if": 1.0
  },
  "to determine if": {
    "it": 1.0
  },
  "determine if it": {
    "is": 1.0
  },
  "if it is": {
    "the": 0.3333333333333333,
    "a": 0.3333333333333333,
    "successful": 0.3333333333333333
  },
  "it is the": {
    "same": 1.0
  },
  "same record the": {
    "user": 1.0
  },
  "record the user": {
    "started": 0.5,
    "is": 0.5
  },
  "the user started": {
    "with": 1.0
  },
  "user started with": {
    "and": 1.0
  },
  "started with and": {
    "write": 1.0
  },
  "with and write": {
    "the": 1.0
  },
  "disk if someone": {
    "else": 1.0
  },
  "if someone else": {
    "has": 1.0
  },
  "else has a": {
    "hold": 1.0
  },
  "has a hold": {
    "on": 1.0
  },
  "the record the": {
    "user": 1.0
  },
  "alerted to that": {
    "fact": 1.0
  },
  "to that fact": {
    "and": 1.0
  },
  "that fact and": {
    "allowed": 1.0
  },
  "fact and allowed": {
    "to": 1.0
  },
  "and allowed to": {
    "try": 1.0
  },
  "allowed to try": {
    "again": 1.0
  },
  "to try again": {
    "if": 0.5,
    "cycle": 0.5
  },
  "try again if": {
    "the": 1.0
  },
  "the record continually": {
    "comes": 1.0
  },
  "record continually comes": {
    "up": 1.0
  },
  "continually comes up": {
    "as": 1.0
  },
  "comes up as": {
    "held": 1.0
  },
  "up as held": {
    "by": 1.0
  },
  "as held by": {
    "another": 1.0
  },
  "another station then": {
    "it": 1.0
  },
  "station then it": {
    "has": 1.0
  },
  "then it has": {
    "probably": 1.0
  },
  "it has probably": {
    "been": 1.0
  },
  "has probably been": {
    "left": 1.0
  },
  "probably been left": {
    "in": 1.0
  },
  "been left in": {
    "a": 1.0
  },
  "left in a": {
    "hold": 1.0
  },
  "hold state by": {
    "a": 1.0
  },
  "state by a": {
    "system": 1.0
  },
  "by a system": {
    "crash": 1.0
  },
  "system crash in": {
    "that": 1.0
  },
  "crash in that": {
    "case": 1.0
  },
  "in that case": {
    "the": 1.0
  },
  "that case the": {
    "hold": 1.0
  },
  "case the hold": {
    "should": 1.0
  },
  "the hold should": {
    "be": 1.0
  },
  "hold should be": {
    "released": 1.0
  },
  "should be released": {
    "by": 1.0
  },
  "be released by": {
    "whatever": 1.0
  },
  "released by whatever": {
    "action": 1.0
  },
  "by whatever action": {
    "is": 1.0
  },
  "appropriate for that": {
    "file": 1.0
  },
  "for that file": {
    "system": 1.0
  },
  "that file system": {
    "code": 1.0
  },
  "file system code": {
    "could": 1.0
  },
  "system code could": {
    "be": 1.0
  },
  "code could be": {
    "written": 1.0
  },
  "could be written": {
    "to": 1.0
  },
  "written to handle": {
    "this": 1.0
  },
  "handle this eventuality": {
    "but": 1.0
  },
  "this eventuality but": {
    "it": 1.0
  },
  "eventuality but it": {
    "would": 1.0
  },
  "but it would": {
    "be": 1.0
  },
  "it would be": {
    "specific": 1.0
  },
  "would be specific": {
    "to": 1.0
  },
  "be specific to": {
    "the": 1.0
  },
  "specific to the": {
    "file": 1.0
  },
  "file system an": {
    "d": 1.0
  },
  "system an d": {
    "this": 1.0
  },
  "an d this": {
    "is": 1.0
  },
  "d this is": {
    "generic": 1.0
  },
  "this is generic": {
    "example": 1.0
  },
  "is generic example": {
    "code": 1.0
  },
  "generic example code": {
    "if": 1.0
  },
  "example code if": {
    "the": 1.0
  },
  "code if the": {
    "prevention": 1.0
  },
  "if the prevention": {
    "of": 1.0
  },
  "the prevention of": {
    "record": 1.0
  },
  "prevention of record": {
    "update": 1.0
  },
  "of record update": {
    "conflicts": 1.0
  },
  "record update conflicts": {
    "is": 1.0
  },
  "update conflicts is": {
    "a": 1.0
  },
  "conflicts is a": {
    "mission": 1.0
  },
  "is a mission": {
    "critical": 1.0
  },
  "a mission critical": {
    "concern": 1.0
  },
  "mission critical concern": {
    "then": 1.0
  },
  "critical concern then": {
    "hold": 1.0
  },
  "concern then hold": {
    "could": 1.0
  },
  "then hold could": {
    "be": 1.0
  },
  "hold could be": {
    "used": 1.0
  },
  "could be used": {
    "to": 1.0
  },
  "be used to": {
    "keep": 1.0
  },
  "used to keep": {
    "control": 1.0
  },
  "to keep control": {
    "of": 1.0
  },
  "keep control of": {
    "the": 1.0
  },
  "control of the": {
    "record": 0.3333333333333333,
    "files": 0.3333333333333333,
    "database": 0.3333333333333333
  },
  "the record during": {
    "user": 1.0
  },
  "record during user": {
    "data": 1.0
  },
  "during user data": {
    "entry": 1.0
  },
  "user data entry": {
    "one": 1.0
  },
  "data entry one": {
    "trade": 1.0
  },
  "entry one trade": {
    "off": 1.0
  },
  "one trade off": {
    "with": 1.0
  },
  "trade off with": {
    "this": 1.0
  },
  "off with this": {
    "use": 1.0
  },
  "with this use": {
    "of": 1.0
  },
  "this use of": {
    "hold": 1.0
  },
  "use of hold": {
    "is": 0.3333333333333333,
    "and": 0.3333333333333333,
    "only": 0.3333333333333333
  },
  "hold is the": {
    "nuisance": 1.0
  },
  "is the nuisance": {
    "of": 1.0
  },
  "the nuisance of": {
    "dealing": 1.0
  },
  "nuisance of dealing": {
    "wit": 1.0
  },
  "of dealing wit": {
    "h": 1.0
  },
  "dealing wit h": {
    "records": 1.0
  },
  "wit h records": {
    "that": 1.0
  },
  "h records that": {
    "are": 1.0
  },
  "records that are": {
    "left": 1.0
  },
  "that are left": {
    "locked": 1.0
  },
  "are left locked": {
    "when": 1.0
  },
  "left locked when": {
    "users": 1.0
  },
  "locked when users": {
    "systems": 1.0
  },
  "when users systems": {
    "crash": 1.0
  },
  "users systems crash": {
    "while": 1.0
  },
  "systems crash while": {
    "records": 1.0
  },
  "crash while records": {
    "are": 1.0
  },
  "while records are": {
    "held": 1.0
  },
  "records are held": {
    "correcting": 1.0
  },
  "are held correcting": {
    "that": 1.0
  },
  "held correcting that": {
    "situation": 1.0
  },
  "correcting that situation": {
    "could": 1.0
  },
  "that situation could": {
    "involve": 1.0
  },
  "situation could involve": {
    "some": 1.0
  },
  "could involve some": {
    "manual": 1.0
  },
  "involve some manual": {
    "work": 1.0
  },
  "some manual work": {
    "with": 1.0
  },
  "manual work with": {
    "file": 1.0
  },
  "work with file": {
    "system": 1.0
  },
  "with file system": {
    "utilities": 1.0
  },
  "file system utilities": {
    "or": 1.0
  },
  "system utilities or": {
    "could": 1.0
  },
  "utilities or could": {
    "simply": 1.0
  },
  "or could simply": {
    "be": 1.0
  },
  "could simply be": {
    "a": 1.0
  },
  "simply be a": {
    "matter": 1.0
  },
  "be a matter": {
    "of": 1.0
  },
  "matter of specific": {
    "coding": 1.0
  },
  "of specific coding": {
    "considerations": 1.0
  },
  "specific coding considerations": {
    "for": 1.0
  },
  "coding considerations for": {
    "the": 1.0
  },
  "considerations for the": {
    "file": 1.0
  },
  "system being us": {
    "ed": 1.0
  },
  "being us ed": {
    "another": 1.0
  },
  "us ed another": {
    "concern": 1.0
  },
  "ed another concern": {
    "with": 1.0
  },
  "another concern with": {
    "using": 1.0
  },
  "concern with using": {
    "hold": 1.0
  },
  "with using hold": {
    "this": 1.0
  },
  "using hold this": {
    "way": 1.0
  },
  "hold this way": {
    "comes": 1.0
  },
  "this way comes": {
    "when": 1.0
  },
  "way comes when": {
    "the": 1.0
  },
  "comes when the": {
    "file": 1.0
  },
  "being used does": {
    "not": 1.0
  },
  "used does not": {
    "allow": 1.0
  },
  "does not allow": {
    "other": 1.0
  },
  "not allow other": {
    "users": 1.0
  },
  "allow other users": {
    "to": 1.0
  },
  "read the held": {
    "records": 1.0
  },
  "the held records": {
    "the": 0.5,
    "would": 0.5
  },
  "held records the": {
    "held": 1.0
  },
  "records the held": {
    "records": 1.0
  },
  "held records would": {
    "seem": 1.0
  },
  "records would seem": {
    "to": 1.0
  },
  "would seem to": {
    "disappear": 1.0
  },
  "seem to disappear": {
    "then": 1.0
  },
  "to disappear then": {
    "reappear": 1.0
  },
  "disappear then reappear": {
    "from": 1.0
  },
  "then reappear from": {
    "time": 1.0
  },
  "reappear from time": {
    "to": 1.0
  },
  "from time to": {
    "time": 1.0
  },
  "time to time": {
    "as": 1.0
  },
  "to time as": {
    "users": 1.0
  },
  "time as users": {
    "hold": 1.0
  },
  "as users hold": {
    "records": 1.0
  },
  "users hold records": {
    "either": 1.0
  },
  "hold records either": {
    "way": 1.0
  },
  "records either way": {
    "this": 1.0
  },
  "either way this": {
    "met": 1.0
  },
  "way this met": {
    "hod": 1.0
  },
  "this met hod": {
    "should": 1.0
  },
  "met hod should": {
    "probably": 1.0
  },
  "hod should probably": {
    "not": 1.0
  },
  "should probably not": {
    "be": 1.0
  },
  "probably not be": {
    "used": 1.0
  },
  "be used unless": {
    "the": 1.0
  },
  "used unless the": {
    "application": 1.0
  },
  "unless the application": {
    "really": 1.0
  },
  "the application really": {
    "requires": 1.0
  },
  "application really requires": {
    "it": 1.0
  },
  "really requires it": {
    "to": 1.0
  },
  "requires it to": {
    "utilize": 1.0
  },
  "it to utilize": {
    "this": 1.0
  },
  "to utilize this": {
    "technique": 1.0
  },
  "utilize this technique": {
    "the": 1.0
  },
  "this technique the": {
    "hold": 1.0
  },
  "technique the hold": {
    "would": 1.0
  },
  "the hold would": {
    "have": 1.0
  },
  "hold would have": {
    "to": 1.0
  },
  "have to be": {
    "in": 0.5,
    "processed": 0.5
  },
  "to be in": {
    "the": 1.0
  },
  "procedure which actually": {
    "retrieves": 1.0
  },
  "which actually retrieves": {
    "the": 1.0
  },
  "actually retrieves the": {
    "record": 1.0
  },
  "retrieves the record": {
    "from": 1.0
  },
  "file in most": {
    "cases": 1.0
  },
  "in most cases": {
    "that": 1.0
  },
  "most cases that": {
    "procedure": 1.0
  },
  "cases that procedure": {
    "would": 1.0
  },
  "that procedure would": {
    "display": 1.0
  },
  "procedure would display": {
    "some": 1.0
  },
  "would display some": {
    "kind": 1.0
  },
  "display some kind": {
    "of": 1.0
  },
  "kind of scr": {
    "olling": 1.0
  },
  "of scr olling": {
    "list": 1.0
  },
  "scr olling list": {
    "of": 1.0
  },
  "olling list of": {
    "records": 1.0
  },
  "list of records": {
    "usually": 1.0
  },
  "of records usually": {
    "displayed": 1.0
  },
  "records usually displayed": {
    "in": 1.0
  },
  "usually displayed in": {
    "a": 1.0
  },
  "displayed in a": {
    "list": 1.0
  },
  "in a list": {
    "box": 1.0
  },
  "a list box": {
    "the": 1.0
  },
  "list box the": {
    "following": 1.0
  },
  "box the following": {
    "example": 1.0
  },
  "the following example": {
    "code": 1.0
  },
  "following example code": {
    "demonstrates": 1.0
  },
  "code demonstrates this": {
    "of": 1.0
  },
  "demonstrates this of": {
    "list": 1.0
  },
  "this of list": {
    "list": 1.0
  },
  "of list list": {
    "case": 1.0
  },
  "list list case": {
    "event": 1.0
  },
  "list case event": {
    "of": 1.0
  },
  "case event of": {
    "event": 1.0
  },
  "event of event": {
    "accepted": 1.0
  },
  "of event accepted": {
    "an": 0.5,
    "execute": 0.5
  },
  "event accepted an": {
    "existing": 1.0
  },
  "accepted an existing": {
    "record": 1.0
  },
  "existing record was": {
    "selected": 1.0
  },
  "record was selected": {
    "get": 1.0
  },
  "was selected get": {
    "table": 1.0
  },
  "selected get table": {
    "que": 1.0
  },
  "get table que": {
    "choice": 1.0
  },
  "table que choice": {
    "get": 1.0
  },
  "que choice get": {
    "record": 1.0
  },
  "choice get record": {
    "number": 1.0
  },
  "get record number": {
    "from": 1.0
  },
  "record number from": {
    "the": 1.0
  },
  "number from the": {
    "queue": 1.0
  },
  "the queue hold": {
    "sample": 1.0
  },
  "queue hold sample": {
    "1": 1.0
  },
  "sample 1 arm": {
    "the": 1.0
  },
  "1 arm the": {
    "hold": 1.0
  },
  "arm the hold": {
    "reget": 1.0
  },
  "the hold reget": {
    "sample": 1.0
  },
  "hold reget sample": {
    "que": 1.0
  },
  "reget sample que": {
    "recposition": 1.0
  },
  "sample que recposition": {
    "and": 1.0
  },
  "que recposition and": {
    "get": 1.0
  },
  "recposition and get": {
    "the": 1.0
  },
  "and get the": {
    "record": 1.0
  },
  "file if error": {
    "record": 0.5,
    "file": 0.5
  },
  "if message held": {
    "by": 1.0
  },
  "message held by": {
    "another": 1.0
  },
  "station select list": {
    "to": 1.0
  },
  "select list to": {
    "try": 1.0
  },
  "list to try": {
    "again": 1.0
  },
  "try again cycle": {
    "else": 1.0
  },
  "again cycle else": {
    "if": 1.0
  },
  "else if no": {
    "one": 1.0
  },
  "if no one": {
    "else": 1.0
  },
  "no one else": {
    "has": 1.0
  },
  "one else has": {
    "it": 1.0
  },
  "else has it": {
    "action": 1.0
  },
  "has it action": {
    "changerec": 1.0
  },
  "it action changerec": {
    "set": 1.0
  },
  "action changerec set": {
    "up": 1.0
  },
  "changerec set up": {
    "disk": 1.0
  },
  "set up disk": {
    "action": 1.0
  },
  "up disk action": {
    "for": 1.0
  },
  "disk action for": {
    "change": 1.0
  },
  "action for change": {
    "update": 1.0
  },
  "for change update": {
    "and": 1.0
  },
  "change update and": {
    "call": 1.0
  },
  "update and call": {
    "the": 1.0
  },
  "and call the": {
    "update": 1.0
  },
  "call the update": {
    "procedure": 1.0
  },
  "update procedure end": {
    "code": 1.0
  },
  "end code to": {
    "handle": 1.0
  },
  "to handle other": {
    "keycodes": 1.0
  },
  "handle other keycodes": {
    "goes": 1.0
  },
  "other keycodes goes": {
    "here": 1.0
  },
  "keycodes goes here": {
    "end": 1.0
  },
  "goes here end": {
    "this": 1.0
  },
  "here end this": {
    "technique": 0.5,
    "code": 0.5
  },
  "end this technique": {
    "grossly": 1.0
  },
  "this technique grossly": {
    "simplifies": 1.0
  },
  "technique grossly simplifies": {
    "the": 1.0
  },
  "grossly simplifies the": {
    "update": 1.0
  },
  "simplifies the update": {
    "procedure": 1.0
  },
  "procedure code as": {
    "in": 1.0
  },
  "code as in": {
    "this": 1.0
  },
  "this example update": {
    "procedure": 1.0
  },
  "example update procedure": {
    "an": 1.0
  },
  "data entry controls": {
    "go": 1.0
  },
  "entry controls go": {
    "here": 1.0
  },
  "controls go here": {
    "end": 1.0
  },
  "here end code": {
    "open": 1.0
  },
  "end code open": {
    "screen": 0.25,
    "sample": 0.25,
    "myview": 0.5
  },
  "open screen display": {
    "display": 1.0
  },
  "screen display display": {
    "the": 1.0
  },
  "loop case field": {
    "individual": 1.0
  },
  "case field individual": {
    "screen": 1.0
  },
  "field individual screen": {
    "field": 1.0
  },
  "completion field case": {
    "event": 1.0
  },
  "field case event": {
    "of": 1.0
  },
  "event accepted execute": {
    "ac": 1.0
  },
  "accepted execute ac": {
    "tion": 1.0
  },
  "execute ac tion": {
    "execute": 1.0
  },
  "ac tion execute": {
    "disk": 1.0
  },
  "tion execute disk": {
    "write": 1.0
  },
  "and case clarion": {
    "language": 1.0
  },
  "case clarion language": {
    "programming": 1.0
  },
  "programming guide 62": {
    "the": 1.0
  },
  "guide 62 the": {
    "hold": 1.0
  },
  "62 the hold": {
    "statement": 1.0
  },
  "hold statement only": {
    "allows": 1.0
  },
  "statement only allows": {
    "each": 1.0
  },
  "only allows each": {
    "user": 1.0
  },
  "allows each user": {
    "to": 1.0
  },
  "each user to": {
    "hold": 1.0
  },
  "user to hold": {
    "one": 0.5,
    "a": 0.5
  },
  "to hold one": {
    "record": 1.0
  },
  "hold one record": {
    "in": 1.0
  },
  "record in ea": {
    "ch": 1.0
  },
  "in ea ch": {
    "file": 1.0
  },
  "ea ch file": {
    "if": 1.0
  },
  "ch file if": {
    "you": 1.0
  },
  "need to update": {
    "multiple": 1.0
  },
  "to update multiple": {
    "records": 1.0
  },
  "update multiple records": {
    "in": 1.0
  },
  "one file and": {
    "you": 1.0
  },
  "file and you": {
    "must": 1.0
  },
  "and you must": {
    "be": 1.0
  },
  "you must be": {
    "sure": 1.0
  },
  "must be sure": {
    "that": 1.0
  },
  "be sure that": {
    "no": 1.0
  },
  "sure that no": {
    "other": 1.0
  },
  "that no other": {
    "user": 1.0
  },
  "no other user": {
    "makes": 0.5,
    "can": 0.5
  },
  "other user makes": {
    "changes": 1.0
  },
  "user makes changes": {
    "to": 1.0
  },
  "makes changes to": {
    "those": 1.0
  },
  "changes to those": {
    "records": 1.0
  },
  "to those records": {
    "while": 1.0
  },
  "those records while": {
    "they": 1.0
  },
  "records while they": {
    "are": 1.0
  },
  "while they are": {
    "being": 1.0
  },
  "they are being": {
    "updated": 1.0
  },
  "are being updated": {
    "then": 1.0
  },
  "being updated then": {
    "you": 1.0
  },
  "updated then you": {
    "must": 1.0
  },
  "then you must": {
    "lock": 1.0
  },
  "you must lock": {
    "the": 1.0
  },
  "must lock the": {
    "file": 1.0
  },
  "lock the file": {
    "lock": 0.5,
    "if": 0.5
  },
  "the file lock": {
    "and": 1.0
  },
  "file lock and": {
    "unlock": 0.5,
    "its": 0.5
  },
  "and unlock the": {
    "lock": 1.0
  },
  "unlock the lock": {
    "statement": 1.0
  },
  "the lock statement": {
    "pr": 1.0
  },
  "lock statement pr": {
    "events": 1.0
  },
  "statement pr events": {
    "other": 1.0
  },
  "pr events other": {
    "users": 1.0
  },
  "events other users": {
    "from": 1.0
  },
  "users from accessing": {
    "any": 1.0
  },
  "from accessing any": {
    "records": 1.0
  },
  "accessing any records": {
    "in": 1.0
  },
  "any records in": {
    "a": 1.0
  },
  "records in a": {
    "file": 1.0
  },
  "in a file": {
    "until": 0.3333333333333333,
    "and": 0.3333333333333333,
    "or": 0.3333333333333333
  },
  "a file until": {
    "you": 1.0
  },
  "file until you": {
    "unlock": 1.0
  },
  "until you unlock": {
    "it": 1.0
  },
  "you unlock it": {
    "just": 1.0
  },
  "unlock it just": {
    "like": 1.0
  },
  "it just like": {
    "hold": 1.0
  },
  "just like hold": {
    "the": 1.0
  },
  "like hold the": {
    "effect": 1.0
  },
  "hold the effect": {
    "of": 1.0
  },
  "the effect of": {
    "lock": 1.0
  },
  "effect of lock": {
    "is": 1.0
  },
  "of lock is": {
    "dependent": 1.0
  },
  "lock is dependent": {
    "upon": 1.0
  },
  "systems a system": {
    "crash": 1.0
  },
  "system crash automatic": {
    "ally": 1.0
  },
  "crash automatic ally": {
    "unlocks": 1.0
  },
  "automatic ally unlocks": {
    "the": 1.0
  },
  "ally unlocks the": {
    "file": 1.0
  },
  "unlocks the file": {
    "and": 1.0
  },
  "file and in": {
    "others": 1.0
  },
  "and in others": {
    "it": 1.0
  },
  "in others it": {
    "is": 1.0
  },
  "others it is": {
    "left": 1.0
  },
  "it is left": {
    "locked": 1.0
  },
  "is left locked": {
    "the": 1.0
  },
  "left locked the": {
    "specific": 1.0
  },
  "locked the specific": {
    "action": 1.0
  },
  "specific action lock": {
    "takes": 1.0
  },
  "action lock takes": {
    "is": 1.0
  },
  "lock takes is": {
    "described": 1.0
  },
  "takes is described": {
    "in": 1.0
  },
  "driver s documentation": {
    "because": 1.0
  },
  "s documentation because": {
    "other": 1.0
  },
  "documentation because other": {
    "users": 1.0
  },
  "because other users": {
    "are": 1.0
  },
  "other users are": {
    "completely": 0.5,
    "denied": 0.5
  },
  "users are completely": {
    "barred": 1.0
  },
  "are completely barred": {
    "from": 1.0
  },
  "completely barred from": {
    "accessing": 1.0
  },
  "barred from accessing": {
    "records": 1.0
  },
  "from accessing records": {
    "in": 1.0
  },
  "accessing records in": {
    "the": 1.0
  },
  "in the locked": {
    "file": 1.0
  },
  "the locked file": {
    "lock": 0.5,
    "cycle": 0.5
  },
  "locked file lock": {
    "is": 1.0
  },
  "file lock is": {
    "not": 0.5,
    "usually": 0.5
  },
  "lock is not": {
    "commonly": 1.0
  },
  "is not commonly": {
    "used": 1.0
  },
  "not commonly used": {
    "the": 1.0
  },
  "commonly used the": {
    "most": 0.5,
    "second": 0.5
  },
  "used the most": {
    "common": 1.0
  },
  "use of lock": {
    "would": 1.0
  },
  "of lock would": {
    "be": 1.0
  },
  "lock would be": {
    "to": 1.0
  },
  "be to build": {
    "an": 1.0
  },
  "to build an": {
    "index": 1.0
  },
  "an index prior": {
    "to": 1.0
  },
  "index prior to": {
    "using": 1.0
  },
  "prior to using": {
    "it": 1.0
  },
  "to using it": {
    "and": 1.0
  },
  "using it and": {
    "that": 1.0
  },
  "it and that": {
    "is": 1.0
  },
  "and that is": {
    "not": 1.0
  },
  "is not even": {
    "necessary": 1.0
  },
  "not even necessary": {
    "if": 1.0
  },
  "even necessary if": {
    "it": 1.0
  },
  "necessary if it": {
    "is": 1.0
  },
  "it is a": {
    "dynamic": 1.0
  },
  "is a dynamic": {
    "index": 1.0
  },
  "dynamic index the": {
    "type": 1.0
  },
  "index the type": {
    "of": 1.0
  },
  "type of batch": {
    "update": 1.0
  },
  "of batch update": {
    "processing": 1.0
  },
  "batch update processing": {
    "that": 1.0
  },
  "update processing that": {
    "would": 1.0
  },
  "processing that would": {
    "require": 1.0
  },
  "that would require": {
    "a": 1.0
  },
  "would require a": {
    "file": 1.0
  },
  "require a file": {
    "to": 1.0
  },
  "a file to": {
    "be": 1.0
  },
  "file to be": {
    "locked": 1.0
  },
  "to be locked": {
    "for": 1.0
  },
  "be locked for": {
    "a": 1.0
  },
  "locked for a": {
    "significant": 1.0
  },
  "for a significant": {
    "period": 1.0
  },
  "a significant period": {
    "of": 1.0
  },
  "significant period of": {
    "time": 1.0
  },
  "period of time": {
    "is": 0.5,
    "d": 0.5
  },
  "of time is": {
    "generally": 1.0
  },
  "time is generally": {
    "best": 1.0
  },
  "is generally best": {
    "l": 1.0
  },
  "generally best l": {
    "eft": 1.0
  },
  "best l eft": {
    "until": 1.0
  },
  "l eft until": {
    "after": 1.0
  },
  "eft until after": {
    "hours": 1.0
  },
  "until after hours": {
    "when": 1.0
  },
  "after hours when": {
    "all": 1.0
  },
  "hours when all": {
    "users": 1.0
  },
  "when all users": {
    "are": 1.0
  },
  "all users are": {
    "gone": 1.0
  },
  "users are gone": {
    "other": 1.0
  },
  "are gone other": {
    "than": 1.0
  },
  "gone other than": {
    "to": 1.0
  },
  "other than to": {
    "build": 1.0
  },
  "than to build": {
    "an": 1.0
  },
  "an index a": {
    "file": 1.0
  },
  "index a file": {
    "lock": 1.0
  },
  "a file lock": {
    "is": 0.5,
    "then": 0.5
  },
  "lock is usually": {
    "only": 1.0
  },
  "is usually only": {
    "needed": 1.0
  },
  "usually only needed": {
    "during": 1.0
  },
  "only needed during": {
    "transaction": 1.0
  },
  "needed during transaction": {
    "processing": 1.0
  },
  "during transaction processing": {
    "which": 1.0
  },
  "transaction processing which": {
    "is": 0.5,
    "would": 0.5
  },
  "processing which is": {
    "the": 1.0
  },
  "which is the": {
    "subject": 1.0
  },
  "is the subject": {
    "of": 1.0
  },
  "the subject of": {
    "a": 1.0
  },
  "subject of a": {
    "separate": 1.0
  },
  "of a separate": {
    "essay": 1.0
  },
  "a separate essay": {
    "if": 1.0
  },
  "separate essay if": {
    "an": 1.0
  },
  "essay if an": {
    "application": 1.0
  },
  "if an application": {
    "truly": 1.0
  },
  "an application truly": {
    "demands": 1.0
  },
  "application truly demands": {
    "a": 1.0
  },
  "truly demands a": {
    "file": 1.0
  },
  "demands a file": {
    "lock": 1.0
  },
  "file lock then": {
    "the": 1.0
  },
  "lock then the": {
    "period": 1.0
  },
  "then the period": {
    "of": 1.0
  },
  "the period of": {
    "time": 1.0
  },
  "of time d": {
    "uring": 1.0
  },
  "time d uring": {
    "which": 1.0
  },
  "d uring which": {
    "the": 1.0
  },
  "uring which the": {
    "other": 1.0
  },
  "which the other": {
    "users": 1.0
  },
  "the other users": {
    "are": 1.0
  },
  "users are denied": {
    "access": 1.0
  },
  "are denied access": {
    "should": 1.0
  },
  "denied access should": {
    "be": 1.0
  },
  "access should be": {
    "kept": 1.0
  },
  "should be kept": {
    "to": 1.0
  },
  "be kept to": {
    "an": 1.0
  },
  "kept to an": {
    "absolute": 1.0
  },
  "to an absolute": {
    "minimum": 1.0
  },
  "an absolute minimum": {
    "the": 1.0
  },
  "absolute minimum the": {
    "code": 1.0
  },
  "minimum the code": {
    "between": 1.0
  },
  "the code between": {
    "the": 1.0
  },
  "code between the": {
    "file": 1.0
  },
  "between the file": {
    "lock": 1.0
  },
  "lock and its": {
    "subsequent": 1.0
  },
  "and its subsequent": {
    "unlock": 1.0
  },
  "its subsequent unlock": {
    "statement": 1.0
  },
  "subsequent unlock statement": {
    "should": 1.0
  },
  "unlock statement should": {
    "not": 1.0
  },
  "statement should not": {
    "require": 1.0
  },
  "should not require": {
    "any": 1.0
  },
  "not require any": {
    "user": 1.0
  },
  "require any user": {
    "input": 1.0
  },
  "any user input": {
    "this": 1.0
  },
  "user input this": {
    "means": 1.0
  },
  "input this means": {
    "that": 1.0
  },
  "the code should": {
    "be": 1.0
  },
  "code should be": {
    "written": 1.0
  },
  "should be written": {
    "such": 1.0
  },
  "be written such": {
    "that": 1.0
  },
  "written such that": {
    "an": 1.0
  },
  "such that an": {
    "end": 1.0
  },
  "that an end": {
    "user": 1.0
  },
  "an end user": {
    "cann": 1.0
  },
  "end user cann": {
    "ot": 1.0
  },
  "user cann ot": {
    "go": 1.0
  },
  "cann ot go": {
    "to": 1.0
  },
  "ot go to": {
    "lunch": 1.0
  },
  "go to lunch": {
    "leaving": 1.0
  },
  "to lunch leaving": {
    "a": 1.0
  },
  "lunch leaving a": {
    "file": 1.0
  },
  "leaving a file": {
    "locked": 1.0
  },
  "a file locked": {
    "specifically": 1.0
  },
  "file locked specifically": {
    "lock": 1.0
  },
  "locked specifically lock": {
    "should": 1.0
  },
  "specifically lock should": {
    "come": 1.0
  },
  "lock should come": {
    "immediately": 1.0
  },
  "should come immediately": {
    "before": 1.0
  },
  "come immediately before": {
    "the": 1.0
  },
  "immediately before the": {
    "build": 1.0
  },
  "before the build": {
    "occurs": 1.0
  },
  "the build occurs": {
    "and": 1.0
  },
  "build occurs and": {
    "the": 1.0
  },
  "occurs and the": {
    "file": 1.0
  },
  "the file should": {
    "be": 1.0
  },
  "file should be": {
    "unlocked": 1.0
  },
  "should be unlocked": {
    "as": 1.0
  },
  "be unlocked as": {
    "soon": 1.0
  },
  "unlocked as soon": {
    "as": 1.0
  },
  "as soon as": {
    "it": 1.0
  },
  "soon as it": {
    "is": 1.0
  },
  "as it is": {
    "complete": 1.0
  },
  "it is complete": {
    "reportproc": 1.0
  },
  "is complete reportproc": {
    "procedure": 1.0
  },
  "complete reportproc procedure": {
    "sample": 1.0
  },
  "reportproc procedure sample": {
    "file": 1.0
  },
  "procedure sample file": {
    "driver": 1.0
  },
  "sam field1 field2ndx": {
    "index": 1.0
  },
  "field1 field2ndx index": {
    "sam": 1.0
  },
  "sam field2 an": {
    "index": 1.0
  },
  "field2 an index": {
    "record": 1.0
  },
  "an index record": {
    "record": 1.0
  },
  "string 10 report": {
    "report": 1.0
  },
  "10 report report": {
    "report": 1.0
  },
  "report report report": {
    "declaration": 1.0
  },
  "report report declaration": {
    "statements": 1.0
  },
  "report declaration statements": {
    "go": 1.0
  },
  "declaration statements go": {
    "here": 1.0
  },
  "statements go here": {
    "end": 1.0
  },
  "lock sample 1": {
    "lock": 1.0
  },
  "sample 1 lock": {
    "the": 1.0
  },
  "1 lock the": {
    "file": 1.0
  },
  "if error file": {
    "is": 1.0
  },
  "error file is": {
    "already": 1.0
  },
  "file is already": {
    "locked": 1.0
  },
  "is already locked": {
    "check": 0.25,
    "cycle": 0.25,
    "unlock": 0.25,
    "by": 0.25
  },
  "already locked check": {
    "for": 1.0
  },
  "locked check for": {
    "other": 1.0
  },
  "for other locks": {
    "beep": 1.0
  },
  "other locks beep": {
    "alert": 1.0
  },
  "locks beep alert": {
    "the": 1.0
  },
  "user message locked": {
    "by": 1.0
  },
  "message locked by": {
    "another": 1.0
  },
  "locked by another": {
    "station": 0.3333333333333333,
    "user": 0.6666666666666666
  },
  "another station return": {
    "and": 1.0
  },
  "station return and": {
    "get": 1.0
  },
  "return and get": {
    "out": 1.0
  },
  "out end build": {
    "sam": 1.0
  },
  "end build sam": {
    "field2ndx": 1.0
  },
  "build sam field2ndx": {
    "build": 1.0
  },
  "sam field2ndx build": {
    "the": 1.0
  },
  "field2ndx build the": {
    "index": 1.0
  },
  "unlock sample unlock": {
    "the": 1.0
  },
  "sample unlock the": {
    "file": 1.0
  },
  "file open report": {
    "set": 1.0
  },
  "open report set": {
    "sam": 1.0
  },
  "report set sam": {
    "field2n": 1.0
  },
  "set sam field2n": {
    "dx": 1.0
  },
  "sam field2n dx": {
    "use": 1.0
  },
  "field2n dx use": {
    "the": 1.0
  },
  "dx use the": {
    "index": 1.0
  },
  "use the index": {
    "loop": 1.0
  },
  "the index loop": {
    "next": 1.0
  },
  "index loop next": {
    "sample": 1.0
  },
  "loop next sample": {
    "if": 1.0
  },
  "next sample if": {
    "errorcode": 1.0
  },
  "sample if errorcode": {
    "then": 1.0
  },
  "then break report": {
    "processing": 1.0
  },
  "break report processing": {
    "code": 1.0
  },
  "report processing code": {
    "goes": 1.0
  },
  "processing code goes": {
    "here": 1.0
  },
  "end this code": {
    "opens": 0.5,
    "will": 0.5
  },
  "this code opens": {
    "the": 1.0
  },
  "code opens the": {
    "file": 1.0
  },
  "file in access": {
    "mode": 1.0
  },
  "in access mode": {
    "42h": 1.0
  },
  "access mode 42h": {
    "read": 1.0
  },
  "mode 42h read": {
    "write": 1.0
  },
  "42h read write": {
    "deny": 1.0
  },
  "deny none for": {
    "fully": 1.0
  },
  "none for fully": {
    "shared": 1.0
  },
  "for fully shared": {
    "access": 1.0
  },
  "fully shared access": {
    "the": 1.0
  },
  "shared access the": {
    "lock": 1.0
  },
  "access the lock": {
    "is": 1.0
  },
  "the lock is": {
    "attempted": 1.0
  },
  "lock is attempted": {
    "for": 1.0
  },
  "is attempted for": {
    "one": 1.0
  },
  "attempted for one": {
    "second": 1.0
  },
  "for one second": {
    "if": 1.0
  },
  "one second if": {
    "it": 1.0
  },
  "second if it": {
    "is": 1.0
  },
  "it is successful": {
    "the": 1.0
  },
  "is successful the": {
    "build": 0.5,
    "lock": 0.5
  },
  "successful the build": {
    "immediately": 1.0
  },
  "the build immediately": {
    "executes": 1.0
  },
  "build immediately executes": {
    "if": 1.0
  },
  "immediately executes if": {
    "the": 1.0
  },
  "if the lock": {
    "was": 1.0
  },
  "the lock was": {
    "unsuccessful": 1.0
  },
  "lock was unsuccessful": {
    "the": 1.0
  },
  "was unsuccessful the": {
    "user": 1.0
  },
  "unsuccessful the user": {
    "is": 1.0
  },
  "is alerted and": {
    "returned": 1.0
  },
  "alerted and returned": {
    "to": 1.0
  },
  "the procedure that": {
    "called": 1.0
  },
  "procedure that called": {
    "the": 1.0
  },
  "that called the": {
    "report": 1.0
  },
  "called the report": {
    "once": 1.0
  },
  "the report once": {
    "the": 1.0
  },
  "report once the": {
    "build": 1.0
  },
  "once the build": {
    "is": 1.0
  },
  "the build is": {
    "complete": 1.0
  },
  "build is complete": {
    "unlock": 1.0
  },
  "is complete unlock": {
    "once": 1.0
  },
  "complete unlock once": {
    "again": 1.0
  },
  "unlock once again": {
    "allows": 1.0
  },
  "once again allows": {
    "other": 1.0
  },
  "again allows other": {
    "users": 1.0
  },
  "other users access": {
    "t": 1.0
  },
  "users access t": {
    "o": 1.0
  },
  "access t o": {
    "the": 1.0
  },
  "t o the": {
    "file": 1.0
  },
  "o the file": {
    "and": 1.0
  },
  "and the report": {
    "is": 1.0
  },
  "the report is": {
    "run": 1.0
  },
  "report is run": {
    "based": 1.0
  },
  "is run based": {
    "on": 1.0
  },
  "run based on": {
    "the": 1.0
  },
  "on the sort": {
    "order": 1.0
  },
  "the sort order": {
    "of": 1.0
  },
  "of the index": {
    "63": 1.0
  },
  "the index 63": {
    "developing": 1.0
  },
  "index 63 developing": {
    "client": 1.0
  },
  "63 developing client": {
    "server": 1.0
  },
  "server applications deadly": {
    "embrace": 1.0
  },
  "applications deadly embrace": {
    "there": 1.0
  },
  "deadly embrace there": {
    "are": 1.0
  },
  "embrace there are": {
    "two": 1.0
  },
  "are two forms": {
    "of": 1.0
  },
  "two forms of": {
    "deadly": 1.0
  },
  "forms of deadly": {
    "embrace": 1.0
  },
  "of deadly embrace": {
    "the": 0.5,
    "in": 0.5
  },
  "deadly embrace the": {
    "first": 1.0
  },
  "embrace the first": {
    "occurs": 1.0
  },
  "the first occurs": {
    "when": 1.0
  },
  "first occurs when": {
    "two": 1.0
  },
  "occurs when two": {
    "users": 1.0
  },
  "when two users": {
    "attempt": 1.0
  },
  "two users attempt": {
    "to": 1.0
  },
  "users attempt to": {
    "lock": 1.0
  },
  "attempt to lock": {
    "the": 1.0
  },
  "to lock the": {
    "same": 1.0
  },
  "lock the same": {
    "set": 1.0
  },
  "set of files": {
    "in": 0.5,
    "you": 0.5
  },
  "of files in": {
    "separate": 1.0
  },
  "files in separate": {
    "orders": 1.0
  },
  "in separate orders": {
    "of": 1.0
  },
  "separate orders of": {
    "sequence": 1.0
  },
  "orders of sequence": {
    "the": 1.0
  },
  "of sequence the": {
    "scenario": 1.0
  },
  "sequence the scenario": {
    "is": 1.0
  },
  "the scenario is": {
    "user": 1.0
  },
  "scenario is user": {
    "a": 1.0
  },
  "is user a": {
    "locks": 1.0
  },
  "user a locks": {
    "file": 1.0
  },
  "a locks file": {
    "a": 1.0
  },
  "locks file a": {
    "user": 1.0
  },
  "file a user": {
    "b": 1.0
  },
  "a user b": {
    "locks": 1.0
  },
  "user b locks": {
    "file": 1.0
  },
  "b locks file": {
    "b": 1.0
  },
  "locks file b": {
    "at": 1.0
  },
  "file b at": {
    "the": 1.0
  },
  "b at the": {
    "same": 1.0
  },
  "same time user": {
    "a": 1.0
  },
  "time user a": {
    "attempts": 1.0
  },
  "user a attempts": {
    "to": 1.0
  },
  "a attempts to": {
    "lock": 1.0
  },
  "attempts to lock": {
    "file": 1.0
  },
  "to lock file": {
    "b": 0.5,
    "a": 0.5
  },
  "lock file b": {
    "and": 1.0
  },
  "b and cannot": {
    "because": 1.0
  },
  "and cannot because": {
    "user": 1.0
  },
  "cannot because user": {
    "b": 0.5,
    "a": 0.5
  },
  "because user b": {
    "has": 1.0
  },
  "user b has": {
    "it": 1.0
  },
  "b has it": {
    "locked": 1.0
  },
  "has it locked": {
    "user": 0.5,
    "this": 0.5
  },
  "it locked user": {
    "b": 1.0
  },
  "locked user b": {
    "attempts": 1.0
  },
  "user b attempts": {
    "to": 1.0
  },
  "b attempts to": {
    "lock": 1.0
  },
  "lock file a": {
    "and": 1.0
  },
  "file a and": {
    "cannot": 1.0
  },
  "a and cannot": {
    "because": 1.0
  },
  "because user a": {
    "has": 1.0
  },
  "user a has": {
    "it": 1.0
  },
  "a has it": {
    "locked": 1.0
  },
  "it locked this": {
    "leaves": 1.0
  },
  "locked this leaves": {
    "both": 1.0
  },
  "this leaves both": {
    "users": 1.0
  },
  "leaves both users": {
    "hung": 1.0
  },
  "both users hung": {
    "up": 1.0
  },
  "users hung up": {
    "attem": 1.0
  },
  "hung up attem": {
    "pting": 1.0
  },
  "up attem pting": {
    "to": 1.0
  },
  "attem pting to": {
    "gain": 1.0
  },
  "pting to gain": {
    "control": 1.0
  },
  "to gain control": {
    "of": 1.0
  },
  "gain control of": {
    "the": 1.0
  },
  "of the files": {
    "the": 1.0
  },
  "the files the": {
    "solution": 1.0
  },
  "files the solution": {
    "to": 1.0
  },
  "the solution to": {
    "this": 1.0
  },
  "solution to this": {
    "dilemma": 1.0
  },
  "to this dilemma": {
    "is": 1.0
  },
  "this dilemma is": {
    "the": 1.0
  },
  "dilemma is the": {
    "adoption": 1.0
  },
  "is the adoption": {
    "of": 1.0
  },
  "the adoption of": {
    "a": 0.5,
    "co": 0.5
  },
  "adoption of a": {
    "simple": 1.0
  },
  "of a simple": {
    "coding": 1.0
  },
  "a simple coding": {
    "convention": 1.0
  },
  "simple coding convention": {
    "always": 1.0
  },
  "coding convention always": {
    "lock": 1.0
  },
  "convention always lock": {
    "files": 1.0
  },
  "always lock files": {
    "in": 1.0
  },
  "lock files in": {
    "the": 1.0
  },
  "files in the": {
    "same": 1.0
  },
  "the same order": {
    "alphabetical": 1.0
  },
  "same order alphabetical": {
    "works": 1.0
  },
  "order alphabetical works": {
    "just": 1.0
  },
  "alphabetical works just": {
    "fine": 1.0
  },
  "works just fine": {
    "and": 1.0
  },
  "just fine and": {
    "trap": 1.0
  },
  "fine and trap": {
    "for": 1.0
  },
  "and trap for": {
    "other": 1.0
  },
  "trap for other": {
    "users": 1.0
  },
  "for other users": {
    "locks": 1.0
  },
  "other users locks": {
    "this": 1.0
  },
  "users locks this": {
    "example": 1.0
  },
  "locks this example": {
    "demonstrates": 1.0
  },
  "this example demonstrates": {
    "the": 1.0
  },
  "example demonstrates the": {
    "principle": 1.0
  },
  "demonstrates the principle": {
    "loop": 1.0
  },
  "the principle loop": {
    "lock": 1.0
  },
  "principle loop lock": {
    "filea": 1.0
  },
  "loop lock filea": {
    "1": 1.0
  },
  "lock filea 1": {
    "attempt": 1.0
  },
  "filea 1 attempt": {
    "lock": 1.0
  },
  "1 attempt lock": {
    "for": 1.0
  },
  "attempt lock for": {
    "1": 1.0
  },
  "lock for 1": {
    "second": 1.0
  },
  "for 1 second": {
    "if": 1.0
  },
  "1 second if": {
    "error": 1.0
  },
  "second if error": {
    "file": 1.0
  },
  "already locked cycle": {
    "and": 1.0
  },
  "locked cycle and": {
    "try": 1.0
  },
  "cycle and try": {
    "again": 1.0
  },
  "and try again": {
    "end": 1.0
  },
  "try again end": {
    "lock": 0.5,
    "break": 0.5
  },
  "again end lock": {
    "fileb": 1.0
  },
  "end lock fileb": {
    "1": 1.0
  },
  "lock fileb 1": {
    "attempt": 1.0
  },
  "fileb 1 attempt": {
    "lock": 1.0
  },
  "already locked unlock": {
    "filea": 1.0
  },
  "locked unlock filea": {
    "unlock": 1.0
  },
  "unlock filea unlock": {
    "the": 1.0
  },
  "filea unlock the": {
    "locked": 1.0
  },
  "unlock the locked": {
    "file": 1.0
  },
  "locked file cycle": {
    "and": 1.0
  },
  "file cycle and": {
    "try": 1.0
  },
  "again end break": {
    "break": 1.0
  },
  "end break break": {
    "from": 1.0
  },
  "break break from": {
    "loop": 1.0
  },
  "break from loop": {
    "when": 1.0
  },
  "from loop when": {
    "both": 1.0
  },
  "loop when both": {
    "locked": 1.0
  },
  "when both locked": {
    "end": 1.0
  },
  "both locked end": {
    "this": 1.0
  },
  "locked end this": {
    "code": 1.0
  },
  "this code will": {
    "ev": 1.0
  },
  "code will ev": {
    "entually": 1.0
  },
  "will ev entually": {
    "lock": 1.0
  },
  "ev entually lock": {
    "both": 1.0
  },
  "entually lock both": {
    "files": 1.0
  },
  "lock both files": {
    "if": 1.0
  },
  "both files if": {
    "filea": 1.0
  },
  "files if filea": {
    "is": 1.0
  },
  "if filea is": {
    "already": 1.0
  },
  "filea is already": {
    "locked": 1.0
  },
  "already locked by": {
    "another": 1.0
  },
  "by another user": {
    "the": 0.5,
    "filea": 0.5
  },
  "another user the": {
    "loop": 1.0
  },
  "user the loop": {
    "will": 1.0
  },
  "the loop will": {
    "try": 1.0
  },
  "loop will try": {
    "again": 1.0
  },
  "will try again": {
    "the": 1.0
  },
  "try again the": {
    "one": 1.0
  },
  "again the one": {
    "second": 1.0
  },
  "the one second": {
    "pause": 1.0
  },
  "one second pause": {
    "allows": 1.0
  },
  "second pause allows": {
    "the": 1.0
  },
  "pause allows the": {
    "other": 1.0
  },
  "allows the other": {
    "user": 1.0
  },
  "other user a": {
    "chance": 1.0
  },
  "user a chance": {
    "to": 1.0
  },
  "a chance to": {
    "complete": 1.0
  },
  "chance to complete": {
    "their": 1.0
  },
  "to complete their": {
    "action": 1.0
  },
  "complete their action": {
    "if": 1.0
  },
  "their action if": {
    "the": 1.0
  },
  "action if the": {
    "first": 1.0
  },
  "if the first": {
    "lock": 1.0
  },
  "the first lock": {
    "is": 1.0
  },
  "first lock is": {
    "successful": 1.0
  },
  "lock is successful": {
    "the": 1.0
  },
  "successful the lock": {
    "on": 1.0
  },
  "the lock on": {
    "fileb": 1.0
  },
  "lock on fileb": {
    "is": 1.0
  },
  "on fileb is": {
    "attempted": 1.0
  },
  "fileb is attempted": {
    "if": 1.0
  },
  "is attempted if": {
    "fileb": 1.0
  },
  "attempted if fileb": {
    "is": 1.0
  },
  "if fileb is": {
    "alread": 1.0
  },
  "fileb is alread": {
    "y": 1.0
  },
  "is alread y": {
    "locked": 1.0
  },
  "alread y locked": {
    "by": 1.0
  },
  "y locked by": {
    "another": 1.0
  },
  "another user filea": {
    "is": 1.0
  },
  "user filea is": {
    "immediately": 1.0
  },
  "filea is immediately": {
    "unlocked": 1.0
  },
  "is immediately unlocked": {
    "for": 1.0
  },
  "immediately unlocked for": {
    "other": 1.0
  },
  "unlocked for other": {
    "user": 1.0
  },
  "user s use": {
    "then": 1.0
  },
  "s use then": {
    "re": 1.0
  },
  "use then re": {
    "try": 1.0
  },
  "then re try": {
    "sequence": 1.0
  },
  "re try sequence": {
    "occurs": 1.0
  },
  "try sequence occurs": {
    "again": 1.0
  },
  "sequence occurs again": {
    "the": 1.0
  },
  "occurs again the": {
    "break": 1.0
  },
  "again the break": {
    "from": 1.0
  },
  "the break from": {
    "the": 1.0
  },
  "break from the": {
    "loop": 1.0
  },
  "from the loop": {
    "in": 1.0
  },
  "the loop in": {
    "this": 1.0
  },
  "loop in this": {
    "example": 1.0
  },
  "this example is": {
    "only": 1.0
  },
  "example is only": {
    "allowed": 1.0
  },
  "only allowed after": {
    "both": 1.0
  },
  "allowed after both": {
    "files": 1.0
  },
  "after both files": {
    "are": 1.0
  },
  "both files are": {
    "successfully": 1.0
  },
  "files are successfully": {
    "locked": 1.0
  },
  "are successfully locked": {
    "mixing": 1.0
  },
  "successfully locked mixing": {
    "the": 1.0
  },
  "locked mixing the": {
    "use": 1.0
  },
  "mixing the use": {
    "of": 1.0
  },
  "of hold and": {
    "lock": 1.0
  },
  "hold and lock": {
    "can": 0.5,
    "on": 0.5
  },
  "and lock can": {
    "result": 1.0
  },
  "lock can result": {
    "in": 1.0
  },
  "can result in": {
    "the": 1.0
  },
  "result in the": {
    "second": 1.0
  },
  "the second form": {
    "of": 1.0
  },
  "second form of": {
    "deadly": 1.0
  },
  "form of deadly": {
    "embrace": 1.0
  },
  "deadly embrace in": {
    "some": 1.0
  },
  "embrace in some": {
    "file": 1.0
  },
  "file systems lock": {
    "and": 1.0
  },
  "systems lock and": {
    "hold": 1.0
  },
  "lock and hold": {
    "are": 1.0
  },
  "and hold are": {
    "completely": 1.0
  },
  "hold are completely": {
    "independent": 1.0
  },
  "are completely independent": {
    "therefore": 1.0
  },
  "completely independent therefore": {
    "it": 1.0
  },
  "independent therefore it": {
    "is": 1.0
  },
  "is possible for": {
    "one": 1.0
  },
  "for one user": {
    "to": 1.0
  },
  "one user to": {
    "hold": 1.0
  },
  "to hold a": {
    "record": 1.0
  },
  "a record in": {
    "a": 1.0
  },
  "a file and": {
    "another": 1.0
  },
  "file and another": {
    "user": 1.0
  },
  "and another user": {
    "to": 1.0
  },
  "another user to": {
    "lock": 1.0
  },
  "user to lock": {
    "that": 1.0
  },
  "to lock that": {
    "same": 1.0
  },
  "lock that same": {
    "file": 1.0
  },
  "that same file": {
    "the": 1.0
  },
  "file the user": {
    "with": 1.0
  },
  "the user with": {
    "the": 1.0
  },
  "user with the": {
    "hold": 0.5,
    "lock": 0.5
  },
  "with the hold": {
    "cannot": 1.0
  },
  "the hold cannot": {
    "write": 1.0
  },
  "hold cannot write": {
    "the": 1.0
  },
  "cannot write the": {
    "record": 1.0
  },
  "record back or": {
    "even": 1.0
  },
  "back or even": {
    "release": 1.0
  },
  "or even release": {
    "it": 1.0
  },
  "even release it": {
    "and": 1.0
  },
  "release it and": {
    "the": 1.0
  },
  "it and the": {
    "user": 1.0
  },
  "and the user": {
    "with": 1.0
  },
  "with the lock": {
    "cannot": 1.0
  },
  "the lock cannot": {
    "write": 1.0
  },
  "lock cannot write": {
    "to": 1.0
  },
  "cannot write to": {
    "that": 1.0
  },
  "to that held": {
    "record": 1.0
  },
  "that held record": {
    "this": 1.0
  },
  "held record this": {
    "situation": 1.0
  },
  "record this situation": {
    "may": 1.0
  },
  "this situation may": {
    "be": 1.0
  },
  "situation may be": {
    "resolved": 1.0
  },
  "may be resolved": {
    "in": 1.0
  },
  "resolved in one": {
    "of": 1.0
  },
  "in one of": {
    "two": 1.0
  },
  "one of two": {
    "ways": 1.0
  },
  "of two ways": {
    "you": 1.0
  },
  "two ways you": {
    "may": 1.0
  },
  "ways you may": {
    "choose": 1.0
  },
  "you may choose": {
    "to": 1.0
  },
  "may choose to": {
    "never": 0.5,
    "always": 0.5
  },
  "choose to never": {
    "mix": 1.0
  },
  "to never mix": {
    "hold": 1.0
  },
  "never mix hold": {
    "and": 1.0
  },
  "mix hold and": {
    "lock": 1.0
  },
  "and lock on": {
    "the": 1.0
  },
  "lock on the": {
    "same": 1.0
  },
  "same file this": {
    "limits": 1.0
  },
  "file this limits": {
    "you": 1.0
  },
  "this limits you": {
    "to": 1.0
  },
  "limits you to": {
    "the": 1.0
  },
  "you to the": {
    "use": 1.0
  },
  "to the use": {
    "of": 1.0
  },
  "of hold only": {
    "the": 1.0
  },
  "hold only the": {
    "most": 1.0
  },
  "only the most": {
    "commo": 1.0
  },
  "the most commo": {
    "n": 1.0
  },
  "most commo n": {
    "solution": 1.0
  },
  "commo n solution": {
    "or": 1.0
  },
  "n solution or": {
    "lock": 1.0
  },
  "solution or lock": {
    "only": 1.0
  },
  "or lock only": {
    "this": 1.0
  },
  "lock only this": {
    "solution": 1.0
  },
  "only this solution": {
    "must": 1.0
  },
  "this solution must": {
    "be": 1.0
  },
  "solution must be": {
    "used": 1.0
  },
  "must be used": {
    "in": 1.0
  },
  "used in all": {
    "applications": 1.0
  },
  "in all applications": {
    "that": 1.0
  },
  "all applications that": {
    "write": 1.0
  },
  "applications that write": {
    "to": 1.0
  },
  "that write to": {
    "a": 1.0
  },
  "write to a": {
    "common": 1.0
  },
  "to a common": {
    "set": 1.0
  },
  "a common set": {
    "of": 1.0
  },
  "common set of": {
    "files": 1.0
  },
  "of files you": {
    "may": 1.0
  },
  "files you may": {
    "choose": 1.0
  },
  "choose to always": {
    "trap": 1.0
  },
  "to always trap": {
    "for": 1.0
  },
  "always trap for": {
    "held": 1.0
  },
  "trap for held": {
    "records": 1.0
  },
  "for held records": {
    "while": 1.0
  },
  "held records while": {
    "the": 1.0
  },
  "records while the": {
    "file": 1.0
  },
  "while the file": {
    "is": 1.0
  },
  "file is locked": {
    "this": 1.0
  },
  "is locked this": {
    "implies": 1.0
  },
  "locked this implies": {
    "that": 1.0
  },
  "this implies that": {
    "you": 1.0
  },
  "implies that you": {
    "know": 1.0
  },
  "that you know": {
    "how": 1.0
  },
  "you know how": {
    "you": 1.0
  },
  "know how you": {
    "want": 1.0
  },
  "how you want": {
    "to": 1.0
  },
  "you want to": {
    "deal": 1.0
  },
  "want to deal": {
    "with": 1.0
  },
  "deal with the": {
    "deadly": 1.0
  },
  "with the deadly": {
    "embrace": 1.0
  },
  "the deadly embrace": {
    "record": 0.5,
    "is": 0.5
  },
  "deadly embrace record": {
    "when": 1.0
  },
  "embrace record when": {
    "it": 1.0
  },
  "it is detected": {
    "the": 1.0
  },
  "is detected the": {
    "first": 1.0
  },
  "detected the first": {
    "solution": 1.0
  },
  "the first solution": {
    "is": 1.0
  },
  "first solution is": {
    "by": 1.0
  },
  "solution is by": {
    "far": 1.0
  },
  "is by far": {
    "the": 1.0
  },
  "far the more": {
    "commonly": 1.0
  },
  "the more commonly": {
    "used": 1.0
  },
  "more commonly used": {
    "the": 1.0
  },
  "used the second": {
    "takes": 1.0
  },
  "the second takes": {
    "you": 1.0
  },
  "second takes you": {
    "into": 1.0
  },
  "takes you into": {
    "an": 1.0
  },
  "you into an": {
    "area": 1.0
  },
  "into an area": {
    "of": 1.0
  },
  "an area of": {
    "programming": 1.0
  },
  "area of programming": {
    "that": 1.0
  },
  "of programming that": {
    "is": 1.0
  },
  "programming that is": {
    "probably": 1.0
  },
  "that is probably": {
    "better": 1.0
  },
  "is probably better": {
    "served": 1.0
  },
  "probably better served": {
    "by": 1.0
  },
  "better served by": {
    "transaction": 1.0
  },
  "served by transaction": {
    "processing": 1.0
  },
  "by transaction processing": {
    "which": 1.0
  },
  "processing which would": {
    "include": 1.0
  },
  "which would include": {
    "held": 1.0
  },
  "would include held": {
    "record": 1.0
  },
  "include held record": {
    "trapping": 1.0
  },
  "held record trapping": {
    "one": 1.0
  },
  "record trapping one": {
    "final": 1.0
  },
  "trapping one final": {
    "note": 1.0
  },
  "one final note": {
    "some": 1.0
  },
  "final note some": {
    "file": 1.0
  },
  "note some file": {
    "drivers": 1.0
  },
  "some file drivers": {
    "can": 1.0
  },
  "file drivers can": {
    "perform": 1.0
  },
  "drivers can perform": {
    "exclusive": 1.0
  },
  "can perform exclusive": {
    "locks": 1.0
  },
  "perform exclusive locks": {
    "internally": 1.0
  },
  "exclusive locks internally": {
    "on": 1.0
  },
  "locks internally on": {
    "update": 1.0
  },
  "internally on update": {
    "operations": 1.0
  },
  "on update operations": {
    "and": 1.0
  },
  "update operations and": {
    "stream": 1.0
  },
  "operations and stream": {
    "the": 1.0
  },
  "and stream the": {
    "use": 1.0
  },
  "stream the use": {
    "of": 1.0
  },
  "use of a": {
    "stream": 1.0
  },
  "of a stream": {
    "statement": 1.0
  },
  "a stream statement": {
    "is": 1.0
  },
  "stream statement is": {
    "not": 1.0
  },
  "statement is not": {
    "safe": 1.0
  },
  "is not safe": {
    "from": 1.0
  },
  "not safe from": {
    "deadlock": 1.0
  },
  "safe from deadlock": {
    "on": 1.0
  },
  "from deadlock on": {
    "multiple": 1.0
  },
  "deadlock on multiple": {
    "files": 1.0
  },
  "on multiple files": {
    "for": 1.0
  },
  "multiple files for": {
    "write": 1.0
  },
  "files for write": {
    "operations": 1.0
  },
  "for write operations": {
    "you": 1.0
  },
  "write operations you": {
    "should": 1.0
  },
  "operations you should": {
    "use": 1.0
  },
  "you should use": {
    "logout": 1.0
  },
  "should use logout": {
    "instead": 1.0
  },
  "use logout instead": {
    "of": 1.0
  },
  "logout instead of": {
    "lock": 1.0
  },
  "instead of lock": {
    "in": 1.0
  },
  "of lock in": {
    "these": 1.0
  },
  "lock in these": {
    "situations": 1.0
  },
  "in these situations": {
    "clarion": 1.0
  },
  "these situations clarion": {
    "language": 1.0
  },
  "situations clarion language": {
    "programming": 1.0
  },
  "programming guide 64": {
    "summary": 1.0
  },
  "guide 64 summary": {
    "a": 1.0
  },
  "64 summary a": {
    "file": 1.0
  },
  "summary a file": {
    "must": 1.0
  },
  "a file must": {
    "be": 1.0
  },
  "must be opened": {
    "before": 1.0
  },
  "be opened before": {
    "its": 1.0
  },
  "opened before its": {
    "records": 1.0
  },
  "before its records": {
    "may": 1.0
  },
  "its records may": {
    "be": 1.0
  },
  "records may be": {
    "accessed": 1.0
  },
  "be accessed the": {
    "access": 1.0
  },
  "accessed the access": {
    "mode": 1.0
  },
  "access mode determines": {
    "the": 1.0
  },
  "mode determines the": {
    "type": 1.0
  },
  "determines the type": {
    "of": 1.0
  },
  "of access dos": {
    "grants": 1.0
  },
  "access dos grants": {
    "to": 1.0
  },
  "dos grants to": {
    "the": 1.0
  },
  "grants to the": {
    "user": 1.0
  },
  "file and any": {
    "other": 1.0
  },
  "and any other": {
    "users": 1.0
  },
  "any other users": {
    "multi": 1.0
  },
  "other users multi": {
    "user": 1.0
  },
  "users multi user": {
    "programming": 1.0
  },
  "multi user programming": {
    "must": 1.0
  },
  "user programming must": {
    "always": 1.0
  },
  "programming must always": {
    "take": 1.0
  },
  "must always take": {
    "into": 1.0
  },
  "always take into": {
    "consideration": 1.0
  },
  "take into consideration": {
    "the": 1.0
  },
  "into consideration the": {
    "possibility": 1.0
  },
  "consideration the possibility": {
    "of": 1.0
  },
  "the possibility of": {
    "multiple": 0.5,
    "an": 0.5
  },
  "possibility of multiple": {
    "users": 1.0
  },
  "of multiple users": {
    "accessing": 1.0
  },
  "multiple users accessing": {
    "the": 1.0
  },
  "users accessing the": {
    "same": 1.0
  },
  "accessing the same": {
    "record": 1.0
  },
  "same time concurrency": {
    "checking": 1.0
  },
  "time concurrency checking": {
    "is": 1.0
  },
  "concurrency checking is": {
    "done": 1.0
  },
  "checking is done": {
    "to": 1.0
  },
  "is done to": {
    "ensure": 1.0
  },
  "done to ensure": {
    "that": 1.0
  },
  "ensure that user": {
    "updates": 1.0
  },
  "that user updates": {
    "don": 1.0
  },
  "user updates don": {
    "t": 1.0
  },
  "updates don t": {
    "overwrite": 1.0
  },
  "don t overwrite": {
    "other": 1.0
  },
  "t overwrite other": {
    "user": 1.0
  },
  "overwrite other user": {
    "s": 1.0
  },
  "to the records": {
    "hold": 1.0
  },
  "the records hold": {
    "is": 1.0
  },
  "records hold is": {
    "most": 1.0
  },
  "hold is most": {
    "commonly": 1.0
  },
  "is most commonly": {
    "used": 1.0
  },
  "commonly used in": {
    "conjunction": 1.0
  },
  "used in conjunction": {
    "with": 1.0
  },
  "conjunction with concurrency": {
    "checking": 1.0
  },
  "with concurrency checking": {
    "to": 1.0
  },
  "concurrency checking to": {
    "ensure": 1.0
  },
  "checking to ensure": {
    "that": 1.0
  },
  "ensure that no": {
    "other": 1.0
  },
  "other user can": {
    "c": 1.0
  },
  "user can c": {
    "hange": 1.0
  },
  "can c hange": {
    "the": 1.0
  },
  "c hange the": {
    "record": 1.0
  },
  "hange the record": {
    "while": 1.0
  },
  "the record while": {
    "it": 1.0
  },
  "is being compared": {
    "for": 1.0
  },
  "being compared for": {
    "previous": 1.0
  },
  "compared for previous": {
    "changes": 1.0
  },
  "for previous changes": {
    "lock": 1.0
  },
  "previous changes lock": {
    "is": 1.0
  },
  "changes lock is": {
    "most": 1.0
  },
  "lock is most": {
    "commonly": 1.0
  },
  "commonly used to": {
    "gain": 1.0
  },
  "used to gain": {
    "exclusive": 1.0
  },
  "to gain exclusive": {
    "control": 1.0
  },
  "gain exclusive control": {
    "of": 1.0
  },
  "exclusive control of": {
    "a": 1.0
  },
  "control of a": {
    "file": 1.0
  },
  "a file while": {
    "you": 1.0
  },
  "file while you": {
    "build": 1.0
  },
  "while you build": {
    "an": 1.0
  },
  "you build an": {
    "index": 1.0
  },
  "an index the": {
    "deadly": 1.0
  },
  "index the deadly": {
    "embrace": 1.0
  },
  "deadly embrace is": {
    "a": 1.0
  },
  "embrace is a": {
    "programming": 1.0
  },
  "is a programming": {
    "consideration": 1.0
  },
  "a programming consideration": {
    "most": 1.0
  },
  "programming consideration most": {
    "easily": 1.0
  },
  "consideration most easily": {
    "dealt": 1.0
  },
  "most easily dealt": {
    "with": 1.0
  },
  "easily dealt with": {
    "through": 1.0
  },
  "dealt with through": {
    "the": 1.0
  },
  "with through the": {
    "adoption": 1.0
  },
  "through the adoption": {
    "of": 1.0
  },
  "adoption of co": {
    "nsistent": 1.0
  },
  "of co nsistent": {
    "program": 1.0
  },
  "co nsistent program": {
    "coding": 1.0
  },
  "nsistent program coding": {
    "conventions": 1.0
  },
  "program coding conventions": {
    "65": 1.0
  },
  "coding conventions 65": {
    "developing": 1.0
  },
  "conventions 65 developing": {
    "client": 1.0
  },
  "65 developing client": {
    "server": 1.0
  },
  "server applications 7": {
    "developing": 1.0
  },
  "applications 7 developing": {
    "client": 1.0
  },
  "server applications introduction": {
    "to": 1.0
  },
  "applications introduction to": {
    "client": 1.0
  },
  "client server client": {
    "server": 1.0
  },
  "server client server": {
    "defined": 1.0
  },
  "server defined what": {
    "exactly": 1.0
  },
  "defined what exactly": {
    "constitutes": 1.0
  },
  "what exactly constitutes": {
    "client": 1.0
  },
  "exactly constitutes client": {
    "server": 1.0
  },
  "constitutes client server": {
    "computing": 1.0
  },
  "client server computing": {
    "to": 0.16666666666666666,
    "comes": 0.16666666666666666,
    "is": 0.16666666666666666,
    "that": 0.16666666666666666,
    "programmatic": 0.16666666666666666,
    "therefore": 0.16666666666666666
  },
  "server computing to": {
    "some": 1.0
  },
  "computing to some": {
    "it": 1.0
  },
  "to some it": {
    "indicates": 1.0
  },
  "some it indicates": {
    "the": 1.0
  },
  "it indicates the": {
    "use": 1.0
  },
  "indicates the use": {
    "of": 1.0
  },
  "use of groupware": {
    "programs": 1.0
  },
  "of groupware programs": {
    "such": 1.0
  },
  "groupware programs such": {
    "as": 1.0
  },
  "programs such as": {
    "lotus": 1.0
  },
  "such as lotus": {
    "notes": 1.0
  },
  "as lotus notes": {
    "or": 1.0
  },
  "lotus notes or": {
    "object": 1.0
  },
  "notes or object": {
    "linking": 1.0
  },
  "or object linking": {
    "and": 1.0
  },
  "object linking and": {
    "embedding": 1.0
  },
  "linking and embedding": {
    "ole": 1.0
  },
  "and embedding ole": {
    "between": 1.0
  },
  "embedding ole between": {
    "ole": 1.0
  },
  "ole between ole": {
    "client": 1.0
  },
  "between ole client": {
    "and": 1.0
  },
  "ole client and": {
    "ole": 1.0
  },
  "client and ole": {
    "server": 1.0
  },
  "and ole server": {
    "applications": 1.0
  },
  "ole server applications": {
    "or": 1.0
  },
  "server applications or": {
    "just": 1.0
  },
  "applications or just": {
    "any": 1.0
  },
  "or just any": {
    "program": 1.0
  },
  "just any program": {
    "that": 1.0
  },
  "any program that": {
    "splits": 1.0
  },
  "program that splits": {
    "task": 1.0
  },
  "that splits task": {
    "completion": 1.0
  },
  "splits task completion": {
    "between": 1.0
  },
  "task completion between": {
    "client": 1.0
  },
  "completion between client": {
    "workstations": 1.0
  },
  "between client workstations": {
    "and": 1.0
  },
  "client workstations and": {
    "network": 0.5,
    "the": 0.5
  },
  "workstations and network": {
    "servers": 1.0
  },
  "and network servers": {
    "there": 1.0
  },
  "network servers there": {
    "are": 1.0
  },
  "servers there are": {
    "also": 1.0
  },
  "are also many": {
    "buzzwords": 1.0
  },
  "also many buzzwords": {
    "that": 1.0
  },
  "many buzzwords that": {
    "go": 1.0
  },
  "buzzwords that go": {
    "along": 1.0
  },
  "that go along": {
    "with": 1.0
  },
  "go along with": {
    "the": 1.0
  },
  "along with the": {
    "subject": 1.0
  },
  "with the subject": {
    "such": 1.0
  },
  "the subject such": {
    "as": 1.0
  },
  "subject such as": {
    "downsizing": 1.0
  },
  "such as downsizing": {
    "and": 1.0
  },
  "as downsizing and": {
    "rightsizing": 1.0
  },
  "downsizing and rightsizing": {
    "at": 1.0
  },
  "and rightsizing at": {
    "its": 1.0
  },
  "rightsizing at its": {
    "most": 1.0
  },
  "at its most": {
    "basic": 1.0
  },
  "its most basic": {
    "level": 1.0
  },
  "most basic level": {
    "the": 1.0
  },
  "basic level the": {
    "broadest": 1.0
  },
  "level the broadest": {
    "definition": 1.0
  },
  "the broadest definition": {
    "of": 1.0
  },
  "broadest definition of": {
    "client": 1.0
  },
  "definition of client": {
    "server": 1.0
  },
  "server computing comes": {
    "down": 1.0
  },
  "computing comes down": {
    "to": 1.0
  },
  "comes down to": {
    "this": 1.0
  },
  "down to this": {
    "a": 1.0
  },
  "to this a": {
    "client": 1.0
  },
  "this a client": {
    "workstation": 1.0
  },
  "a client workstation": {
    "computer": 0.3333333333333333,
    "and": 0.6666666666666666
  },
  "client workstation computer": {
    "sends": 1.0
  },
  "workstation computer sends": {
    "a": 1.0
  },
  "computer sends a": {
    "message": 1.0
  },
  "sends a message": {
    "requesting": 1.0
  },
  "a message requesting": {
    "some": 1.0
  },
  "message requesting some": {
    "kind": 1.0
  },
  "requesting some kind": {
    "of": 1.0
  },
  "kind of service": {
    "across": 1.0
  },
  "of service across": {
    "a": 1.0
  },
  "service across a": {
    "network": 1.0
  },
  "across a network": {
    "of": 1.0
  },
  "a network of": {
    "some": 1.0
  },
  "network of some": {
    "kind": 1.0
  },
  "of some kind": {
    "to": 1.0
  },
  "some kind to": {
    "a": 1.0
  },
  "kind to a": {
    "server": 1.0
  },
  "to a server": {
    "computer": 1.0
  },
  "a server computer": {
    "which": 1.0
  },
  "server computer which": {
    "processes": 1.0
  },
  "computer which processes": {
    "the": 1.0
  },
  "which processes the": {
    "service": 1.0
  },
  "processes the service": {
    "request": 1.0
  },
  "the service request": {
    "and": 1.0
  },
  "service request and": {
    "responds": 1.0
  },
  "request and responds": {
    "with": 1.0
  },
  "and responds with": {
    "either": 1.0
  },
  "responds with either": {
    "a": 1.0
  },
  "with either a": {
    "return": 1.0
  },
  "either a return": {
    "message": 1.0
  },
  "a return message": {
    "returning": 1.0
  },
  "return message returning": {
    "requested": 1.0
  },
  "message returning requested": {
    "data": 1.0
  },
  "returning requested data": {
    "or": 1.0
  },
  "requested data or": {
    "an": 1.0
  },
  "data or an": {
    "acknowledgement": 1.0
  },
  "or an acknowledgement": {
    "no": 1.0
  },
  "an acknowledgement no": {
    "matter": 1.0
  },
  "acknowledgement no matter": {
    "what": 1.0
  },
  "no matter what": {
    "form": 0.5,
    "application": 0.5
  },
  "matter what form": {
    "it": 1.0
  },
  "what form it": {
    "takes": 1.0
  },
  "form it takes": {
    "the": 1.0
  },
  "takes the ultimate": {
    "purpose": 1.0
  },
  "the ultimate purpose": {
    "of": 1.0
  },
  "ultimate purpose of": {
    "client": 1.0
  },
  "purpose of client": {
    "server": 1.0
  },
  "server computing is": {
    "to": 1.0
  },
  "computing is to": {
    "make": 1.0
  },
  "make the most": {
    "efficient": 1.0
  },
  "the most efficient": {
    "use": 1.0
  },
  "most efficient use": {
    "of": 1.0
  },
  "efficient use of": {
    "the": 1.0
  },
  "of the computing": {
    "resources": 1.0
  },
  "the computing resources": {
    "available": 1.0
  },
  "computing resources available": {
    "on": 1.0
  },
  "resources available on": {
    "an": 1.0
  },
  "available on an": {
    "enterprise": 1.0
  },
  "on an enterprise": {
    "wide": 1.0
  },
  "an enterprise wide": {
    "basis": 1.0
  },
  "enterprise wide basis": {
    "clarion": 1.0
  },
  "wide basis clarion": {
    "is": 1.0
  },
  "basis clarion is": {
    "optimized": 1.0
  },
  "clarion is optimized": {
    "to": 1.0
  },
  "is optimized to": {
    "create": 0.5,
    "use": 0.5
  },
  "optimized to create": {
    "business": 1.0
  },
  "to create business": {
    "database": 1.0
  },
  "create business database": {
    "applications": 1.0
  },
  "database applications this": {
    "means": 1.0
  },
  "applications this means": {
    "the": 1.0
  },
  "means the most": {
    "common": 1.0
  },
  "most common type": {
    "of": 1.0
  },
  "common type of": {
    "client": 1.0
  },
  "type of client": {
    "server": 1.0
  },
  "server applications created": {
    "with": 1.0
  },
  "applications created with": {
    "clarion": 1.0
  },
  "created with clarion": {
    "are": 1.0
  },
  "with clarion are": {
    "the": 1.0
  },
  "clarion are the": {
    "type": 1.0
  },
  "are the type": {
    "where": 1.0
  },
  "the type where": {
    "the": 1.0
  },
  "type where the": {
    "program": 1.0
  },
  "where the program": {
    "executes": 1.0
  },
  "the program executes": {
    "on": 1.0
  },
  "program executes on": {
    "a": 1.0
  },
  "executes on a": {
    "client": 1.0
  },
  "on a client": {
    "workstation": 1.0
  },
  "client workstation and": {
    "accesses": 0.5,
    "requesting": 0.5
  },
  "workstation and accesses": {
    "a": 1.0
  },
  "and accesses a": {
    "database": 1.0
  },
  "accesses a database": {
    "server": 1.0
  },
  "a database server": {
    "engine": 0.5,
    "in": 0.5
  },
  "database server engine": {
    "frequently": 1.0
  },
  "server engine frequently": {
    "sql": 1.0
  },
  "engine frequently sql": {
    "based": 1.0
  },
  "frequently sql based": {
    "located": 1.0
  },
  "sql based located": {
    "on": 1.0
  },
  "based located on": {
    "a": 1.0
  },
  "located on a": {
    "database": 1.0
  },
  "on a database": {
    "server": 1.0
  },
  "database server in": {
    "the": 0.5,
    "this": 0.5
  },
  "server in the": {
    "network": 1.0
  },
  "in the network": {
    "therefore": 1.0
  },
  "the network therefore": {
    "for": 1.0
  },
  "network therefore for": {
    "the": 1.0
  },
  "therefore for the": {
    "purposes": 1.0
  },
  "for the purposes": {
    "of": 1.0
  },
  "the purposes of": {
    "this": 1.0
  },
  "purposes of this": {
    "discussion": 1.0
  },
  "this discussion the": {
    "definition": 1.0
  },
  "discussion the definition": {
    "of": 1.0
  },
  "server computing that": {
    "we": 1.0
  },
  "computing that we": {
    "will": 1.0
  },
  "we will use": {
    "is": 1.0
  },
  "will use is": {
    "this": 1.0
  },
  "use is this": {
    "creating": 1.0
  },
  "is this creating": {
    "database": 1.0
  },
  "this creating database": {
    "applications": 1.0
  },
  "creating database applications": {
    "that": 1.0
  },
  "database applications that": {
    "logically": 1.0
  },
  "applications that logically": {
    "partition": 1.0
  },
  "that logically partition": {
    "the": 1.0
  },
  "logically partition the": {
    "workload": 1.0
  },
  "partition the workload": {
    "between": 1.0
  },
  "the workload between": {
    "the": 1.0
  },
  "workload between the": {
    "client": 1.0
  },
  "between the client": {
    "workstations": 1.0
  },
  "the client workstations": {
    "and": 1.0
  },
  "workstations and the": {
    "server": 1.0
  },
  "and the server": {
    "based": 1.0
  },
  "the server based": {
    "database": 1.0
  },
  "server based database": {
    "engine": 1.0
  },
  "based database engine": {
    "so": 1.0
  },
  "database engine so": {
    "that": 1.0
  },
  "engine so that": {
    "maximum": 1.0
  },
  "so that maximum": {
    "performance": 1.0
  },
  "that maximum performance": {
    "efficiency": 1.0
  },
  "maximum performance efficiency": {
    "is": 1.0
  },
  "performance efficiency is": {
    "maintained": 1.0
  },
  "efficiency is maintained": {
    "throughout": 1.0
  },
  "is maintained throughout": {
    "the": 1.0
  },
  "maintained throughout the": {
    "network": 1.0
  },
  "throughout the network": {
    "types": 1.0
  },
  "the network types": {
    "of": 1.0
  },
  "network types of": {
    "client": 1.0
  },
  "server database applicati": {
    "ons": 1.0
  },
  "database applicati ons": {
    "there": 1.0
  },
  "applicati ons there": {
    "are": 1.0
  },
  "ons there are": {
    "two": 1.0
  },
  "are two major": {
    "categories": 1.0
  },
  "two major categories": {
    "of": 1.0
  },
  "major categories of": {
    "client": 1.0
  },
  "categories of client": {
    "server": 1.0
  },
  "database applications on": {
    "line": 1.0
  },
  "applications on line": {
    "transaction": 1.0
  },
  "on line transaction": {
    "processing": 1.0
  },
  "line transaction processing": {
    "oltp": 1.0
  },
  "transaction processing oltp": {
    "and": 0.3333333333333333,
    "oltp": 0.3333333333333333,
    "category": 0.3333333333333333
  },
  "processing oltp and": {
    "decision": 1.0
  },
  "oltp and decision": {
    "support": 1.0
  },
  "and decision support": {
    "systems": 1.0
  },
  "decision support systems": {
    "dss": 1.0
  },
  "support systems dss": {
    "on": 0.3333333333333333,
    "dss": 0.3333333333333333,
    "used": 0.3333333333333333
  },
  "systems dss on": {
    "line": 1.0
  },
  "dss on line": {
    "transaction": 1.0
  },
  "processing oltp oltp": {
    "applications": 1.0
  },
  "oltp oltp applications": {
    "are": 1.0
  },
  "oltp applications are": {
    "built": 1.0
  },
  "applications are built": {
    "to": 1.0
  },
  "are built to": {
    "continually": 0.5,
    "access": 0.5
  },
  "built to continually": {
    "maintain": 1.0
  },
  "to continually maintain": {
    "an": 1.0
  },
  "continually maintain an": {
    "d": 1.0
  },
  "maintain an d": {
    "update": 1.0
  },
  "an d update": {
    "the": 1.0
  },
  "d update the": {
    "database": 1.0
  },
  "update the database": {
    "in": 0.5,
    "even": 0.5
  },
  "the database in": {
    "real": 1.0
  },
  "database in real": {
    "time": 1.0
  },
  "in real time": {
    "this": 1.0
  },
  "real time this": {
    "means": 1.0
  },
  "time this means": {
    "oltp": 1.0
  },
  "this means oltp": {
    "applications": 1.0
  },
  "means oltp applications": {
    "require": 1.0
  },
  "oltp applications require": {
    "high": 1.0
  },
  "applications require high": {
    "performance": 1.0
  },
  "require high performance": {
    "from": 1.0
  },
  "high performance from": {
    "both": 1.0
  },
  "performance from both": {
    "the": 1.0
  },
  "from both the": {
    "hardware": 1.0
  },
  "both the hardware": {
    "and": 1.0
  },
  "the hardware and": {
    "software": 1.0
  },
  "hardware and software": {
    "so": 1.0
  },
  "and software so": {
    "that": 1.0
  },
  "software so that": {
    "users": 1.0
  },
  "so that users": {
    "are": 1.0
  },
  "that users are": {
    "not": 1.0
  },
  "users are not": {
    "kept": 1.0
  },
  "are not kept": {
    "waiting": 1.0
  },
  "not kept waiting": {
    "for": 1.0
  },
  "kept waiting for": {
    "any": 1.0
  },
  "waiting for any": {
    "requested": 1.0
  },
  "for any requested": {
    "information": 1.0
  },
  "any requested information": {
    "for": 1.0
  },
  "requested information for": {
    "more": 1.0
  },
  "information for more": {
    "than": 1.0
  },
  "for more than": {
    "a": 1.0
  },
  "more than a": {
    "very": 1.0
  },
  "than a very": {
    "few": 1.0
  },
  "a very few": {
    "seconds": 1.0
  },
  "very few seconds": {
    "decision": 1.0
  },
  "few seconds decision": {
    "support": 1.0
  },
  "seconds decision support": {
    "systems": 1.0
  },
  "systems dss dss": {
    "applications": 1.0
  },
  "dss dss applications": {
    "are": 1.0
  },
  "dss applications are": {
    "usually": 0.5,
    "built": 0.5
  },
  "applications are usually": {
    "used": 1.0
  },
  "are usually used": {
    "by": 1.0
  },
  "usually used by": {
    "a": 1.0
  },
  "used by a": {
    "company": 1.0
  },
  "by a company": {
    "s": 1.0
  },
  "a company s": {
    "management": 1.0
  },
  "company s management": {
    "for": 1.0
  },
  "s management for": {
    "stored": 1.0
  },
  "management for stored": {
    "or": 1.0
  },
  "for stored or": {
    "ad": 1.0
  },
  "stored or ad": {
    "hoc": 1.0
  },
  "or ad hoc": {
    "queries": 0.5,
    "reports": 0.5
  },
  "ad hoc queries": {
    "to": 0.5,
    "your": 0.5
  },
  "hoc queries to": {
    "monitor": 1.0
  },
  "queries to monitor": {
    "the": 1.0
  },
  "to monitor the": {
    "state": 1.0
  },
  "monitor the state": {
    "of": 1.0
  },
  "the state of": {
    "the": 1.0
  },
  "of the company": {
    "this": 1.0
  },
  "the company this": {
    "usually": 1.0
  },
  "company this usually": {
    "means": 1.0
  },
  "this usually means": {
    "the": 1.0
  },
  "usually means the": {
    "data": 1.0
  },
  "means the data": {
    "does": 1.0
  },
  "the data does": {
    "not": 1.0
  },
  "data does not": {
    "need": 1.0
  },
  "to be quite": {
    "so": 1.0
  },
  "be quite so": {
    "up": 1.0
  },
  "quite so up": {
    "to": 1.0
  },
  "so up to": {
    "the": 1.0
  },
  "to the minute": {
    "and": 1.0
  },
  "the minute and": {
    "response": 1.0
  },
  "minute and response": {
    "times": 1.0
  },
  "and response times": {
    "are": 1.0
  },
  "response times are": {
    "not": 1.0
  },
  "times are not": {
    "nearly": 1.0
  },
  "are not nearly": {
    "as": 1.0
  },
  "not nearly as": {
    "crit": 1.0
  },
  "nearly as crit": {
    "ical": 1.0
  },
  "as crit ical": {
    "frequently": 1.0
  },
  "crit ical frequently": {
    "dss": 1.0
  },
  "ical frequently dss": {
    "applications": 1.0
  },
  "frequently dss applications": {
    "are": 1.0
  },
  "built to access": {
    "on": 1.0
  },
  "to access on": {
    "line": 1.0
  },
  "access on line": {
    "archival": 1.0
  },
  "on line archival": {
    "data": 1.0
  },
  "line archival data": {
    "or": 1.0
  },
  "archival data or": {
    "a": 1.0
  },
  "data or a": {
    "replication": 1.0
  },
  "or a replication": {
    "of": 1.0
  },
  "a replication of": {
    "the": 1.0
  },
  "replication of the": {
    "database": 1.0
  },
  "of the database": {
    "that": 0.2,
    "yourself": 0.2,
    "when": 0.2,
    "server": 0.2,
    "they": 0.2
  },
  "the database that": {
    "is": 1.0
  },
  "database that is": {
    "updated": 1.0
  },
  "that is updated": {
    "only": 1.0
  },
  "is updated only": {
    "at": 1.0
  },
  "updated only at": {
    "timed": 1.0
  },
  "only at timed": {
    "intervals": 1.0
  },
  "at timed intervals": {
    "clarion": 1.0
  },
  "timed intervals clarion": {
    "client": 1.0
  },
  "intervals clarion client": {
    "server": 1.0
  },
  "clarion client server": {
    "applications": 1.0
  },
  "server applications typically": {
    "clarion": 1.0
  },
  "applications typically clarion": {
    "created": 1.0
  },
  "typically clarion created": {
    "client": 1.0
  },
  "clarion created client": {
    "server": 1.0
  },
  "created client server": {
    "database": 1.0
  },
  "database applications fall": {
    "i": 1.0
  },
  "applications fall i": {
    "nto": 1.0
  },
  "fall i nto": {
    "the": 1.0
  },
  "i nto the": {
    "on": 1.0
  },
  "nto the on": {
    "line": 1.0
  },
  "the on line": {
    "transaction": 1.0
  },
  "processing oltp category": {
    "rather": 1.0
  },
  "oltp category rather": {
    "than": 1.0
  },
  "category rather than": {
    "the": 1.0
  },
  "rather than the": {
    "decision": 1.0
  },
  "than the decision": {
    "support": 1.0
  },
  "the decision support": {
    "systems": 1.0
  },
  "systems dss used": {
    "for": 1.0
  },
  "dss used for": {
    "ad": 1.0
  },
  "used for ad": {
    "hoc": 1.0
  },
  "for ad hoc": {
    "queries": 1.0
  },
  "hoc queries your": {
    "users": 1.0
  },
  "queries your users": {
    "can": 1.0
  },
  "your users can": {
    "use": 1.0
  },
  "users can use": {
    "clarion": 1.0
  },
  "can use clarion": {
    "s": 1.0
  },
  "use clarion s": {
    "reportwriter": 1.0
  },
  "clarion s reportwriter": {
    "for": 1.0
  },
  "s reportwriter for": {
    "windows": 1.0
  },
  "reportwriter for windows": {
    "product": 1.0
  },
  "for windows product": {
    "to": 1.0
  },
  "windows product to": {
    "generate": 1.0
  },
  "product to generate": {
    "standard": 1.0
  },
  "to generate standard": {
    "or": 1.0
  },
  "generate standard or": {
    "ad": 1.0
  },
  "standard or ad": {
    "hoc": 1.0
  },
  "ad hoc reports": {
    "from": 1.0
  },
  "hoc reports from": {
    "the": 1.0
  },
  "reports from the": {
    "database": 1.0
  },
  "from the database": {
    "thus": 0.3333333333333333,
    "without": 0.3333333333333333,
    "server": 0.3333333333333333
  },
  "the database thus": {
    "pro": 1.0
  },
  "database thus pro": {
    "viding": 1.0
  },
  "thus pro viding": {
    "them": 1.0
  },
  "pro viding them": {
    "dss": 1.0
  },
  "viding them dss": {
    "functionality": 1.0
  },
  "them dss functionality": {
    "sql": 1.0
  },
  "dss functionality sql": {
    "database": 1.0
  },
  "functionality sql database": {
    "engines": 1.0
  },
  "database engines most": {
    "client": 1.0
  },
  "engines most client": {
    "server": 1.0
  },
  "most client server": {
    "applications": 1.0
  },
  "server applications are": {
    "front": 1.0
  },
  "applications are front": {
    "ends": 1.0
  },
  "are front ends": {
    "running": 1.0
  },
  "front ends running": {
    "on": 1.0
  },
  "ends running on": {
    "a": 1.0
  },
  "running on a": {
    "client": 0.5,
    "network": 0.5
  },
  "workstation and requesting": {
    "data": 1.0
  },
  "and requesting data": {
    "services": 1.0
  },
  "requesting data services": {
    "from": 1.0
  },
  "data services from": {
    "a": 1.0
  },
  "services from a": {
    "database": 1.0
  },
  "from a database": {
    "engine": 0.5,
    "over": 0.5
  },
  "a database engine": {
    "such": 1.0
  },
  "database engine such": {
    "as": 1.0
  },
  "engine such as": {
    "oracle": 1.0
  },
  "such as oracle": {
    "or": 0.5,
    "and": 0.5
  },
  "as oracle or": {
    "sybase": 1.0
  },
  "oracle or sybase": {
    "running": 1.0
  },
  "or sybase running": {
    "on": 1.0
  },
  "sybase running on": {
    "a": 1.0
  },
  "on a network": {
    "server": 1.0
  },
  "a network server": {
    "most": 1.0
  },
  "network server most": {
    "of": 1.0
  },
  "server most of": {
    "these": 1.0
  },
  "most of these": {
    "database": 1.0
  },
  "of these database": {
    "engines": 1.0
  },
  "these database engines": {
    "are": 1.0
  },
  "database engines are": {
    "accessed": 1.0
  },
  "engines are accessed": {
    "through": 1.0
  },
  "are accessed through": {
    "structured": 1.0
  },
  "accessed through structured": {
    "query": 1.0
  },
  "through structured query": {
    "language": 1.0
  },
  "structured query language": {
    "sql": 1.0
  },
  "query language sql": {
    "sql": 1.0
  },
  "language sql sql": {
    "was": 1.0
  },
  "sql sql was": {
    "originally": 1.0
  },
  "sql was originally": {
    "developed": 1.0
  },
  "was originally developed": {
    "as": 1.0
  },
  "originally developed as": {
    "an": 1.0
  },
  "developed as an": {
    "ad": 1.0
  },
  "as an ad": {
    "hoc": 1.0
  },
  "an ad hoc": {
    "query": 1.0
  },
  "ad hoc query": {
    "language": 0.5,
    "mission": 0.5
  },
  "hoc query language": {
    "to": 1.0
  },
  "query language to": {
    "allow": 1.0
  },
  "language to allow": {
    "users": 1.0
  },
  "to allow users": {
    "to": 1.0
  },
  "allow users to": {
    "glean": 1.0
  },
  "users to glean": {
    "information": 1.0
  },
  "to glean information": {
    "from": 1.0
  },
  "glean information from": {
    "a": 1.0
  },
  "information from a": {
    "database": 1.0
  },
  "a database over": {
    "the": 1.0
  },
  "database over the": {
    "years": 1.0
  },
  "over the years": {
    "the": 1.0
  },
  "the years the": {
    "sql": 1.0
  },
  "years the sql": {
    "language": 1.0
  },
  "the sql language": {
    "has": 1.0
  },
  "sql language has": {
    "been": 1.0
  },
  "language has been": {
    "enhanced": 1.0
  },
  "has been enhanced": {
    "to": 1.0
  },
  "been enhanced to": {
    "allow": 1.0
  },
  "enhanced to allow": {
    "programmatic": 1.0
  },
  "to allow programmatic": {
    "ac": 1.0
  },
  "allow programmatic ac": {
    "cess": 1.0
  },
  "programmatic ac cess": {
    "to": 1.0
  },
  "cess to databases": {
    "in": 1.0
  },
  "to databases in": {
    "addition": 1.0
  },
  "databases in addition": {
    "to": 1.0
  },
  "addition to its": {
    "original": 1.0
  },
  "to its original": {
    "ad": 1.0
  },
  "its original ad": {
    "hoc": 1.0
  },
  "original ad hoc": {
    "query": 1.0
  },
  "hoc query mission": {
    "clarion": 1.0
  },
  "query mission clarion": {
    "language": 1.0
  },
  "mission clarion language": {
    "programming": 1.0
  },
  "programming guide 66": {
    "sql": 1.0
  },
  "guide 66 sql": {
    "has": 1.0
  },
  "66 sql has": {
    "become": 1.0
  },
  "sql has become": {
    "the": 1.0
  },
  "has become the": {
    "standard": 1.0
  },
  "become the standard": {
    "tool": 1.0
  },
  "the standard tool": {
    "used": 1.0
  },
  "standard tool used": {
    "to": 1.0
  },
  "tool used to": {
    "access": 1.0
  },
  "used to access": {
    "the": 1.0
  },
  "access the database": {
    "engines": 1.0
  },
  "the database engines": {
    "used": 1.0
  },
  "database engines used": {
    "in": 1.0
  },
  "engines used in": {
    "client": 1.0
  },
  "used in client": {
    "server": 1.0
  },
  "in client server": {
    "computing": 0.5,
    "applications": 0.5
  },
  "server computing programmatic": {
    "sql": 1.0
  },
  "computing programmatic sql": {
    "is": 1.0
  },
  "programmatic sql is": {
    "the": 1.0
  },
  "sql is the": {
    "tool": 0.5,
    "same": 0.5
  },
  "is the tool": {
    "most": 1.0
  },
  "the tool most": {
    "frequently": 1.0
  },
  "tool most frequently": {
    "used": 1.0
  },
  "most frequently used": {
    "to": 1.0
  },
  "frequently used to": {
    "perform": 1.0
  },
  "used to perform": {
    "the": 1.0
  },
  "to perform the": {
    "data": 0.6666666666666666,
    "task": 0.3333333333333333
  },
  "perform the data": {
    "access": 0.5,
    "validation": 0.5
  },
  "the data access": {
    "chores": 1.0
  },
  "data access chores": {
    "i": 1.0
  },
  "access chores i": {
    "n": 1.0
  },
  "chores i n": {
    "the": 1.0
  },
  "i n the": {
    "programs": 0.3333333333333333,
    "generated": 0.3333333333333333,
    "filter": 0.3333333333333333
  },
  "n the programs": {
    "that": 1.0
  },
  "the programs that": {
    "execute": 1.0
  },
  "programs that execute": {
    "on": 1.0
  },
  "that execute on": {
    "client": 1.0
  },
  "execute on client": {
    "workstations": 1.0
  },
  "on client workstations": {
    "however": 1.0
  },
  "client workstations however": {
    "sql": 1.0
  },
  "workstations however sql": {
    "is": 1.0
  },
  "however sql is": {
    "not": 1.0
  },
  "sql is not": {
    "a": 1.0
  },
  "is not a": {
    "full": 1.0
  },
  "not a full": {
    "featured": 1.0
  },
  "a full featured": {
    "programming": 1.0
  },
  "full featured programming": {
    "language": 1.0
  },
  "featured programming language": {
    "for": 1.0
  },
  "programming language for": {
    "instance": 1.0
  },
  "language for instance": {
    "it": 1.0
  },
  "for instance it": {
    "has": 1.0
  },
  "instance it has": {
    "no": 1.0
  },
  "it has no": {
    "user": 1.0
  },
  "has no user": {
    "interface": 1.0
  },
  "no user interface": {
    "design": 1.0
  },
  "user interface design": {
    "capabilities": 1.0
  },
  "interface design capabilities": {
    "so": 1.0
  },
  "design capabilities so": {
    "the": 1.0
  },
  "capabilities so the": {
    "sql": 1.0
  },
  "so the sql": {
    "must": 1.0
  },
  "the sql must": {
    "be": 1.0
  },
  "sql must be": {
    "embedded": 1.0
  },
  "must be embedded": {
    "into": 1.0
  },
  "be embedded into": {
    "a": 1.0
  },
  "embedded into a": {
    "more": 1.0
  },
  "into a more": {
    "general": 1.0
  },
  "a more general": {
    "purpose": 1.0
  },
  "more general purpose": {
    "programming": 1.0
  },
  "general purpose programming": {
    "language": 1.0
  },
  "purpose programming language": {
    "such": 1.0
  },
  "programming language such": {
    "as": 1.0
  },
  "language such as": {
    "c": 1.0
  },
  "such as c": {
    "or": 1.0
  },
  "as c or": {
    "clarion": 1.0
  },
  "c or clarion": {
    "to": 1.0
  },
  "or clarion to": {
    "create": 1.0
  },
  "clarion to create": {
    "a": 1.0
  },
  "to create a": {
    "complete": 0.5,
    "view": 0.5
  },
  "create a complete": {
    "program": 1.0
  },
  "a complete program": {
    "clarion": 1.0
  },
  "complete program clarion": {
    "and": 1.0
  },
  "program clarion and": {
    "sql": 1.0
  },
  "and sql clarion": {
    "s": 1.0
  },
  "sql clarion s": {
    "file": 1.0
  },
  "clarion s file": {
    "driver": 1.0
  },
  "s file driver": {
    "technology": 0.6666666666666666,
    "handle": 0.3333333333333333
  },
  "driver technology allows": {
    "you": 1.0
  },
  "technology allows you": {
    "to": 1.0
  },
  "write applications that": {
    "access": 1.0
  },
  "applications that access": {
    "sql": 1.0
  },
  "that access sql": {
    "databases": 1.0
  },
  "access sql databases": {
    "without": 1.0
  },
  "sql databases without": {
    "the": 1.0
  },
  "databases without the": {
    "necessity": 1.0
  },
  "without the necessity": {
    "of": 1.0
  },
  "the necessity of": {
    "writing": 1.0
  },
  "necessity of writing": {
    "any": 1.0
  },
  "of writing any": {
    "sql": 1.0
  },
  "writing any sql": {
    "at": 1.0
  },
  "any sql at": {
    "all": 1.0
  },
  "sql at all": {
    "the": 0.5,
    "to": 0.5
  },
  "at all the": {
    "clarion": 1.0
  },
  "all the clarion": {
    "file": 1.0
  },
  "the clarion file": {
    "driver": 1.0
  },
  "clarion file driver": {
    "for": 1.0
  },
  "file driver for": {
    "any": 0.3333333333333333,
    "example": 0.3333333333333333,
    "that": 0.3333333333333333
  },
  "driver for any": {
    "sql": 1.0
  },
  "for any sql": {
    "database": 1.0
  },
  "any sql database": {
    "communicates": 1.0
  },
  "sql database communicates": {
    "with": 1.0
  },
  "database communicates with": {
    "the": 1.0
  },
  "communicates with the": {
    "back": 1.0
  },
  "with the back": {
    "end": 1.0
  },
  "the back end": {
    "database": 0.9545454545454546,
    "is": 0.045454545454545456
  },
  "back end database": {
    "server": 0.7307692307692307,
    "except": 0.038461538461538464,
    "this": 0.038461538461538464,
    "beyond": 0.038461538461538464,
    "in": 0.07692307692307693,
    "servers": 0.038461538461538464,
    "is": 0.038461538461538464
  },
  "end database server": {
    "by": 0.05263157894736842,
    "prop": 0.10526315789473684,
    "usually": 0.05263157894736842,
    "the": 0.05263157894736842,
    "you": 0.10526315789473684,
    "performs": 0.05263157894736842,
    "to": 0.10526315789473684,
    "t": 0.05263157894736842,
    "when": 0.05263157894736842,
    "this": 0.05263157894736842,
    "for": 0.05263157894736842,
    "while": 0.05263157894736842,
    "note": 0.05263157894736842,
    "in": 0.05263157894736842,
    "s": 0.10526315789473684
  },
  "database server by": {
    "automatically": 0.5,
    "enforcing": 0.5
  },
  "server by automatically": {
    "generating": 1.0
  },
  "by automatically generating": {
    "the": 1.0
  },
  "automatically generating the": {
    "sql": 1.0
  },
  "generating the sql": {
    "statements": 1.0
  },
  "the sql statements": {
    "that": 0.5,
    "it": 0.5
  },
  "sql statements that": {
    "the": 0.5,
    "allow": 0.5
  },
  "statements that the": {
    "database": 1.0
  },
  "that the database": {
    "engine": 0.3333333333333333,
    "contain": 0.3333333333333333,
    "server": 0.3333333333333333
  },
  "the database engine": {
    "requires": 0.5,
    "to": 0.5
  },
  "database engine requires": {
    "from": 1.0
  },
  "engine requires from": {
    "your": 1.0
  },
  "requires from your": {
    "standard": 1.0
  },
  "from your standard": {
    "clarion": 1.0
  },
  "your standard clarion": {
    "language": 1.0
  },
  "standard clarion language": {
    "file": 1.0
  },
  "clarion language file": {
    "i": 1.0
  },
  "language file i": {
    "o": 1.0
  },
  "file i o": {
    "syntax": 1.0
  },
  "i o syntax": {
    "since": 1.0
  },
  "o syntax since": {
    "the": 1.0
  },
  "syntax since the": {
    "clarion": 1.0
  },
  "since the clarion": {
    "sql": 1.0
  },
  "the clarion sql": {
    "file": 1.0
  },
  "clarion sql file": {
    "drivers": 1.0
  },
  "sql file drivers": {
    "are": 1.0
  },
  "file drivers are": {
    "specifically": 1.0
  },
  "drivers are specifically": {
    "desig": 1.0
  },
  "are specifically desig": {
    "ned": 1.0
  },
  "specifically desig ned": {
    "to": 1.0
  },
  "desig ned to": {
    "talk": 1.0
  },
  "ned to talk": {
    "to": 1.0
  },
  "to talk to": {
    "a": 1.0
  },
  "talk to a": {
    "single": 1.0
  },
  "a single sql": {
    "back": 1.0
  },
  "single sql back": {
    "end": 1.0
  },
  "sql back end": {
    "database": 1.0
  },
  "end database except": {
    "the": 1.0
  },
  "database except the": {
    "odbc": 1.0
  },
  "except the odbc": {
    "driver": 1.0
  },
  "the odbc driver": {
    "of": 1.0
  },
  "odbc driver of": {
    "course": 1.0
  },
  "driver of course": {
    "which": 1.0
  },
  "of course which": {
    "is": 1.0
  },
  "course which is": {
    "a": 1.0
  },
  "which is a": {
    "generic": 1.0
  },
  "is a generic": {
    "sql": 1.0
  },
  "a generic sql": {
    "file": 1.0
  },
  "generic sql file": {
    "driver": 1.0
  },
  "sql file driver": {
    "the": 0.5,
    "for": 0.5
  },
  "file driver the": {
    "sql": 1.0
  },
  "driver the sql": {
    "it": 1.0
  },
  "the sql it": {
    "generates": 1.0
  },
  "sql it generates": {
    "is": 1.0
  },
  "it generates is": {
    "optimized": 1.0
  },
  "generates is optimized": {
    "to": 1.0
  },
  "optimized to use": {
    "features": 1.0
  },
  "to use features": {
    "specific": 1.0
  },
  "use features specific": {
    "to": 1.0
  },
  "features specific to": {
    "that": 1.0
  },
  "to that back": {
    "end": 1.0
  },
  "that back end": {
    "database": 1.0
  },
  "end database this": {
    "means": 1.0
  },
  "database this means": {
    "that": 1.0
  },
  "that a clarion": {
    "programmer": 1.0
  },
  "a clarion programmer": {
    "is": 1.0
  },
  "clarion programmer is": {
    "not": 1.0
  },
  "programmer is not": {
    "requi": 0.5,
    "required": 0.5
  },
  "is not requi": {
    "red": 1.0
  },
  "not requi red": {
    "to": 1.0
  },
  "requi red to": {
    "learn": 1.0
  },
  "red to learn": {
    "or": 1.0
  },
  "to learn or": {
    "use": 1.0
  },
  "learn or use": {
    "sql": 1.0
  },
  "or use sql": {
    "at": 1.0
  },
  "use sql at": {
    "all": 1.0
  },
  "all to write": {
    "efficient": 1.0
  },
  "to write efficient": {
    "client": 1.0
  },
  "write efficient client": {
    "server": 1.0
  },
  "efficient client server": {
    "applications": 1.0
  },
  "server applications the": {
    "fact": 0.5,
    "only": 0.5
  },
  "applications the fact": {
    "that": 1.0
  },
  "is not required": {
    "to": 1.0
  },
  "not required to": {
    "write": 1.0
  },
  "required to write": {
    "sql": 1.0
  },
  "to write sql": {
    "does": 1.0
  },
  "write sql does": {
    "not": 1.0
  },
  "sql does not": {
    "in": 1.0
  },
  "does not in": {
    "any": 1.0
  },
  "not in any": {
    "way": 1.0
  },
  "in any way": {
    "limit": 1.0
  },
  "any way limit": {
    "the": 1.0
  },
  "way limit the": {
    "capability": 1.0
  },
  "limit the capability": {
    "of": 1.0
  },
  "the capability of": {
    "clarion": 1.0
  },
  "capability of clarion": {
    "to": 1.0
  },
  "of clarion to": {
    "generate": 1.0
  },
  "clarion to generate": {
    "client": 1.0
  },
  "to generate client": {
    "server": 1.0
  },
  "generate client server": {
    "programs": 1.0
  },
  "client server programs": {
    "you": 1.0
  },
  "server programs you": {
    "can": 1.0
  },
  "programs you can": {
    "embed": 1.0
  },
  "you can embed": {
    "your": 1.0
  },
  "can embed your": {
    "own": 1.0
  },
  "embed your own": {
    "sql": 1.0
  },
  "your own sql": {
    "statement": 0.2,
    "statements": 0.2,
    "as": 0.2,
    "where": 0.2,
    "such": 0.2
  },
  "own sql statement": {
    "to": 1.0
  },
  "sql statement to": {
    "extend": 0.5,
    "prop": 0.5
  },
  "statement to extend": {
    "what": 1.0
  },
  "to extend what": {
    "the": 1.0
  },
  "extend what the": {
    "file": 1.0
  },
  "what the file": {
    "driver": 1.0
  },
  "file driver does": {
    "for": 1.0
  },
  "driver does for": {
    "you": 1.0
  },
  "does for you": {
    "or": 1.0
  },
  "for you or": {
    "you": 1.0
  },
  "you or you": {
    "can": 1.0
  },
  "or you can": {
    "take": 1.0
  },
  "you can take": {
    "full": 1.0
  },
  "can take full": {
    "control": 1.0
  },
  "take full control": {
    "of": 0.5,
    "to": 0.5
  },
  "full control of": {
    "the": 1.0
  },
  "the database yourself": {
    "to": 1.0
  },
  "database yourself to": {
    "accomplish": 1.0
  },
  "yourself to accomplish": {
    "any": 1.0
  },
  "to accomplish any": {
    "task": 1.0
  },
  "accomplish any task": {
    "that": 1.0
  },
  "any task that": {
    "needs": 1.0
  },
  "task that needs": {
    "doing": 1.0
  },
  "that needs doing": {
    "there": 1.0
  },
  "needs doing there": {
    "are": 1.0
  },
  "doing there are": {
    "several": 1.0
  },
  "there are several": {
    "ways": 1.0
  },
  "are several ways": {
    "to": 1.0
  },
  "several ways to": {
    "directly": 1.0
  },
  "ways to directly": {
    "embed": 1.0
  },
  "to directly embed": {
    "your": 1.0
  },
  "directly embed your": {
    "own": 1.0
  },
  "own sql statements": {
    "into": 1.0
  },
  "sql statements into": {
    "a": 1.0
  },
  "statements into a": {
    "clarion": 1.0
  },
  "into a clarion": {
    "program": 1.0
  },
  "clarion program if": {
    "you": 1.0
  },
  "program if you": {
    "so": 1.0
  },
  "you so ch": {
    "oose": 1.0
  },
  "so ch oose": {
    "this": 1.0
  },
  "ch oose this": {
    "gives": 1.0
  },
  "oose this gives": {
    "you": 1.0
  },
  "this gives you": {
    "the": 1.0
  },
  "you the clarion": {
    "programmer": 1.0
  },
  "the clarion programmer": {
    "the": 0.5,
    "learn": 0.5
  },
  "clarion programmer the": {
    "flexibility": 1.0
  },
  "programmer the flexibility": {
    "to": 1.0
  },
  "the flexibility to": {
    "just": 1.0
  },
  "flexibility to just": {
    "let": 1.0
  },
  "to just let": {
    "it": 1.0
  },
  "just let it": {
    "happen": 1.0
  },
  "let it happen": {
    "in": 1.0
  },
  "it happen in": {
    "a": 1.0
  },
  "happen in a": {
    "standard": 1.0
  },
  "in a standard": {
    "fashion": 1.0
  },
  "a standard fashion": {
    "by": 1.0
  },
  "standard fashion by": {
    "letting": 1.0
  },
  "fashion by letting": {
    "clarion": 1.0
  },
  "by letting clarion": {
    "s": 1.0
  },
  "letting clarion s": {
    "file": 1.0
  },
  "file driver handle": {
    "all": 1.0
  },
  "driver handle all": {
    "the": 1.0
  },
  "handle all the": {
    "sql": 1.0
  },
  "all the sql": {
    "or": 1.0
  },
  "the sql or": {
    "to": 0.5,
    "not": 0.5
  },
  "sql or to": {
    "make": 1.0
  },
  "or to make": {
    "it": 1.0
  },
  "to make it": {
    "happen": 1.0
  },
  "make it happen": {
    "any": 1.0
  },
  "it happen any": {
    "other": 1.0
  },
  "happen any other": {
    "way": 1.0
  },
  "any other way": {
    "you": 1.0
  },
  "other way you": {
    "choose": 1.0
  },
  "way you choose": {
    "by": 1.0
  },
  "you choose by": {
    "directly": 1.0
  },
  "choose by directly": {
    "writing": 1.0
  },
  "by directly writing": {
    "your": 1.0
  },
  "directly writing your": {
    "own": 1.0
  },
  "writing your own": {
    "sql": 1.0
  },
  "own sql as": {
    "appropri": 1.0
  },
  "sql as appropri": {
    "ate": 1.0
  },
  "as appropri ate": {
    "to": 1.0
  },
  "appropri ate to": {
    "the": 1.0
  },
  "ate to the": {
    "requirements": 1.0
  },
  "to the requirements": {
    "of": 1.0
  },
  "the requirements of": {
    "your": 1.0
  },
  "requirements of your": {
    "individual": 1.0
  },
  "of your individual": {
    "application": 1.0
  },
  "your individual application": {
    "prop": 1.0
  },
  "individual application prop": {
    "sql": 1.0
  },
  "application prop sql": {
    "is": 1.0
  },
  "prop sql is": {
    "a": 0.16666666666666666,
    "the": 0.16666666666666666,
    "myfile": 0.16666666666666666,
    "affected": 0.16666666666666666,
    "to": 0.3333333333333333
  },
  "sql is a": {
    "property": 1.0
  },
  "is a property": {
    "of": 1.0
  },
  "property of a": {
    "file": 0.5,
    "view": 0.5
  },
  "file or view": {
    "structure": 0.2,
    "declaration": 0.2,
    "indicates": 0.2,
    "with": 0.2,
    "is": 0.2
  },
  "or view structure": {
    "that": 1.0
  },
  "view structure that": {
    "allows": 0.5,
    "joins": 0.5
  },
  "structure that allows": {
    "you": 1.0
  },
  "you to send": {
    "any": 1.0
  },
  "to send any": {
    "sql": 1.0
  },
  "send any sql": {
    "statement": 1.0
  },
  "any sql statement": {
    "directly": 0.6666666666666666,
    "to": 0.3333333333333333
  },
  "sql statement directly": {
    "to": 1.0
  },
  "statement directly to": {
    "the": 1.0
  },
  "directly to the": {
    "back": 1.0
  },
  "to the back": {
    "end": 1.0
  },
  "database server prop": {
    "sqlfilter": 0.5,
    "sql": 0.5
  },
  "server prop sqlfilter": {
    "is": 1.0
  },
  "prop sqlfilter is": {
    "a": 0.5,
    "ver": 0.5
  },
  "sqlfilter is a": {
    "property": 1.0
  },
  "of a view": {
    "structu": 1.0
  },
  "a view structu": {
    "re": 1.0
  },
  "view structu re": {
    "that": 1.0
  },
  "structu re that": {
    "allows": 1.0
  },
  "re that allows": {
    "you": 1.0
  },
  "you to append": {
    "your": 1.0
  },
  "to append your": {
    "own": 1.0
  },
  "append your own": {
    "sql": 1.0
  },
  "own sql where": {
    "clause": 1.0
  },
  "sql where clause": {
    "to": 1.0
  },
  "where clause to": {
    "the": 0.3333333333333333,
    "use": 0.3333333333333333,
    "further": 0.3333333333333333
  },
  "clause to the": {
    "generated": 1.0
  },
  "to the generated": {
    "sql": 0.5,
    "where": 0.5
  },
  "the generated sql": {
    "sent": 0.3333333333333333,
    "select": 0.6666666666666666
  },
  "generated sql sent": {
    "to": 1.0
  },
  "sql sent to": {
    "the": 1.0
  },
  "sent to the": {
    "back": 1.0
  },
  "end database beyond": {
    "these": 1.0
  },
  "database beyond these": {
    "there": 1.0
  },
  "beyond these there": {
    "are": 1.0
  },
  "these there are": {
    "also": 1.0
  },
  "are also several": {
    "other": 1.0
  },
  "also several other": {
    "properties": 1.0
  },
  "several other properties": {
    "available": 1.0
  },
  "other properties available": {
    "that": 1.0
  },
  "properties available that": {
    "are": 1.0
  },
  "available that are": {
    "used": 1.0
  },
  "that are used": {
    "to": 1.0
  },
  "used to enhance": {
    "the": 1.0
  },
  "to enhance the": {
    "sql": 1.0
  },
  "enhance the sql": {
    "generated": 1.0
  },
  "the sql generated": {
    "by": 1.0
  },
  "sql generated by": {
    "the": 1.0
  },
  "by the file": {
    "driver": 1.0
  },
  "file driver some": {
    "are": 1.0
  },
  "driver some are": {
    "file": 1.0
  },
  "some are file": {
    "driver": 1.0
  },
  "are file driver": {
    "specific": 1.0
  },
  "file driver specific": {
    "in": 1.0
  },
  "driver specific in": {
    "either": 1.0
  },
  "specific in either": {
    "case": 1.0
  },
  "in either case": {
    "the": 1.0
  },
  "either case the": {
    "file": 1.0
  },
  "case the file": {
    "driver": 1.0
  },
  "file driver places": {
    "the": 1.0
  },
  "driver places the": {
    "returned": 1.0
  },
  "places the returned": {
    "data": 1.0
  },
  "the returned data": {
    "set": 1.0
  },
  "returned data set": {
    "from": 1.0
  },
  "data set from": {
    "the": 1.0
  },
  "set from the": {
    "back": 1.0
  },
  "from the back": {
    "end": 1.0
  },
  "end database in": {
    "the": 0.5,
    "most": 0.5
  },
  "database in the": {
    "appropriate": 1.0
  },
  "in the appropriate": {
    "file": 1.0
  },
  "the appropriate file": {
    "record": 1.0
  },
  "appropriate file record": {
    "buffer": 1.0
  },
  "file record buffer": {
    "allowing": 1.0
  },
  "record buffer allowing": {
    "you": 1.0
  },
  "buffer allowing you": {
    "to": 1.0
  },
  "allowing you to": {
    "use": 0.5,
    "make": 0.5
  },
  "you to use": {
    "standard": 1.0
  },
  "to use standard": {
    "clarion": 1.0
  },
  "use standard clarion": {
    "syntax": 1.0
  },
  "standard clarion syntax": {
    "to": 1.0
  },
  "clarion syntax to": {
    "manipulate": 1.0
  },
  "syntax to manipulate": {
    "its": 1.0
  },
  "to manipulate its": {
    "value": 1.0
  },
  "manipulate its value": {
    "or": 1.0
  },
  "its value or": {
    "assign": 1.0
  },
  "value or assign": {
    "the": 1.0
  },
  "or assign the": {
    "data": 1.0
  },
  "assign the data": {
    "values": 1.0
  },
  "the data values": {
    "to": 1.0
  },
  "data values to": {
    "other": 1.0
  },
  "values to other": {
    "fields": 1.0
  },
  "to other fields": {
    "databas": 1.0
  },
  "other fields databas": {
    "e": 1.0
  },
  "fields databas e": {
    "design": 1.0
  },
  "databas e design": {
    "and": 1.0
  },
  "e design and": {
    "network": 1.0
  },
  "network traffic the": {
    "most": 1.0
  },
  "traffic the most": {
    "important": 1.0
  },
  "most important aspect": {
    "to": 1.0
  },
  "important aspect to": {
    "creating": 1.0
  },
  "aspect to creating": {
    "efficient": 1.0
  },
  "to creating efficient": {
    "client": 1.0
  },
  "creating efficient client": {
    "server": 1.0
  },
  "server applications is": {
    "the": 1.0
  },
  "applications is the": {
    "design": 1.0
  },
  "is the design": {
    "of": 1.0
  },
  "the design of": {
    "the": 1.0
  },
  "design of the": {
    "database": 1.0
  },
  "the database when": {
    "properly": 1.0
  },
  "database when properly": {
    "designed": 1.0
  },
  "properly designed the": {
    "database": 1.0
  },
  "designed the database": {
    "more": 1.0
  },
  "the database more": {
    "readily": 1.0
  },
  "database more readily": {
    "allows": 1.0
  },
  "more readily allows": {
    "you": 1.0
  },
  "readily allows you": {
    "to": 1.0
  },
  "write your applications": {
    "such": 1.0
  },
  "your applications such": {
    "that": 1.0
  },
  "applications such that": {
    "network": 1.0
  },
  "such that network": {
    "traffic": 1.0
  },
  "that network traffic": {
    "can": 1.0
  },
  "network traffic can": {
    "be": 1.0
  },
  "traffic can be": {
    "minimized": 1.0
  },
  "can be minimized": {
    "when": 1.0
  },
  "be minimized when": {
    "network": 1.0
  },
  "minimized when network": {
    "traffic": 1.0
  },
  "when network traffic": {
    "is": 1.0
  },
  "network traffic is": {
    "kept": 0.5,
    "to": 0.5
  },
  "traffic is kept": {
    "to": 1.0
  },
  "is kept to": {
    "a": 1.0
  },
  "kept to a": {
    "minimum": 1.0
  },
  "to a minimum": {
    "data": 1.0
  },
  "a minimum data": {
    "response": 1.0
  },
  "minimum data response": {
    "times": 1.0
  },
  "data response times": {
    "the": 1.0
  },
  "response times the": {
    "most": 1.0
  },
  "times the most": {
    "critical": 1.0
  },
  "the most critical": {
    "aspect": 1.0
  },
  "most critical aspect": {
    "of": 1.0
  },
  "critical aspect of": {
    "oltp": 1.0
  },
  "aspect of oltp": {
    "systems": 1.0
  },
  "of oltp systems": {
    "can": 1.0
  },
  "oltp systems can": {
    "be": 1.0
  },
  "systems can be": {
    "kept": 1.0
  },
  "can be kept": {
    "as": 1.0
  },
  "be kept as": {
    "fast": 1.0
  },
  "kept as fast": {
    "as": 1.0
  },
  "fast as possible": {
    "even": 1.0
  },
  "as possible even": {
    "when": 1.0
  },
  "possible even when": {
    "the": 1.0
  },
  "even when the": {
    "system": 1.0
  },
  "when the system": {
    "is": 1.0
  },
  "the system is": {
    "scaled": 1.0
  },
  "system is scaled": {
    "up": 1.0
  },
  "is scaled up": {
    "to": 1.0
  },
  "scaled up to": {
    "the": 1.0
  },
  "to the enterprise": {
    "level": 1.0
  },
  "the enterprise level": {
    "referential": 1.0
  },
  "enterprise level referential": {
    "integrity": 1.0
  },
  "level referential integrity": {
    "handling": 1.0
  },
  "integrity handling maintaining": {
    "the": 1.0
  },
  "handling maintaining the": {
    "referential": 1.0
  },
  "maintaining the referential": {
    "integrity": 1.0
  },
  "the referential integrity": {
    "ri": 1.0
  },
  "referential integrity ri": {
    "of": 1.0
  },
  "integrity ri of": {
    "a": 1.0
  },
  "ri of a": {
    "database": 1.0
  },
  "of a database": {
    "is": 1.0
  },
  "a database is": {
    "a": 1.0
  },
  "database is a": {
    "key": 1.0
  },
  "is a key": {
    "element": 1.0
  },
  "a key element": {
    "to": 1.0
  },
  "key element to": {
    "relational": 1.0
  },
  "element to relational": {
    "database": 1.0
  },
  "to relational database": {
    "design": 1.0
  },
  "database design referential": {
    "integrity": 1.0
  },
  "design referential integrity": {
    "means": 1.0
  },
  "means that for": {
    "every": 1.0
  },
  "that for every": {
    "one": 1.0
  },
  "for every one": {
    "to": 1.0
  },
  "every one to": {
    "many": 1.0
  },
  "child relationship between": {
    "tables": 1.0
  },
  "relationship between tables": {
    "in": 1.0
  },
  "between tables in": {
    "the": 1.0
  },
  "tables in the": {
    "databa": 0.5,
    "database": 0.5
  },
  "in the databa": {
    "se": 1.0
  },
  "the databa se": {
    "there": 0.5,
    "server": 0.5
  },
  "databa se there": {
    "exists": 1.0
  },
  "se there exists": {
    "a": 1.0
  },
  "there exists a": {
    "parent": 1.0
  },
  "exists a parent": {
    "record": 1.0
  },
  "a parent record": {
    "for": 1.0
  },
  "parent record for": {
    "every": 1.0
  },
  "record for every": {
    "child": 1.0
  },
  "for every child": {
    "record": 1.0
  },
  "every child record": {
    "no": 1.0
  },
  "child record no": {
    "orphan": 1.0
  },
  "record no orphan": {
    "records": 1.0
  },
  "no orphan records": {
    "to": 1.0
  },
  "orphan records to": {
    "put": 1.0
  },
  "records to put": {
    "it": 1.0
  },
  "to put it": {
    "in": 1.0
  },
  "put it in": {
    "more": 1.0
  },
  "it in more": {
    "formal": 1.0
  },
  "in more formal": {
    "terms": 1.0
  },
  "more formal terms": {
    "there": 1.0
  },
  "formal terms there": {
    "must": 1.0
  },
  "terms there must": {
    "be": 1.0
  },
  "there must be": {
    "a": 1.0
  },
  "be a valid": {
    "primary": 1.0
  },
  "a valid primary": {
    "key": 1.0
  },
  "valid primary key": {
    "value": 1.0
  },
  "key value for": {
    "every": 1.0
  },
  "value for every": {
    "existing": 1.0
  },
  "for every existing": {
    "foreign": 1.0
  },
  "every existing foreign": {
    "key": 1.0
  },
  "existing foreign key": {
    "in": 1.0
  },
  "in the database": {
    "orphan": 0.3333333333333333,
    "typical": 0.3333333333333333,
    "and": 0.3333333333333333
  },
  "the database orphan": {
    "records": 1.0
  },
  "database orphan records": {
    "can": 1.0
  },
  "orphan records can": {
    "occur": 1.0
  },
  "records can occur": {
    "when": 1.0
  },
  "can occur when": {
    "the": 1.0
  },
  "occur when the": {
    "parent": 0.5,
    "end": 0.5
  },
  "when the parent": {
    "record": 1.0
  },
  "parent record is": {
    "delet": 0.5,
    "deleted": 0.5
  },
  "record is delet": {
    "ed": 1.0
  },
  "is delet ed": {
    "or": 1.0
  },
  "delet ed or": {
    "the": 1.0
  },
  "ed or the": {
    "primary": 1.0
  },
  "or the primary": {
    "key": 1.0
  },
  "key value which": {
    "provides": 1.0
  },
  "value which provides": {
    "the": 1.0
  },
  "which provides the": {
    "link": 1.0
  },
  "provides the link": {
    "to": 1.0
  },
  "the link to": {
    "the": 1.0
  },
  "link to the": {
    "foreign": 1.0
  },
  "in the child": {
    "record": 1.0
  },
  "the child record": {
    "is": 1.0
  },
  "child record is": {
    "changed": 1.0
  },
  "record is changed": {
    "preventing": 1.0
  },
  "is changed preventing": {
    "these": 1.0
  },
  "changed preventing these": {
    "orphan": 1.0
  },
  "preventing these orphan": {
    "records": 1.0
  },
  "these orphan records": {
    "requires": 1.0
  },
  "orphan records requires": {
    "that": 1.0
  },
  "records requires that": {
    "the": 1.0
  },
  "requires that the": {
    "database": 1.0
  },
  "the database contain": {
    "rules": 1.0
  },
  "database contain rules": {
    "stating": 1.0
  },
  "contain rules stating": {
    "what": 1.0
  },
  "rules stating what": {
    "action": 1.0
  },
  "stating what action": {
    "will": 1.0
  },
  "what action will": {
    "occur": 1.0
  },
  "action will occur": {
    "when": 1.0
  },
  "will occur when": {
    "the": 1.0
  },
  "when the end": {
    "user": 1.0
  },
  "the end user": {
    "attempts": 0.3333333333333333,
    "to": 0.3333333333333333,
    "apparently": 0.3333333333333333
  },
  "end user attempts": {
    "to": 1.0
  },
  "delete the par": {
    "ent": 1.0
  },
  "the par ent": {
    "record": 1.0
  },
  "par ent record": {
    "or": 1.0
  },
  "ent record or": {
    "change": 1.0
  },
  "value the most": {
    "common": 1.0
  },
  "most common ri": {
    "rules": 1.0
  },
  "common ri rules": {
    "are": 1.0
  },
  "ri rules are": {
    "restrict": 1.0
  },
  "rules are restrict": {
    "do": 1.0
  },
  "are restrict do": {
    "not": 1.0
  },
  "restrict do not": {
    "allow": 1.0
  },
  "do not allow": {
    "the": 1.0
  },
  "not allow the": {
    "delete": 1.0
  },
  "allow the delete": {
    "or": 1.0
  },
  "the delete or": {
    "change": 1.0
  },
  "delete or change": {
    "and": 1.0
  },
  "or change and": {
    "cascade": 1.0
  },
  "change and cascade": {
    "delete": 1.0
  },
  "and cascade delete": {
    "the": 1.0
  },
  "cascade delete the": {
    "related": 1.0
  },
  "delete the related": {
    "child": 1.0
  },
  "the related child": {
    "records": 1.0
  },
  "related child records": {
    "or": 1.0
  },
  "child records or": {
    "change": 1.0
  },
  "records or change": {
    "their": 1.0
  },
  "or change their": {
    "foreign": 1.0
  },
  "change their foreign": {
    "key": 1.0
  },
  "their foreign key": {
    "values": 1.0
  },
  "key values to": {
    "match": 0.5,
    "null": 0.5
  },
  "values to match": {
    "the": 1.0
  },
  "to match the": {
    "new": 1.0
  },
  "match the new": {
    "primary": 1.0
  },
  "the new primary": {
    "key": 1.0
  },
  "new primary key": {
    "value": 1.0
  },
  "key value in": {
    "the": 0.6666666666666666,
    "another": 0.3333333333333333
  },
  "the parent re": {
    "cord": 1.0
  },
  "parent re cord": {
    "a": 1.0
  },
  "re cord a": {
    "rarely": 1.0
  },
  "cord a rarely": {
    "used": 1.0
  },
  "a rarely used": {
    "rule": 1.0
  },
  "rarely used rule": {
    "is": 1.0
  },
  "used rule is": {
    "clear": 1.0
  },
  "rule is clear": {
    "change": 1.0
  },
  "is clear change": {
    "the": 1.0
  },
  "clear change the": {
    "foreign": 1.0
  },
  "change the foreign": {
    "key": 1.0
  },
  "values to null": {
    "when": 1.0
  },
  "to null when": {
    "the": 1.0
  },
  "null when the": {
    "parent": 1.0
  },
  "record is deleted": {
    "or": 1.0
  },
  "is deleted or": {
    "the": 1.0
  },
  "deleted or the": {
    "primary": 1.0
  },
  "parent record changes": {
    "ri": 1.0
  },
  "record changes ri": {
    "constraint": 1.0
  },
  "changes ri constraint": {
    "enforcement": 1.0
  },
  "ri constraint enforcement": {
    "is": 1.0
  },
  "constraint enforcement is": {
    "best": 1.0
  },
  "enforcement is best": {
    "handled": 1.0
  },
  "is best handled": {
    "in": 1.0
  },
  "best handled in": {
    "client": 1.0
  },
  "handled in client": {
    "server": 1.0
  },
  "server applications by": {
    "specifying": 1.0
  },
  "applications by specifying": {
    "the": 1.0
  },
  "by specifying the": {
    "ri": 1.0
  },
  "specifying the ri": {
    "rules": 1.0
  },
  "the ri rules": {
    "on": 0.3333333333333333,
    "for": 0.3333333333333333,
    "in": 0.3333333333333333
  },
  "ri rules on": {
    "the": 1.0
  },
  "rules on the": {
    "back": 1.0
  },
  "on the back": {
    "end": 1.0
  },
  "database server usually": {
    "by": 1.0
  },
  "server usually by": {
    "defining": 1.0
  },
  "usually by defining": {
    "triggers": 1.0
  },
  "by defining triggers": {
    "stored": 1.0
  },
  "defining triggers stored": {
    "procedures": 1.0
  },
  "triggers stored procedures": {
    "or": 1.0
  },
  "stored procedures or": {
    "declarative": 1.0
  },
  "procedures or declarative": {
    "ri": 1.0
  },
  "or declarative ri": {
    "statements": 1.0
  },
  "declarative ri statements": {
    "by": 1.0
  },
  "ri statements by": {
    "doing": 1.0
  },
  "statements by doing": {
    "this": 1.0
  },
  "by doing this": {
    "the": 1.0
  },
  "doing this the": {
    "database": 0.5,
    "actual": 0.5
  },
  "this the database": {
    "server": 1.0
  },
  "the database server": {
    "can": 0.23076923076923078,
    "will": 0.15384615384615385,
    "by": 0.07692307692307693,
    "may": 0.07692307692307693,
    "returns": 0.07692307692307693,
    "this": 0.07692307692307693,
    "given": 0.07692307692307693,
    "the": 0.07692307692307693,
    "supports": 0.07692307692307693,
    "for": 0.07692307692307693
  },
  "database server can": {
    "automatically": 0.3333333333333333,
    "simply": 0.3333333333333333,
    "issue": 0.3333333333333333
  },
  "server can automatically": {
    "handle": 1.0
  },
  "can automatically handle": {
    "ri": 1.0
  },
  "automatically handle ri": {
    "enforcement": 1.0
  },
  "handle ri enforcement": {
    "without": 1.0
  },
  "ri enforcement without": {
    "sending": 1.0
  },
  "enforcement without sending": {
    "any": 1.0
  },
  "without sending any": {
    "child": 1.0
  },
  "sending any child": {
    "records": 1.0
  },
  "any child records": {
    "across": 1.0
  },
  "child records across": {
    "the": 1.0
  },
  "records across the": {
    "network": 1.0
  },
  "across the network": {
    "to": 1.0
  },
  "the network to": {
    "the": 1.0
  },
  "network to the": {
    "client": 1.0
  },
  "to the client": {
    "application": 0.8333333333333334,
    "applic": 0.16666666666666666
  },
  "the client application": {
    "for": 0.09090909090909091,
    "67": 0.09090909090909091,
    "or": 0.09090909090909091,
    "and": 0.09090909090909091,
    "you": 0.09090909090909091,
    "the": 0.18181818181818182,
    "needs": 0.09090909090909091,
    "a": 0.09090909090909091,
    "filtered": 0.09090909090909091,
    "to": 0.09090909090909091
  },
  "client application for": {
    "processing": 1.0
  },
  "application for processing": {
    "for": 1.0
  },
  "for processing for": {
    "example": 1.0
  },
  "processing for example": {
    "if": 1.0
  },
  "for example if": {
    "the": 1.0
  },
  "example if the": {
    "rule": 1.0
  },
  "if the rule": {
    "for": 1.0
  },
  "the rule for": {
    "delete": 1.0
  },
  "rule for delete": {
    "is": 1.0
  },
  "for delete is": {
    "cascade": 1.0
  },
  "delete is cascade": {
    "the": 1.0
  },
  "is cascade the": {
    "database": 1.0
  },
  "cascade the database": {
    "server": 1.0
  },
  "server can simply": {
    "perform": 1.0
  },
  "can simply perform": {
    "all": 1.0
  },
  "simply perform all": {
    "the": 1.0
  },
  "perform all the": {
    "required": 1.0
  },
  "all the required": {
    "child": 1.0
  },
  "the required child": {
    "record": 1.0
  },
  "required child record": {
    "deletions": 1.0
  },
  "child record deletions": {
    "when": 1.0
  },
  "record deletions when": {
    "deleting": 1.0
  },
  "deletions when deleting": {
    "the": 1.0
  },
  "when deleting the": {
    "parent": 1.0
  },
  "deleting the parent": {
    "record": 1.0
  },
  "parent record from": {
    "the": 1.0
  },
  "the database without": {
    "sending": 1.0
  },
  "database without sending": {
    "anything": 1.0
  },
  "without sending anything": {
    "back": 1.0
  },
  "sending anything back": {
    "across": 1.0
  },
  "anything back across": {
    "the": 1.0
  },
  "across the n": {
    "etwork": 1.0
  },
  "the n etwork": {
    "to": 1.0
  },
  "n etwork to": {
    "the": 1.0
  },
  "etwork to the": {
    "client": 1.0
  },
  "client application 67": {
    "developing": 1.0
  },
  "application 67 developing": {
    "client": 1.0
  },
  "67 developing client": {
    "server": 1.0
  },
  "server applications in": {
    "the": 1.0
  },
  "applications in the": {
    "clarion": 1.0
  },
  "the clarion dictionary": {
    "editor": 1.0
  },
  "clarion dictionary editor": {
    "when": 1.0
  },
  "dictionary editor when": {
    "you": 1.0
  },
  "editor when you": {
    "establish": 1.0
  },
  "when you establish": {
    "a": 1.0
  },
  "you establish a": {
    "relationship": 1.0
  },
  "establish a relationship": {
    "between": 1.0
  },
  "a relationship between": {
    "two": 1.0
  },
  "relationship between two": {
    "files": 1.0
  },
  "two files tables": {
    "you": 1.0
  },
  "files tables you": {
    "can": 1.0
  },
  "tables you can": {
    "also": 1.0
  },
  "can also specify": {
    "the": 1.0
  },
  "also specify the": {
    "ri": 1.0
  },
  "specify the ri": {
    "rules": 1.0
  },
  "ri rules for": {
    "that": 1.0
  },
  "rules for that": {
    "relationship": 1.0
  },
  "for that relationship": {
    "since": 1.0
  },
  "that relationship since": {
    "the": 1.0
  },
  "relationship since the": {
    "database": 1.0
  },
  "since the database": {
    "server": 1.0
  },
  "database server will": {
    "actually": 0.5,
    "not": 0.5
  },
  "server will actually": {
    "be": 1.0
  },
  "will actually be": {
    "handling": 1.0
  },
  "actually be handling": {
    "the": 1.0
  },
  "be handling the": {
    "ri": 1.0
  },
  "handling the ri": {
    "functional": 1.0
  },
  "the ri functional": {
    "ity": 1.0
  },
  "ri functional ity": {
    "the": 1.0
  },
  "functional ity the": {
    "most": 1.0
  },
  "ity the most": {
    "appropriate": 1.0
  },
  "the most appropriate": {
    "way": 1.0
  },
  "most appropriate way": {
    "to": 1.0
  },
  "appropriate way to": {
    "specify": 1.0
  },
  "way to specify": {
    "the": 1.0
  },
  "to specify the": {
    "ri": 0.25,
    "business": 0.25,
    "most": 0.25,
    "sort": 0.25
  },
  "ri rules in": {
    "the": 1.0
  },
  "rules in the": {
    "clarion": 0.5,
    "client": 0.5
  },
  "the clarion data": {
    "dictionary": 1.0
  },
  "clarion data dictionary": {
    "would": 0.5,
    "editor": 0.5
  },
  "data dictionary would": {
    "be": 1.0
  },
  "dictionary would be": {
    "to": 1.0
  },
  "be to specify": {
    "no": 1.0
  },
  "to specify no": {
    "action": 1.0
  },
  "specify no action": {
    "so": 1.0
  },
  "no action so": {
    "the": 1.0
  },
  "action so the": {
    "client": 1.0
  },
  "so the client": {
    "does": 1.0
  },
  "the client does": {
    "nothing": 1.0
  },
  "client does nothing": {
    "data": 1.0
  },
  "does nothing data": {
    "validation": 1.0
  },
  "nothing data validation": {
    "data": 1.0
  },
  "data validation data": {
    "validation": 1.0
  },
  "validation data validation": {
    "means": 1.0
  },
  "data validation means": {
    "the": 1.0
  },
  "validation means the": {
    "enforcement": 1.0
  },
  "means the enforcement": {
    "of": 1.0
  },
  "the enforcement of": {
    "business": 1.0
  },
  "enforcement of business": {
    "rules": 1.0
  },
  "of business rules": {
    "that": 1.0
  },
  "business rules that": {
    "you": 1.0
  },
  "rules that you": {
    "spec": 1.0
  },
  "that you spec": {
    "ify": 1.0
  },
  "you spec ify": {
    "as": 1.0
  },
  "spec ify as": {
    "to": 1.0
  },
  "ify as to": {
    "what": 1.0
  },
  "as to what": {
    "values": 1.0
  },
  "to what values": {
    "are": 1.0
  },
  "what values are": {
    "valid": 1.0
  },
  "values are valid": {
    "for": 1.0
  },
  "are valid for": {
    "any": 1.0
  },
  "valid for any": {
    "particular": 1.0
  },
  "for any particular": {
    "field": 1.0
  },
  "any particular field": {
    "in": 1.0
  },
  "particular field in": {
    "the": 1.0
  },
  "field in the": {
    "database": 1.0
  },
  "the database typical": {
    "data": 1.0
  },
  "database typical data": {
    "validation": 1.0
  },
  "typical data validation": {
    "rules": 1.0
  },
  "data validation rules": {
    "enforce": 0.2,
    "can": 0.2,
    "in": 0.4,
    "on": 0.2
  },
  "validation rules enforce": {
    "such": 1.0
  },
  "rules enforce such": {
    "things": 1.0
  },
  "enforce such things": {
    "as": 1.0
  },
  "such things as": {
    "a": 1.0
  },
  "things as a": {
    "field": 1.0
  },
  "as a field": {
    "may": 1.0
  },
  "a field may": {
    "not": 1.0
  },
  "field may not": {
    "be": 1.0
  },
  "not be left": {
    "empty": 1.0
  },
  "be left empty": {
    "blank": 1.0
  },
  "left empty blank": {
    "or": 1.0
  },
  "empty blank or": {
    "zero": 1.0
  },
  "blank or zero": {
    "o": 0.2,
    "for": 0.2,
    "value": 0.4,
    "therefore": 0.2
  },
  "or zero o": {
    "r": 1.0
  },
  "zero o r": {
    "the": 1.0
  },
  "o r the": {
    "field": 1.0
  },
  "r the field": {
    "s": 1.0
  },
  "the field s": {
    "value": 1.0
  },
  "field s value": {
    "must": 1.0
  },
  "s value must": {
    "be": 0.5,
    "exist": 0.5
  },
  "value must be": {
    "either": 1.0
  },
  "must be either": {
    "one": 1.0
  },
  "be either one": {
    "or": 1.0
  },
  "either one or": {
    "zero": 1.0
  },
  "one or zero": {
    "true": 1.0
  },
  "or zero true": {
    "or": 1.0
  },
  "zero true or": {
    "false": 1.0
  },
  "true or false": {
    "or": 0.5,
    "known": 0.5
  },
  "or false or": {
    "within": 1.0
  },
  "false or within": {
    "a": 1.0
  },
  "or within a": {
    "cert": 1.0
  },
  "within a cert": {
    "ain": 1.0
  },
  "a cert ain": {
    "specified": 1.0
  },
  "cert ain specified": {
    "numeric": 1.0
  },
  "ain specified numeric": {
    "range": 1.0
  },
  "specified numeric range": {
    "or": 1.0
  },
  "numeric range or": {
    "the": 1.0
  },
  "range or the": {
    "field": 1.0
  },
  "or the field": {
    "s": 1.0
  },
  "value must exist": {
    "as": 1.0
  },
  "must exist as": {
    "a": 1.0
  },
  "exist as a": {
    "primary": 1.0
  },
  "as a primary": {
    "key": 1.0
  },
  "value in another": {
    "file": 1.0
  },
  "another file table": {
    "these": 1.0
  },
  "file table these": {
    "data": 1.0
  },
  "table these data": {
    "validation": 1.0
  },
  "these data validation": {
    "rules": 1.0
  },
  "validation rules can": {
    "be": 1.0
  },
  "rules can be": {
    "specified": 1.0
  },
  "can be specified": {
    "either": 1.0
  },
  "be specified either": {
    "in": 1.0
  },
  "specified either in": {
    "the": 1.0
  },
  "either in the": {
    "client": 1.0
  },
  "in the client": {
    "application": 1.0
  },
  "client application or": {
    "in": 1.0
  },
  "application or in": {
    "the": 1.0
  },
  "in the back": {
    "end": 1.0
  },
  "database server the": {
    "best": 0.5,
    "clarion": 0.5
  },
  "server the best": {
    "way": 1.0
  },
  "the best way": {
    "to": 1.0
  },
  "best way to": {
    "handle": 1.0
  },
  "way to handle": {
    "implementi": 1.0
  },
  "to handle implementi": {
    "ng": 1.0
  },
  "handle implementi ng": {
    "data": 1.0
  },
  "implementi ng data": {
    "validation": 1.0
  },
  "ng data validation": {
    "rules": 1.0
  },
  "validation rules in": {
    "your": 0.5,
    "the": 0.5
  },
  "rules in your": {
    "client": 1.0
  },
  "in your client": {
    "server": 1.0
  },
  "your client server": {
    "applications": 1.0
  },
  "server applications so": {
    "as": 1.0
  },
  "applications so as": {
    "to": 1.0
  },
  "so as to": {
    "generate": 1.0
  },
  "as to generate": {
    "minimal": 1.0
  },
  "to generate minimal": {
    "network": 1.0
  },
  "generate minimal network": {
    "traffic": 1.0
  },
  "minimal network traffic": {
    "is": 1.0
  },
  "traffic is to": {
    "specify": 1.0
  },
  "is to specify": {
    "the": 1.0
  },
  "specify the business": {
    "rules": 1.0
  },
  "the business rules": {
    "in": 1.0
  },
  "business rules in": {
    "both": 1.0
  },
  "rules in both": {
    "the": 0.5,
    "your": 0.5
  },
  "both the client": {
    "application": 1.0
  },
  "client application and": {
    "the": 1.0
  },
  "application and the": {
    "database": 1.0
  },
  "and the database": {
    "server": 1.0
  },
  "server by enforcing": {
    "data": 1.0
  },
  "by enforcing data": {
    "validation": 1.0
  },
  "enforcing data validation": {
    "rules": 1.0
  },
  "client application you": {
    "ensure": 1.0
  },
  "application you ensure": {
    "that": 1.0
  },
  "you ensure that": {
    "all": 0.5,
    "the": 0.5
  },
  "ensure that all": {
    "data": 1.0
  },
  "that all data": {
    "sent": 1.0
  },
  "all data sent": {
    "to": 1.0
  },
  "data sent to": {
    "the": 1.0
  },
  "back end is": {
    "already": 1.0
  },
  "end is already": {
    "valid": 1.0
  },
  "is already valid": {
    "by": 1.0
  },
  "already valid by": {
    "always": 1.0
  },
  "valid by always": {
    "receiving": 1.0
  },
  "by always receiving": {
    "valid": 1.0
  },
  "always receiving valid": {
    "data": 1.0
  },
  "receiving valid data": {
    "the": 1.0
  },
  "valid data the": {
    "database": 1.0
  },
  "data the database": {
    "server": 1.0
  },
  "server will not": {
    "generate": 1.0
  },
  "will not generate": {
    "error": 1.0
  },
  "not generate error": {
    "messages": 1.0
  },
  "generate error messages": {
    "back": 1.0
  },
  "error messages back": {
    "to": 1.0
  },
  "messages back to": {
    "the": 1.0
  },
  "client application the": {
    "net": 0.5,
    "requested": 0.5
  },
  "application the net": {
    "effect": 1.0
  },
  "the net effect": {
    "of": 1.0
  },
  "net effect of": {
    "this": 1.0
  },
  "effect of this": {
    "is": 1.0
  },
  "of this is": {
    "to": 0.6666666666666666,
    "table": 0.3333333333333333
  },
  "is to reduce": {
    "the": 1.0
  },
  "to reduce the": {
    "network": 1.0
  },
  "reduce the network": {
    "traffic": 1.0
  },
  "the network traffic": {
    "back": 0.5,
    "that": 0.5
  },
  "network traffic back": {
    "from": 1.0
  },
  "traffic back from": {
    "the": 1.0
  },
  "back from the": {
    "databa": 1.0
  },
  "from the databa": {
    "se": 1.0
  },
  "databa se server": {
    "by": 1.0
  },
  "se server by": {
    "enforcing": 1.0
  },
  "validation rules on": {
    "the": 1.0
  },
  "database server you": {
    "ensure": 0.5,
    "use": 0.5
  },
  "server you ensure": {
    "that": 1.0
  },
  "that the data": {
    "is": 1.0
  },
  "the data is": {
    "always": 1.0
  },
  "data is always": {
    "valid": 1.0
  },
  "is always valid": {
    "no": 1.0
  },
  "always valid no": {
    "matter": 1.0
  },
  "valid no matter": {
    "what": 1.0
  },
  "matter what application": {
    "is": 1.0
  },
  "what application is": {
    "used": 1.0
  },
  "application is used": {
    "to": 1.0
  },
  "used to update": {
    "the": 1.0
  },
  "to update the": {
    "database": 1.0
  },
  "the database even": {
    "updating": 1.0
  },
  "database even updating": {
    "the": 1.0
  },
  "even updating the": {
    "data": 1.0
  },
  "updating the data": {
    "with": 1.0
  },
  "the data with": {
    "interactive": 1.0
  },
  "data with interactive": {
    "sql": 1.0
  },
  "with interactive sql": {
    "cannot": 1.0
  },
  "interactive sql cannot": {
    "corrupt": 1.0
  },
  "sql cannot corrupt": {
    "the": 1.0
  },
  "cannot corrupt the": {
    "data": 1.0
  },
  "corrupt the data": {
    "therefo": 1.0
  },
  "the data therefo": {
    "re": 1.0
  },
  "data therefo re": {
    "you": 1.0
  },
  "therefo re you": {
    "are": 1.0
  },
  "re you are": {
    "covered": 1.0
  },
  "you are covered": {
    "from": 1.0
  },
  "are covered from": {
    "both": 1.0
  },
  "covered from both": {
    "directions": 1.0
  },
  "from both directions": {
    "enforcing": 1.0
  },
  "both directions enforcing": {
    "these": 1.0
  },
  "directions enforcing these": {
    "rules": 1.0
  },
  "enforcing these rules": {
    "in": 1.0
  },
  "these rules in": {
    "both": 1.0
  },
  "in both your": {
    "clarion": 1.0
  },
  "both your clarion": {
    "applications": 1.0
  },
  "your clarion applications": {
    "and": 1.0
  },
  "clarion applications and": {
    "the": 1.0
  },
  "applications and the": {
    "database": 1.0
  },
  "database server may": {
    "seem": 1.0
  },
  "server may seem": {
    "like": 1.0
  },
  "like a lot": {
    "of": 1.0
  },
  "lot of work": {
    "however": 1.0
  },
  "of work however": {
    "the": 1.0
  },
  "work however the": {
    "clarion": 1.0
  },
  "however the clarion": {
    "data": 0.5,
    "create": 0.5
  },
  "data dictionary editor": {
    "allows": 1.0
  },
  "dictionary editor allows": {
    "you": 1.0
  },
  "editor allows you": {
    "to": 1.0
  },
  "you to specify": {
    "the": 0.5,
    "a": 0.5
  },
  "specify the most": {
    "common": 1.0
  },
  "most common rules": {
    "by": 1.0
  },
  "common rules by": {
    "simply": 1.0
  },
  "rules by simply": {
    "selecti": 1.0
  },
  "by simply selecti": {
    "ng": 1.0
  },
  "simply selecti ng": {
    "a": 1.0
  },
  "selecti ng a": {
    "radio": 1.0
  },
  "ng a radio": {
    "button": 1.0
  },
  "a radio button": {
    "on": 1.0
  },
  "radio button on": {
    "the": 1.0
  },
  "button on the": {
    "validity": 1.0
  },
  "on the validity": {
    "checks": 1.0
  },
  "the validity checks": {
    "tab": 1.0
  },
  "validity checks tab": {
    "of": 1.0
  },
  "checks tab of": {
    "the": 1.0
  },
  "tab of the": {
    "affected": 1.0
  },
  "of the affected": {
    "field": 1.0
  },
  "the affected field": {
    "s": 1.0
  },
  "affected field s": {
    "definition": 1.0
  },
  "field s definition": {
    "by": 1.0
  },
  "s definition by": {
    "doing": 1.0
  },
  "definition by doing": {
    "this": 1.0
  },
  "this the actual": {
    "code": 1.0
  },
  "code to perform": {
    "the": 1.0
  },
  "the data validation": {
    "is": 1.0
  },
  "data validation is": {
    "writ": 1.0
  },
  "validation is writ": {
    "ten": 1.0
  },
  "is writ ten": {
    "for": 1.0
  },
  "writ ten for": {
    "you": 1.0
  },
  "ten for you": {
    "by": 1.0
  },
  "for you by": {
    "the": 1.0
  },
  "you by the": {
    "application": 1.0
  },
  "by the application": {
    "generator": 1.0
  },
  "the application generator": {
    "s": 1.0
  },
  "application generator s": {
    "templates": 1.0
  },
  "generator s templates": {
    "clarion": 1.0
  },
  "s templates clarion": {
    "language": 1.0
  },
  "templates clarion language": {
    "client": 1.0
  },
  "server support the": {
    "clarion": 1.0
  },
  "support the clarion": {
    "l": 1.0
  },
  "the clarion l": {
    "anguage": 1.0
  },
  "clarion l anguage": {
    "contains": 1.0
  },
  "l anguage contains": {
    "a": 1.0
  },
  "anguage contains a": {
    "number": 1.0
  },
  "contains a number": {
    "of": 1.0
  },
  "number of statements": {
    "that": 1.0
  },
  "of statements that": {
    "are": 1.0
  },
  "statements that are": {
    "explicitly": 1.0
  },
  "that are explicitly": {
    "designed": 1.0
  },
  "are explicitly designed": {
    "to": 1.0
  },
  "explicitly designed to": {
    "support": 1.0
  },
  "designed to support": {
    "client": 1.0
  },
  "to support client": {
    "server": 1.0
  },
  "support client server": {
    "application": 1.0
  },
  "client server application": {
    "programming": 0.3333333333333333,
    "because": 0.3333333333333333,
    "perfo": 0.3333333333333333
  },
  "server application programming": {
    "the": 1.0
  },
  "application programming the": {
    "view": 1.0
  },
  "programming the view": {
    "structure": 1.0
  },
  "view structure the": {
    "view": 1.0
  },
  "structure the view": {
    "structure": 1.0
  },
  "view structure is": {
    "a": 1.0
  },
  "is a data": {
    "structure": 1.0
  },
  "a data structure": {
    "that": 1.0
  },
  "data structure that": {
    "automatically": 1.0
  },
  "structure that automatically": {
    "defines": 1.0
  },
  "that automatically defines": {
    "two": 1.0
  },
  "automatically defines two": {
    "standard": 1.0
  },
  "defines two standard": {
    "relational": 1.0
  },
  "two standard relational": {
    "database": 1.0
  },
  "standard relational database": {
    "operat": 1.0
  },
  "relational database operat": {
    "ions": 1.0
  },
  "database operat ions": {
    "the": 1.0
  },
  "operat ions the": {
    "project": 1.0
  },
  "ions the project": {
    "and": 1.0
  },
  "the project and": {
    "join": 1.0
  },
  "project and join": {
    "operations": 1.0
  },
  "and join operations": {
    "a": 1.0
  },
  "join operations a": {
    "view": 1.0
  },
  "operations a view": {
    "will": 1.0
  },
  "a view will": {
    "also": 1.0
  },
  "view will also": {
    "automatically": 1.0
  },
  "will also automatically": {
    "filter": 1.0
  },
  "also automatically filter": {
    "and": 1.0
  },
  "automatically filter and": {
    "order": 1.0
  },
  "filter and order": {
    "the": 1.0
  },
  "and order the": {
    "result": 1.0
  },
  "order the result": {
    "set": 1.0
  },
  "the result set": {
    "the": 0.16666666666666666,
    "that": 0.16666666666666666,
    "returned": 0.16666666666666666,
    "returns": 0.16666666666666666,
    "one": 0.16666666666666666,
    "to": 0.16666666666666666
  },
  "result set the": {
    "back": 1.0
  },
  "set the back": {
    "end": 1.0
  },
  "database server performs": {
    "all": 1.0
  },
  "server performs all": {
    "these": 1.0
  },
  "performs all these": {
    "operations": 1.0
  },
  "all these operations": {
    "returning": 1.0
  },
  "these operations returning": {
    "only": 1.0
  },
  "operations returning only": {
    "the": 1.0
  },
  "returning only the": {
    "result": 1.0
  },
  "only the result": {
    "set": 1.0
  },
  "result set that": {
    "the": 1.0
  },
  "set that the": {
    "client": 1.0
  },
  "that the client": {
    "application": 1.0
  },
  "client application needs": {
    "to": 1.0
  },
  "application needs to": {
    "perform": 1.0
  },
  "needs to perform": {
    "its": 1.0
  },
  "to perform its": {
    "work": 1.0
  },
  "perform its work": {
    "although": 1.0
  },
  "its work although": {
    "it": 1.0
  },
  "work although it": {
    "is": 1.0
  },
  "although it is": {
    "actually": 1.0
  },
  "is actually possible": {
    "to": 1.0
  },
  "actually possible to": {
    "create": 1.0
  },
  "possible to create": {
    "a": 1.0
  },
  "create a view": {
    "structure": 1.0
  },
  "a view structure": {
    "that": 0.5,
    "using": 0.5
  },
  "structure that joins": {
    "tables": 1.0
  },
  "that joins tables": {
    "from": 1.0
  },
  "joins tables from": {
    "different": 1.0
  },
  "tables from different": {
    "back": 1.0
  },
  "from different back": {
    "end": 1.0
  },
  "different back end": {
    "database": 1.0
  },
  "end database servers": {
    "such": 1.0
  },
  "database servers such": {
    "as": 1.0
  },
  "servers such as": {
    "oracle": 1.0
  },
  "as oracle and": {
    "as": 1.0
  },
  "oracle and as": {
    "400": 1.0
  },
  "and as 400": {
    "this": 1.0
  },
  "as 400 this": {
    "would": 1.0
  },
  "400 this would": {
    "not": 1.0
  },
  "this would not": {
    "be": 1.0
  },
  "would not be": {
    "a": 1.0
  },
  "not be a": {
    "very": 1.0
  },
  "be a very": {
    "efficient": 1.0
  },
  "a very efficient": {
    "way": 1.0
  },
  "very efficient way": {
    "to": 1.0
  },
  "efficient way to": {
    "write": 1.0
  },
  "way to write": {
    "a": 1.0
  },
  "to write a": {
    "client": 1.0
  },
  "write a client": {
    "server": 1.0
  },
  "a client server": {
    "application": 1.0
  },
  "server application because": {
    "the": 1.0
  },
  "application because the": {
    "join": 1.0
  },
  "because the join": {
    "and": 1.0
  },
  "the join and": {
    "any": 1.0
  },
  "join and any": {
    "filter": 1.0
  },
  "and any filter": {
    "ing": 1.0
  },
  "any filter ing": {
    "would": 1.0
  },
  "filter ing would": {
    "have": 1.0
  },
  "ing would have": {
    "to": 1.0
  },
  "to be processed": {
    "on": 1.0
  },
  "be processed on": {
    "the": 1.0
  },
  "processed on the": {
    "client": 1.0
  },
  "on the client": {
    "eliminating": 0.5,
    "machine": 0.5
  },
  "the client eliminating": {
    "the": 1.0
  },
  "client eliminating the": {
    "advantage": 1.0
  },
  "eliminating the advantage": {
    "of": 1.0
  },
  "advantage of client": {
    "server": 1.0
  },
  "server computing therefore": {
    "we": 1.0
  },
  "computing therefore we": {
    "will": 1.0
  },
  "therefore we will": {
    "not": 1.0
  },
  "we will not": {
    "address": 1.0
  },
  "will not address": {
    "this": 1.0
  },
  "not address this": {
    "possibility": 1.0
  },
  "address this possibility": {
    "in": 1.0
  },
  "this possibility in": {
    "this": 1.0
  },
  "possibility in this": {
    "article": 1.0
  },
  "in this article": {
    "project": 1.0
  },
  "this article project": {
    "a": 1.0
  },
  "article project a": {
    "relational": 1.0
  },
  "project a relational": {
    "project": 1.0
  },
  "a relational project": {
    "operation": 1.0
  },
  "relational project operation": {
    "tells": 1.0
  },
  "project operation tells": {
    "the": 1.0
  },
  "operation tells the": {
    "back": 1.0
  },
  "tells the back": {
    "end": 1.0
  },
  "database server to": {
    "only": 0.5,
    "return": 0.5
  },
  "server to only": {
    "return": 1.0
  },
  "to only return": {
    "to": 1.0
  },
  "only return to": {
    "the": 1.0
  },
  "client application a": {
    "specific": 1.0
  },
  "application a specific": {
    "sub": 1.0
  },
  "a specific sub": {
    "set": 1.0
  },
  "specific sub set": {
    "of": 1.0
  },
  "set of the": {
    "columns": 1.0
  },
  "of the columns": {
    "in": 1.0
  },
  "the columns in": {
    "a": 1.0
  },
  "columns in a": {
    "table": 1.0
  },
  "in a table": {
    "thereby": 1.0
  },
  "a table thereby": {
    "reducing": 1.0
  },
  "table thereby reducing": {
    "network": 1.0
  },
  "thereby reducing network": {
    "traffic": 1.0
  },
  "reducing network traffic": {
    "for": 1.0
  },
  "network traffic for": {
    "example": 1.0
  },
  "traffic for example": {
    "the": 1.0
  },
  "example the following": {
    "view": 0.625,
    "buffer": 0.125,
    "code": 0.25
  },
  "the following view": {
    "structure": 0.6,
    "will": 0.2,
    "returns": 0.2
  },
  "following view structure": {
    "will": 1.0
  },
  "view structure will": {
    "return": 1.0
  },
  "structure will return": {
    "only": 0.6666666666666666,
    "all": 0.3333333333333333
  },
  "will return only": {
    "the": 0.6666666666666666,
    "those": 0.3333333333333333
  },
  "return only the": {
    "specified": 0.5,
    "records": 0.5
  },
  "only the specified": {
    "fields": 1.0
  },
  "the specified fields": {
    "columns": 1.0
  },
  "specified fields columns": {
    "from": 1.0
  },
  "fields columns from": {
    "the": 1.0
  },
  "columns from the": {
    "students": 1.0
  },
  "from the students": {
    "file": 1.0
  },
  "the students file": {
    "table": 0.75,
    "records": 0.25
  },
  "students file table": {
    "myview": 0.3333333333333333,
    "wheth": 0.3333333333333333,
    "where": 0.3333333333333333
  },
  "file table myview": {
    "view": 1.0
  },
  "table myview view": {
    "students": 1.0
  },
  "myview view students": {
    "project": 0.3333333333333333,
    "filter": 0.5,
    "order": 0.16666666666666666
  },
  "view students project": {
    "stu": 1.0
  },
  "students project stu": {
    "lastname": 0.6666666666666666,
    "l": 0.3333333333333333
  },
  "project stu lastname": {
    "stu": 1.0
  },
  "stu lastname stu": {
    "firstname": 1.0
  },
  "lastname stu firstname": {
    "stu": 0.875,
    "project": 0.125
  },
  "stu firstname stu": {
    "major": 1.0
  },
  "firstname stu major": {
    "end": 0.625,
    "join": 0.25,
    "stu": 0.125
  },
  "stu major end": {
    "join": 0.2,
    "order": 0.2,
    "naturally": 0.2,
    "the": 0.2,
    "code": 0.2
  },
  "major end join": {
    "the": 1.0
  },
  "end join the": {
    "relational": 1.0
  },
  "join the relational": {
    "join": 1.0
  },
  "the relational join": {
    "operation": 1.0
  },
  "relational join operation": {
    "automatically": 1.0
  },
  "join operation automatically": {
    "joins": 1.0
  },
  "operation automatically joins": {
    "together": 1.0
  },
  "automatically joins together": {
    "related": 1.0
  },
  "joins together related": {
    "rows": 1.0
  },
  "together related rows": {
    "from": 1.0
  },
  "related rows from": {
    "multiple": 1.0
  },
  "rows from multiple": {
    "tables": 1.0
  },
  "from multiple tables": {
    "into": 1.0
  },
  "multiple tables into": {
    "a": 1.0
  },
  "tables into a": {
    "single": 1.0
  },
  "into a single": {
    "result": 1.0
  },
  "a single result": {
    "set": 1.0
  },
  "single result set": {
    "which": 1.0
  },
  "result set which": {
    "the": 1.0
  },
  "set which the": {
    "database": 1.0
  },
  "which the database": {
    "server": 1.0
  },
  "database server returns": {
    "to": 1.0
  },
  "server returns to": {
    "the": 1.0
  },
  "the client applic": {
    "ation": 1.0
  },
  "client applic ation": {
    "the": 1.0
  },
  "applic ation the": {
    "view": 1.0
  },
  "ation the view": {
    "structure": 1.0
  },
  "view structure defaults": {
    "to": 1.0
  },
  "structure defaults to": {
    "a": 1.0
  },
  "defaults to a": {
    "left": 1.0
  },
  "to a left": {
    "outer": 1.0
  },
  "a left outer": {
    "join": 1.0
  },
  "left outer join": {
    "unless": 0.5,
    "returns": 0.5
  },
  "outer join unless": {
    "the": 1.0
  },
  "join unless the": {
    "inner": 1.0
  },
  "unless the inner": {
    "attribute": 1.0
  },
  "the inner attribute": {
    "is": 0.5,
    "to": 0.5
  },
  "inner attribute is": {
    "specified": 1.0
  },
  "on the join": {
    "structure": 1.0
  },
  "the join structure": {
    "a": 0.5,
    "specifies": 0.5
  },
  "join structure a": {
    "left": 1.0
  },
  "structure a left": {
    "outer": 1.0
  },
  "outer join returns": {
    "all": 1.0
  },
  "join returns all": {
    "of": 1.0
  },
  "returns all of": {
    "the": 1.0
  },
  "all of the": {
    "outer": 1.0
  },
  "of the outer": {
    "rows": 1.0
  },
  "the outer rows": {
    "whether": 1.0
  },
  "outer rows whether": {
    "there": 1.0
  },
  "rows whether there": {
    "are": 1.0
  },
  "whether there are": {
    "related": 1.0
  },
  "there are related": {
    "inne": 0.3333333333333333,
    "majors": 0.6666666666666666
  },
  "are related inne": {
    "r": 1.0
  },
  "related inne r": {
    "rows": 1.0
  },
  "inne r rows": {
    "to": 1.0
  },
  "r rows to": {
    "return": 1.0
  },
  "rows to return": {
    "or": 1.0
  },
  "to return or": {
    "not": 1.0
  },
  "return or not": {
    "for": 1.0
  },
  "or not for": {
    "those": 0.5,
    "any": 0.5
  },
  "not for those": {
    "outer": 1.0
  },
  "for those outer": {
    "records": 1.0
  },
  "those outer records": {
    "without": 1.0
  },
  "outer records without": {
    "r": 1.0
  },
  "records without r": {
    "elated": 1.0
  },
  "without r elated": {
    "inner": 1.0
  },
  "r elated inner": {
    "records": 1.0
  },
  "elated inner records": {
    "the": 1.0
  },
  "inner records the": {
    "fields": 1.0
  },
  "records the fields": {
    "in": 1.0
  },
  "the fields in": {
    "the": 1.0
  },
  "fields in the": {
    "inner": 1.0
  },
  "in the inner": {
    "record": 1.0
  },
  "the inner record": {
    "are": 1.0
  },
  "inner record are": {
    "left": 1.0
  },
  "record are left": {
    "empty": 1.0
  },
  "are left empty": {
    "blank": 1.0
  },
  "or zero for": {
    "example": 1.0
  },
  "zero for example": {
    "the": 1.0
  },
  "will return all": {
    "records": 1.0
  },
  "return all records": {
    "rows": 1.0
  },
  "all records rows": {
    "in": 1.0
  },
  "records rows in": {
    "the": 1.0
  },
  "rows in the": {
    "students": 1.0
  },
  "in the students": {
    "file": 1.0
  },
  "file table wheth": {
    "er": 1.0
  },
  "table wheth er": {
    "or": 1.0
  },
  "wheth er or": {
    "not": 1.0
  },
  "er or not": {
    "there": 1.0
  },
  "or not there": {
    "are": 1.0
  },
  "not there are": {
    "related": 1.0
  },
  "are related majors": {
    "file": 1.0
  },
  "related majors file": {
    "records": 1.0
  },
  "majors file records": {
    "myview": 1.0
  },
  "file records myview": {
    "view": 1.0
  },
  "records myview view": {
    "s": 0.5,
    "students": 0.5
  },
  "myview view s": {
    "tudents": 1.0
  },
  "view s tudents": {
    "clarion": 1.0
  },
  "s tudents clarion": {
    "language": 1.0
  },
  "tudents clarion language": {
    "programming": 1.0
  },
  "programming guide 68": {
    "project": 1.0
  },
  "guide 68 project": {
    "stu": 1.0
  },
  "68 project stu": {
    "lastname": 1.0
  },
  "stu major join": {
    "maj": 1.0
  },
  "major join maj": {
    "keynumber": 1.0
  },
  "join maj keynumber": {
    "stu": 1.0
  },
  "maj keynumber stu": {
    "major": 1.0
  },
  "keynumber stu major": {
    "project": 0.5,
    "inner": 0.5
  },
  "stu major project": {
    "maj": 1.0
  },
  "major project maj": {
    "description": 1.0
  },
  "project maj description": {
    "maj": 1.0
  },
  "maj description maj": {
    "number": 1.0
  },
  "description maj number": {
    "end": 1.0
  },
  "maj number end": {
    "end": 1.0
  },
  "number end end": {
    "adding": 0.5,
    "filter": 0.5
  },
  "end end adding": {
    "the": 1.0
  },
  "end adding the": {
    "inner": 1.0
  },
  "adding the inner": {
    "attribute": 1.0
  },
  "inner attribute to": {
    "the": 1.0
  },
  "to the join": {
    "structure": 1.0
  },
  "join structure specifies": {
    "an": 1.0
  },
  "structure specifies an": {
    "inner": 1.0
  },
  "specifies an inner": {
    "join": 1.0
  },
  "an inner join": {
    "whic": 1.0
  },
  "inner join whic": {
    "h": 1.0
  },
  "join whic h": {
    "returns": 1.0
  },
  "whic h returns": {
    "only": 1.0
  },
  "h returns only": {
    "those": 1.0
  },
  "returns only those": {
    "outer": 1.0
  },
  "only those outer": {
    "rows": 1.0
  },
  "those outer rows": {
    "with": 1.0
  },
  "outer rows with": {
    "related": 1.0
  },
  "rows with related": {
    "inner": 1.0
  },
  "with related inner": {
    "rows": 1.0
  },
  "related inner rows": {
    "for": 1.0
  },
  "inner rows for": {
    "example": 1.0
  },
  "rows for example": {
    "the": 1.0
  },
  "only the records": {
    "rows": 1.0
  },
  "the records rows": {
    "in": 1.0
  },
  "file table where": {
    "there": 1.0
  },
  "table where there": {
    "are": 1.0
  },
  "project stu l": {
    "astname": 1.0
  },
  "stu l astname": {
    "stu": 1.0
  },
  "l astname stu": {
    "firstname": 1.0
  },
  "astname stu firstname": {
    "stu": 1.0
  },
  "stu major inner": {
    "project": 1.0
  },
  "major inner project": {
    "maj": 1.0
  },
  "inner project maj": {
    "description": 1.0
  },
  "end end filter": {
    "the": 1.0
  },
  "end filter the": {
    "filter": 1.0
  },
  "filter the filter": {
    "attribute": 1.0
  },
  "the filter attribute": {
    "on": 0.25,
    "by": 0.25,
    "however": 0.25,
    "s": 0.25
  },
  "filter attribute on": {
    "a": 1.0
  },
  "on a view": {
    "allows": 1.0
  },
  "a view allows": {
    "you": 1.0
  },
  "view allows you": {
    "to": 1.0
  },
  "to specify a": {
    "conditional": 0.5,
    "filter": 0.5
  },
  "specify a conditional": {
    "expression": 1.0
  },
  "a conditional expression": {
    "to": 1.0
  },
  "conditional expression to": {
    "filter": 1.0
  },
  "expression to filter": {
    "out": 1.0
  },
  "to filter out": {
    "unwanted": 1.0
  },
  "filter out unwanted": {
    "records": 1.0
  },
  "out unwanted records": {
    "this": 1.0
  },
  "unwanted records this": {
    "will": 1.0
  },
  "records this will": {
    "generate": 1.0
  },
  "will generate a": {
    "where": 1.0
  },
  "generate a where": {
    "clause": 1.0
  },
  "a where clause": {
    "in": 1.0
  },
  "where clause in": {
    "the": 1.0
  },
  "clause in the": {
    "generated": 1.0
  },
  "in the generated": {
    "sql": 1.0
  },
  "generated sql select": {
    "statement": 1.0
  },
  "sql select statement": {
    "for": 0.4,
    "to": 0.2,
    "is": 0.2,
    "will": 0.2
  },
  "select statement for": {
    "example": 1.0
  },
  "statement for example": {
    "the": 1.0
  },
  "following view will": {
    "return": 1.0
  },
  "view will return": {
    "only": 1.0
  },
  "return only those": {
    "students": 1.0
  },
  "only those students": {
    "file": 0.5,
    "with": 0.5
  },
  "those students file": {
    "records": 1.0
  },
  "students file records": {
    "whose": 0.5,
    "sorted": 0.5
  },
  "file records whose": {
    "last": 1.0
  },
  "records whose last": {
    "name": 1.0
  },
  "whose last name": {
    "is": 1.0
  },
  "last name is": {
    "taylor": 1.0
  },
  "name is taylor": {
    "myview": 1.0
  },
  "is taylor myview": {
    "view": 1.0
  },
  "taylor myview view": {
    "students": 1.0
  },
  "view students filter": {
    "stu": 1.0
  },
  "students filter stu": {
    "lastname": 0.3333333333333333,
    "major": 0.6666666666666666
  },
  "filter stu lastname": {
    "taylor": 1.0
  },
  "stu lastname taylor": {
    "project": 1.0
  },
  "lastname taylor project": {
    "stu": 1.0
  },
  "taylor project stu": {
    "lastname": 1.0
  },
  "major end order": {
    "the": 1.0
  },
  "end order the": {
    "order": 1.0
  },
  "the order attribute": {
    "on": 1.0
  },
  "order attribute on": {
    "a": 1.0
  },
  "specify the sort": {
    "order": 1.0
  },
  "of the result": {
    "set": 1.0
  },
  "result set returned": {
    "by": 1.0
  },
  "set returned by": {
    "the": 1.0
  },
  "by the database": {
    "server": 1.0
  },
  "database server this": {
    "will": 0.5,
    "allows": 0.5
  },
  "server this will": {
    "generate": 1.0
  },
  "will generate an": {
    "order": 0.5,
    "appropriate": 0.5
  },
  "generate an order": {
    "by": 1.0
  },
  "an order by": {
    "clause": 1.0
  },
  "order by clause": {
    "i": 1.0
  },
  "by clause i": {
    "n": 1.0
  },
  "clause i n": {
    "the": 1.0
  },
  "n the generated": {
    "sql": 1.0
  },
  "following view returns": {
    "the": 1.0
  },
  "view returns the": {
    "students": 1.0
  },
  "returns the students": {
    "file": 1.0
  },
  "file records sorted": {
    "in": 1.0
  },
  "records sorted in": {
    "descending": 1.0
  },
  "sorted in descending": {
    "last": 1.0
  },
  "in descending last": {
    "name": 1.0
  },
  "descending last name": {
    "and": 1.0
  },
  "last name and": {
    "ascending": 1.0
  },
  "name and ascending": {
    "first": 1.0
  },
  "and ascending first": {
    "name": 1.0
  },
  "ascending first name": {
    "order": 1.0
  },
  "first name order": {
    "myview": 1.0
  },
  "name order myview": {
    "view": 1.0
  },
  "order myview view": {
    "students": 1.0
  },
  "view students order": {
    "stu": 1.0
  },
  "students order stu": {
    "lastname": 1.0
  },
  "order stu lastname": {
    "stu": 1.0
  },
  "stu firstname project": {
    "stu": 1.0
  },
  "firstname project stu": {
    "lastname": 1.0
  },
  "major end naturally": {
    "all": 1.0
  },
  "end naturally all": {
    "these": 1.0
  },
  "naturally all these": {
    "attributes": 1.0
  },
  "all these attributes": {
    "can": 1.0
  },
  "these attributes can": {
    "be": 1.0
  },
  "attributes can be": {
    "combined": 1.0
  },
  "can be combined": {
    "so": 1.0
  },
  "be combined so": {
    "that": 1.0
  },
  "combined so that": {
    "the": 1.0
  },
  "so that the": {
    "result": 1.0
  },
  "that the result": {
    "set": 1.0
  },
  "result set returns": {
    "to": 1.0
  },
  "set returns to": {
    "the": 1.0
  },
  "client application filtered": {
    "ordered": 1.0
  },
  "application filtered ordered": {
    "projected": 1.0
  },
  "filtered ordered projected": {
    "and": 1.0
  },
  "ordered projected and": {
    "joined": 1.0
  },
  "projected and joined": {
    "by": 1.0
  },
  "and joined by": {
    "allowing": 1.0
  },
  "joined by allowing": {
    "the": 1.0
  },
  "by allowing the": {
    "back": 1.0
  },
  "allowing the back": {
    "end": 1.0
  },
  "database server t": {
    "o": 1.0
  },
  "server t o": {
    "do": 1.0
  },
  "t o do": {
    "this": 1.0
  },
  "o do this": {
    "work": 1.0
  },
  "do this work": {
    "the": 1.0
  },
  "this work the": {
    "only": 1.0
  },
  "work the only": {
    "network": 1.0
  },
  "the only network": {
    "traffic": 1.0
  },
  "only network traffic": {
    "generated": 1.0
  },
  "network traffic generated": {
    "is": 1.0
  },
  "traffic generated is": {
    "the": 1.0
  },
  "generated is the": {
    "minimum": 1.0
  },
  "is the minimum": {
    "necessary": 1.0
  },
  "the minimum necessary": {
    "to": 1.0
  },
  "minimum necessary to": {
    "give": 1.0
  },
  "necessary to give": {
    "the": 1.0
  },
  "to give the": {
    "client": 1.0
  },
  "give the client": {
    "application": 1.0
  },
  "application the requested": {
    "data": 1.0
  },
  "the requested data": {
    "the": 1.0
  },
  "requested data the": {
    "buffer": 1.0
  },
  "data the buffer": {
    "statement": 1.0
  },
  "buffer statement the": {
    "clarion": 0.5,
    "resulting": 0.5
  },
  "statement the clarion": {
    "buffer": 1.0
  },
  "the clarion buffer": {
    "statement": 1.0
  },
  "clarion buffer statement": {
    "can": 1.0
  },
  "buffer statement can": {
    "have": 1.0
  },
  "statement can have": {
    "a": 1.0
  },
  "can have a": {
    "tremendous": 0.5,
    "major": 0.5
  },
  "have a tremendous": {
    "impact": 1.0
  },
  "a tremendous impact": {
    "on": 1.0
  },
  "tremendous impact on": {
    "client": 1.0
  },
  "impact on client": {
    "server": 1.0
  },
  "on client server": {
    "application": 1.0
  },
  "server application perfo": {
    "rmance": 1.0
  },
  "application perfo rmance": {
    "buffer": 1.0
  },
  "perfo rmance buffer": {
    "tells": 1.0
  },
  "rmance buffer tells": {
    "the": 1.0
  },
  "buffer tells the": {
    "file": 1.0
  },
  "tells the file": {
    "driver": 1.0
  },
  "file driver to": {
    "set": 0.5,
    "consider": 0.5
  },
  "driver to set": {
    "up": 1.0
  },
  "to set up": {
    "a": 1.0
  },
  "set up a": {
    "buffer": 1.0
  },
  "up a buffer": {
    "to": 1.0
  },
  "a buffer to": {
    "hold": 1.0
  },
  "buffer to hold": {
    "previously": 1.0
  },
  "to hold previously": {
    "read": 1.0
  },
  "hold previously read": {
    "records": 1.0
  },
  "previously read records": {
    "and": 1.0
  },
  "read records and": {
    "a": 1.0
  },
  "records and a": {
    "read": 1.0
  },
  "and a read": {
    "ahead": 1.0
  },
  "a read ahead": {
    "buffer": 1.0
  },
  "read ahead buffer": {
    "for": 1.0
  },
  "ahead buffer for": {
    "anticipated": 1.0
  },
  "buffer for anticipated": {
    "record": 1.0
  },
  "for anticipated record": {
    "fetches": 1.0
  },
  "anticipated record fetches": {
    "it": 1.0
  },
  "record fetches it": {
    "also": 1.0
  },
  "fetches it also": {
    "specifies": 1.0
  },
  "it also specifies": {
    "a": 1.0
  },
  "also specifies a": {
    "time": 1.0
  },
  "specifies a time": {
    "period": 1.0
  },
  "a time period": {
    "during": 1.0
  },
  "time period during": {
    "which": 1.0
  },
  "period during which": {
    "the": 1.0
  },
  "during which the": {
    "buffered": 1.0
  },
  "which the buffered": {
    "data": 1.0
  },
  "the buffered data": {
    "is": 1.0
  },
  "buffered data is": {
    "considered": 1.0
  },
  "data is considered": {
    "to": 1.0
  },
  "is considered to": {
    "be": 1.0
  },
  "considered to be": {
    "valid": 1.0
  },
  "to be valid": {
    "after": 1.0
  },
  "be valid after": {
    "which": 1.0
  },
  "valid after which": {
    "the": 1.0
  },
  "after which the": {
    "data": 1.0
  },
  "which the data": {
    "i": 1.0
  },
  "the data i": {
    "s": 1.0
  },
  "data i s": {
    "re": 1.0
  },
  "i s re": {
    "read": 1.0
  },
  "s re read": {
    "from": 1.0
  },
  "re read from": {
    "the": 1.0
  },
  "read from the": {
    "back": 1.0
  },
  "database server when": {
    "the": 1.0
  },
  "server when the": {
    "file": 1.0
  },
  "file driver knows": {
    "it": 1.0
  },
  "driver knows it": {
    "has": 1.0
  },
  "knows it has": {
    "buffers": 1.0
  },
  "it has buffers": {
    "to": 1.0
  },
  "has buffers to": {
    "hold": 1.0
  },
  "buffers to hold": {
    "multiple": 0.5,
    "already": 0.5
  },
  "to hold multiple": {
    "records": 1.0
  },
  "hold multiple records": {
    "it": 1.0
  },
  "multiple records it": {
    "can": 1.0
  },
  "records it can": {
    "optimize": 1.0
  },
  "it can optimize": {
    "the": 1.0
  },
  "can optimize the": {
    "sql": 1.0
  },
  "optimize the sql": {
    "statements": 1.0
  },
  "sql statements it": {
    "generates": 1.0
  },
  "statements it generates": {
    "to": 1.0
  },
  "it generates to": {
    "the": 1.0
  },
  "generates to the": {
    "back": 1.0
  },
  "server this allows": {
    "the": 1.0
  },
  "allows the back": {
    "end": 1.0
  },
  "server to return": {
    "a": 1.0
  },
  "return a set": {
    "of": 1.0
  },
  "set of re": {
    "cords": 1.0
  },
  "of re cords": {
    "instead": 1.0
  },
  "re cords instead": {
    "of": 1.0
  },
  "cords instead of": {
    "a": 1.0
  },
  "a single record": {
    "at": 1.0
  },
  "single record at": {
    "a": 1.0
  },
  "record at a": {
    "time": 1.0
  },
  "a time also": {
    "called": 1.0
  },
  "time also called": {
    "fat": 1.0
  },
  "also called fat": {
    "fetches": 1.0
  },
  "called fat fetches": {
    "the": 1.0
  },
  "fat fetches the": {
    "net": 1.0
  },
  "fetches the net": {
    "effect": 1.0
  },
  "is to change": {
    "the": 1.0
  },
  "change the pattern": {
    "of": 1.0
  },
  "the pattern of": {
    "network": 1.0
  },
  "pattern of network": {
    "traffic": 1.0
  },
  "of network traffic": {
    "from": 1.0
  },
  "network traffic from": {
    "many": 1.0
  },
  "traffic from many": {
    "small": 1.0
  },
  "from many small": {
    "pie": 1.0
  },
  "many small pie": {
    "ces": 1.0
  },
  "small pie ces": {
    "of": 1.0
  },
  "pie ces of": {
    "data": 1.0
  },
  "ces of data": {
    "to": 1.0
  },
  "of data to": {
    "fewer": 1.0
  },
  "data to fewer": {
    "but": 1.0
  },
  "to fewer but": {
    "larger": 1.0
  },
  "fewer but larger": {
    "chunks": 1.0
  },
  "but larger chunks": {
    "of": 1.0
  },
  "larger chunks of": {
    "data": 1.0
  },
  "chunks of data": {
    "making": 1.0
  },
  "of data making": {
    "for": 1.0
  },
  "data making for": {
    "more": 1.0
  },
  "making for more": {
    "efficient": 1.0
  },
  "for more efficient": {
    "overall": 1.0
  },
  "more efficient overall": {
    "network": 1.0
  },
  "efficient overall network": {
    "utilizat": 1.0
  },
  "overall network utilizat": {
    "ion": 1.0
  },
  "network utilizat ion": {
    "the": 1.0
  },
  "utilizat ion the": {
    "most": 1.0
  },
  "ion the most": {
    "common": 1.0
  },
  "use of buffer": {
    "would": 1.0
  },
  "of buffer would": {
    "probably": 1.0
  },
  "buffer would probably": {
    "be": 1.0
  },
  "probably be in": {
    "procedures": 1.0
  },
  "be in procedures": {
    "which": 1.0
  },
  "in procedures which": {
    "allow": 1.0
  },
  "procedures which allow": {
    "the": 1.0
  },
  "which allow the": {
    "end": 1.0
  },
  "allow the end": {
    "user": 1.0
  },
  "end user to": {
    "browse": 1.0
  },
  "user to browse": {
    "through": 1.0
  },
  "to browse through": {
    "the": 1.0
  },
  "browse through the": {
    "database": 1.0
  },
  "through the database": {
    "by": 1.0
  },
  "the database by": {
    "setting": 1.0
  },
  "database by setting": {
    "up": 1.0
  },
  "by setting up": {
    "buffers": 1.0
  },
  "setting up buffers": {
    "to": 1.0
  },
  "up buffers to": {
    "hold": 1.0
  },
  "to hold already": {
    "read": 1.0
  },
  "hold already read": {
    "records": 1.0
  },
  "already read records": {
    "the": 1.0
  },
  "read records the": {
    "client": 1.0
  },
  "records the client": {
    "machine": 1.0
  },
  "the client machine": {
    "fetches": 0.5,
    "giving": 0.5
  },
  "client machine fetches": {
    "records": 1.0
  },
  "machine fetches records": {
    "from": 1.0
  },
  "fetches records from": {
    "the": 1.0
  },
  "from the local": {
    "buffer": 1.0
  },
  "the local buffer": {
    "when": 0.5,
    "on": 0.5
  },
  "local buffer when": {
    "the": 1.0
  },
  "buffer when the": {
    "user": 1.0
  },
  "the user has": {
    "page": 0.5,
    "never": 0.5
  },
  "user has page": {
    "d": 1.0
  },
  "has page d": {
    "ahead": 1.0
  },
  "page d ahead": {
    "then": 1.0
  },
  "d ahead then": {
    "returns": 1.0
  },
  "ahead then returns": {
    "to": 1.0
  },
  "then returns to": {
    "a": 1.0
  },
  "returns to a": {
    "previous": 1.0
  },
  "to a previous": {
    "page": 1.0
  },
  "a previous page": {
    "of": 1.0
  },
  "previous page of": {
    "records": 1.0
  },
  "page of records": {
    "instead": 0.3333333333333333,
    "this": 0.3333333333333333,
    "and": 0.3333333333333333
  },
  "of records instead": {
    "of": 1.0
  },
  "records instead of": {
    "generating": 1.0
  },
  "instead of generating": {
    "another": 1.0
  },
  "of generating another": {
    "request": 1.0
  },
  "generating another request": {
    "to": 1.0
  },
  "another request to": {
    "the": 1.0
  },
  "request to the": {
    "back": 1.0
  },
  "database server for": {
    "the": 0.5,
    "example": 0.5
  },
  "server for the": {
    "same": 1.0
  },
  "for the same": {
    "page": 1.0
  },
  "the same page": {
    "of": 1.0
  },
  "same page of": {
    "records": 1.0
  },
  "of records this": {
    "eliminates": 1.0
  },
  "records this eliminates": {
    "the": 1.0
  },
  "this eliminates the": {
    "network": 1.0
  },
  "eliminates the network": {
    "traffic": 1.0
  },
  "network traffic that": {
    "would": 1.0
  },
  "traffic that would": {
    "normally": 1.0
  },
  "that would normally": {
    "be": 1.0
  },
  "would normally be": {
    "generated": 1.0
  },
  "normally be generated": {
    "for": 1.0
  },
  "be generated for": {
    "subsequent": 1.0
  },
  "generated for subsequent": {
    "requests": 1.0
  },
  "for subsequent requests": {
    "for": 1.0
  },
  "subsequent requests for": {
    "the": 1.0
  },
  "requests for the": {
    "sam": 1.0
  },
  "for the sam": {
    "e": 1.0
  },
  "the sam e": {
    "set": 1.0
  },
  "sam e set": {
    "of": 1.0
  },
  "e set of": {
    "records": 1.0
  },
  "set of records": {
    "setting": 1.0
  },
  "of records setting": {
    "up": 1.0
  },
  "records setting up": {
    "read": 1.0
  },
  "setting up read": {
    "ahead": 1.0
  },
  "up read ahead": {
    "buffers": 1.0
  },
  "read ahead buffers": {
    "enables": 1.0
  },
  "ahead buffers enables": {
    "the": 1.0
  },
  "buffers enables the": {
    "client": 1.0
  },
  "enables the client": {
    "application": 1.0
  },
  "client application to": {
    "anticipate": 1.0
  },
  "application to anticipate": {
    "the": 1.0
  },
  "to anticipate the": {
    "user": 1.0
  },
  "anticipate the user": {
    "s": 1.0
  },
  "user s request": {
    "for": 1.0
  },
  "s request for": {
    "the": 1.0
  },
  "request for the": {
    "next": 1.0
  },
  "for the next": {
    "page": 1.0
  },
  "the next page": {
    "of": 0.5,
    "those": 0.5
  },
  "next page of": {
    "records": 1.0
  },
  "of records and": {
    "receive": 1.0
  },
  "records and receive": {
    "them": 1.0
  },
  "and receive them": {
    "from": 1.0
  },
  "receive them from": {
    "the": 1.0
  },
  "them from the": {
    "back": 1.0
  },
  "database server while": {
    "the": 1.0
  },
  "server while the": {
    "user": 1.0
  },
  "while the user": {
    "is": 1.0
  },
  "user is still": {
    "examining": 1.0
  },
  "is still examining": {
    "the": 1.0
  },
  "still examining the": {
    "first": 1.0
  },
  "examining the first": {
    "page": 1.0
  },
  "the first page": {
    "therefore": 1.0
  },
  "first page therefore": {
    "wh": 1.0
  },
  "page therefore wh": {
    "en": 1.0
  },
  "therefore wh en": {
    "the": 1.0
  },
  "wh en the": {
    "user": 1.0
  },
  "en the user": {
    "finally": 1.0
  },
  "the user finally": {
    "does": 1.0
  },
  "user finally does": {
    "request": 1.0
  },
  "finally does request": {
    "the": 1.0
  },
  "does request the": {
    "next": 1.0
  },
  "request the next": {
    "page": 1.0
  },
  "next page those": {
    "records": 1.0
  },
  "page those records": {
    "are": 1.0
  },
  "those records are": {
    "also": 1.0
  },
  "records are also": {
    "fetched": 1.0
  },
  "are also fetched": {
    "from": 1.0
  },
  "also fetched from": {
    "the": 1.0
  },
  "fetched from the": {
    "local": 1.0
  },
  "local buffer on": {
    "the": 1.0
  },
  "buffer on the": {
    "client": 1.0
  },
  "client machine giving": {
    "the": 1.0
  },
  "machine giving the": {
    "end": 1.0
  },
  "giving the end": {
    "user": 1.0
  },
  "end user apparently": {
    "instantaneous": 1.0
  },
  "user apparently instantaneous": {
    "database": 1.0
  },
  "apparently instantaneous database": {
    "retrieval": 1.0
  },
  "instantaneous database retrieval": {
    "69": 1.0
  },
  "database retrieval 69": {
    "developing": 1.0
  },
  "retrieval 69 developing": {
    "client": 1.0
  },
  "69 developing client": {
    "server": 1.0
  },
  "server applications for": {
    "example": 1.0
  },
  "applications for example": {
    "the": 1.0
  },
  "the following buffer": {
    "statement": 1.0
  },
  "following buffer statement": {
    "tells": 1.0
  },
  "buffer statement tells": {
    "the": 1.0
  },
  "statement tells the": {
    "file": 1.0
  },
  "driver to consider": {
    "10": 1.0
  },
  "to consider 10": {
    "records": 1.0
  },
  "consider 10 records": {
    "as": 1.0
  },
  "10 records as": {
    "a": 1.0
  },
  "records as a": {
    "single": 1.0
  },
  "a single page": {
    "to": 1.0
  },
  "single page to": {
    "buffer": 1.0
  },
  "page to buffer": {
    "5": 1.0
  },
  "to buffer 5": {
    "previously": 1.0
  },
  "buffer 5 previously": {
    "read": 1.0
  },
  "5 previously read": {
    "pages": 1.0
  },
  "previously read pages": {
    "to": 1.0
  },
  "read pages to": {
    "read": 1.0
  },
  "pages to read": {
    "2": 1.0
  },
  "to read 2": {
    "pages": 1.0
  },
  "read 2 pages": {
    "ahead": 1.0
  },
  "2 pages ahead": {
    "and": 1.0
  },
  "pages ahead and": {
    "to": 1.0
  },
  "ahead and to": {
    "consider": 1.0
  },
  "and to consider": {
    "the": 1.0
  },
  "to consider the": {
    "buffered": 1.0
  },
  "consider the buffered": {
    "records": 1.0
  },
  "the buffered records": {
    "valid": 1.0
  },
  "buffered records valid": {
    "for": 1.0
  },
  "records valid for": {
    "5": 1.0
  },
  "valid for 5": {
    "minutes": 1.0
  },
  "for 5 minutes": {
    "300": 1.0
  },
  "5 minutes 300": {
    "seconds": 1.0
  },
  "minutes 300 seconds": {
    "buffer": 1.0
  },
  "300 seconds buffer": {
    "myview": 1.0
  },
  "seconds buffer myview": {
    "10": 1.0
  },
  "buffer myview 10": {
    "5": 1.0
  },
  "myview 10 5": {
    "2": 1.0
  },
  "10 5 2": {
    "300": 1.0
  },
  "5 2 300": {
    "10": 1.0
  },
  "2 300 10": {
    "recs": 1.0
  },
  "300 10 recs": {
    "per": 1.0
  },
  "10 recs per": {
    "page": 1.0
  },
  "recs per page": {
    "5": 1.0
  },
  "per page 5": {
    "pages": 1.0
  },
  "page 5 pages": {
    "behind": 1.0
  },
  "5 pages behind": {
    "2": 1.0
  },
  "pages behind 2": {
    "read": 1.0
  },
  "behind 2 read": {
    "ahead": 1.0
  },
  "2 read ahead": {
    "with": 1.0
  },
  "read ahead with": {
    "a": 1.0
  },
  "ahead with a": {
    "5": 1.0
  },
  "with a 5": {
    "minute": 1.0
  },
  "a 5 minute": {
    "timeout": 1.0
  },
  "5 minute timeout": {
    "embedded": 1.0
  },
  "minute timeout embedded": {
    "sql": 1.0
  },
  "timeout embedded sql": {
    "in": 1.0
  },
  "in clarion clarion": {
    "s": 1.0
  },
  "clarion clarion s": {
    "file": 1.0
  },
  "driver technology lets": {
    "the": 1.0
  },
  "technology lets the": {
    "clarion": 1.0
  },
  "lets the clarion": {
    "programmer": 1.0
  },
  "clarion programmer learn": {
    "and": 1.0
  },
  "programmer learn and": {
    "use": 1.0
  },
  "learn and use": {
    "just": 1.0
  },
  "and use just": {
    "the": 1.0
  },
  "use just the": {
    "clarion": 1.0
  },
  "just the clarion": {
    "language": 1.0
  },
  "clarion language s": {
    "file": 1.0
  },
  "language s file": {
    "input": 1.0
  },
  "s file input": {
    "output": 1.0
  },
  "file input output": {
    "syntax": 1.0
  },
  "input output syntax": {
    "no": 1.0
  },
  "output syntax no": {
    "matter": 1.0
  },
  "syntax no matter": {
    "which": 1.0
  },
  "no matter which": {
    "file": 0.5,
    "back": 0.5
  },
  "matter which file": {
    "system": 1.0
  },
  "which file system": {
    "contains": 1.0
  },
  "file system contains": {
    "the": 1.0
  },
  "system contains the": {
    "data": 1.0
  },
  "contains the data": {
    "the": 1.0
  },
  "the data the": {
    "file": 1.0
  },
  "data the file": {
    "driver": 1.0
  },
  "file driver automatically": {
    "converts": 1.0
  },
  "driver automatically converts": {
    "the": 1.0
  },
  "automatically converts the": {
    "clarion": 1.0
  },
  "converts the clarion": {
    "language": 1.0
  },
  "clarion language statements": {
    "into": 1.0
  },
  "language statements into": {
    "whatever": 1.0
  },
  "statements into whatever": {
    "form": 1.0
  },
  "into whatever form": {
    "the": 1.0
  },
  "whatever form the": {
    "file": 1.0
  },
  "form the file": {
    "system": 1.0
  },
  "file system requires": {
    "for": 1.0
  },
  "system requires for": {
    "its": 1.0
  },
  "requires for its": {
    "fulfillment": 1.0
  },
  "for its fulfillment": {
    "of": 1.0
  },
  "its fulfillment of": {
    "data": 1.0
  },
  "fulfillment of data": {
    "requests": 1.0
  },
  "of data requests": {
    "therefore": 1.0
  },
  "data requests therefore": {
    "for": 1.0
  },
  "requests therefore for": {
    "file": 1.0
  },
  "therefore for file": {
    "drivers": 1.0
  },
  "for file drivers": {
    "whic": 1.0
  },
  "file drivers whic": {
    "h": 1.0
  },
  "drivers whic h": {
    "interface": 1.0
  },
  "whic h interface": {
    "to": 1.0
  },
  "h interface to": {
    "sql": 1.0
  },
  "interface to sql": {
    "based": 1.0
  },
  "to sql based": {
    "database": 1.0
  },
  "sql based database": {
    "servers": 0.75,
    "systems": 0.25
  },
  "based database servers": {
    "the": 0.3333333333333333,
    "a": 0.3333333333333333,
    "is": 0.3333333333333333
  },
  "database servers the": {
    "file": 1.0
  },
  "servers the file": {
    "driver": 1.0
  },
  "file driver itsel": {
    "f": 1.0
  },
  "driver itsel f": {
    "generates": 1.0
  },
  "itsel f generates": {
    "the": 1.0
  },
  "f generates the": {
    "necessary": 1.0
  },
  "generates the necessary": {
    "sql": 1.0
  },
  "the necessary sql": {
    "statements": 1.0
  },
  "necessary sql statements": {
    "to": 1.0
  },
  "sql statements to": {
    "retrieve": 1.0
  },
  "statements to retrieve": {
    "the": 1.0
  },
  "to retrieve the": {
    "data": 0.5,
    "result": 0.5
  },
  "retrieve the data": {
    "from": 1.0
  },
  "the data from": {
    "the": 1.0
  },
  "data from the": {
    "database": 1.0
  },
  "database server given": {
    "all": 1.0
  },
  "server given all": {
    "the": 1.0
  },
  "given all the": {
    "information": 1.0
  },
  "information that the": {
    "file": 1.0
  },
  "that the file": {
    "driver": 1.0
  },
  "file driver can": {
    "obtain": 0.5,
    "be": 0.5
  },
  "driver can obtain": {
    "from": 1.0
  },
  "can obtain from": {
    "file": 1.0
  },
  "obtain from file": {
    "structure": 1.0
  },
  "from file structure": {
    "declarations": 1.0
  },
  "file structure declarations": {
    "view": 1.0
  },
  "structure declarations view": {
    "structure": 1.0
  },
  "declarations view structure": {
    "declarations": 1.0
  },
  "view structure declarations": {
    "and": 1.0
  },
  "structure declarations and": {
    "the": 1.0
  },
  "declarations and the": {
    "buffer": 1.0
  },
  "and the buffer": {
    "statement": 1.0
  },
  "statement the resulting": {
    "sql": 1.0
  },
  "the resulting sql": {
    "gen": 1.0
  },
  "resulting sql gen": {
    "erated": 1.0
  },
  "sql gen erated": {
    "by": 1.0
  },
  "gen erated by": {
    "the": 1.0
  },
  "erated by the": {
    "file": 1.0
  },
  "driver can be": {
    "quite": 1.0
  },
  "can be quite": {
    "efficient": 1.0
  },
  "be quite efficient": {
    "however": 1.0
  },
  "quite efficient however": {
    "there": 1.0
  },
  "efficient however there": {
    "are": 1.0
  },
  "however there are": {
    "still": 0.5,
    "always": 0.5
  },
  "there are still": {
    "times": 1.0
  },
  "are still times": {
    "when": 1.0
  },
  "still times when": {
    "an": 1.0
  },
  "times when an": {
    "experienced": 1.0
  },
  "when an experienced": {
    "and": 1.0
  },
  "an experienced and": {
    "knowledgeable": 1.0
  },
  "experienced and knowledgeable": {
    "sql": 1.0
  },
  "and knowledgeable sql": {
    "programmer": 1.0
  },
  "knowledgeable sql programmer": {
    "will": 1.0
  },
  "sql programmer will": {
    "want": 1.0
  },
  "programmer will want": {
    "to": 1.0
  },
  "will want to": {
    "extend": 1.0
  },
  "want to extend": {
    "the": 1.0
  },
  "to extend the": {
    "functionality": 1.0
  },
  "extend the functionality": {
    "of": 1.0
  },
  "the functionality of": {
    "the": 1.0
  },
  "functionality of the": {
    "file": 1.0
  },
  "file driver or": {
    "take": 1.0
  },
  "driver or take": {
    "full": 1.0
  },
  "or take full": {
    "control": 1.0
  },
  "full control to": {
    "accomplish": 1.0
  },
  "control to accomplish": {
    "a": 1.0
  },
  "to accomplish a": {
    "task": 1.0
  },
  "accomplish a task": {
    "that": 1.0
  },
  "a task that": {
    "is": 1.0
  },
  "task that is": {
    "best": 1.0
  },
  "that is best": {
    "accomplis": 1.0
  },
  "is best accomplis": {
    "hed": 1.0
  },
  "best accomplis hed": {
    "in": 1.0
  },
  "accomplis hed in": {
    "sql": 1.0
  },
  "hed in sql": {
    "some": 1.0
  },
  "in sql some": {
    "task": 1.0
  },
  "sql some task": {
    "that": 1.0
  },
  "some task that": {
    "the": 1.0
  },
  "task that the": {
    "file": 1.0
  },
  "file driver would": {
    "not": 1.0
  },
  "driver would not": {
    "normally": 1.0
  },
  "would not normally": {
    "generate": 1.0
  },
  "not normally generate": {
    "such": 1.0
  },
  "normally generate such": {
    "as": 1.0
  },
  "generate such as": {
    "deleting": 1.0
  },
  "such as deleting": {
    "an": 1.0
  },
  "as deleting an": {
    "entire": 1.0
  },
  "deleting an entire": {
    "block": 1.0
  },
  "an entire block": {
    "of": 1.0
  },
  "entire block of": {
    "records": 1.0
  },
  "block of records": {
    "at": 1.0
  },
  "of records at": {
    "once": 1.0
  },
  "records at once": {
    "or": 1.0
  },
  "at once or": {
    "updating": 1.0
  },
  "once or updating": {
    "a": 1.0
  },
  "or updating a": {
    "single": 1.0
  },
  "updating a single": {
    "field": 1.0
  },
  "a single field": {
    "in": 1.0
  },
  "single field in": {
    "all": 1.0
  },
  "field in all": {
    "rows": 1.0
  },
  "in all rows": {
    "of": 1.0
  },
  "all rows of": {
    "a": 1.0
  },
  "rows of a": {
    "table": 1.0
  },
  "of a table": {
    "to": 1.0
  },
  "a table to": {
    "some": 1.0
  },
  "table to some": {
    "new": 1.0
  },
  "to some new": {
    "value": 1.0
  },
  "some new value": {
    "to": 1.0
  },
  "new value to": {
    "cover": 1.0
  },
  "value to cover": {
    "these": 1.0
  },
  "to cover these": {
    "circumstances": 1.0
  },
  "cover these circumstances": {
    "the": 1.0
  },
  "these circumstances the": {
    "clarion": 1.0
  },
  "circumstances the clarion": {
    "language": 1.0
  },
  "provides a mechanism": {
    "to": 1.0
  },
  "a mechanism to": {
    "allow": 1.0
  },
  "mechanism to allow": {
    "sending": 1.0
  },
  "to allow sending": {
    "any": 1.0
  },
  "allow sending any": {
    "sql": 1.0
  },
  "sending any sql": {
    "statement": 1.0
  },
  "server prop sql": {
    "prop": 1.0
  },
  "prop sql prop": {
    "sql": 0.5,
    "sqlfilter": 0.5
  },
  "sql prop sql": {
    "the": 1.0
  },
  "prop sql the": {
    "syntax": 1.0
  },
  "sql the syntax": {
    "of": 1.0
  },
  "the syntax of": {
    "prop": 1.0
  },
  "syntax of prop": {
    "sql": 1.0
  },
  "of prop sql": {
    "is": 1.0
  },
  "same as any": {
    "other": 1.0
  },
  "as any other": {
    "clarion": 1.0
  },
  "any other clarion": {
    "language": 1.0
  },
  "other clarion language": {
    "property": 1.0
  },
  "clarion language property": {
    "assignment": 1.0
  },
  "language property assignment": {
    "statement": 1.0
  },
  "property assignment statement": {
    "with": 1.0
  },
  "assignment statement with": {
    "the": 1.0
  },
  "statement with the": {
    "target": 1.0
  },
  "with the target": {
    "being": 1.0
  },
  "the target being": {
    "the": 1.0
  },
  "target being the": {
    "label": 1.0
  },
  "of a ny": {
    "file": 1.0
  },
  "a ny file": {
    "or": 1.0
  },
  "ny file or": {
    "view": 1.0
  },
  "or view declaration": {
    "that": 1.0
  },
  "view declaration that": {
    "uses": 1.0
  },
  "declaration that uses": {
    "the": 1.0
  },
  "that uses the": {
    "sql": 1.0
  },
  "uses the sql": {
    "file": 1.0
  },
  "the sql file": {
    "driver": 1.0
  },
  "driver for example": {
    "myfile": 1.0
  },
  "for example myfile": {
    "prop": 1.0
  },
  "example myfile prop": {
    "sql": 1.0
  },
  "myfile prop sql": {
    "select": 1.0
  },
  "prop sql select": {
    "from": 1.0
  },
  "sql select from": {
    "sometable": 1.0
  },
  "select from sometable": {
    "this": 1.0
  },
  "from sometable this": {
    "statement": 1.0
  },
  "sometable this statement": {
    "sends": 1.0
  },
  "this statement sends": {
    "the": 1.0
  },
  "statement sends the": {
    "specified": 1.0
  },
  "sends the specified": {
    "sql": 1.0
  },
  "the specified sql": {
    "select": 1.0
  },
  "specified sql select": {
    "statement": 1.0
  },
  "select statement to": {
    "the": 1.0
  },
  "database server note": {
    "that": 1.0
  },
  "server note that": {
    "the": 1.0
  },
  "note that the": {
    "target": 1.0
  },
  "that the target": {
    "of": 1.0
  },
  "the target of": {
    "prop": 1.0
  },
  "target of prop": {
    "sql": 1.0
  },
  "sql is myfile": {
    "while": 1.0
  },
  "is myfile while": {
    "the": 1.0
  },
  "myfile while the": {
    "sql": 1.0
  },
  "while the sql": {
    "select": 1.0
  },
  "the sql select": {
    "statement": 1.0
  },
  "select statement is": {
    "directed": 1.0
  },
  "statement is directed": {
    "to": 1.0
  },
  "is directed to": {
    "sometable": 1.0
  },
  "directed to sometable": {
    "you": 1.0
  },
  "to sometable you": {
    "can": 1.0
  },
  "sometable you can": {
    "send": 1.0
  },
  "you can send": {
    "any": 1.0
  },
  "can send any": {
    "sql": 1.0
  },
  "statement to prop": {
    "sql": 1.0
  },
  "to prop sql": {
    "regardless": 0.5,
    "prop": 0.5
  },
  "prop sql regardless": {
    "of": 1.0
  },
  "sql regardless of": {
    "whether": 1.0
  },
  "regardless of whether": {
    "the": 1.0
  },
  "of whether the": {
    "target": 1.0
  },
  "whether the target": {
    "of": 1.0
  },
  "sql is affected": {
    "by": 1.0
  },
  "is affected by": {
    "the": 1.0
  },
  "affected by the": {
    "sql": 1.0
  },
  "by the sql": {
    "or": 1.0
  },
  "sql or not": {
    "the": 1.0
  },
  "not the target": {
    "file": 1.0
  },
  "the target file": {
    "is": 1.0
  },
  "target file is": {
    "just": 1.0
  },
  "file is just": {
    "the": 1.0
  },
  "just the mechanism": {
    "whereby": 1.0
  },
  "the mechanism whereby": {
    "the": 1.0
  },
  "mechanism whereby the": {
    "correct": 1.0
  },
  "whereby the correct": {
    "file": 1.0
  },
  "the correct file": {
    "driver": 1.0
  },
  "correct file driver": {
    "processes": 1.0
  },
  "file driver processes": {
    "your": 1.0
  },
  "driver processes your": {
    "sql": 1.0
  },
  "processes your sql": {
    "since": 1.0
  },
  "your sql since": {
    "this": 1.0
  },
  "sql since this": {
    "sql": 1.0
  },
  "since this sql": {
    "select": 1.0
  },
  "this sql select": {
    "statement": 1.0
  },
  "select statement will": {
    "return": 1.0
  },
  "statement will return": {
    "a": 1.0
  },
  "will return a": {
    "result": 1.0
  },
  "return a result": {
    "set": 1.0
  },
  "a result set": {
    "you": 1.0
  },
  "result set you": {
    "must": 1.0
  },
  "set you must": {
    "use": 1.0
  },
  "must use the": {
    "clarion": 1.0
  },
  "use the clarion": {
    "next": 0.3333333333333333,
    "null": 0.3333333333333333,
    "file": 0.3333333333333333
  },
  "the clarion next": {
    "statement": 1.0
  },
  "clarion next statement": {
    "to": 1.0
  },
  "next statement to": {
    "retrieve": 1.0
  },
  "statement to retrieve": {
    "the": 1.0
  },
  "retrieve the result": {
    "set": 1.0
  },
  "result set one": {
    "record": 1.0
  },
  "set one record": {
    "at": 1.0
  },
  "one record at": {
    "a": 1.0
  },
  "a time and": {
    "the": 1.0
  },
  "time and the": {
    "file": 1.0
  },
  "the file declaration": {
    "referenced": 1.0
  },
  "file declaration referenced": {
    "in": 1.0
  },
  "declaration referenced in": {
    "the": 1.0
  },
  "referenced in the": {
    "next": 1.0
  },
  "in the next": {
    "statement": 1.0
  },
  "the next statement": {
    "must": 1.0
  },
  "next statement must": {
    "have": 1.0
  },
  "statement must have": {
    "the": 1.0
  },
  "have the same": {
    "number": 1.0
  },
  "the same number": {
    "of": 1.0
  },
  "same number of": {
    "fields": 1.0
  },
  "number of fields": {
    "as": 1.0
  },
  "of fields as": {
    "sometab": 1.0
  },
  "fields as sometab": {
    "le": 1.0
  },
  "as sometab le": {
    "obviously": 1.0
  },
  "sometab le obviously": {
    "this": 1.0
  },
  "le obviously this": {
    "specific": 1.0
  },
  "obviously this specific": {
    "example": 1.0
  },
  "this specific example": {
    "does": 1.0
  },
  "specific example does": {
    "not": 1.0
  },
  "example does not": {
    "demonstrate": 1.0
  },
  "does not demonstrate": {
    "the": 1.0
  },
  "not demonstrate the": {
    "preferred": 1.0
  },
  "demonstrate the preferred": {
    "method": 1.0
  },
  "the preferred method": {
    "of": 1.0
  },
  "preferred method of": {
    "working": 1.0
  },
  "method of working": {
    "in": 1.0
  },
  "of working in": {
    "clarion": 1.0
  },
  "working in clarion": {
    "since": 1.0
  },
  "clarion since the": {
    "file": 1.0
  },
  "since the file": {
    "driver": 1.0
  },
  "file driver itself": {
    "will": 1.0
  },
  "driver itself will": {
    "more": 1.0
  },
  "itself will more": {
    "than": 1.0
  },
  "will more than": {
    "adequately": 1.0
  },
  "more than adequately": {
    "generate": 1.0
  },
  "than adequately generate": {
    "such": 1.0
  },
  "adequately generate such": {
    "simple": 1.0
  },
  "generate such simple": {
    "sql": 1.0
  },
  "such simple sql": {
    "select": 1.0
  },
  "simple sql select": {
    "statements": 1.0
  },
  "sql select statements": {
    "for": 1.0
  },
  "select statements for": {
    "you": 1.0
  },
  "statements for you": {
    "the": 1.0
  },
  "you the real": {
    "usefulness": 1.0
  },
  "the real usefulness": {
    "of": 1.0
  },
  "real usefulness of": {
    "prop": 1.0
  },
  "usefulness of prop": {
    "sql": 1.0
  },
  "sql is to": {
    "perform": 0.5,
    "call": 0.5
  },
  "is to perform": {
    "sql": 1.0
  },
  "to perform sql": {
    "functions": 1.0
  },
  "perform sql functions": {
    "that": 1.0
  },
  "sql functions that": {
    "have": 1.0
  },
  "functions that have": {
    "no": 1.0
  },
  "that have no": {
    "direct": 1.0
  },
  "have no direct": {
    "corollary": 1.0
  },
  "no direct corollary": {
    "in": 1.0
  },
  "direct corollary in": {
    "the": 1.0
  },
  "corollary in the": {
    "clarion": 1.0
  },
  "clarion language one": {
    "prime": 1.0
  },
  "language one prime": {
    "example": 1.0
  },
  "one prime example": {
    "of": 1.0
  },
  "prime example of": {
    "this": 1.0
  },
  "this is table": {
    "file": 1.0
  },
  "is table file": {
    "creation": 1.0
  },
  "table file creation": {
    "on": 1.0
  },
  "file creation on": {
    "the": 1.0
  },
  "creation on the": {
    "database": 1.0
  },
  "on the database": {
    "server": 1.0
  },
  "server the clarion": {
    "language": 1.0
  },
  "clarion language create": {
    "statement": 1.0
  },
  "language create statement": {
    "will": 1.0
  },
  "create statement will": {
    "certainly": 1.0
  },
  "statement will certainly": {
    "allow": 1.0
  },
  "will certainly allow": {
    "you": 1.0
  },
  "certainly allow you": {
    "to": 1.0
  },
  "you to create": {
    "new": 1.0
  },
  "to create new": {
    "tables": 1.0
  },
  "create new tables": {
    "in": 1.0
  },
  "new tables in": {
    "the": 1.0
  },
  "the database and": {
    "the": 1.0
  },
  "database and the": {
    "file": 1.0
  },
  "file driver will": {
    "generate": 0.5,
    "append": 0.5
  },
  "driver will generate": {
    "an": 1.0
  },
  "generate an appropriate": {
    "sql": 1.0
  },
  "an appropriate sql": {
    "create": 1.0
  },
  "appropriate sql create": {
    "statement": 1.0
  },
  "sql create statement": {
    "to": 0.6666666666666666,
    "specifies": 0.3333333333333333
  },
  "create statement to": {
    "perform": 0.5,
    "the": 0.5
  },
  "statement to perform": {
    "the": 1.0
  },
  "perform the task": {
    "however": 1.0
  },
  "the task however": {
    "the": 1.0
  },
  "task however the": {
    "clarion": 1.0
  },
  "the clarion create": {
    "statement": 1.0
  },
  "clarion create statement": {
    "is": 0.5,
    "the": 0.5
  },
  "create statement is": {
    "limited": 1.0
  },
  "statement is limited": {
    "to": 1.0
  },
  "to the information": {
    "stored": 1.0
  },
  "the information stored": {
    "in": 1.0
  },
  "information stored in": {
    "your": 1.0
  },
  "stored in your": {
    "file": 1.0
  },
  "in your file": {
    "declaration": 1.0
  },
  "your file declaration": {
    "it": 1.0
  },
  "file declaration it": {
    "is": 1.0
  },
  "declaration it is": {
    "much": 1.0
  },
  "it is much": {
    "better": 1.0
  },
  "is much better": {
    "to": 1.0
  },
  "much better to": {
    "use": 1.0
  },
  "better to use": {
    "prop": 1.0
  },
  "to use prop": {
    "sql": 1.0
  },
  "use prop sql": {
    "to": 1.0
  },
  "prop sql to": {
    "send": 1.0
  },
  "sql to send": {
    "an": 1.0
  },
  "to send an": {
    "sql": 1.0
  },
  "send an sql": {
    "create": 1.0
  },
  "an sql create": {
    "statement": 1.0
  },
  "to the dat": {
    "abase": 1.0
  },
  "the dat abase": {
    "server": 1.0
  },
  "dat abase server": {
    "because": 1.0
  },
  "abase server because": {
    "the": 1.0
  },
  "server because the": {
    "sql": 1.0
  },
  "because the sql": {
    "create": 1.0
  },
  "the sql create": {
    "can": 1.0
  },
  "sql create can": {
    "then": 1.0
  },
  "create can then": {
    "implement": 1.0
  },
  "can then implement": {
    "any": 1.0
  },
  "then implement any": {
    "data": 1.0
  },
  "implement any data": {
    "validation": 1.0
  },
  "any data validation": {
    "constraints": 1.0
  },
  "data validation constraints": {
    "or": 1.0
  },
  "validation constraints or": {
    "triggers": 1.0
  },
  "constraints or triggers": {
    "that": 1.0
  },
  "or triggers that": {
    "the": 1.0
  },
  "triggers that the": {
    "database": 1.0
  },
  "database server supports": {
    "allowing": 1.0
  },
  "server supports allowing": {
    "you": 1.0
  },
  "supports allowing you": {
    "to": 1.0
  },
  "you to make": {
    "full": 1.0
  },
  "to make full": {
    "use": 1.0
  },
  "make full use": {
    "of": 1.0
  },
  "full use of": {
    "the": 1.0
  },
  "of the capabilities": {
    "of": 1.0
  },
  "the capabilities of": {
    "the": 1.0
  },
  "capabilities of the": {
    "database": 1.0
  },
  "server for example": {
    "the": 1.0
  },
  "following code creates": {
    "a": 1.0
  },
  "code creates a": {
    "stu": 1.0
  },
  "creates a stu": {
    "dents": 1.0
  },
  "a stu dents": {
    "table": 1.0
  },
  "stu dents table": {
    "with": 1.0
  },
  "dents table with": {
    "first": 1.0
  },
  "table with first": {
    "and": 1.0
  },
  "with first and": {
    "last": 1.0
  },
  "first and last": {
    "names": 1.0
  },
  "and last names": {
    "major": 1.0
  },
  "last names major": {
    "and": 1.0
  },
  "names major and": {
    "dormitory": 1.0
  },
  "major and dormitory": {
    "assignment": 1.0
  },
  "and dormitory assignment": {
    "columns": 1.0
  },
  "dormitory assignment columns": {
    "myview": 1.0
  },
  "assignment columns myview": {
    "prop": 1.0
  },
  "columns myview prop": {
    "sql": 1.0
  },
  "myview prop sql": {
    "create": 1.0
  },
  "prop sql create": {
    "table": 1.0
  },
  "sql create table": {
    "students": 1.0
  },
  "create table students": {
    "idnumber": 1.0
  },
  "table students idnumber": {
    "integer": 1.0
  },
  "students idnumber integer": {
    "not": 1.0
  },
  "idnumber integer not": {
    "null": 1.0
  },
  "integer not null": {
    "lastname": 1.0
  },
  "not null lastname": {
    "v": 1.0
  },
  "null lastname v": {
    "archar": 1.0
  },
  "lastname v archar": {
    "25": 1.0
  },
  "v archar 25": {
    "not": 1.0
  },
  "archar 25 not": {
    "null": 1.0
  },
  "25 not null": {
    "firstname": 0.5,
    "major": 0.5
  },
  "not null firstname": {
    "varchar": 1.0
  },
  "null firstname varchar": {
    "25": 1.0
  },
  "firstname varchar 25": {
    "not": 1.0
  },
  "varchar 25 not": {
    "null": 1.0
  },
  "not null major": {
    "varchar": 1.0
  },
  "null major varchar": {
    "10": 1.0
  },
  "major varchar 10": {
    "not": 1.0
  },
  "varchar 10 not": {
    "null": 1.0
  },
  "10 not null": {
    "dormitory": 1.0
  },
  "not null dormitory": {
    "integer": 1.0
  },
  "null dormitory integer": {
    "primary": 1.0
  },
  "dormitory integer primary": {
    "key": 1.0
  },
  "integer primary key": {
    "idnumber": 1.0
  },
  "primary key idnumber": {
    "foreign": 1.0
  },
  "key idnumber foreign": {
    "key": 1.0
  },
  "idnumber foreign key": {
    "majors_in": 1.0
  },
  "foreign key majors_in": {
    "major": 1.0
  },
  "key majors_in major": {
    "references": 1.0
  },
  "majors_in major references": {
    "majors": 1.0
  },
  "major references majors": {
    "on": 1.0
  },
  "references majors on": {
    "delete": 1.0
  },
  "majors on delete": {
    "restrict": 1.0
  },
  "on delete restrict": {
    "this": 1.0
  },
  "delete restrict this": {
    "sql": 1.0
  },
  "restrict this sql": {
    "create": 1.0
  },
  "this sql create": {
    "statement": 1.0
  },
  "create statement specifies": {
    "two": 1.0
  },
  "statement specifies two": {
    "items": 1.0
  },
  "specifies two items": {
    "that": 1.0
  },
  "two items that": {
    "are": 1.0
  },
  "items that are": {
    "not": 1.0
  },
  "are not possible": {
    "to": 1.0
  },
  "not possible to": {
    "specify": 1.0
  },
  "possible to specify": {
    "using": 1.0
  },
  "to specify using": {
    "the": 1.0
  },
  "specify using the": {
    "clarion": 1.0
  },
  "using the clarion": {
    "create": 1.0
  },
  "create statement the": {
    "not": 1.0
  },
  "statement the not": {
    "null": 1.0
  },
  "the not null": {
    "attribute": 1.0
  },
  "not null attribute": {
    "specifies": 1.0
  },
  "null attribute specifies": {
    "that": 1.0
  },
  "specifies that data": {
    "must": 1.0
  },
  "that data must": {
    "be": 1.0
  },
  "data must be": {
    "present": 1.0
  },
  "must be present": {
    "in": 1.0
  },
  "be present in": {
    "these": 1.0
  },
  "present in these": {
    "columns": 1.0
  },
  "in these columns": {
    "whenever": 1.0
  },
  "these columns whenever": {
    "a": 1.0
  },
  "columns whenever a": {
    "new": 1.0
  },
  "whenever a new": {
    "record": 1.0
  },
  "a new record": {
    "is": 1.0
  },
  "new record is": {
    "added": 1.0
  },
  "the database the": {
    "on": 1.0
  },
  "database the on": {
    "delete": 1.0
  },
  "the on delete": {
    "clau": 1.0
  },
  "on delete clau": {
    "se": 1.0
  },
  "delete clau se": {
    "specifies": 1.0
  },
  "clau se specifies": {
    "that": 1.0
  },
  "se specifies that": {
    "the": 1.0
  },
  "that the restrict": {
    "referential": 1.0
  },
  "the restrict referential": {
    "integrity": 1.0
  },
  "restrict referential integrity": {
    "constraint": 1.0
  },
  "referential integrity constraint": {
    "applies": 1.0
  },
  "integrity constraint applies": {
    "when": 1.0
  },
  "constraint applies when": {
    "deleting": 1.0
  },
  "applies when deleting": {
    "a": 1.0
  },
  "when deleting a": {
    "majors": 1.0
  },
  "deleting a majors": {
    "record": 1.0
  },
  "a majors record": {
    "so": 1.0
  },
  "majors record so": {
    "that": 1.0
  },
  "record so that": {
    "no": 1.0
  },
  "so that no": {
    "student": 1.0
  },
  "that no student": {
    "record": 1.0
  },
  "no student record": {
    "can": 1.0
  },
  "student record can": {
    "have": 1.0
  },
  "record can have": {
    "a": 1.0
  },
  "have a major": {
    "field": 1.0
  },
  "a major field": {
    "value": 1.0
  },
  "major field value": {
    "that": 1.0
  },
  "field value that": {
    "doesn": 1.0
  },
  "value that doesn": {
    "t": 1.0
  },
  "that doesn t": {
    "exist": 1.0
  },
  "exist in the": {
    "majors": 1.0
  },
  "in the majors": {
    "table": 1.0
  },
  "the majors table": {
    "clarion": 1.0
  },
  "majors table clarion": {
    "language": 1.0
  },
  "table clarion language": {
    "programming": 1.0
  },
  "programming guide 70": {
    "another": 1.0
  },
  "guide 70 another": {
    "primary": 1.0
  },
  "70 another primary": {
    "use": 1.0
  },
  "another primary use": {
    "of": 1.0
  },
  "primary use of": {
    "prop": 1.0
  },
  "use of prop": {
    "sql": 1.0
  },
  "is to call": {
    "any": 1.0
  },
  "to call any": {
    "stored": 1.0
  },
  "call any stored": {
    "proc": 1.0
  },
  "any stored proc": {
    "edures": 1.0
  },
  "stored proc edures": {
    "that": 1.0
  },
  "proc edures that": {
    "you": 1.0
  },
  "edures that you": {
    "have": 1.0
  },
  "that you have": {
    "created": 1.0
  },
  "you have created": {
    "in": 1.0
  },
  "have created in": {
    "your": 1.0
  },
  "created in your": {
    "back": 1.0
  },
  "in your back": {
    "end": 1.0
  },
  "your back end": {
    "database": 1.0
  },
  "database in most": {
    "sql": 1.0
  },
  "in most sql": {
    "based": 1.0
  },
  "most sql based": {
    "database": 1.0
  },
  "database servers a": {
    "stored": 1.0
  },
  "servers a stored": {
    "procedure": 1.0
  },
  "a stored procedure": {
    "is": 1.0
  },
  "stored procedure is": {
    "a": 1.0
  },
  "procedure is a": {
    "pre": 1.0
  },
  "is a pre": {
    "compiled": 1.0
  },
  "a pre compiled": {
    "set": 1.0
  },
  "pre compiled set": {
    "of": 1.0
  },
  "compiled set of": {
    "sql": 1.0
  },
  "set of sql": {
    "statements": 1.0
  },
  "of sql statements": {
    "that": 1.0
  },
  "statements that allow": {
    "you": 1.0
  },
  "that allow you": {
    "to": 1.0
  },
  "you to pre": {
    "define": 1.0
  },
  "to pre define": {
    "actions": 1.0
  },
  "pre define actions": {
    "for": 1.0
  },
  "define actions for": {
    "the": 1.0
  },
  "actions for the": {
    "database": 1.0
  },
  "for the database": {
    "engine": 1.0
  },
  "database engine to": {
    "take": 1.0
  },
  "engine to take": {
    "when": 1.0
  },
  "to take when": {
    "the": 1.0
  },
  "take when the": {
    "procedure": 1.0
  },
  "is called since": {
    "stored": 1.0
  },
  "called since stored": {
    "procedures": 1.0
  },
  "since stored procedures": {
    "are": 1.0
  },
  "stored procedures are": {
    "a": 1.0
  },
  "procedures are a": {
    "part": 1.0
  },
  "are a part": {
    "of": 1.0
  },
  "a part of": {
    "the": 1.0
  },
  "the database they": {
    "can": 1.0
  },
  "database they can": {
    "be": 1.0
  },
  "they can be": {
    "used": 1.0
  },
  "can be used": {
    "by": 1.0
  },
  "be used by": {
    "any": 1.0
  },
  "used by any": {
    "application": 1.0
  },
  "by any application": {
    "that": 1.0
  },
  "any application that": {
    "accesses": 1.0
  },
  "application that accesses": {
    "the": 1.0
  },
  "that accesses the": {
    "database": 1.0
  },
  "accesses the database": {
    "which": 1.0
  },
  "the database which": {
    "helps": 1.0
  },
  "database which helps": {
    "enforce": 1.0
  },
  "which helps enforce": {
    "consistent": 1.0
  },
  "helps enforce consistent": {
    "interaction": 1.0
  },
  "enforce consistent interaction": {
    "with": 1.0
  },
  "consistent interaction with": {
    "the": 1.0
  },
  "interaction with the": {
    "database": 1.0
  },
  "with the database": {
    "across": 1.0
  },
  "the database across": {
    "all": 1.0
  },
  "database across all": {
    "applications": 1.0
  },
  "across all applications": {
    "prop": 1.0
  },
  "all applications prop": {
    "sqlfilter": 1.0
  },
  "applications prop sqlfilter": {
    "prop": 1.0
  },
  "prop sqlfilter prop": {
    "sqlfilter": 1.0
  },
  "sqlfilter prop sqlfilter": {
    "is": 1.0
  },
  "sqlfilter is ver": {
    "y": 1.0
  },
  "is ver y": {
    "similar": 1.0
  },
  "ver y similar": {
    "to": 1.0
  },
  "y similar to": {
    "prop": 1.0
  },
  "similar to prop": {
    "sql": 1.0
  },
  "sql prop sqlfilter": {
    "allows": 1.0
  },
  "prop sqlfilter allows": {
    "you": 1.0
  },
  "sqlfilter allows you": {
    "to": 1.0
  },
  "specify a filter": {
    "condition": 1.0
  },
  "a filter condition": {
    "for": 0.5,
    "to": 0.5
  },
  "filter condition for": {
    "a": 1.0
  },
  "condition for a": {
    "view": 1.0
  },
  "for a view": {
    "structure": 1.0
  },
  "view structure using": {
    "sql": 1.0
  },
  "structure using sql": {
    "syntax": 1.0
  },
  "using sql syntax": {
    "instead": 1.0
  },
  "sql syntax instead": {
    "of": 1.0
  },
  "syntax instead of": {
    "the": 1.0
  },
  "the clarion syntax": {
    "required": 1.0
  },
  "clarion syntax required": {
    "in": 1.0
  },
  "syntax required in": {
    "the": 1.0
  },
  "in the filter": {
    "attribute": 1.0
  },
  "filter attribute by": {
    "default": 1.0
  },
  "attribute by default": {
    "the": 1.0
  },
  "by default the": {
    "prop": 1.0
  },
  "default the prop": {
    "sqlfilter": 1.0
  },
  "the prop sqlfilter": {
    "filter": 1.0
  },
  "prop sqlfilter filter": {
    "condition": 1.0
  },
  "sqlfilter filter condition": {
    "overrides": 1.0
  },
  "filter condition overrides": {
    "any": 1.0
  },
  "condition overrides any": {
    "expression": 1.0
  },
  "overrides any expression": {
    "i": 1.0
  },
  "any expression i": {
    "n": 1.0
  },
  "expression i n": {
    "the": 1.0
  },
  "n the filter": {
    "attribute": 1.0
  },
  "filter attribute however": {
    "by": 1.0
  },
  "attribute however by": {
    "beginning": 1.0
  },
  "however by beginning": {
    "your": 1.0
  },
  "by beginning your": {
    "prop": 1.0
  },
  "beginning your prop": {
    "sqlfilter": 1.0
  },
  "your prop sqlfilter": {
    "expression": 0.5,
    "statement": 0.5
  },
  "prop sqlfilter expression": {
    "with": 1.0
  },
  "sqlfilter expression with": {
    "a": 1.0
  },
  "expression with a": {
    "plus": 1.0
  },
  "with a plus": {
    "sign": 1.0
  },
  "a plus sign": {
    "the": 1.0
  },
  "plus sign the": {
    "file": 1.0
  },
  "sign the file": {
    "driver": 1.0
  },
  "driver will append": {
    "your": 1.0
  },
  "will append your": {
    "prop": 1.0
  },
  "append your prop": {
    "sqlfilter": 1.0
  },
  "prop sqlfilter statement": {
    "to": 1.0
  },
  "sqlfilter statement to": {
    "the": 1.0
  },
  "to the filter": {
    "attribute": 1.0
  },
  "filter attribute s": {
    "generated": 1.0
  },
  "attribute s generated": {
    "sql": 1.0
  },
  "s generated sql": {
    "the": 1.0
  },
  "generated sql the": {
    "advantage": 1.0
  },
  "sql the advantage": {
    "of": 1.0
  },
  "of using prop": {
    "sqlfilter": 1.0
  },
  "using prop sqlfilter": {
    "instead": 1.0
  },
  "prop sqlfilter instead": {
    "of": 1.0
  },
  "sqlfilter instead of": {
    "the": 1.0
  },
  "of the filt": {
    "er": 1.0
  },
  "the filt er": {
    "attribute": 1.0
  },
  "filt er attribute": {
    "is": 1.0
  },
  "er attribute is": {
    "to": 1.0
  },
  "is to allow": {
    "the": 1.0
  },
  "to allow the": {
    "where": 1.0
  },
  "allow the where": {
    "clause": 1.0
  },
  "the where clause": {
    "to": 1.0
  },
  "clause to use": {
    "the": 1.0
  },
  "use the database": {
    "specific": 1.0
  },
  "the database specific": {
    "or": 1.0
  },
  "database specific or": {
    "sql": 1.0
  },
  "specific or sql": {
    "specific": 1.0
  },
  "or sql specific": {
    "capabilities": 1.0
  },
  "sql specific capabilities": {
    "that": 1.0
  },
  "specific capabilities that": {
    "you": 1.0
  },
  "capabilities that you": {
    "can": 1.0
  },
  "you can include": {
    "by": 1.0
  },
  "can include by": {
    "using": 1.0
  },
  "include by using": {
    "your": 1.0
  },
  "by using your": {
    "own": 1.0
  },
  "using your own": {
    "sql": 1.0
  },
  "own sql such": {
    "as": 1.0
  },
  "sql such as": {
    "an": 1.0
  },
  "such as an": {
    "sql": 1.0
  },
  "as an sql": {
    "in": 1.0
  },
  "an sql in": {
    "clause": 1.0
  },
  "sql in clause": {
    "for": 0.5,
    "to": 0.5
  },
  "in clause for": {
    "example": 1.0
  },
  "clause for example": {
    "the": 1.0
  },
  "following code uses": {
    "a": 1.0
  },
  "code uses a": {
    "filter": 1.0
  },
  "uses a filter": {
    "condition": 1.0
  },
  "filter condition to": {
    "limit": 1.0
  },
  "condition to limit": {
    "the": 1.0
  },
  "to limit the": {
    "view": 1.0
  },
  "limit the view": {
    "to": 1.0
  },
  "the view to": {
    "only": 1.0
  },
  "view to only": {
    "tho": 0.5,
    "those": 0.5
  },
  "to only tho": {
    "se": 1.0
  },
  "only tho se": {
    "students": 1.0
  },
  "tho se students": {
    "with": 1.0
  },
  "se students with": {
    "computer": 1.0
  },
  "students with computer": {
    "science": 1.0
  },
  "with computer science": {
    "as": 1.0
  },
  "computer science as": {
    "their": 1.0
  },
  "science as their": {
    "major": 1.0
  },
  "as their major": {
    "myview": 0.5,
    "then": 0.5
  },
  "their major myview": {
    "view": 1.0
  },
  "major myview view": {
    "students": 1.0
  },
  "filter stu major": {
    "computer": 1.0
  },
  "stu major computer": {
    "science": 1.0
  },
  "major computer science": {
    "project": 0.6666666666666666,
    "both": 0.3333333333333333
  },
  "computer science project": {
    "stu": 1.0
  },
  "science project stu": {
    "lastname": 1.0
  },
  "major end the": {
    "following": 1.0
  },
  "end the following": {
    "code": 1.0
  },
  "following code replaces": {
    "the": 1.0
  },
  "code replaces the": {
    "filter": 1.0
  },
  "replaces the filter": {
    "with": 1.0
  },
  "the filter with": {
    "prop": 1.0
  },
  "filter with prop": {
    "sqlfilter": 1.0
  },
  "with prop sqlfilter": {
    "myview": 1.0
  },
  "prop sqlfilter myview": {
    "vi": 1.0
  },
  "sqlfilter myview vi": {
    "ew": 1.0
  },
  "myview vi ew": {
    "students": 1.0
  },
  "vi ew students": {
    "project": 1.0
  },
  "ew students project": {
    "stu": 1.0
  },
  "major end code": {
    "open": 1.0
  },
  "code open myview": {
    "myview": 1.0
  },
  "open myview myview": {
    "prop": 1.0
  },
  "myview myview prop": {
    "sqlfilter": 1.0
  },
  "myview prop sqlfilter": {
    "students": 1.0
  },
  "prop sqlfilter students": {
    "major": 0.5,
    "dormitory": 0.5
  },
  "sqlfilter students major": {
    "computer": 1.0
  },
  "students major computer": {
    "science": 1.0
  },
  "computer science both": {
    "of": 1.0
  },
  "science both of": {
    "these": 1.0
  },
  "of these examples": {
    "return": 1.0
  },
  "these examples return": {
    "the": 1.0
  },
  "examples return the": {
    "same": 1.0
  },
  "return the same": {
    "result": 1.0
  },
  "the same result": {
    "set": 1.0
  },
  "same result set": {
    "to": 1.0
  },
  "result set to": {
    "your": 0.5,
    "only": 0.5
  },
  "set to your": {
    "clarion": 1.0
  },
  "to your clarion": {
    "application": 1.0
  },
  "your clarion application": {
    "the": 1.0
  },
  "clarion application the": {
    "fo": 1.0
  },
  "application the fo": {
    "llowing": 1.0
  },
  "the fo llowing": {
    "code": 1.0
  },
  "fo llowing code": {
    "uses": 1.0
  },
  "llowing code uses": {
    "the": 1.0
  },
  "code uses the": {
    "filter": 1.0
  },
  "uses the filter": {
    "condition": 1.0
  },
  "the filter condition": {
    "to": 1.0
  },
  "to only those": {
    "students": 0.5,
    "computer": 0.5
  },
  "those students with": {
    "computer": 1.0
  },
  "their major then": {
    "appends": 1.0
  },
  "major then appends": {
    "an": 1.0
  },
  "then appends an": {
    "sql": 1.0
  },
  "appends an sql": {
    "in": 1.0
  },
  "in clause to": {
    "the": 1.0
  },
  "the generated where": {
    "clause": 1.0
  },
  "generated where clause": {
    "to": 1.0
  },
  "clause to further": {
    "limit": 1.0
  },
  "to further limit": {
    "the": 1.0
  },
  "further limit the": {
    "result": 1.0
  },
  "limit the result": {
    "set": 1.0
  },
  "set to only": {
    "those": 1.0
  },
  "only those computer": {
    "science": 1.0
  },
  "those computer science": {
    "students": 1.0
  },
  "computer science students": {
    "who": 1.0
  },
  "science students who": {
    "also": 1.0
  },
  "students who also": {
    "live": 1.0
  },
  "who also live": {
    "in": 1.0
  },
  "also live in": {
    "dormitories": 1.0
  },
  "live in dormitories": {
    "1": 1.0
  },
  "in dormitories 1": {
    "5": 1.0
  },
  "dormitories 1 5": {
    "or": 1.0
  },
  "1 5 or": {
    "9": 1.0
  },
  "5 or 9": {
    "myview": 1.0
  },
  "or 9 myview": {
    "view": 1.0
  },
  "9 myview view": {
    "students": 1.0
  },
  "stu major stu": {
    "dormitory": 1.0
  },
  "major stu dormitory": {
    "end": 1.0
  },
  "stu dormitory end": {
    "code": 1.0
  },
  "dormitory end code": {
    "open": 1.0
  },
  "sqlfilter students dormitory": {
    "i": 1.0
  },
  "students dormitory i": {
    "n": 1.0
  },
  "dormitory i n": {
    "1": 1.0
  },
  "i n 1": {
    "5": 1.0
  },
  "n 1 5": {
    "9": 1.0
  },
  "1 5 9": {
    "null": 1.0
  },
  "5 9 null": {
    "data": 1.0
  },
  "9 null data": {
    "handling": 1.0
  },
  "data handling one": {
    "concept": 1.0
  },
  "handling one concept": {
    "common": 1.0
  },
  "one concept common": {
    "in": 1.0
  },
  "concept common in": {
    "sql": 1.0
  },
  "common in sql": {
    "based": 1.0
  },
  "in sql based": {
    "database": 1.0
  },
  "database servers is": {
    "the": 1.0
  },
  "servers is the": {
    "concept": 1.0
  },
  "is the concept": {
    "of": 1.0
  },
  "concept of null": {
    "data": 1.0
  },
  "of null data": {
    "the": 1.0
  },
  "null data the": {
    "concept": 1.0
  },
  "data the concept": {
    "of": 1.0
  },
  "of a null": {
    "value": 1.0
  },
  "a null value": {
    "in": 1.0
  },
  "null value in": {
    "a": 1.0
  },
  "value in a": {
    "field": 1.0
  },
  "in a field": {
    "of": 1.0
  },
  "a field of": {
    "a": 1.0
  },
  "field of a": {
    "file": 1.0
  },
  "or view indicates": {
    "that": 1.0
  },
  "view indicates that": {
    "the": 1.0
  },
  "indicates that the": {
    "user": 1.0
  },
  "user has never": {
    "entered": 1.0
  },
  "has never entered": {
    "data": 1.0
  },
  "never entered data": {
    "into": 1.0
  },
  "entered data into": {
    "the": 1.0
  },
  "data into the": {
    "field": 1.0
  },
  "into the field": {
    "null": 1.0
  },
  "the field null": {
    "actually": 1.0
  },
  "field null actually": {
    "means": 1.0
  },
  "null actually means": {
    "value": 1.0
  },
  "actually means value": {
    "not": 1.0
  },
  "means value not": {
    "known": 1.0
  },
  "value not known": {
    "for": 1.0
  },
  "not known for": {
    "the": 1.0
  },
  "known for the": {
    "field": 1.0
  },
  "for the field": {
    "this": 1.0
  },
  "the field this": {
    "is": 1.0
  },
  "field this is": {
    "completely": 1.0
  },
  "this is completely": {
    "different": 1.0
  },
  "is completely different": {
    "from": 1.0
  },
  "completely different from": {
    "a": 1.0
  },
  "different from a": {
    "blank": 1.0
  },
  "from a blank": {
    "or": 1.0
  },
  "a blank or": {
    "zero": 1.0
  },
  "or zero value": {
    "and": 0.5,
    "the": 0.5
  },
  "zero value and": {
    "makes": 1.0
  },
  "value and makes": {
    "it": 1.0
  },
  "and makes it": {
    "possible": 1.0
  },
  "it possible to": {
    "detect": 1.0
  },
  "possible to detect": {
    "the": 1.0
  },
  "to detect the": {
    "difference": 1.0
  },
  "detect the difference": {
    "between": 1.0
  },
  "the difference between": {
    "a": 1.0
  },
  "difference between a": {
    "field": 1.0
  },
  "between a field": {
    "which": 1.0
  },
  "a field which": {
    "has": 1.0
  },
  "field which has": {
    "never": 0.5,
    "a": 0.5
  },
  "which has never": {
    "had": 1.0
  },
  "has never had": {
    "data": 1.0
  },
  "never had data": {
    "and": 1.0
  },
  "had data and": {
    "a": 1.0
  },
  "data and a": {
    "field": 1.0
  },
  "and a field": {
    "which": 1.0
  },
  "which has a": {
    "true": 1.0
  },
  "has a true": {
    "blank": 1.0
  },
  "a true blank": {
    "or": 1.0
  },
  "true blank or": {
    "zero": 1.0
  },
  "zero value the": {
    "clarion": 1.0
  },
  "value the clarion": {
    "language": 1.0
  },
  "language supports null": {
    "data": 1.0
  },
  "supports null data": {
    "handling": 1.0
  },
  "data handling through": {
    "the": 1.0
  },
  "handling through the": {
    "null": 1.0
  },
  "through the null": {
    "setnull": 1.0
  },
  "the null setnull": {
    "and": 1.0
  },
  "null setnull and": {
    "setnonull": 1.0
  },
  "setnull and setnonull": {
    "procedures": 1.0
  },
  "and setnonull procedures": {
    "in": 1.0
  },
  "setnonull procedures in": {
    "expressions": 1.0
  },
  "procedures in expressions": {
    "null": 1.0
  },
  "in expressions null": {
    "does": 1.0
  },
  "expressions null does": {
    "not": 1.0
  },
  "null does not": {
    "equal": 1.0
  },
  "does not equal": {
    "blank": 1.0
  },
  "not equal blank": {
    "or": 1.0
  },
  "equal blank or": {
    "zero": 1.0
  },
  "or zero therefore": {
    "any": 1.0
  },
  "zero therefore any": {
    "expression": 1.0
  },
  "therefore any expression": {
    "which": 1.0
  },
  "any expression which": {
    "compares": 1.0
  },
  "expression which compares": {
    "the": 1.0
  },
  "which compares the": {
    "value": 1.0
  },
  "compares the value": {
    "of": 1.0
  },
  "the value of": {
    "a": 0.5,
    "both": 0.5
  },
  "value of a": {
    "field": 1.0
  },
  "of a field": {
    "from": 1.0
  },
  "a field from": {
    "a": 1.0
  },
  "field from a": {
    "file": 1.0
  },
  "or view with": {
    "another": 1.0
  },
  "view with another": {
    "value": 1.0
  },
  "with another value": {
    "will": 1.0
  },
  "another value will": {
    "always": 1.0
  },
  "value will always": {
    "evaluate": 1.0
  },
  "will always evaluate": {
    "as": 1.0
  },
  "always evaluate as": {
    "unknown": 1.0
  },
  "evaluate as unknown": {
    "if": 1.0
  },
  "as unknown if": {
    "the": 1.0
  },
  "unknown if the": {
    "field": 1.0
  },
  "if the field": {
    "is": 1.0
  },
  "the field is": {
    "null": 1.0
  },
  "field is null": {
    "this": 0.5,
    "or": 0.5
  },
  "is null this": {
    "is": 1.0
  },
  "null this is": {
    "true": 1.0
  },
  "this is true": {
    "even": 1.0
  },
  "is true even": {
    "if": 1.0
  },
  "true even if": {
    "the": 1.0
  },
  "even if the": {
    "value": 1.0
  },
  "if the value": {
    "of": 1.0
  },
  "value of both": {
    "elements": 1.0
  },
  "of both elements": {
    "in": 1.0
  },
  "both elements in": {
    "the": 1.0
  },
  "elements in the": {
    "expression": 1.0
  },
  "in the expression": {
    "are": 1.0
  },
  "the expression are": {
    "unknown": 1.0
  },
  "expression are unknown": {
    "null": 1.0
  },
  "are unknown null": {
    "values": 1.0
  },
  "unknown null values": {
    "for": 1.0
  },
  "null values for": {
    "example": 1.0
  },
  "values for example": {
    "the": 1.0
  },
  "example the conditional": {
    "expression": 1.0
  },
  "the conditional expression": {
    "pre": 1.0
  },
  "conditional expression pre": {
    "field1": 1.0
  },
  "expression pre field1": {
    "pre": 1.0
  },
  "pre field1 pre": {
    "field2": 1.0
  },
  "field1 pre field2": {
    "will": 1.0
  },
  "pre field2 will": {
    "evaluate": 1.0
  },
  "field2 will evaluate": {
    "as": 1.0
  },
  "will evaluate as": {
    "true": 1.0
  },
  "evaluate as true": {
    "only": 1.0
  },
  "as true only": {
    "if": 1.0
  },
  "true only if": {
    "both": 1.0
  },
  "only if both": {
    "fields": 1.0
  },
  "if both fields": {
    "con": 0.5,
    "are": 0.5
  },
  "both fields con": {
    "tain": 1.0
  },
  "fields con tain": {
    "known": 1.0
  },
  "con tain known": {
    "values": 1.0
  },
  "tain known values": {
    "if": 1.0
  },
  "known values if": {
    "both": 1.0
  },
  "values if both": {
    "fields": 1.0
  },
  "both fields are": {
    "null": 1.0
  },
  "fields are null": {
    "the": 1.0
  },
  "are null the": {
    "result": 1.0
  },
  "null the result": {
    "of": 1.0
  },
  "the result of": {
    "the": 1.0
  },
  "of the expression": {
    "is": 0.5,
    "meets": 0.5
  },
  "the expression is": {
    "also": 1.0
  },
  "expression is also": {
    "unknown": 1.0
  },
  "is also unknown": {
    "known": 1.0
  },
  "also unknown known": {
    "known": 1.0
  },
  "unknown known known": {
    "evaluates": 1.0
  },
  "known known evaluates": {
    "as": 1.0
  },
  "known evaluates as": {
    "true": 1.0
  },
  "evaluates as true": {
    "or": 0.3333333333333333,
    "true": 0.3333333333333333,
    "unknown": 0.3333333333333333
  },
  "as true or": {
    "false": 1.0
  },
  "or false known": {
    "unknown": 1.0
  },
  "false known unknown": {
    "evaluates": 1.0
  },
  "known unknown evaluates": {
    "as": 1.0
  },
  "unknown evaluates as": {
    "unknown": 0.6,
    "true": 0.2,
    "false": 0.2
  },
  "evaluates as unknown": {
    "unknown": 0.5,
    "1": 0.25,
    "71": 0.25
  },
  "as unknown unknown": {
    "unknown": 0.5,
    "10": 0.5
  },
  "unknown unknown unknown": {
    "evaluates": 1.0
  },
  "unknown unknown evaluates": {
    "as": 1.0
  },
  "unknown unknown 10": {
    "evaluates": 1.0
  },
  "unknown 10 evaluates": {
    "as": 1.0
  },
  "10 evaluates as": {
    "unknown": 1.0
  },
  "as unknown 1": {
    "unknown": 1.0
  },
  "unknown 1 unknown": {
    "evaluates": 1.0
  },
  "1 unknown evaluates": {
    "as": 1.0
  },
  "as unknown 71": {
    "developing": 1.0
  },
  "unknown 71 developing": {
    "client": 1.0
  },
  "71 developing client": {
    "server": 1.0
  },
  "applications the only": {
    "four": 1.0
  },
  "the only four": {
    "exceptions": 1.0
  },
  "only four exceptions": {
    "to": 1.0
  },
  "four exceptions to": {
    "this": 1.0
  },
  "exceptions to this": {
    "rule": 1.0
  },
  "to this rule": {
    "are": 1.0
  },
  "this rule are": {
    "boolean": 1.0
  },
  "rule are boolean": {
    "expressions": 1.0
  },
  "are boolean expressions": {
    "using": 1.0
  },
  "boolean expressions using": {
    "or": 1.0
  },
  "expressions using or": {
    "and": 1.0
  },
  "using or and": {
    "and": 1.0
  },
  "or and and": {
    "where": 1.0
  },
  "and and where": {
    "only": 1.0
  },
  "and where only": {
    "one": 1.0
  },
  "where only one": {
    "portion": 1.0
  },
  "only one portion": {
    "of": 1.0
  },
  "one portion of": {
    "the": 1.0
  },
  "portion of the": {
    "entire": 0.5,
    "expression": 0.5
  },
  "the entire expression": {
    "is": 1.0
  },
  "entire expression is": {
    "unknown": 1.0
  },
  "expression is unknown": {
    "and": 1.0
  },
  "is unknown and": {
    "the": 1.0
  },
  "unknown and the": {
    "other": 1.0
  },
  "the other portion": {
    "of": 1.0
  },
  "other portion of": {
    "the": 1.0
  },
  "the expression meets": {
    "th": 1.0
  },
  "expression meets th": {
    "e": 1.0
  },
  "meets th e": {
    "expression": 1.0
  },
  "th e expression": {
    "criteria": 1.0
  },
  "e expression criteria": {
    "unknown": 1.0
  },
  "expression criteria unknown": {
    "or": 1.0
  },
  "criteria unknown or": {
    "true": 1.0
  },
  "unknown or true": {
    "evaluates": 1.0
  },
  "or true evaluates": {
    "as": 1.0
  },
  "true evaluates as": {
    "true": 1.0
  },
  "as true true": {
    "or": 1.0
  },
  "true true or": {
    "unknown": 1.0
  },
  "true or unknown": {
    "evaluates": 1.0
  },
  "or unknown evaluates": {
    "as": 1.0
  },
  "as true unknown": {
    "and": 1.0
  },
  "true unknown and": {
    "false": 1.0
  },
  "unknown and false": {
    "evaluates": 1.0
  },
  "and false evaluates": {
    "as": 1.0
  },
  "false evaluates as": {
    "false": 1.0
  },
  "evaluates as false": {
    "false": 0.5,
    "support": 0.5
  },
  "as false false": {
    "and": 1.0
  },
  "false false and": {
    "unknown": 1.0
  },
  "false and unknown": {
    "evaluates": 1.0
  },
  "and unknown evaluates": {
    "as": 1.0
  },
  "as false support": {
    "for": 1.0
  },
  "false support for": {
    "null": 1.0
  },
  "support for null": {
    "values": 1.0
  },
  "for null values": {
    "in": 1.0
  },
  "null values in": {
    "a": 1.0
  },
  "values in a": {
    "file": 1.0
  },
  "or view is": {
    "entirely": 1.0
  },
  "view is entirely": {
    "depende": 1.0
  },
  "is entirely depende": {
    "nt": 1.0
  },
  "entirely depende nt": {
    "upon": 1.0
  },
  "depende nt upon": {
    "the": 1.0
  },
  "nt upon the": {
    "file": 1.0
  },
  "file driver most": {
    "sql": 1.0
  },
  "driver most sql": {
    "based": 1.0
  },
  "based database systems": {
    "support": 1.0
  },
  "database systems support": {
    "the": 1.0
  },
  "systems support the": {
    "null": 1.0
  },
  "support the null": {
    "field": 1.0
  },
  "the null field": {
    "concept": 1.0
  },
  "null field concept": {
    "while": 1.0
  },
  "field concept while": {
    "most": 1.0
  },
  "concept while most": {
    "non": 1.0
  },
  "while most non": {
    "sql": 1.0
  },
  "most non sql": {
    "databases": 1.0
  },
  "non sql databases": {
    "do": 1.0
  },
  "sql databases do": {
    "not": 1.0
  },
  "databases do not": {
    "you": 1.0
  },
  "do not you": {
    "use": 1.0
  },
  "not you use": {
    "the": 1.0
  },
  "the clarion null": {
    "procedure": 1.0
  },
  "clarion null procedure": {
    "to": 1.0
  },
  "null procedure to": {
    "detect": 1.0
  },
  "procedure to detect": {
    "whether": 1.0
  },
  "to detect whether": {
    "a": 1.0
  },
  "detect whether a": {
    "data": 1.0
  },
  "whether a data": {
    "item": 1.0
  },
  "data item returned": {
    "from": 1.0
  },
  "item returned from": {
    "the": 1.0
  },
  "returned from the": {
    "back": 1.0
  },
  "end database is": {
    "null": 1.0
  },
  "database is null": {
    "or": 1.0
  },
  "is null or": {
    "not": 1.0
  },
  "null or not": {
    "for": 0.5,
    "process": 0.5
  },
  "not for any": {
    "field": 1.0
  },
  "for any field": {
    "s": 1.0
  },
  "any field s": {
    "that": 1.0
  },
  "field s that": {
    "should": 1.0
  },
  "s that should": {
    "remain": 1.0
  },
  "that should remain": {
    "null": 1.0
  },
  "should remain null": {
    "when": 1.0
  },
  "remain null when": {
    "you": 1.0
  },
  "null when you": {
    "re": 1.0
  },
  "when you re": {
    "write": 1.0
  },
  "you re write": {
    "the": 1.0
  },
  "re write the": {
    "data": 1.0
  },
  "write the data": {
    "to": 0.5,
    "back": 0.5
  },
  "the data to": {
    "the": 1.0
  },
  "data to the": {
    "database": 1.0
  },
  "the database you": {
    "must": 1.0
  },
  "database you must": {
    "explicitly": 1.0
  },
  "you must explicitly": {
    "call": 1.0
  },
  "must explicitly call": {
    "setnull": 1.0
  },
  "explicitly call setnull": {
    "just": 1.0
  },
  "call setnull just": {
    "before": 1.0
  },
  "setnull just before": {
    "writing": 1.0
  },
  "just before writing": {
    "the": 1.0
  },
  "writing the data": {
    "back": 1.0
  },
  "the data back": {
    "to": 0.5,
    "error": 0.5
  },
  "data back to": {
    "the": 1.0
  },
  "the database for": {
    "example": 1.0
  },
  "database for example": {
    "next": 1.0
  },
  "for example next": {
    "mytable": 1.0
  },
  "example next mytable": {
    "get": 1.0
  },
  "next mytable get": {
    "data": 1.0
  },
  "mytable get data": {
    "myfieldflag": 1.0
  },
  "get data myfieldflag": {
    "null": 1.0
  },
  "data myfieldflag null": {
    "myfield": 1.0
  },
  "myfieldflag null myfield": {
    "remember": 1.0
  },
  "null myfield remember": {
    "whether": 1.0
  },
  "myfield remember whether": {
    "a": 1.0
  },
  "remember whether a": {
    "field": 1.0
  },
  "whether a field": {
    "is": 1.0
  },
  "a field is": {
    "null": 1.0
  },
  "or not process": {
    "the": 1.0
  },
  "not process the": {
    "data": 1.0
  },
  "process the data": {
    "if": 1.0
  },
  "the data if": {
    "myfieldflag": 1.0
  },
  "data if myfieldflag": {
    "and": 1.0
  },
  "if myfieldflag and": {
    "not": 1.0
  },
  "myfieldflag and not": {
    "myfield": 1.0
  },
  "and not myfield": {
    "detect": 1.0
  },
  "not myfield detect": {
    "null": 1.0
  },
  "myfield detect null": {
    "field": 1.0
  },
  "detect null field": {
    "still": 1.0
  },
  "null field still": {
    "empty": 1.0
  },
  "field still empty": {
    "setnull": 1.0
  },
  "still empty setnull": {
    "myfield": 1.0
  },
  "empty setnull myfield": {
    "and": 1.0
  },
  "setnull myfield and": {
    "reset": 1.0
  },
  "myfield and reset": {
    "it": 1.0
  },
  "and reset it": {
    "to": 1.0
  },
  "reset it to": {
    "null": 1.0
  },
  "it to null": {
    "end": 1.0
  },
  "to null end": {
    "put": 1.0
  },
  "null end put": {
    "mytable": 1.0
  },
  "end put mytable": {
    "write": 1.0
  },
  "put mytable write": {
    "the": 1.0
  },
  "mytable write the": {
    "data": 1.0
  },
  "data back error": {
    "handli": 1.0
  },
  "back error handli": {
    "ng": 1.0
  },
  "error handli ng": {
    "whenever": 1.0
  },
  "handli ng whenever": {
    "any": 1.0
  },
  "ng whenever any": {
    "i": 1.0
  },
  "whenever any i": {
    "o": 1.0
  },
  "any i o": {
    "operation": 1.0
  },
  "i o operation": {
    "executes": 1.0
  },
  "o operation executes": {
    "there": 1.0
  },
  "operation executes there": {
    "is": 1.0
  },
  "executes there is": {
    "the": 1.0
  },
  "possibility of an": {
    "error": 1.0
  },
  "of an error": {
    "condition": 1.0
  },
  "an error condition": {
    "occurring": 1.0
  },
  "error condition occurring": {
    "no": 1.0
  },
  "condition occurring no": {
    "matter": 1.0
  },
  "occurring no matter": {
    "which": 1.0
  },
  "matter which back": {
    "end": 1.0
  },
  "which back end": {
    "database": 1.0
  },
  "server you use": {
    "the": 1.0
  },
  "driver for that": {
    "database": 1.0
  },
  "for that database": {
    "maps": 1.0
  },
  "that database maps": {
    "the": 1.0
  },
  "database maps the": {
    "most": 1.0
  },
  "maps the most": {
    "common": 1.0
  },
  "most common errors": {
    "to": 1.0
  },
  "common errors to": {
    "the": 1.0
  },
  "errors to the": {
    "appropria": 1.0
  },
  "to the appropria": {
    "te": 1.0
  },
  "the appropria te": {
    "standard": 1.0
  },
  "appropria te standard": {
    "clarion": 1.0
  },
  "te standard clarion": {
    "error": 1.0
  },
  "standard clarion error": {
    "codes": 1.0
  },
  "clarion error codes": {
    "however": 1.0
  },
  "error codes however": {
    "there": 1.0
  },
  "codes however there": {
    "are": 1.0
  },
  "there are always": {
    "some": 1.0
  },
  "are always some": {
    "errors": 1.0
  },
  "always some errors": {
    "for": 1.0
  },
  "some errors for": {
    "which": 1.0
  },
  "errors for which": {
    "there": 1.0
  },
  "for which there": {
    "is": 1.0
  },
  "which there is": {
    "no": 1.0
  },
  "is no direct": {
    "clarion": 1.0
  },
  "no direct clarion": {
    "equivalent": 1.0
  },
  "direct clarion equivalent": {
    "whenever": 0.5,
    "the": 0.5
  },
  "clarion equivalent whenever": {
    "an": 1.0
  },
  "equivalent whenever an": {
    "error": 1.0
  },
  "whenever an error": {
    "occurs": 1.0
  },
  "an error occurs": {
    "for": 1.0
  },
  "error occurs for": {
    "which": 1.0
  },
  "occurs for which": {
    "there": 1.0
  },
  "clarion equivalent the": {
    "clarion": 1.0
  },
  "equivalent the clarion": {
    "errorcode": 1.0
  },
  "the clarion errorcode": {
    "procedure": 1.0
  },
  "clarion errorcode procedure": {
    "returns": 1.0
  },
  "errorcode procedure returns": {
    "90": 1.0
  },
  "procedure returns 90": {
    "and": 1.0
  },
  "returns 90 and": {
    "the": 1.0
  },
  "90 and the": {
    "error": 1.0
  },
  "and the error": {
    "proc": 1.0
  },
  "the error proc": {
    "edure": 1.0
  },
  "error proc edure": {
    "returns": 1.0
  },
  "proc edure returns": {
    "file": 1.0
  },
  "edure returns file": {
    "driver": 1.0
  },
  "returns file driver": {
    "error": 1.0
  },
  "file driver error": {
    "to": 1.0
  },
  "driver error to": {
    "determine": 1.0
  },
  "error to determine": {
    "the": 1.0
  },
  "determine the exact": {
    "error": 1.0
  },
  "the exact error": {
    "returned": 1.0
  },
  "exact error returned": {
    "by": 1.0
  },
  "error returned by": {
    "the": 1.0
  },
  "by the back": {
    "end": 1.0
  },
  "server in this": {
    "case": 1.0
  },
  "this case clarion": {
    "provides": 1.0
  },
  "case clarion provides": {
    "the": 1.0
  },
  "clarion provides the": {
    "fileerrorcode": 1.0
  },
  "provides the fileerrorcode": {
    "and": 1.0
  },
  "the fileerrorcode and": {
    "fileerror": 1.0
  },
  "fileerrorcode and fileerror": {
    "procedures": 1.0
  },
  "and fileerror procedures": {
    "the": 0.5,
    "return": 0.5
  },
  "fileerror procedures the": {
    "fileerrorcode": 1.0
  },
  "procedures the fileerrorcode": {
    "and": 1.0
  },
  "fileerror procedures return": {
    "the": 1.0
  },
  "procedures return the": {
    "back": 1.0
  },
  "return the back": {
    "end": 1.0
  },
  "database server s": {
    "error": 0.5,
    "documentation": 0.5
  },
  "server s error": {
    "values": 1.0
  },
  "s error values": {
    "when": 1.0
  },
  "error values when": {
    "the": 1.0
  },
  "values when the": {
    "current": 1.0
  },
  "when the current": {
    "clarion": 1.0
  },
  "the current clarion": {
    "errorcode": 1.0
  },
  "current clarion errorcode": {
    "is": 1.0
  },
  "clarion errorcode is": {
    "90": 1.0
  },
  "errorcode is 90": {
    "this": 1.0
  },
  "is 90 this": {
    "allows": 1.0
  },
  "90 this allows": {
    "you": 1.0
  },
  "you to detect": {
    "any": 1.0
  },
  "to detect any": {
    "error": 1.0
  },
  "detect any error": {
    "the": 1.0
  },
  "any error the": {
    "database": 1.0
  },
  "error the database": {
    "server": 1.0
  },
  "server can issue": {
    "then": 1.0
  },
  "can issue then": {
    "look": 1.0
  },
  "issue then look": {
    "in": 1.0
  },
  "then look in": {
    "the": 1.0
  },
  "look in the": {
    "back": 1.0
  },
  "server s documentation": {
    "for": 1.0
  },
  "s documentation for": {
    "the": 1.0
  },
  "documentation for the": {
    "possible": 1.0
  },
  "for the possible": {
    "causes": 1.0
  },
  "the possible causes": {
    "and": 1.0
  },
  "possible causes and": {
    "remedies": 1.0
  },
  "causes and remedies": {
    "for": 1.0
  },
  "and remedies for": {
    "whatever": 1.0
  },
  "remedies for whatever": {
    "error": 1.0
  },
  "for whatever error": {
    "has": 1.0
  },
  "whatever error has": {
    "occurred": 1.0
  },
  "error has occurred": {
    "clarion": 1.0
  },
  "has occurred clarion": {
    "language": 1.0
  },
  "occurred clarion language": {
    "programming": 1.0
  },
  "programming guide 72": {
    "index": 1.0
  },
  "guide 72 index": {
    "73": 1.0
  },
  "72 index 73": {
    "index": 1.0
  },
  "index 73 index": {
    "dynamic": 1.0
  },
  "73 index dynamic": {
    "index": 1.0
  },
  "dynamic index 49": {
    "base": 1.0
  },
  "index 49 base": {
    "class": 1.0
  },
  "49 base class": {
    "16": 1.0
  },
  "base class 16": {
    "buffer": 1.0
  },
  "class 16 buffer": {
    "68": 1.0
  },
  "16 buffer 68": {
    "cascade": 1.0
  },
  "buffer 68 cascade": {
    "45": 1.0
  },
  "68 cascade 45": {
    "clarion": 1.0
  },
  "cascade 45 clarion": {
    "and": 1.0
  },
  "45 clarion and": {
    "sql": 1.0
  },
  "sql 66 class": {
    "12": 1.0
  },
  "66 class 12": {
    "26": 1.0
  },
  "class 12 26": {
    "class": 1.0
  },
  "12 26 class": {
    "methods": 1.0
  },
  "26 class methods": {
    "27": 1.0
  },
  "methods 27 class": {
    "properties": 1.0
  },
  "27 class properties": {
    "27": 1.0
  },
  "properties 27 client": {
    "server": 1.0
  },
  "27 client server": {
    "65": 1.0
  },
  "server 65 composition": {
    "17": 1.0
  },
  "65 composition 17": {
    "35": 1.0
  },
  "composition 17 35": {
    "concurrency": 1.0
  },
  "17 35 concurrency": {
    "checking": 1.0
  },
  "35 concurrency checking": {
    "56": 1.0
  },
  "checking 56 constructors": {
    "14": 1.0
  },
  "56 constructors 14": {
    "29": 1.0
  },
  "constructors 14 29": {
    "creating": 1.0
  },
  "14 29 creating": {
    "objects": 1.0
  },
  "29 creating objects": {
    "27": 1.0
  },
  "objects 27 data": {
    "declaration": 1.0
  },
  "27 data declaration": {
    "5": 1.0
  },
  "data declaration 5": {
    "data": 1.0
  },
  "declaration 5 data": {
    "validation": 1.0
  },
  "5 data validation": {
    "67": 1.0
  },
  "validation 67 database": {
    "design": 1.0
  },
  "67 database design": {
    "39": 1.0
  },
  "design 39 deadly": {
    "embrace": 1.0
  },
  "39 deadly embrace": {
    "63": 1.0
  },
  "embrace 63 derived": {
    "class": 1.0
  },
  "63 derived class": {
    "16": 1.0
  },
  "derived class 16": {
    "destructors": 1.0
  },
  "class 16 destructors": {
    "29": 1.0
  },
  "16 destructors 29": {
    "destructors": 1.0
  },
  "destructors 29 destructors": {
    "14": 1.0
  },
  "29 destructors 14": {
    "dispose": 1.0
  },
  "destructors 14 dispose": {
    "14": 1.0
  },
  "14 dispose 14": {
    "dss": 1.0
  },
  "dispose 14 dss": {
    "65": 1.0
  },
  "14 dss 65": {
    "embedded": 1.0
  },
  "dss 65 embedded": {
    "sql": 1.0
  },
  "65 embedded sql": {
    "69": 1.0
  },
  "embedded sql 69": {
    "encapsulation": 1.0
  },
  "sql 69 encapsulation": {
    "12": 1.0
  },
  "69 encapsulation 12": {
    "25": 1.0
  },
  "encapsulation 12 25": {
    "error": 1.0
  },
  "12 25 error": {
    "handling": 1.0
  },
  "25 error handling": {
    "71": 1.0
  },
  "handling 71 field": {
    "qualification": 1.0
  },
  "71 field qualification": {
    "syntax": 1.0
  },
  "syntax 14 file": {
    "access": 1.0
  },
  "14 file access": {
    "methods": 1.0
  },
  "methods 49 file": {
    "relationships": 1.0
  },
  "49 file relationships": {
    "40": 1.0
  },
  "relationships 40 fileerror": {
    "71": 1.0
  },
  "40 fileerror 71": {
    "fileerrorcode": 1.0
  },
  "fileerror 71 fileerrorcode": {
    "71": 1.0
  },
  "71 fileerrorcode 71": {
    "filter": 1.0
  },
  "fileerrorcode 71 filter": {
    "68": 1.0
  },
  "71 filter 68": {
    "foreign": 1.0
  },
  "filter 68 foreign": {
    "key": 1.0
  },
  "68 foreign key": {
    "39": 1.0
  },
  "foreign key 39": {
    "hold": 1.0
  },
  "key 39 hold": {
    "60": 1.0
  },
  "39 hold 60": {
    "index": 1.0
  },
  "hold 60 index": {
    "49": 1.0
  },
  "60 index 49": {
    "inheritance": 1.0
  },
  "index 49 inheritance": {
    "31": 1.0
  },
  "49 inheritance 31": {
    "inheritance": 1.0
  },
  "inheritance 31 inheritance": {
    "16": 1.0
  },
  "31 inheritance 16": {
    "25": 1.0
  },
  "inheritance 16 25": {
    "instantiation": 1.0
  },
  "16 25 instantiation": {
    "12": 1.0
  },
  "25 instantiation 12": {
    "13": 1.0
  },
  "instantiation 12 13": {
    "key": 1.0
  },
  "12 13 key": {
    "49": 1.0
  },
  "13 key 49": {
    "late": 1.0
  },
  "key 49 late": {
    "binding": 1.0
  },
  "49 late binding": {
    "26": 1.0
  },
  "late binding 26": {
    "late": 1.0
  },
  "binding 26 late": {
    "binding": 1.0
  },
  "26 late binding": {
    "22": 1.0
  },
  "methods 23 37": {
    "lock": 1.0
  },
  "23 37 lock": {
    "62": 1.0
  },
  "37 lock 62": {
    "map": 1.0
  },
  "lock 62 map": {
    "5": 1.0
  },
  "62 map 5": {
    "member": 1.0
  },
  "map 5 member": {
    "6": 1.0
  },
  "5 member 6": {
    "module": 1.0
  },
  "member 6 module": {
    "6": 1.0
  },
  "6 module 6": {
    "multiple": 1.0
  },
  "module 6 multiple": {
    "inheritance": 1.0
  },
  "6 multiple inheritance": {
    "17": 1.0
  },
  "inheritance 17 multi": {
    "user": 1.0
  },
  "17 multi user": {
    "considerations": 1.0
  },
  "considerations 55 network": {
    "traffic": 1.0
  },
  "55 network traffic": {
    "66": 1.0
  },
  "traffic 66 null": {
    "data": 1.0
  },
  "66 null data": {
    "handling": 1.0
  },
  "handling 70 nullify": {
    "the": 1.0
  },
  "70 nullify the": {
    "foreign": 1.0
  },
  "key 46 object": {
    "oriented": 1.0
  },
  "46 object oriented": {
    "programming": 1.0
  },
  "oriented programming 11": {
    "objects": 1.0
  },
  "programming 11 objects": {
    "25": 1.0
  },
  "11 objects 25": {
    "oltp": 1.0
  },
  "objects 25 oltp": {
    "65": 1.0
  },
  "25 oltp 65": {
    "oop": 1.0
  },
  "oltp 65 oop": {
    "11": 1.0
  },
  "65 oop 11": {
    "opening": 1.0
  },
  "oop 11 opening": {
    "files": 1.0
  },
  "11 opening files": {
    "55": 1.0
  },
  "files 55 order": {
    "68": 1.0
  },
  "55 order 68": {
    "overriding": 1.0
  },
  "order 68 overriding": {
    "32": 1.0
  },
  "68 overriding 32": {
    "parent": 1.0
  },
  "overriding 32 parent": {
    "19": 1.0
  },
  "32 parent 19": {
    "polymorphism": 1.0
  },
  "polymorphism 20 26": {
    "36": 1.0
  },
  "20 26 36": {
    "private": 1.0
  },
  "26 36 private": {
    "15": 1.0
  },
  "36 private 15": {
    "29": 1.0
  },
  "private 15 29": {
    "30": 1.0
  },
  "15 29 30": {
    "procedure": 1.0
  },
  "29 30 procedure": {
    "5": 1.0
  },
  "30 procedure 5": {
    "procedure": 1.0
  },
  "procedure 5 procedure": {
    "overloading": 1.0
  },
  "5 procedure overloading": {
    "20": 1.0
  },
  "procedure overloading 20": {
    "program": 1.0
  },
  "overloading 20 program": {
    "5": 1.0
  },
  "20 program 5": {
    "project": 1.0
  },
  "program 5 project": {
    "67": 1.0
  },
  "5 project 67": {
    "prop": 1.0
  },
  "project 67 prop": {
    "sql": 1.0
  },
  "67 prop sql": {
    "66": 1.0
  },
  "prop sql 66": {
    "69": 1.0
  },
  "sql 66 69": {
    "prop": 1.0
  },
  "66 69 prop": {
    "sqlfilter": 1.0
  },
  "69 prop sqlfilter": {
    "70": 1.0
  },
  "prop sqlfilter 70": {
    "protected": 1.0
  },
  "sqlfilter 70 protected": {
    "18": 1.0
  },
  "70 protected 18": {
    "29": 1.0
  },
  "protected 18 29": {
    "30": 1.0
  },
  "18 29 30": {
    "public": 1.0
  },
  "29 30 public": {
    "29": 1.0
  },
  "30 public 29": {
    "random": 1.0
  },
  "public 29 random": {
    "file": 1.0
  },
  "29 random file": {
    "access": 1.0
  },
  "access 52 reference": {
    "variables": 1.0
  },
  "52 reference variables": {
    "28": 1.0
  },
  "reference variables 28": {
    "referential": 1.0
  },
  "variables 28 referential": {
    "integrity": 1.0
  },
  "28 referential integrity": {
    "43": 1.0
  },
  "integrity 43 66": {
    "relational": 1.0
  },
  "43 66 relational": {
    "database": 1.0
  },
  "66 relational database": {
    "design": 1.0
  },
  "design 39 release": {
    "60": 1.0
  },
  "39 release 60": {
    "replace": 1.0
  },
  "release 60 replace": {
    "33": 1.0
  },
  "60 replace 33": {
    "restrict": 1.0
  },
  "replace 33 restrict": {
    "44": 1.0
  },
  "33 restrict 44": {
    "self": 1.0
  },
  "restrict 44 self": {
    "14": 1.0
  },
  "44 self 14": {
    "clarion": 1.0
  },
  "self 14 clarion": {
    "language": 1.0
  },
  "14 clarion language": {
    "programming": 1.0
  },
  "programming guide 74": {
    "sequential": 1.0
  },
  "guide 74 sequential": {
    "file": 1.0
  },
  "74 sequential file": {
    "access": 1.0
  },
  "access 50 unlock": {
    "62": 1.0
  },
  "50 unlock 62": {
    "variables": 1.0
  },
  "unlock 62 variables": {
    "5": 1.0
  },
  "62 variables 5": {
    "view": 1.0
  },
  "variables 5 view": {
    "67": 1.0
  },
  "5 view 67": {
    "virtual": 1.0
  },
  "view 67 virtual": {
    "methods": 1.0
  },
  "67 virtual methods": {
    "20": 1.0
  }
}